sent(1, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('camion-remorque', nc-nom, 'camion-remorque', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(transporte, v-ver:pres, transporte, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(tube, nc-nom, tube, [n-1]), ex_si(cylindrique, adj-adj, cylindrique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pièce, nc-nom, pièce, [n-1]), ex_si(destinée, vpp-ver:pper, destinée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(raffinerie, nc-nom, raffinerie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ouzbékistan', npp-nam, 'Ouzbékistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('camion-remorque', nc-nom, 'camion-remorque', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(transporte, v-ver:pres, transporte, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(3, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(supporters, nc-nom, supporters, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêtés, vpp-ver:pper, arrêtés, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(inscrit, vpp-ver:pper, inscrit, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(symboles, nc-nom, symboles, [n-1]), ex_si(nazis, adj-adj, nazis, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(visuel, nc-nom, visuel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mascotte, nc-nom, mascotte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mondial', nc-nam, 'Mondial', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('La\'eeb', npp-nam, 'La\'eeb', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(4, Result) :-
      prob_parse([ ex_si('La\'eeb', npp-nam, 'La\'eeb', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mascotte, nc-nom, mascotte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mondial', nc-nam, 'Mondial', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [np-1]), ex_si('Qatar', npp-nam, 'Qatar', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(5, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si('Al-Jazeera', npp-nam, 'Al-Jazeera', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(qataries, adj-adj, qataries, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(peint, vpp-ver:pper, peint, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moustache, nc-nom, moustache, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(affiches, nc-nom, affiches, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(6, Result) :-
      prob_parse([ ex_si('Al-Jazeera', npp-nam, 'Al-Jazeera', [np-1]), ex_si(rapporte, v-ver:pres, rapporte, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêtés, vpp-ver:pper, arrêtés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(qataries, adj-adj, qataries, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(dessiné, vpp-ver:pper, dessiné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moustache, nc-nom, moustache, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(7, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(défaite, nc-nom, défaite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(match, nc-nom, match, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(qualification, nc-nom, qualification, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(participe, v-ver:pres, participe, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Mondial', npp-nam, 'Mondial', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Intérieur', nc-nom, 'Intérieur', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signalé, vpp-ver:pper, signalé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(arrestation, nc-nom, arrestation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(supporters, nc-nom, supporters, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(8, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(absente, vpp-ver:pper, absente, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Qatar', npp-nam, 'Qatar', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(9, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(défaite, nc-nom, défaite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(match, nc-nom, match, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(qualification, nc-nom, qualification, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(participe, v-ver:pres, participe, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Mondial', npp-nam, 'Mondial', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Intérieur', nc-nom, 'Intérieur', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signalé, vpp-ver:pper, signalé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(arrestation, nc-nom, arrestation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(supporters, nc-nom, supporters, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(10, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Intérieur', nc-nom, 'Intérieur', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(annonce, nc-nom, annonce, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arrestation, nc-nom, arrestation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(supporters, nc-nom, supporters, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(qataries, nc-nom, qataries, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(11, Result) :-
      prob_parse([ ex_si('Al-Jazeera', npp-nam, 'Al-Jazeera', [np-1]), ex_si(rapporte, v-ver:pres, rapporte, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêtés, vpp-ver:pper, arrêtés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(qataries, adj-adj, qataries, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(dessiné, vpp-ver:pper, dessiné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moustache, nc-nom, moustache, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(12, Result) :-
      prob_parse([ ex_si('Al-Jazeera', npp-nam, 'Al-Jazeera', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mentionne, v-ver:pres, mentionne, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(arrestation, nc-nom, arrestation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Qatar', npp-nam, 'Qatar', [np-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(simplement, adv-adv, simplement, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si('n\'', adv-adv, 'n\'', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(apprécié, vpp-ver:pper, apprécié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plaisanterie, nc-nom, plaisanterie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(13, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(arbre, nc-nom, arbre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Noël', npp-nam, 'Noël', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(illuminé, vpp-ver:pper, illuminé, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(lettone, adj-adj, lettone, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lielvārde', npp-nam, 'Lielvārde', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(14, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(orné, vpp-ver:pper, orné, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(ugunskrusts, nc-nom, ugunskrusts, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(immémorial, adj-adj, immémorial, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(peuples, nc-nom, peuples, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(folklore, nc-nom, folklore, [n-1]), ex_si(letton, adj-adj, letton, [dl(0,n,n)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(empare, v-ver:pres, empare, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(15, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arbre, nc-nom, arbre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Noël', npp-nam, 'Noël', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Lielvārde', npp-nam, 'Lielvārde', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(folklorique, adj-adj, folklorique, [dl(0,n,n)-1]), ex_si(balte, adj-adj, balte, [dl(0,n,n)-1]), ex_si(antérieur, adj-adj, antérieur, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(nazisme, nc-nom, nazisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(16, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(polémique, nc-nom, polémique, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(installation, nc-nom, installation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(sapin, nc-nom, sapin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Noël', npp-nam, 'Noël', [np-1]), ex_si(décoré, vpp-ver:pper, décoré, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(gammée, vpp-ver:pper, gammée, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Lielvārde', npp-nam, 'Lielvārde', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(alimentée, vpp-ver:pper, alimentée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si('Telegram', npp-nam, 'Telegram', [np-1]), ex_si(uniquement, adv-adv, uniquement, [np-1]), ex_si(par, p-prp, par, [dr(0,pp,pp)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,pp_par,np)-1]), ex_si(ambassade, nc-nom, ambassade, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Russie', npp-nam, 'Russie', [dr(0,dl(0,n,n),n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contexte, nc-nom, contexte, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(tensions, nc-nom, tensions, [dr(0,dl(0,n,n),n)-1]), ex_si(entre, p-prp, entre, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [n-1]), ex_si(république, nc-nom, république, [dl(0,n,n)-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kremlin', npp-nam, 'Kremlin', [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(propos, nc-nom, propos, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(17, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ambassades, nc-nom, ambassades, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(alimenté, vpp-ver:pper, alimenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(polémique, nc-nom, polémique, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sapin, nc-nom, sapin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Noël', npp-nam, 'Noël', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Lielvārde', npp-nam, 'Lielvārde', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Telegram', npp-nam, 'Telegram', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(18, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mythologie, nc-nom, mythologie, [n-1]), ex_si(lettone, adj-adj, lettone, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(différentes, adj-adj, différentes, [dr(0,n,n)-1]), ex_si(significations, nc-nom, significations, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prêtées, vpp-ver:pper, prêtées, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('\'', ponct-pun:cit, '\'', [n-1]), ex_si(croix, nc-nom, croix, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('feu\'', nc-nom, 'feu\'', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(orientation, nc-nom, orientation, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(tournée, vpp-ver:pper, tournée, [dr(0,dl(0,n,n),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si('Pērkons', npp-nam, 'Pērkons', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Tonnerre', nc-nam, 'Tonnerre', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tonnerre', npp-nam, 'Tonnerre', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tournée, vpp-ver:pper, tournée, [dr(0,dl(0,n,n),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si('Laima', npp-nam, 'Laima', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(bonne, adj-adj, bonne, [dr(0,n,n)-1]), ex_si(fortune, nc-nom, fortune, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ramifications, nc-nom, ramifications, [n-1]), ex_si('Zars', npp-nam, 'Zars', [dr(0,dl(0,n,n),np)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(branche, nc-nom, branche, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,s),np)-1]), ex_si(symbolise, v-ver:pres, symbolise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bonheur, nc-nom, bonheur, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),pp)-1]), ex_si(inscrite, vpp-ver:pper, inscrite, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cercle, nc-nom, cercle, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,np,n)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pointes, nc-nom, pointes, [dl(0,n,n)-1]), ex_si(effilées, vpp-ver:pper, effilées, [dl(0,n,n)-1]), ex_si('Ķeksis', npp-nam, 'Ķeksis', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(cochet, nc-nom, cochet, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(19, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(tournée, vpp-ver:pper, tournée, [dr(0,dl(0,n,n),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bonne, adj-adj, bonne, [dr(0,n,n)-1]), ex_si(fortune, nc-nom, fortune, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mythologie, nc-nom, mythologie, [n-1]), ex_si(lettone, adj-adj, lettone, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(20, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(balte, adj-adj, balte, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réunissent, v-ver:pres, réunissent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(nazie, adj-adj, nazie, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(21, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composée, vpp-ver:pper, composée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Russes', nc-nom, 'Russes', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(22, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(balte, adj-adj, balte, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réunissent, v-ver:pres, réunissent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(nazie, adj-adj, nazie, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(23, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composée, vpp-ver:pper, composée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Russes', nc-nom, 'Russes', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(24, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(letton, adj-adj, letton, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(soutenant, vpr-ver:ppre, soutenant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrorisme, nc-nom, terrorisme, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(actes, nc-nom, actes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(ciblé, adj-adj, ciblé, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(internet, adj-adj, internet, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(saluée, vpp-ver:pper, saluée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dénoncée, vpp-ver:pper, dénoncée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(25, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(letton, adj-adj, letton, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(combattant, vpr-ver:ppre, combattant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrorisme, nc-nom, terrorisme, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(26, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(letton, adj-adj, letton, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(soutenant, vpr-ver:ppre, soutenant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrorisme, nc-nom, terrorisme, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(actes, nc-nom, actes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(ciblé, adj-adj, ciblé, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(internet, adj-adj, internet, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(saluée, vpp-ver:pper, saluée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dénoncée, vpp-ver:pper, dénoncée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(27, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(salué, vpp-ver:pper, salué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(letton, adj-adj, letton, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(28, Result) :-
      prob_parse([ ex_si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), ex_si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mercenaire, nc-nom, mercenaire, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(28, det-num, 28, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morte, vpp-ver:pper, morte, [dl(0,np,s_ppart)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(front, nc-nom, front, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(29, Result) :-
      prob_parse([ ex_si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), ex_si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partagé, vpp-ver:pper, partagé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(apparition, nc-nom, apparition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(prétendue, adj-adj, prétendue, [dr(0,n,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(démentir, vinf-ver:infi, démentir, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(bonne, adj-adj, bonne, [dr(0,n,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(30, Result) :-
      prob_parse([ ex_si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), ex_si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mercenaire, nc-nom, mercenaire, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(31, Result) :-
      prob_parse([ ex_si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), ex_si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(secouriste, nc-nom, secouriste, [n-1]), ex_si(bénévole, adj-adj, bénévole, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(32, Result) :-
      prob_parse([ ex_si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), ex_si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mercenaire, nc-nom, mercenaire, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bénévole, nc-nom, bénévole, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(expérience, nc-nom, expérience, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(11, det-num, 11, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secteur, nc-nom, secteur, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(travaillant, vpr-ver:ppre, travaillant, [dl(0,np,s_ppres)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(secouriste, nc-nom, secouriste, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(33, Result) :-
      prob_parse([ ex_si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), ex_si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(secouriste, nc-nom, secouriste, [n-1]), ex_si(bénévole, adj-adj, bénévole, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(34, Result) :-
      prob_parse([ ex_si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), ex_si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mercenaire, nc-nom, mercenaire, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(28, det-num, 28, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morte, vpp-ver:pper, morte, [dl(0,np,s_ppart)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(front, nc-nom, front, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Facebook', npp-abr, 'Facebook', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(35, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), ex_si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bel, adj-adj, bel, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(front, nc-nom, front, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(ni, cc-kon, ni, [dl(1,s,s)-1]), ex_si(mercenaire, adj-adj, mercenaire, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(36, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(tenue, vpp-ver:pper, tenue, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Joe', npp-nam, 'Joe', [dr(0,np,np)-1]), ex_si('Biden', npp-nam, 'Biden', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison-Blanche', npp-nam, 'Maison-Blanche', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Joe', npp-nam, 'Joe', [dr(0,np,np)-1]), ex_si('Biden', npp-nam, 'Biden', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(salle, nc-nom, salle, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(temps, nc-nom, temps, [dr(0,dr(0,n,s_q),n)-1]), ex_si(que, cs-kon, que, [n-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [cl_r-1]), ex_si(jamais, adv-adv, jamais, [cl_r-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(seul, adj-adj, seul, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(face, nc-nom, face, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),np)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(ce, det-pro:dem, ce, [dl(0,n,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(presse, nc-nom, presse, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(37, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Joe', npp-nam, 'Joe', [dl(0,n,n)-1]), ex_si('Biden', npp-nam, 'Biden', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(barré, vpp-ver:pper, barré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(pleine, adj-adj, pleine, [dr(0,n,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(homologue, nc-nom, homologue, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(parler, vinf-ver:infi, parler, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(38, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(massacre, nc-nom, massacre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), ex_si('Denissova', npp-nam, 'Denissova', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(commissaire, nc-nom, commissaire, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dénoncé, vpp-ver:pper, dénoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(viols, nc-nom, viols, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(39, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(massacre, nc-nom, massacre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), ex_si('Denissova', npp-nam, 'Denissova', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(commissaire, nc-nom, commissaire, [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,np,np),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(40, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(massacre, nc-nom, massacre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), ex_si('Denissova', npp-nam, 'Denissova', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(commissaire, nc-nom, commissaire, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dénoncé, vpp-ver:pper, dénoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(viols, nc-nom, viols, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(41, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(massacre, nc-nom, massacre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), ex_si('Denissova', npp-nam, 'Denissova', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(travaillait, v-ver:impf, travaillait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(42, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(vérifié, vpp-ver:pper, vérifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(centaine, nc-num, centaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(viols, nc-nom, viols, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(agressions, nc-nom, agressions, [n-1]), ex_si(sexuelles, adj-adj, sexuelles, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(précisé, vpp-ver:pper, précisé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étend, v-ver:pres, étend, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(82, det-num, 82, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(43, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(viols, nc-nom, viols, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(agressions, nc-nom, agressions, [n-1]), ex_si(sexuelles, adj-adj, sexuelles, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(44, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), ex_si('Denissova', npp-nam, 'Denissova', [np-1]), ex_si('-membre', npp-nam, '-membre', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si('Front', nc-nam, 'Front', [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(renvoyé, vpp-ver:pper, renvoyé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,n,n),dr(0,dl(0,n,n),dia(1,box(1,pp_a))))-1]), ex_si(reprochant, vpr-ver:ppre, reprochant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rien, pro-pro:ind, rien, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(organiser, vinf-ver:infi, organiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(évacuations, nc-nom, évacuations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(échanges, nc-nom, échanges, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prisonniers, nc-nom, prisonniers, [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(45, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(renvoyé, vpp-ver:pper, renvoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), ex_si('Denisova', npp-nam, 'Denisova', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(46, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(reproché, vpp-ver:pper, reproché, [dr(0,dr(0,dl(0,np,s_pass),pp_a),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Président', nc-nom, 'Président', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(contribué, vpp-ver:pper, contribué, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(évacuations, nc-nom, évacuations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(47, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), ex_si('Denissova', npp-nam, 'Denissova', [np-1]), ex_si('-membre', npp-nam, '-membre', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si('Front', nc-nam, 'Front', [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(renvoyé, vpp-ver:pper, renvoyé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Serviteur', nc-nom, 'Serviteur', [dr(0,dl(0,np,np),n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(reprochant, vpr-ver:ppre, reprochant, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(de, p-prp, de, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rien, pro-pro:ind, rien, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(organiser, vinf-ver:infi, organiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(évacuations, nc-nom, évacuations, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(civils, nc-nom, civils, [dr(0,dl(0,n,n),n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,np),np)-1]), ex_si(échanges, nc-nom, échanges, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(prisonniers, nc-nom, prisonniers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(48, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Serviteur', nc-nom, 'Serviteur', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(49, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(médiatrice, nc-nom, médiatrice, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Lyudmila', npp-nam, 'Lyudmila', [dr(0,np,np)-1]), ex_si('Denisova', npp-nam, 'Denisova', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapporté, vpp-ver:pper, rapporté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si('Bucha', npp-nam, 'Bucha', [np-1]), ex_si('[Boutcha', ponct-pun, '[Boutcha', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('NDLR]', ponct-pun, 'NDLR]', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(25, det-num, 25, [np-1]), ex_si(filles, nc-nom, filles, [let-1]), ex_si(et, cc-kon, et, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [dr(0,np,n)-1]), ex_si(âgées, adj-adj, âgées, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(14, det-num, 14, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_de,np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [dr(0,np,n)-1]), ex_si(ont, v-ver:pres, ont, [n-1]), ex_si(été, vpp-ver:pper, été, [dr(0,np,n)-1]), ex_si(retenues, vpp-ver:pper, retenues, [n-1]), ex_si(captives, vpp-ver:pper, captives, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si('sous-sol', nc-nom, 'sous-sol', [dr(0,pp_par,np)-1]), ex_si(par, p-prp, par, [dr(0,np,n)-1]), ex_si(des, det-prp:det, des, [n-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(russes, adj-adj, russes, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(agressées, vpp-ver:pper, agressées, [n-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dl(0,n,n)-1]), ex_si(reprises, nc-nom, reprises, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(50, Result) :-
      prob_parse([ ex_si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), ex_si('Denissova', npp-nam, 'Denissova', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(documenté, vpp-ver:pper, documenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(âgées, adj-adj, âgées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(14, det-num, 14, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(maintenues, vpp-ver:pper, maintenues, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cave, nc-nom, cave, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(violées, vpp-ver:pper, violées, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(51, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(précisent, v-ver:pres, précisent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Mission', nc-nam, 'Mission', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', vpp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(documenté, vpp-ver:pper, documenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(violence, nc-nom, violence, [n-1]), ex_si(sexuelle, adj-adj, sexuelle, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(52, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(documenté, vpp-ver:pper, documenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(viols, nc-nom, viols, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(53, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(photographes, nc-nom, photographes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(immortalisé, vpp-ver:pper, immortalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(événement, nc-nom, événement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assuré, vpp-ver:pper, assuré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médecins, nc-nom, médecins, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(secours, nc-nom, secours, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(couverts, vpp-ver:pper, couverts, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(quartiers, nc-nom, quartiers, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('centre-ville', nc-nom, 'centre-ville', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(54, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(causés, vpp-ver:pper, causés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(meurtriers, adj-adj, meurtriers, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(documentés, vpp-ver:pper, documentés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(55, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(photoreporters, nc-nom, photoreporters, [n-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assuré, vpp-ver:pper, assuré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(photographié, vpp-ver:pper, photographié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vraies, adj-adj, vraies, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(blessées, vpp-ver:pper, blessées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(ensanglantées, vpp-ver:pper, ensanglantées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(secourues, vpp-ver:pper, secourues, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médecins, nc-nom, médecins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(56, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(orchestrée, vpp-ver:pper, orchestrée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(jouait, v-ver:impf, jouait, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(comédie, nc-nom, comédie, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(maquillage, nc-nom, maquillage, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(blessés, nc-nom, blessés, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(57, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(relayées, vpp-ver:pper, relayées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(accusent, v-ver:pres, accusent, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(mainstream, adj-adj, mainstream, [dl(0,n,n)-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(diffuser, vinf-ver:infi, diffuser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mascarade, nc-nom, mascarade, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(58, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(perpétrés, vpp-ver:pper, perpétrés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(visaient, v-ver:impf, visaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(particulièrement, adv-adv, particulièrement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(infrastructures, nc-nom, infrastructures, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(ressources, nc-nom, ressources, [n-1]), ex_si(énergétiques, adj-adj, énergétiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(59, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défaites, nc-nom, défaites, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(fronts, nc-nom, fronts, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(résolu, vpp-ver:pper, résolu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(brutal, adj-adj, brutal, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stratégie, nc-nom, stratégie, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(inverser, vinf-ver:infi, inverser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(spirale, nc-nom, spirale, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(frapper, vinf-ver:infi, frapper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(massivement, adv-adv, massivement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(centrales, nc-nom, centrales, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(60, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(récente, adj-adj, récente, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(marche, nc-nom, marche, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réuni, vpp-ver:pper, réuni, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(200, adj-num, 200, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(tenue, vpp-ver:pper, tenue, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gênes', npp-nam, 'Gênes', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(61, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(capitales, nc-nom, capitales, [n-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si(imposées, vpp-ver:pper, imposées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('week-end', nc-nom, 'week-end', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(62, Result) :-
      prob_parse([ ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(renforcer, vinf-ver:infi, renforcer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(flanc, nc-nom, flanc, [n-1]), ex_si('Est', npp-nam, 'Est', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prochaines, adj-adj, prochaines, [dr(0,n,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(supplémentaires, adj-adj, supplémentaires, [dl(0,n,n)-1]), ex_si(équipées, vpp-ver:pper, équipées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(chars, nc-nom, chars, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(blindés, nc-nom, blindés, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), ex_si(connaît, v-ver:pres, connaît, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(escalade, nc-nom, escalade, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(63, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(regard, nc-nom, regard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(flanc, nc-nom, flanc, [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(regard, nc-nom, regard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(violence, nc-nom, violence, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fédération', nc-nam, 'Fédération', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('NDLR', adv-abr, 'NDLR', [dl(1,s,s)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rehausser, vinf-ver:infi, rehausser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(posture, nc-nom, posture, [n-1]), ex_si(défensive, adj-adj, défensive, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(valoir, vinf-ver:infi, valoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Armées', nc-nam, 'Armées', [n-1]), ex_si('Sébastien', npp-nam, 'Sébastien', [dl(0,n,n)-1]), ex_si('Lecornu', npp-nam, 'Lecornu', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(64, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(annoncer, vinf-ver:infi, annoncer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(renforcement, nc-nom, renforcement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(flanc, nc-nom, flanc, [n-1]), ex_si('Est', npp-nam, 'Est', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prochaines, adj-adj, prochaines, [dr(0,n,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(65, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dissuasion, nc-nom, dissuasion, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(indépendante, adj-adj, indépendante, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(abandonne, v-ver:pres, abandonne, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(partenaires, nc-nom, partenaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(66, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('Abandonner', vinf-ver:infi, 'Abandonner', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(67, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(stratégiques, adj-adj, stratégiques, [dl(0,n,n)-1]), ex_si(indépendantes, adj-adj, indépendantes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dissuasion, nc-nom, dissuasion, [n-1]), ex_si(propre, adj-adj, propre, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(contribuent, v-ver:pres, contribuent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(significative, adj-adj, significative, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(globale, adj-adj, globale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alliance', npp-nam, 'Alliance', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(68, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(distincts, adj-adj, distincts, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si('Alliés', nc-nam, 'Alliés', [n-1]), ex_si(contribuent, v-ver:pres, contribuent, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dissuasion, nc-nom, dissuasion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(compliquant, vpr-ver:ppre, compliquant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(calculs, nc-nom, calculs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(adversaires, nc-nom, adversaires, [n-1]), ex_si(potentiels, adj-adj, potentiels, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(69, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(doctrine, nc-nom, doctrine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dissuasion, nc-nom, dissuasion, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(confère, v-ver:pres, confère, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(certaine, adj-adj, certaine, [dr(0,n,n)-1]), ex_si(autonomie, nc-nom, autonomie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(atout, nc-nom, atout, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(70, Result) :-
      prob_parse([ ex_si('Anne-Claire', npp-nam, 'Anne-Claire', [dr(0,np,np)-1]), ex_si('Legendre', npp-nam, 'Legendre', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tweet, nc-nom, tweet, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ambassadeur, nc-nom, ambassadeur, [n-1]), ex_si('Etienne', npp-nam, 'Etienne', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Poncins', npp-nam, 'Poncins', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(71, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déluge, nc-nom, déluge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(abattue, vpp-ver:pper, abattue, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,np),n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ambassadeur, nc-nom, ambassadeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déposé, vpp-ver:pper, déposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(démission, nc-nom, démission, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dl(1,s,s),np)-1]), ex_si('-il', cls-pro:per, '-il', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(sauver, vinf-ver:infi, sauver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(72, Result) :-
      prob_parse([ ex_si('RT', npp-abr, 'RT', [dr(0,np,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mail, nc-nom, mail, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si('Facebook', npp-abr, 'Facebook', [dl(0,n,n)-1]), ex_si(nommée, vpp-ver:pper, nommée, [dr(0,dl(0,n,n),np)-1]), ex_si('RT', npp-abr, 'RT', [dr(0,np,np)-1]), ex_si('Afrique', npp-nam, 'Afrique', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(usurpé, vpp-ver:pper, usurpé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(identité, nc-nom, identité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si('RT', npp-abr, 'RT', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(73, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(blog, nc-nom, blog, [n-1]), ex_si(personnel, adj-adj, personnel, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(74, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si('Facebook', npp-nam, 'Facebook', [dl(0,n,n)-1]), ex_si('RT', npp-abr, 'RT', [dl(0,n,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(associée, vpp-ver:pper, associée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si('RT', npp-abr, 'RT', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(75, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(bloqué, vpp-ver:pper, bloqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(sites, nc-nom, sites, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('BBC', npp-abr, 'BBC', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Die', npp-nam, 'Die', [dr(0,np,np)-1]), ex_si('Welt', npp-nam, 'Welt', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('RFI', npp-abr, 'RFI', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Deutsche', npp-nam, 'Deutsche', [dr(0,np,np)-1]), ex_si('Welle...', npp-nam, 'Welle...', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(réseaux, nc-nom, réseaux, [dr(0,dl(0,n,n),n)-1]), ex_si(sociaux, adj-adj, sociaux, [n-1]), ex_si(comme, adv-adv, comme, [dl(0,n,n)-1]), ex_si('Facebook', npp-nam, 'Facebook', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Twitter', npp-nam, 'Twitter', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(et, cc-kon, et, [let-1]), ex_si('Instagram', npp-nam, 'Instagram', [dr(0,dl(0,np,np),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(76, Result) :-
      prob_parse([ ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(soutient, v-ver:pres, soutient, [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(entrave, v-ver:pres, entrave, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(77, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jet, nc-nom, jet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rumeurs, nc-nom, rumeurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(78, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), ex_si('Stream', npp-nam, 'Stream', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(79, Result) :-
      prob_parse([ ex_si('Raison', nc-nom, 'Raison', [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(80, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toutefois, adv-adv, toutefois, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(démenti, vpp-ver:pper, démenti, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), ex_si('Stream', npp-nam, 'Stream', [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(gazoducs, nc-nom, gazoducs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), ex_si('Stream', npp-nam, 'Stream', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(81, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jet, nc-nom, jet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rumeurs, nc-nom, rumeurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(82, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), ex_si('Stream', npp-nam, 'Stream', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(83, Result) :-
      prob_parse([ ex_si('Raison', nc-nom, 'Raison', [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(84, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si('Siemens', npp-nam, 'Siemens', [dl(0,n,n)-1]), ex_si('Energy', npp-nam, 'Energy', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(occupe, v-ver:pres, occupe, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(turbines, nc-nom, turbines, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gazoduc, nc-nom, gazoduc, [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(85, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jet, nc-nom, jet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rumeurs, nc-nom, rumeurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(86, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), ex_si('Stream', npp-nam, 'Stream', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(87, Result) :-
      prob_parse([ ex_si('Raison', nc-nom, 'Raison', [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(88, Result) :-
      prob_parse([ ex_si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvait, v-ver:impf, trouvait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(89, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(aériennes, adj-adj, aériennes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Danemark', npp-nam, 'Danemark', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toutefois, adv-adv, toutefois, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(connaissance, nc-nom, connaissance, [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(90, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jet, nc-nom, jet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rumeurs, nc-nom, rumeurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(91, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), ex_si('Stream', npp-nam, 'Stream', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(92, Result) :-
      prob_parse([ ex_si('Raison', nc-nom, 'Raison', [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(93, Result) :-
      prob_parse([ ex_si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvait, v-ver:impf, trouvait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(94, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jet, nc-nom, jet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rumeurs, nc-nom, rumeurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(95, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), ex_si('Stream', npp-nam, 'Stream', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(96, Result) :-
      prob_parse([ ex_si('Raison', nc-nom, 'Raison', [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(97, Result) :-
      prob_parse([ ex_si('Griesemann', npp-nam, 'Griesemann', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(assure, v-ver:pres, assure, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(installations, nc-nom, installations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gazoduc, nc-nom, gazoduc, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expertise, nc-nom, expertise, [n-1]), ex_si(nécessaire, adj-adj, nécessaire, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(entretenir, vinf-ver:infi, entretenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pipelines, nc-nom, pipelines, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(98, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvait, v-ver:impf, trouvait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(99, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvaient, v-ver:impf, trouvaient, [dr(0,dr(0,dl(0,cl_r,s),pp),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [np-1]), ex_si(précisé, vpp-ver:pper, précisé, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(100, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(allemands, adj-adj, allemands, [dl(0,n,n)-1]), ex_si(disponibles, adj-adj, disponibles, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si('Focus', npp-nam, 'Focus', [dr(0,np,np)-1]), ex_si('Online', npp-nam, 'Online', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('Express', npp-nam, 'Express', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(identifient, v-ver:pres, identifient, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si(survenu, vpp-ver:pper, survenu, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,n,n),np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Griesemann', npp-nam, 'Griesemann', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(compagnon, nc-nom, compagnon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(dernière, nc-nom, dernière, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(101, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(énormes, adj-adj, énormes, [dr(0,n,n)-1]), ex_si(fuites, nc-nom, fuites, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déclenchées, vpp-ver:pper, déclenchées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(détonations, nc-nom, détonations, [n-1]), ex_si('sous-marines', adj-adj, 'sous-marines', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produites, vpp-ver:pper, produites, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gazoducs, nc-nom, gazoducs, [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), ex_si(1, adj-num, 1, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(102, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tronçon, nc-nom, tronçon, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gazoduc, nc-nom, gazoduc, [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), ex_si(1, adj-num, 1, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(manquant, adj-adj, manquant, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(sabotage, nc-nom, sabotage, [n-1]), ex_si(présumé, vpp-ver:pper, présumé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(103, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(graves, adj-adj, graves, [dr(0,n,n)-1]), ex_si(fuites, nc-nom, fuites, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gazoducs, nc-nom, gazoducs, [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(relient, v-ver:pres, relient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(surement, adv-adv, surement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(résultat, nc-nom, résultat, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(acte, nc-nom, acte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sabotage, nc-nom, sabotage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(104, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(rendus, vpp-ver:pper, rendus, [dr(0,dr(0,dl(0,n,n),pp_par),dl(0,n,n))-1]), ex_si(possibles, adj-adj, possibles, [dl(0,n,n)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appui, nc-nom, appui, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(partenaires, nc-nom, partenaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-abr, 'Otan', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(envoient, v-ver:pres, envoient, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armement, nc-nom, armement, [n-1]), ex_si(lourd, adj-adj, lourd, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(obusiers, nc-nom, obusiers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Himars', npp-nam, 'Himars', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('lance-roquettes', nc-nom, 'lance-roquettes', [n-1]), ex_si(monté, vpp-ver:pper, monté, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(blindés, nc-nom, blindés, [n-1]), ex_si(légers, adj-adj, légers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(105, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(déploierait, v-ver:cond, déploierait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(106, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(déploierait, v-ver:cond, déploierait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(107, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(convoi, nc-nom, convoi, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(conseillers, nc-nom, conseillers, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(détruit, vpp-ver:pper, détruit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si('RUSSE', npp-nam, 'RUSSE', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('UKRAINE', npp-abr, 'UKRAINE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(108, Result) :-
      prob_parse([ ex_si('ARMA', npp-abr, 'ARMA', [np-1]), ex_si(3, adj-num, 3, [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(jeu, nc-nom, jeu, [n-1]), ex_si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(thème, nc-nom, thème, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2013, pro-num, 2013, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développeur, nc-nom, développeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si('Bohemia', npp-nam, 'Bohemia', [dl(0,n,n)-1]), ex_si('Interactive', npp-nam, 'Interactive', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si('Tchèque', adj-adj, 'Tchèque', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(109, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(extraits, nc-nom, extraits, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jeu, nc-nom, jeu, [n-1]), ex_si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), ex_si('Arma', npp-nam, 'Arma', [dl(0,n,n)-1]), ex_si(3, adj-num, 3, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(présentées, vpp-ver:pper, présentées, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(trompeuse, adj-adj, trompeuse, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(110, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(début, nc-nom, début, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(avancent, v-ver:pres, avancent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(certain, adj-adj, certain, [dr(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Erik', npp-nam, 'Erik', [dr(0,np,np)-1]), ex_si('Olsen', npp-nam, 'Olsen', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Ollsen', npp-nam, 'Ollsen', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquêteur, nc-nom, enquêteur, [n-1]), ex_si(principal, adj-adj, principal, [dl(0,n,n)-1]), ex_si(chargé, vpp-ver:pper, chargé, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sabotage, nc-nom, sabotage, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(gazoducs, nc-nom, gazoducs, [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), ex_si(1, adj-num, 1, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(révéler, vinf-ver:infi, révéler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(secrets, nc-nom, secrets, [n-1]), ex_si(sur, p-prp, sur, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(111, Result) :-
      prob_parse([ ex_si('Ni', cc-kon, 'Ni', [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parquet, nc-nom, parquet, [n-1]), ex_si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(charge, nc-nom, charge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fuites, nc-nom, fuites, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(gazoducs, nc-nom, gazoducs, [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Stockholm', npp-nam, 'Stockholm', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(connaissance, nc-nom, connaissance, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(enquêteur, nc-nom, enquêteur, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('Erik', npp-nam, 'Erik', [dl(0,n,n)-1]), ex_si('Olsen', npp-nam, 'Olsen', [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(suspecte, adj-adj, suspecte, [dl(0,n,n)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(chargées, vpp-ver:pper, chargées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(investigations, nc-nom, investigations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(112, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(certain, adj-adj, certain, [dr(0,n,n)-1]), ex_si('Remco', npp-nam, 'Remco', [n-1]), ex_si('Van', npp-nam, 'Van', [dr(0,dl(0,n,n),np)-1]), ex_si('Velzen', npp-nam, 'Velzen', [np-1]), ex_si(annonce, v-ver:pres, annonce, [dr(0,dl(0,np,s),np)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Twitter', npp-nam, 'Twitter', [np-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(procureur, nc-nom, procureur, [n-1]), ex_si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Erik', npp-nam, 'Erik', [dr(0,np,np)-1]), ex_si('Ollsen', npp-nam, 'Ollsen', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquêteur, nc-nom, enquêteur, [n-1]), ex_si(principal, adj-adj, principal, [dl(0,n,n)-1]), ex_si(chargé, vpp-ver:pper, chargé, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sabotage, nc-nom, sabotage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(gazoducs, nc-nom, gazoducs, [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), ex_si(1, adj-num, 1, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si(2, adj-num, 2, [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(113, Result) :-
      prob_parse([ ex_si('L\'internaute', npp-nam, 'L\'internaute', [dr(0,np,n)-1]), ex_si('Remco', npp-nam, 'Remco', [n-1]), ex_si('Van', npp-nam, 'Van', [dl(0,n,n)-1]), ex_si('Velzen', npp-nam, 'Velzen', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dl(0,n,n)-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('Twitter', npp-nam, 'Twitter', [dr(0,dl(1,s,s),np)-1]), ex_si(que, cs-kon, que, [np-1]), ex_si(rien, pro-pro:ind, rien, [dr(0,s_q,s)-1]), ex_si(ne, adv-adv, ne, [np-1]), ex_si(prouvait, v-ver:impf, prouvait, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), ex_si('M.', nc-abr, 'M.', [let-1]), ex_si('Ollson', npp-nam, 'Ollson', [dr(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si('[sic]', ponct-pun, '[sic]', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,np),np)-1]), ex_si(en, p-prp, en, [np-1]), ex_si(charge, nc-nom, charge, [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s),pp)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,pp_de,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incident, nc-nom, incident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,n)-1]), ex_si('Stream', npp-nam, 'Stream', [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [dr(0,np,np)-1])], Result).
sent(114, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Swedish', npp-nam, 'Swedish', [dr(0,n,n)-1]), ex_si('Prosecution', npp-nam, 'Prosecution', [dr(0,n,n)-1]), ex_si('Authority', npp-nam, 'Authority', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(souligné, vpp-ver:pper, souligné, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(investigation, nc-nom, investigation, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), ex_si('Stream', npp-nam, 'Stream', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Mats', npp-nam, 'Mats', [dr(0,np,np)-1]), ex_si('Ljungqvist', npp-nam, 'Ljungqvist', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(cité, vpp-ver:pper, cité, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(notamment, adv-adv, notamment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(6, adj-num, 6, [dr(0,dl(0,n,n),n)-1]), ex_si(octobre, nc-nom, octobre, [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(115, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(procureur, nc-nom, procureur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(charge, nc-nom, charge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,n,n),np)-1]), ex_si('Erik', npp-nam, 'Erik', [dr(0,np,np)-1]), ex_si('Olsson', npp-nam, 'Olsson', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(piqûre, nc-nom, piqûre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(abeille, nc-nom, abeille, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(116, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(106, adj-num, 106, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(107, adj-num, 107, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(disposent, v-ver:pres, disposent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(successeur, nc-nom, successeur, [n-1]), ex_si(légal, adj-adj, légal, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vainqueur, nc-nom, vainqueur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,n,n)),dl(0,n,n))-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Hongrie', npp-nam, 'Hongrie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Croatie', npp-nam, 'Croatie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Slovénie', npp-nam, 'Slovénie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Estonie', npp-nam, 'Estonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tentatives, nc-nom, tentatives, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(renaissance, nc-nom, renaissance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nazisme, nc-nom, nazisme, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(117, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(conformement, adv-adv, conformement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envahi, vpp-ver:pper, envahi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(118, Result) :-
      prob_parse([ ex_si('Dès', p-prp, 'Dès', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Antonio', npp-nam, 'Antonio', [dr(0,np,np)-1]), ex_si('Guterres', npp-nam, 'Guterres', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dénoncée, vpp-ver:pper, dénoncée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(erreur, nc-nom, erreur, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(119, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(106, adj-num, 106, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(107, adj-num, 107, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(disposent, v-ver:pres, disposent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(successeur, nc-nom, successeur, [n-1]), ex_si(légal, adj-adj, légal, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vainqueur, nc-nom, vainqueur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,n,n)),dl(0,n,n))-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Hongrie', npp-nam, 'Hongrie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Croatie', npp-nam, 'Croatie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Slovénie', npp-nam, 'Slovénie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Estonie', npp-nam, 'Estonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tentatives, nc-nom, tentatives, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(renaissance, nc-nom, renaissance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nazisme, nc-nom, nazisme, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(120, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(conformement, adv-adv, conformement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envahi, vpp-ver:pper, envahi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(121, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(permanent, adj-adj, permanent, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(rappelle, v-ver:pres, rappelle, [dr(0,dr(0,s,np),np)-1]), ex_si('Catherine', npp-nam, 'Catherine', [dr(0,np,np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Bris', npp-nam, 'Bris', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('L\'intervention', nc-nom, 'L\'intervention', [dr(0,np,n)-1]), ex_si(militaire, adj-adj, militaire, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,dl(0,n,n),n)-1]), ex_si(viole, v-ver:pres, viole, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s),np)-1]), ex_si('Charte', npp-nam, 'Charte', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ONU', nc-abr, 'ONU', [dr(0,np,n)-1]), ex_si(mais, cc-kon, mais, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,dr(0,s,s),s)-1]), ex_si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), ex_si(est, v-ver:pres, est, [n-1]), ex_si(membre, nc-nom, membre, [dr(0,dl(0,np,s),np)-1]), ex_si(permanent, adj-adj, permanent, [np-1]), ex_si(du, p+d-prp:det, du, [dl(0,np,np)-1]), ex_si('Conseil', npp-nam, 'Conseil', [dr(0,dl(0,np,np),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(sécurité, nc-nom, sécurité, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(elle, cls-pro:per, elle, [let-1]), ex_si('l\'', clo-pro:per, 'l\'', [np-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(de, p-prp, de, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(fonctionner, vinf-ver:infi, fonctionner, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(grâce, nc-nom, grâce, [dl(0,np,s_inf)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(son, det-det:pos, son, [dr(0,pp_a,np)-1]), ex_si(droit, nc-nom, droit, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(veto, nc-nom, veto, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(122, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(106, adj-num, 106, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(107, adj-num, 107, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dispositions, nc-nom, dispositions, [n-1]), ex_si(transitoires, adj-adj, transitoires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contexte, nc-nom, contexte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(invoquées, vpp-ver:pper, invoquées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(conflits, nc-nom, conflits, [n-1]), ex_si(actuels, adj-adj, actuels, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(123, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(106, adj-num, 106, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(107, adj-num, 107, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(autorise, v-ver:pres, autorise, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(spéciale, adj-adj, spéciale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(lancée, vpp-ver:pper, lancée, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(124, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(rencontre, nc-nom, rencontre, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Antonio', npp-nam, 'Antonio', [dr(0,np,np)-1]), ex_si('Guterres', npp-nam, 'Guterres', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('lui-même', pro-pro:per, 'lui-même', [dl(1,s,s)-1]), ex_si(défendu, vpp-ver:pper, défendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conformité, nc-nom, conformité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(citant, vpr-ver:ppre, citant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(51, adj-num, 51, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(relatif, adj-adj, relatif, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(légitime, adj-adj, légitime, [dr(0,n,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(abstiennent, v-ver:pres, abstiennent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [dl(0,n,n)-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(menace, nc-nom, menace, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intégrité, nc-nom, intégrité, [n-1]), ex_si(territoriale, adj-adj, territoriale, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(incompatible, adj-adj, incompatible, [dr(0,dl(0,n,n),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(buts, nc-nom, buts, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(125, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(respecté, vpp-ver:pper, respecté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(répondant, vpr-ver:ppre, répondant, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appel, nc-nom, appel, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(formulé, vpp-ver:pper, formulé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(agression, nc-nom, agression, [n-1]), ex_si(armée, adj-adj, armée, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lougansk', npp-nam, 'Lougansk', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Donetsk', npp-nam, 'Donetsk', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(126, Result) :-
      prob_parse([ ex_si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(expliquait, v-ver:impf, expliquait, [dr(0,dr(0,s,np),np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [dr(0,np,np)-1]), ex_si('Devin', npp-nam, 'Devin', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tribune, nc-nom, tribune, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,dl(0,n,n),n)-1]), ex_si('Soir', npp-nam, 'Soir', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(entités, nc-nom, entités, [n-1]), ex_si(prétendument, adv-adv, prétendument, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(agressées, vpp-ver:pper, agressées, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si('\\', nc-sym, '\\', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [let-1]), ex_si('Républiques', nc-nom, 'Républiques', [dr(0,np,n)-1]), ex_si(populaires, adj-adj, populaires, [n-1]), ex_si(du, p+d-prp:det, du, [dl(0,n,n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [dr(0,dl(0,n,n),n)-1]), ex_si('\\', et-adv, '\\', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ne, adv-adv, ne, [let-1]), ex_si(sont, v-ver:pres, sont, [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,dl(0,np,s),np)-1]), ex_si(cas, nc-nom, cas, [dr(0,np,n)-1]), ex_si('\'', ponct-prp:det, '\'', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si('Nations', nc-nam, 'Nations', [dr(0,dl(0,n,n),n)-1]), ex_si('unies\'.', pref-adv, 'unies\'.', [n-1]), ex_si('En', p-prp, 'En', [dl(0,n,n)-1]), ex_si(outre, adv-adv, outre, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dr(0,s,s),n)-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(mesures, nc-nom, mesures, [let-1]), ex_si(prises, vpp-ver:pper, prises, [dr(0,np,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(application, nc-nom, application, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(légitime, adj-adj, légitime, [n-1]), ex_si(défense, nc-nom, défense, [dr(0,dl(0,n,n),n)-1]), ex_si(ne, adv-adv, ne, [dr(0,n,n)-1]), ex_si(valent, v-ver:pres, valent, [n-1]), ex_si(que, adv-adv, que, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,np,s),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,np)-1]), ex_si(à, p-prp, à, [dr(0,pp,pp)-1]), ex_si(ce, pro-pro:dem, ce, [dr(0,pp,pp)-1]), ex_si(que, cs-kon, que, [dr(0,pp_a,np)-1]), ex_si(le, det-det:art, le, [np-1]), ex_si('Conseil', npp-nam, 'Conseil', [dr(0,dl(0,np,np),s)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,n,n),n)-1]), ex_si(pris, vpp-ver:pper, pris, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mesures, nc-nom, mesures, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(nécessaires, adj-adj, nécessaires, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(maintien, nc-nom, maintien, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(et, cc-kon, et, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sécurité, nc-nom, sécurité, [dr(0,dl(0,n,n),np)-1]), ex_si('internationales\'', ponct-pro:rel, 'internationales\'', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ce, pro-pro:dem, ce, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [let-1]), ex_si(est, v-ver:pres, est, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(hypothèse, nc-nom, hypothèse, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(impossible, adj-adj, impossible, [n-1]), ex_si('puisqu\'avec', p-prp, 'puisqu\'avec', [dl(0,n,n)-1]), ex_si(son, det-det:pos, son, [dl(0,n,n)-1]), ex_si(droit, nc-nom, droit, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dr(0,s,s),np)-1]), ex_si(veto, nc-nom, veto, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(bloque, v-ver:pres, bloque, [let-1]), ex_si(le, det-det:art, le, [let-1]), ex_si(fonctionnement, nc-nom, fonctionnement, [n-1]), ex_si(normal, adj-adj, normal, [dr(0,dl(0,np,s),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1])], Result).
sent(127, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(exercer, vinf-ver:infi, exercer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(légitime, adj-adj, légitime, [dr(0,n,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(faut, v-ver:pres, faut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(abord, nc-nom, abord, [n-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(souligne, v-ver:pres, souligne, [dr(0,dl(1,s,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si('Alexandra', npp-nam, 'Alexandra', [dr(0,np,np)-1]), ex_si('Novosseloff', npp-nam, 'Novosseloff', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(128, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mouvements, nc-nom, mouvements, [n-1]), ex_si(ultra, adv-adv, ultra, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(nationalistes, adj-adj, nationalistes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(nazistes, adj-adj, nazistes, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(actifs, vpp-ver:pper, actifs, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(restent, v-ver:pres, restent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(minoritaires, adj-adj, minoritaires, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(marginalisés, vpp-ver:pper, marginalisés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(129, Result) :-
      prob_parse([ ex_si('L\'intervention', nc-nom, 'L\'intervention', [dr(0,np,n)-1]), ex_si(militaire, adj-adj, militaire, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), ex_si(vise, v-ver:pres, vise, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(dénazification, nc-nom, dénazification, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,s,s),s)-1]), ex_si(régime, nc-nom, régime, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,dl(0,n,n),np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dr(0,np,np)-1]), ex_si(étant, vpr-ver:ppre, étant, [np-1]), ex_si(affilié, vpp-ver:pper, affilié, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(nazisme, nc-nom, nazisme, [dr(0,pp_a,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(130, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(appel, nc-nom, appel, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(107, adj-num, 107, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(actions, nc-nom, actions, [n-1]), ex_si(menées, vpp-ver:pper, menées, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(131, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(agression, nc-nom, agression, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(situe, v-ver:pres, situe, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prolongement, nc-nom, prolongement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(132, Result) :-
      prob_parse([ ex_si('Surnommée', vpp-ver:pper, 'Surnommée', [dr(0,dl(0,np,s_pass),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(grenier, nc-nom, grenier, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(blé, nc-nom, blé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(figure, v-ver:pres, figure, [dr(0,dl(0,np,s),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,n,n)-1]), ex_si(producteurs, nc-nom, producteurs, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(exportateurs, nc-nom, exportateurs, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(cultures, nc-nom, cultures, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(céréales, nc-nom, céréales, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oléagineux, nc-nom, oléagineux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(133, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), ex_si('5e', det-num, '5e', [dr(0,np,n)-1]), ex_si(exportateur, nc-nom, exportateur, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blé, nc-nom, blé, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', npp-nam, 'Organisation', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Coopération', nc-nam, 'Coopération', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Développement', nc-nam, 'Développement', [n-1]), ex_si('Economique', adj-adj, 'Economique', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('OCDE', npp-abr, 'OCDE', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(134, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(vertu, nc-nom, vertu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(foncier, adj-adj, foncier, [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(entrée, vpp-ver:pper, entrée, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(vigueur, nc-nom, vigueur, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(interdite, vpp-ver:pper, interdite, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(135, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(fertiles, adj-adj, fertiles, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Monsanto', npp-nam, 'Monsanto', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Cargill', npp-nam, 'Cargill', [np-1]), ex_si(et, cc-kon, et, [np-1]), ex_si('DuPont', npp-nam, 'DuPont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(136, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(130, adj-num, 130, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(foncière, adj-adj, foncière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(seuls, adv-adv, seuls, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('lui-même', pro-pro:per, 'lui-même', [dl(0,np,np)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(137, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(multinationales, nc-nom, multinationales, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(17, det-num, 17, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(hectares, nc-nom, hectares, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(arables, adj-adj, arables, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(138, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouverture, nc-nom, ouverture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(139, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(parcelles, nc-nom, parcelles, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(acteurs, nc-nom, acteurs, [n-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(légale, adj-adj, légale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adoption, nc-nom, adoption, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(différents, adj-adj, différents, [dr(0,n,n)-1]), ex_si(moratoires, nc-nom, moratoires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(140, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(autorisées, vpp-ver:pper, autorisées, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parcelles, nc-nom, parcelles, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondées, vpp-ver:pper, fondées, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(appartenir, vinf-ver:infi, appartenir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(141, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(actionnaires, nc-nom, actionnaires, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(citoyens, nc-nom, citoyens, [np-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,np,np)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(institutions, nc-nom, institutions, [n-1]), ex_si(publiques, adj-adj, publiques, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(souhaitent, v-ver:pres, souhaitent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(142, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(143, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(autorisées, vpp-ver:pper, autorisées, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parcelles, nc-nom, parcelles, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondées, vpp-ver:pper, fondées, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(appartenir, vinf-ver:infi, appartenir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(144, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(actionnaires, nc-nom, actionnaires, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(citoyens, nc-nom, citoyens, [np-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,np,np)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(institutions, nc-nom, institutions, [n-1]), ex_si(publiques, adj-adj, publiques, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(souhaitent, v-ver:pres, souhaitent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(145, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2024, adj-num, 2024, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(particuliers, nc-nom, particuliers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(pourront, v-ver:futu, pourront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('10.000', det-num, '10.000', [dr(0,np,n)-1]), ex_si(hectares, nc-nom, hectares, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(146, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(seules, adv-adv, seules, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(fondées, vpp-ver:pper, fondées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(vertu, nc-nom, vertu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(détenues, vpp-ver:pper, détenues, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(éligibles, adj-adj, éligibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(147, Result) :-
      prob_parse([ ex_si('Monsanto', npp-nam, 'Monsanto', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(filiale, nc-nom, filiale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si('Bayer', npp-nam, 'Bayer', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(148, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(agricoles, adj-adj, agricoles, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(149, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(arables, adj-adj, arables, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(géants, nc-nom, géants, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agroalimentaire, nc-nom, agroalimentaire, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chimie, nc-nom, chimie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('Monsanto', npp-nam, 'Monsanto', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Cargill', npp-nam, 'Cargill', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('DuPont', npp-nam, 'DuPont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(150, Result) :-
      prob_parse([ ex_si('Sept', det-num, 'Sept', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espoir, nc-nom, espoir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(oppose, v-ver:pres, oppose, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(prochainement, adv-adv, prochainement, [dl(1,s,s)-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(amenuiser, vinf-ver:infi, amenuiser, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(annexion, nc-nom, annexion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(territoires, nc-nom, territoires, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(151, Result) :-
      prob_parse([ ex_si('L\'annexion', nc-nom, 'L\'annexion', [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(régions, nc-nom, régions, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Donetsk', npp-nam, 'Donetsk', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Lougansk', npp-nam, 'Lougansk', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Zaporijjia', npp-nam, 'Zaporijjia', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si('Kherson', npp-nam, 'Kherson', [dr(0,dl(0,np,np),np)-1]), ex_si(dans, p-prp, dans, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), ex_si(sud, nc-nom, sud, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),np)-1]), ex_si(est, nc-nom, est, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), ex_si(annoncée, vpp-ver:pper, annoncée, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dr(0,pp_par,np)-1]), ex_si(vendredi, nc-nom, vendredi, [dr(0,pp_par,np)-1]), ex_si(30, adj-num, 30, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(septembre, nc-nom, septembre, [dr(0,np,n)-1]), ex_si(rend, v-ver:pres, rend, [n-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(presque, adv-adv, presque, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(fin, nc-nom, fin, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(guerre, nc-nom, guerre, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(chef, nc-nom, chef, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(diplomatie, nc-nom, diplomatie, [dr(0,np,n)-1]), ex_si(européenne, adj-adj, européenne, [n-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si('Josep', npp-nam, 'Josep', [dr(0,np,np)-1]), ex_si('Borrell', npp-nam, 'Borrell', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(sur, p-prp, sur, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),np)-1]), ex_si(chaîne, nc-nom, chaîne, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(télévision, nc-nom, télévision, [dr(0,dl(0,n,n),n)-1]), ex_si(espagnole, adj-adj, espagnole, [n-1]), ex_si('RTVE', npp-abr, 'RTVE', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(152, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(antimissile, adj-adj, antimissile, [dl(0,n,n)-1]), ex_si('Buk-M3', npp-nam, 'Buk-M3', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(livrés, vpp-ver:pper, livrés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2016, pro-num, 2016, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(destination, nc-nom, destination, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Altaï', npp-nam, 'Altaï', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(153, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(antiaériens, adj-adj, antiaériens, [dl(0,n,n)-1]), ex_si('Buk-M3', npp-nam, 'Buk-M3', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(154, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(acquisition, nc-nom, acquisition, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(155, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(visionnée, vpp-ver:pper, visionnée, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('250.000', det-num, '250.000', [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('lieutenant-colonel', nc-nom, 'lieutenant-colonel', [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rend, v-ver:pres, rend, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(pourchassé, vpp-ver:pper, pourchassé, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(réelle, adj-adj, réelle, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(authentique, adj-adj, authentique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(156, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(visionnée, vpp-ver:pper, visionnée, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('250.000', det-num, '250.000', [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('lieutenant-colonel', nc-nom, 'lieutenant-colonel', [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rend, v-ver:pres, rend, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(pourchassé, vpp-ver:pper, pourchassé, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(provient, v-ver:pres, provient, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('jeu-vidéo', nc-nom, 'jeu-vidéo', [n-1]), ex_si('Arma', npp-nam, 'Arma', [dl(0,n,n)-1]), ex_si(3, adj-num, 3, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(simulation, nc-nom, simulation, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(réalisées, vpp-ver:pper, réalisées, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Arma', npp-nam, 'Arma', [np-1]), ex_si(3, adj-num, 3, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(157, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(moldaves, adj-adj, moldaves, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mobilisaient, v-ver:impf, mobilisaient, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(exercice, nc-nom, exercice, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(conjoint, adj-adj, conjoint, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(armées, nc-nom, armées, [n-1]), ex_si(moldave, adj-adj, moldave, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(158, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Moldavie', npp-nam, 'Moldavie', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(convoi, nc-nom, convoi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(livraison, nc-nom, livraison, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(blindés, adj-adj, blindés, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(supervisé, vpp-ver:pper, supervisé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Moldavie', npp-nam, 'Moldavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(159, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(moldaves, adj-adj, moldaves, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mobilisaient, v-ver:impf, mobilisaient, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(exercice, nc-nom, exercice, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(conjoint, adj-adj, conjoint, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(armées, nc-nom, armées, [n-1]), ex_si(moldave, adj-adj, moldave, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(160, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si('anti-OTAN', adj-adj, 'anti-OTAN', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Moldavie', npp-nam, 'Moldavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(161, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Moldavie', npp-nam, 'Moldavie', [n-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(majoritairement, adv-adv, majoritairement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(roumanophone, adj-adj, roumanophone, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(minorité, nc-nom, minorité, [n-1]), ex_si(russophone, adj-adj, russophone, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(prorusses, nc-nom, prorusses, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,pp_de,pp_a),n)-1]), ex_si('pro-occidentaux', nc-nom, 'pro-occidentaux', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(nourrissant, vpr-ver:ppre, nourrissant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(crises, nc-nom, crises, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(répétition, nc-nom, répétition, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(162, Result) :-
      prob_parse([ ex_si('Président', nc-nom, 'Président', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Moldavie', npp-nam, 'Moldavie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2016, pro-num, 2016, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Igor', npp-nam, 'Igor', [dr(0,np,np)-1]), ex_si('Dodon', npp-nam, 'Dodon', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ouvertement, adv-adv, ouvertement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(163, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('pro-européenne', nc-nom, 'pro-européenne', [dr(0,n,n)-1]), ex_si('Maïa', npp-nam, 'Maïa', [dl(0,n,n)-1]), ex_si('Sandu', npp-nam, 'Sandu', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(législatives, nc-nom, législatives, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(164, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(dénudé, vpp-ver:pper, dénudé, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(cigarette, nc-nom, cigarette, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(main, nc-nom, main, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(truquée, vpp-ver:pper, truquée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(165, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(montage, nc-nom, montage, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(rajouté, vpp-ver:pper, rajouté, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si(prise, vpp-ver:pper, prise, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pride', npp-nam, 'Pride', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Marche', nc-nam, 'Marche', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(fiertés, nc-nom, fiertés, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(mise, nc-ver:pper, mise, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(partage, nc-nom, partage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Flickr', npp-nam, 'Flickr', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(166, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dénudé, vpp-ver:pper, dénudé, [dl(0,n,n)-1]), ex_si(prenant, vpr-ver:ppre, prenant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pose, nc-nom, pose, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Marche', nc-nam, 'Marche', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(fiertés, nc-nom, fiertés, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1990, adj-num, 1990, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(167, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(organe, nc-nom, organe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(confondu, vpp-ver:pper, confondu, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(168, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(169, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(vastes, adj-adj, vastes, [dr(0,n,n)-1]), ex_si(coupures, nc-nom, coupures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(pilonner, vinf-ver:infi, pilonner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kharkiv', npp-nam, 'Kharkiv', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(170, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(massives, adj-adj, massives, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menées, vpp-ver:pper, menées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(localités, nc-nom, localités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dvoritchna', npp-nam, 'Dvoritchna', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Balakliïa', npp-nam, 'Balakliïa', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Koupiansk', npp-nam, 'Koupiansk', [np-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(vives, adj-adj, vives, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(équipements, nc-nom, équipements, [n-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si('14e', adj-num, '14e', [dr(0,dl(0,n,n),n)-1]), ex_si(et, cc-kon, et, [dr(0,n,n)-1]), ex_si('93e', adj-num, '93e', [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(brigades, nc-nom, brigades, [n-1]), ex_si(motorisées, vpp-ver:pper, motorisées, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1])], Result).
sent(171, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(envoi, nc-nom, envoi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(casques, nc-nom, casques, [n-1]), ex_si(bleus, adj-adj, bleus, [dl(0,n,n)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(aval, nc-nom, aval, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Onu', npp-nam, 'Onu', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),dl(0,np,s_ppres))-1]), ex_si(passant, vpr-ver:ppre, passant, [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(via, p-prp, via, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Onu', npp-nam, 'Onu', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(172, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(faux, adj-adj, faux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(outre, adv-adv, outre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Onu', npp-nam, 'Onu', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(casques, nc-nom, casques, [n-1]), ex_si(bleus, adj-adj, bleus, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(173, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(déploiement, nc-nom, déploiement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(situe, v-ver:pres, situe, [dr(0,dl(0,cl_r,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(central, nc-nom, central, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(174, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(considéreraient, v-ver:impf, considéreraient, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(intervient, v-ver:pres, intervient, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(armé, vpp-ver:pper, armé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(175, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(symbolique, adj-adj, symbolique, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(aimerait, v-ver:pres, aimerait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(casques, nc-nom, casques, [n-1]), ex_si(bleus, adj-adj, bleus, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Zaporijjia', npp-nam, 'Zaporijjia', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(donnerait, v-ver:cond, donnerait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impression, nc-nom, impression, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(envoie, v-ver:pres, envoie, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(interposition, nc-nom, interposition, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(176, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(création, nc-nom, création, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AGNU', npp-abr, 'AGNU', [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(consultation, nc-nom, consultation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(177, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(interposition, nc-nom, interposition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créée, vpp-ver:pper, créée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1956, adj-num, 1956, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(occasion, nc-nom, occasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Egypte', npp-nam, 'Egypte', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(annonce, nc-nom, annonce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nationalisation, nc-nom, nationalisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canal', npp-nam, 'Canal', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Suez', npp-nam, 'Suez', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(178, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(casques, nc-nom, casques, [n-1]), ex_si(bleus, adj-adj, bleus, [dl(0,n,n)-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(envoyés, vpp-ver:pper, envoyés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Onu', npp-nam, 'Onu', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Histoire', nc-nam, 'Histoire', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(179, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mariage, nc-nom, mariage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mariés, nc-nom, mariés, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(invités, nc-nom, invités, [n-1]), ex_si(posent, v-ver:pres, posent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(saluts, nc-nom, saluts, [n-1]), ex_si(nazis, adj-adj, nazis, [dl(0,n,n)-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(tsariste, adj-adj, tsariste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prise, vpp-ver:pper, prise, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Novokuznetsk', npp-nam, 'Novokuznetsk', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2017, pro-num, 2017, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(180, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(référence, nc-nom, référence, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mariage, nc-nom, mariage, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(néonazies, nc-nom, néonazies, [n-1]), ex_si(tenant, vpr-ver:ppre, tenant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(181, Result) :-
      prob_parse([ ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(couvrir, vinf-ver:infi, couvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(raisonnablement, adv-adv, raisonnablement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(diversité, nc-nom, diversité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(comportements, nc-nom, comportements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dépense, nc-nom, dépense, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ménage, nc-nom, ménage, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alimentation, nc-nom, alimentation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(182, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(me, clo-pro:per, me, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(paraît, v-ver:pres, paraît, [dr(0,dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a),dl(0,n,n))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(183, Result) :-
      prob_parse([ ex_si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quotidien, nc-nom, quotidien, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),n)-1]), ex_si('Echos', nc-nam, 'Echos', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Economie', nc-nam, 'Economie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Finances', nc-nom, 'Finances', [n-1]), ex_si('Bruno', npp-nam, 'Bruno', [dl(0,n,n)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Maire', npp-nam, 'Maire', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(affirmer, vinf-ver:infi, affirmer, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pic, nc-nom, pic, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(anticipait, v-ver:impf, anticipait, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(recul, nc-nom, recul, [n-1]), ex_si(structurel, adj-adj, structurel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,n,n),np)-1]), ex_si(2023, pro-num, 2023, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(184, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),np)-1]), ex_si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bonne, adj-adj, bonne, [dr(0,n,n)-1]), ex_si(nouvelle, nc-nom, nouvelle, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(faible, adj-adj, faible, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(considère, v-ver:pres, considère, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pic, nc-nom, pic, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(2023, adj-num, 2023, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(185, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('5,8', det-num, '5,8', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chiffres, nc-nom, chiffres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Insee', npp-abr, 'Insee', [n-1]), ex_si(publiés, vpp-ver:pper, publiés, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(186, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(officiellement, adv-adv, officiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(calculée, vpp-ver:pper, calculée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(mesurant, vpr-ver:ppre, mesurant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évolution, nc-nom, évolution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('100.000', det-num, '100.000', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(187, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(calcul, nc-nom, calcul, [n-1]), ex_si(vise, v-ver:pres, vise, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(représentativité, nc-nom, représentativité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(couvrir, vinf-ver:infi, couvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(raisonnablement, adv-adv, raisonnablement, [dl(1,s,s)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(188, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chiffre, nc-nom, chiffre, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(bien, adv-adv, bien, [dr(0,np,np)-1]), ex_si(deux, pro-num, deux, [dr(0,np,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(189, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(calculée, vpp-ver:pper, calculée, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(quarantaine, nc-num, quarantaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(suffisant, adj-adj, suffisant, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(190, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(continue, v-ver:pres, continue, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(souffrir, vinf-ver:infi, souffrir, [dl(0,np,s_inf)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ménages, nc-nom, ménages, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(marque, v-ver:pres, marque, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(léger, adj-adj, léger, [dr(0,n,n)-1]), ex_si(ralentissement, nc-nom, ralentissement, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('+6,1', det-num, '+6,1', [dr(0,np,np)-1]), ex_si('%', nc-sym, '%', [dr(0,np,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(juillet, nc-nom, juillet, [dr(0,dl(0,n,n),n)-1]), ex_si(par, p-prp, par, [n-1]), ex_si(rapport, nc-nom, rapport, [dr(0,dl(0,n,n),n)-1]), ex_si(à, p-prp, à, [dr(0,n,pp_a)-1]), ex_si(juillet, nc-nom, juillet, [dr(0,pp_a,n)-1]), ex_si(2021, adj-num, 2021, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(191, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(ralentie, vpp-ver:pper, ralentie, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(192, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(calculer, vinf-ver:infi, calculer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si('Indice', nc-nam, 'Indice', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('IPC', npp-abr, 'IPC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Insee', npp-abr, 'Insee', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appuie, v-ver:pres, appuie, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évaluation, nc-nom, évaluation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(limite, v-ver:pres, limite, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alimentation, nc-nom, alimentation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(193, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mesure, v-ver:pres, mesure, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alimentation, nc-nom, alimentation, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(calcul, nc-nom, calcul, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(194, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(massivement, adv-adv, massivement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(condamnant, vpr-ver:ppre, condamnant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(141, det-num, 141, [dr(0,np,n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(195, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(résolutions, nc-nom, résolutions, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptées, vpp-ver:pper, adoptées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(196, Result) :-
      prob_parse([ ex_si('Jusqu\'', p-prp, 'Jusqu\'', [dr(0,dr(0,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résolutions, nc-nom, résolutions, [n-1]), ex_si(adoptées, vpp-ver:pper, adoptées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Onu', npp-nam, 'Onu', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(197, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(29, adj-num, 29, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(repoussé, vpp-ver:pper, repoussé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(tentatives, nc-nom, tentatives, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(offensive, nc-nom, offensive, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kherson', npp-nam, 'Kherson', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mykolaïv', npp-nam, 'Mykolaïv', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(198, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(pleine, adj-adj, pleine, [dr(0,n,n)-1]), ex_si('contre-offensive', nc-nom, 'contre-offensive', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espoir, nc-nom, espoir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(reprendre, vinf-ver:infi, reprendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kherson', npp-nam, 'Kherson', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(199, Result) :-
      prob_parse([ ex_si('Cent-trente', det-num, 'Cent-trente', [dr(0,np,np)-1]), ex_si(neuf, adj-num, neuf, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(193, adj-num, 193, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('[d\'invasion', ponct-pun, '[d\'invasion', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si('Ukraine]', npp-nam, 'Ukraine]', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(retirer, vinf-ver:infi, retirer, [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(armée, nc-nom, armée, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(territoire, nc-nom, territoire, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1])], Result).
sent(200, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(retirer, vinf-ver:infi, retirer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(54, det-num, 54, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(139, pro-num, 139, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(y, clo-pro:per, y, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(opposés, vpp-ver:pper, opposés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1])], Result).
sent(201, Result) :-
      prob_parse([ ex_si('Cent-trente', det-num, 'Cent-trente', [dr(0,np,np)-1]), ex_si(neuf, adj-num, neuf, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(193, adj-num, 193, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('[d\'invasion', ponct-pun, '[d\'invasion', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si('Ukraine]', npp-nam, 'Ukraine]', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(retirer, vinf-ver:infi, retirer, [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(armée, nc-nom, armée, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(territoire, nc-nom, territoire, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1])], Result).
sent(202, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(désavouée, vpp-ver:pper, désavouée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(139, det-num, 139, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(29, adj-num, 29, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Paulina', npp-nam, 'Paulina', [dr(0,np,np)-1]), ex_si('Kubiak', npp-nam, 'Kubiak', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(203, Result) :-
      prob_parse([ ex_si('Cent-trente', det-num, 'Cent-trente', [dr(0,np,n)-1]), ex_si(neuf, adj-num, neuf, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(193, adj-num, 193, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('[d\'invasion', ponct-pun, '[d\'invasion', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si('Ukraine]', npp-nam, 'Ukraine]', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(retirer, vinf-ver:infi, retirer, [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(armée, nc-nom, armée, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(territoire, nc-nom, territoire, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,n,n),n)-1])], Result).
sent(204, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résolutions, nc-nom, résolutions, [n-1]), ex_si(présentées, vpp-ver:pper, présentées, [dl(0,n,n)-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(approuvées, vpp-ver:pper, approuvées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(présents, adj-adj, présents, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(votants, nc-nom, votants, [dl(0,n,n)-1]), ex_si(conformément, adv-adv, conformément, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptées, vpp-ver:pper, adoptées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(205, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cliché, nc-nom, cliché, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Vogue', npp-nam, 'Vogue', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photographe, nc-nom, photographe, [n-1]), ex_si('Annie', npp-nam, 'Annie', [dl(0,n,n)-1]), ex_si('Leibovitz', npp-nam, 'Leibovitz', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(illustrant, vpr-ver:ppre, illustrant, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(portrait, nc-nom, portrait, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(206, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mode, nc-nom, mode, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(revanche, nc-nom, revanche, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), ex_si('Braun', npp-nam, 'Braun', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1939, pro-num, 1939, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(207, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(compagne, nc-nom, compagne, [n-1]), ex_si('Eva', npp-nam, 'Eva', [dl(0,n,n)-1]), ex_si('Braun', npp-nam, 'Braun', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Vogue', npp-nam, 'Vogue', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1939, pro-num, 1939, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('Vogue', npp-nam, 'Vogue', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(208, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(compagne, nc-nom, compagne, [n-1]), ex_si('Eva', npp-nam, 'Eva', [dl(0,n,n)-1]), ex_si('Braun', npp-nam, 'Braun', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Vogue', npp-nam, 'Vogue', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1939, pro-num, 1939, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('Vogue', npp-nam, 'Vogue', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(209, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(séance, nc-nom, séance, [n-1]), ex_si(photo, nc-nom, photo, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), ex_si('Braun', npp-nam, 'Braun', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(archives, nc-nom, archives, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(1,s,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si('Vogue', npp-nam, 'Vogue', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(210, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(compagne, nc-nom, compagne, [n-1]), ex_si('Eva', npp-nam, 'Eva', [dl(0,n,n)-1]), ex_si('Braun', npp-nam, 'Braun', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Vogue', npp-nam, 'Vogue', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1939, pro-num, 1939, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('Vogue', npp-nam, 'Vogue', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(211, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(photographié, vpp-ver:pper, photographié, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Vogue', npp-nam, 'Vogue', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(212, Result) :-
      prob_parse([ ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(entretenait, v-ver:impf, entretenait, [dr(0,dl(0,np,s),np)-1]), ex_si(soigneusement, adv-adv, soigneusement, [dl(1,s,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(mythe, nc-nom, mythe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Fürher', npp-nam, 'Fürher', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(solitaire, adj-adj, solitaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sacrifie, v-ver:pres, sacrifie, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(personnelle, adj-adj, personnelle, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(213, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(axes, nc-nom, axes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(présentation, nc-nom, présentation, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(personnalité, nc-nom, personnalité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(marié, vpp-ver:pper, marié, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(donc, adv-adv, donc, [dr(0,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(genre, nc-nom, genre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(frivolités, nc-nom, frivolités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(214, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), ex_si('Braun', npp-nam, 'Braun', [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dictateur, nc-nom, dictateur, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(montré, vpp-ver:pper, montré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), ex_si('Braun', npp-nam, 'Braun', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(215, Result) :-
      prob_parse([ ex_si('Sous', p-prp, 'Sous', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(personne, pro-pro:ind, personne, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connaissait, v-ver:impf, connaissait, [dr(0,dl(0,np,s),np)-1]), ex_si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), ex_si('Braun', npp-nam, 'Braun', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cercle, nc-nom, cercle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(proches, nc-nom, proches, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(216, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(relation, nc-nom, relation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), ex_si('Braun', npp-nam, 'Braun', [np-1]), ex_si(restait, v-ver:impf, restait, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(secrète, adj-adj, secrète, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(217, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(fournisseur, nc-nom, fournisseur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(218, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(interdit, v-ver:pres, interdit, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(explicitement, adv-adv, explicitement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),dia(0,box(0,np))),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),dia(0,box(0,np))))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(219, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(viole, v-ver:pres, viole, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(conclu, vpp-ver:pper, conclu, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(220, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mentionnent, v-ver:pres, mentionnent, [dr(0,dl(0,np,s),np)-1]), ex_si(pourtant, adv-adv, pourtant, [dl(1,s,s)-1]), ex_si(explicitement, adv-adv, explicitement, [dl(1,s,s)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(livraison, nc-nom, livraison, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(221, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si('I', adj-num, 'I', [dl(0,np,np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(limitation, nc-nom, limitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(222, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(comporte, v-ver:pres, comporte, [dr(0,dl(0,np,s),np)-1]), ex_si(douze, det-num, douze, [dr(0,np,n)-1]), ex_si(points, nc-nom, points, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cessation, nc-nom, cessation, [n-1]), ex_si(immédiate, adj-adj, immédiate, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(bilatérale, adj-adj, bilatérale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(recours, nc-nom, recours, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(otages, nc-nom, otages, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(amélioration, nc-nom, amélioration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(humanitaire, adj-adj, humanitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(223, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(formations, nc-nom, formations, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(lourdes, adj-adj, lourdes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(illicites, adj-adj, illicites, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(combattants, nc-nom, combattants, [n-1]), ex_si(irréguliers, adj-adj, irréguliers, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(mercenaires, nc-nom, mercenaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(224, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(proprement, adv-adv, proprement, [dl(1,s,s)-1]), ex_si(parler, vinf-ver:infi, parler, [dl(0,np,s_inf)-1]), ex_si(signataire, nc-nom, signataire, [np-1]), ex_si(direct, adj-adj, direct, [dl(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(livrer, vinf-ver:infi, livrer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(225, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(couverts, vpp-ver:pper, couverts, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(tatouages, nc-nom, tatouages, [n-1]), ex_si(nazis, adj-adj, nazis, [dl(0,n,n)-1]), ex_si(photographiés, vpp-ver:pper, photographiés, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(plage, nc-nom, plage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rijeka', npp-nam, 'Rijeka', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Croatie', npp-nam, 'Croatie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(signalés, vpp-ver:pper, signalés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(musiciens, nc-nom, musiciens, [n-1]), ex_si(hongrois, adj-adj, hongrois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(226, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(couverts, vpp-ver:pper, couverts, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(tatouages, nc-nom, tatouages, [n-1]), ex_si(nazis, adj-adj, nazis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(gammées, adj-adj, gammées, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(portrait, nc-nom, portrait, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(posent, v-ver:pres, posent, [dl(0,np,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(face, nc-nom, face, [n-1]), ex_si(puis, cc-kon, puis, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(dos, nc-nom, dos, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(227, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(réfugiés, nc-nom, réfugiés, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Croatie', npp-nam, 'Croatie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(228, Result) :-
      prob_parse([ ex_si('Blood', npp-nam, 'Blood', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Honour', npp-nam, 'Honour', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(néonazi, adj-adj, néonazi, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(extrême, adj-adj, extrême, [dr(0,n,n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(229, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Counter', npp-nam, 'Counter', [dr(0,n,n)-1]), ex_si('Extremism', npp-nam, 'Extremism', [dr(0,n,n)-1]), ex_si('Project', npp-nam, 'Project', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('Blood', npp-nam, 'Blood', [dl(0,n,n)-1]), ex_si(and, et-kon, and, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Honour', npp-nam, 'Honour', [dl(0,n,n)-1]), ex_si(promeut, v-ver:pres, promeut, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(idéologie, nc-nom, idéologie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prolifération, nc-nom, prolifération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(festivals, nc-nom, festivals, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enregistrements, nc-nom, enregistrements, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(230, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(couverts, vpp-ver:pper, couverts, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(tatouages, nc-nom, tatouages, [n-1]), ex_si(nazis, adj-adj, nazis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(gammées, vpp-ver:pper, gammées, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(portrait, nc-nom, portrait, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(portent, v-ver:pres, portent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chemise, nc-nom, chemise, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(slogan, nc-nom, slogan, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si('Blood', et-nam, 'Blood', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Honour', npp-nam, 'Honour', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(référence, nc-nom, référence, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(néonazi, adj-adj, néonazi, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(extrême, adj-adj, extrême, [dr(0,n,n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(jouent, v-ver:pres, jouent, [dl(0,np,s)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(extrême, adj-adj, extrême, [dr(0,n,n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si('Fehér', npp-nam, 'Fehér', [dl(0,n,n)-1]), ex_si('Törvény', npp-nam, 'Törvény', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(231, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(idéologie, nc-nom, idéologie, [n-1]), ex_si(néonazie, adj-adj, néonazie, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(232, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Krementchouk', npp-nam, 'Krementchouk', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(frappée, vpp-ver:pper, frappée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(233, Result) :-
      prob_parse([ ex_si('Suite', nc-nom, 'Suite', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(détruit, vpp-ver:pper, détruit, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(21, det-num, 21, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,np,s_ppart)-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(234, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nié, vpp-ver:pper, nié, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Krementchouk', npp-nam, 'Krementchouk', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(235, Result) :-
      prob_parse([ ex_si(58, det-num, 58, [dr(0,np,n)-1]), ex_si(caisses, nc-nom, caisses, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(enregistrant, vpr-ver:ppre, enregistrant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chiffre, nc-nom, chiffre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('2,9', det-num, '2,9', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(hryvnia, nc-nom, hryvnia, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('97.000', det-num, '97.000', [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(236, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(blessés, vpp-ver:pper, blessés, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(témoigné, vpp-ver:pper, témoigné, [dl(0,np,s_ppart)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(237, Result) :-
      prob_parse([ ex_si('Amstor', npp-nam, 'Amstor', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(238, Result) :-
      prob_parse([ ex_si('Aleksandra', npp-nam, 'Aleksandra', [dr(0,np,np)-1]), ex_si('Lukina', npp-nam, 'Lukina', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(employée, nc-nom, employée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(café, nc-nom, café, [n-1]), ex_si(sis, vpp-ver:pper, sis, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(travaillait, v-ver:impf, travaillait, [dl(0,np,s)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ouverte, vpp-ver:pper, ouverte, [dl(0,np,s_pass)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(239, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(longtemps, adv-adv, longtemps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(240, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(particuliers, nc-nom, particuliers, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partagé, vpp-ver:pper, partagé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(reçus, nc-nom, reçus, [n-1]), ex_si(récents, adj-adj, récents, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Telegram', npp-nam, 'Telegram', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(achats, nc-nom, achats, [n-1]), ex_si(effectués, vpp-ver:pper, effectués, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si('10h09', npp-nam, '10h09', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('15h44', npp-nam, '15h44', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(241, Result) :-
      prob_parse([ ex_si('Amstor', npp-nam, 'Amstor', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(242, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('NDLR', adv-abr, 'NDLR', [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Krementchouk', npp-nam, 'Krementchouk', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dl(0,np,s_pass)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(dès, p-prp, dès, [dr(0,s_q,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(estimé, vpp-ver:pper, estimé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sûre, adj-adj, sûre, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rouvert, vpp-ver:pper, rouvert, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(refermé, vpp-ver:pper, refermé, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(243, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(longtemps, adv-adv, longtemps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(244, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(détruit, vpp-ver:pper, détruit, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(245, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ambassade, nc-nom, ambassade, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tweet, nc-nom, tweet, [n-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(ferrée, adj-adj, ferrée, [dl(0,n,n)-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(246, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ambassade, nc-nom, ambassade, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tweet, nc-nom, tweet, [n-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(ferrée, adj-adj, ferrée, [dl(0,n,n)-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(247, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(caméra, nc-nom, caméra, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(diriger, vinf-ver:infi, diriger, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(248, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(environs, nc-nom, environs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(semblent, v-ver:pres, semblent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(visibles, adj-adj, visibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(249, Result) :-
      prob_parse([ ex_si('Money', npp-nam, 'Money', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1972, pro-num, 1972, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(250, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(imprimé, vpp-ver:pper, imprimé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(251, Result) :-
      prob_parse([ ex_si('Money', npp-nam, 'Money', [np-1]), ex_si(publie, v-ver:pres, publie, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(couvrent, v-ver:pres, couvrent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(domaines, nc-nom, domaines, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(finance, nc-nom, finance, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crédits, nc-nom, crédits, [n-1]), ex_si(immobiliers, adj-adj, immobiliers, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(assurances, nc-nom, assurances, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(252, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vaste, adj-adj, vaste, [dr(0,n,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Consortium', npp-nam, 'Consortium', [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(investigation, nc-nom, investigation, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(accusait, v-ver:impf, accusait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2012, pro-num, 2012, [np-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(offshore, adj-adj, offshore, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(propriétés, nc-nom, propriétés, [n-1]), ex_si(cossues, adj-adj, cossues, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(253, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(corruption, nc-nom, corruption, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(révélations, nc-nom, révélations, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Pandora', npp-nam, 'Pandora', [dr(0,n,n)-1]), ex_si('Papers', npp-nam, 'Papers', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(publiés, vpp-ver:pper, publiés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(254, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Money', npp-nam, 'Money', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(couverture, nc-nom, couverture, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(mettait, v-ver:impf, mettait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humoriste, nc-nom, humoriste, [n-1]), ex_si('John', npp-nam, 'John', [dl(0,n,n)-1]), ex_si('Oliver', npp-nam, 'Oliver', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(représenté, vpp-ver:pper, représenté, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(chevaucher, vinf-ver:infi, chevaucher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(liasse, nc-nom, liasse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(billets, nc-nom, billets, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(assis, vpp-ver:pper, assis, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(selle, nc-nom, selle, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(motif, nc-nom, motif, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(255, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Money', npp-nam, 'Money', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(couverture, nc-nom, couverture, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(chevaucher, vinf-ver:infi, chevaucher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(liasses, nc-nom, liasses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(billets, nc-nom, billets, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('c\'', cls-pro:dem, 'c\'', [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(256, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(recettes, nc-nom, recettes, [n-1]), ex_si(tirées, vpp-ver:pper, tirées, [dr(0,dl(0,n,n),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(taxes, nc-nom, taxes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vigueur, nc-nom, vigueur, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(carburants, nc-nom, carburants, [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(estimations, nc-nom, estimations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Economie', nc-nam, 'Economie', [n-1]), ex_si(obtenues, vpp-ver:pper, obtenues, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(257, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(toucherait, v-ver:impf, toucherait, [dr(0,dl(0,np,s),np)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(impôts, nc-nom, impôts, [n-1]), ex_si(indirects, adj-adj, indirects, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(carburants, nc-nom, carburants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(258, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(établi, vpp-ver:pper, établi, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(bénéficie, v-ver:pres, bénéficie, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(touche, v-ver:pres, touche, [dr(0,dl(0,np,s),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(remise, nc-nom, remise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(centimes, nc-nom, centimes, [n-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pompe, nc-nom, pompe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(atténuer, vinf-ver:infi, atténuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(flambée, nc-nom, flambée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(259, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(profite, v-ver:pres, profite, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(drastique, adj-adj, drastique, [dl(0,n,n)-1]), ex_si(récente, adj-adj, récente, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pompe, nc-nom, pompe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(260, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(litre, nc-nom, litre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gazole, nc-nom, gazole, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(carburant, nc-nom, carburant, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(quarts, nc-nom, quarts, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(achats, nc-nom, achats, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pompe, nc-nom, pompe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coûté, vpp-ver:pper, coûté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si('2,13', det-num, '2,13', [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(consommateur, nc-nom, consommateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(261, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(somme, nc-nom, somme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(61, det-num, 61, [dr(0,np,n)-1]), ex_si(centimes, nc-nom, centimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('TICPE', nc-abr, 'TICPE', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(35, det-num, 35, [dr(0,np,n)-1]), ex_si(centimes, nc-nom, centimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('TVA', nc-abr, 'TVA', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(taxes, nc-nom, taxes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(96, det-num, 96, [dr(0,np,n)-1]), ex_si(centimes, nc-nom, centimes, [n-1]), ex_si('--et', p+d-sym, '--et', [let-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,np,np),np)-1]), ex_si('1,29', det-num, '1,29', [dr(0,np,np)-1]), ex_si(euro, nc-nom, euro, [dr(0,np,n)-1]), ex_si(comme, cs-kon, comme, [n-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,n,n),s)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(les, det-det:art, les, [dr(0,dr(0,s,np),np)-1]), ex_si(publications, nc-nom, publications, [dr(0,np,n)-1]), ex_si('-', ponct-pun, '-', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(sont, v-ver:pres, sont, [let-1]), ex_si(arrivés, vpp-ver:pper, arrivés, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectivement, adv-adv, effectivement, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,pp,np)-1]), ex_si(caisses, nc-nom, caisses, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Etat', nc-nam, 'Etat', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(262, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(somme, nc-nom, somme, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(45, det-num, 45, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(total, adj-adj, total, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(263, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(consommateurs, nc-nom, consommateurs, [n-1]), ex_si(verront, v-ver:futu, verront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(plein, nc-adj, plein, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(essence, nc-nom, essence, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(taxes, nc-nom, taxes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(atterriront, v-ver:futu, atterriront, [dl(0,np,s)-1]), ex_si(directement, adv-adv, directement, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(caisses, nc-nom, caisses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(1,s,s),np)-1]), ex_si('1,29€', det-num, '1,29€', [dr(0,np,n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si(1, det-num, 1, [dr(0,dl(0,np,np),np)-1]), ex_si(litre, nc-nom, litre, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si('2,15€', pro-num, '2,15€', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(264, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(limité, vpp-ver:pper, limité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(marchandises, nc-nom, marchandises, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enclave, nc-nom, enclave, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(265, Result) :-
      prob_parse([ ex_si('Toutefois', adv-adv, 'Toutefois', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheminer, vinf-ver:infi, acheminer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(marchandises, nc-nom, marchandises, [n-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(enclave, nc-nom, enclave, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(ports, nc-nom, ports, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(266, Result) :-
      prob_parse([ ex_si('L\'acte', nc-nom, 'L\'acte', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(oeuvre, nc-nom, oeuvre, [dr(0,pp,n)-1]), ex_si(des, det-prp:det, des, [n-1]), ex_si(restrictions, nc-nom, restrictions, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(circulation, nc-nom, circulation, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(produits, nc-nom, produits, [dr(0,dl(0,n,n),n)-1]), ex_si(russes, adj-adj, russes, [n-1]), ex_si(revient, v-ver:pres, revient, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si('Moscou', npp-nam, 'Moscou', [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [np-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(blocus, nc-nom, blocus, [let-1]), ex_si(total, adj-adj, total, [n-1]), ex_si(illégal, adj-adj, illégal, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(le, clo-pro:per, le, [let-1]), ex_si(privant, vpr-ver:ppre, privant, [dr(0,dl(0,n,n),dr(0,dl(0,n,n),dia(1,box(1,np))))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dr(0,dl(0,n,n),pp_de),np)-1]), ex_si(accès, nc-nom, accès, [dr(0,pp_de,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,n,n),np)-1]), ex_si(partie, nc-nom, partie, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(son, det-det:pos, son, [dr(0,dl(0,n,n),np)-1]), ex_si(territoire, nc-nom, territoire, [dr(0,np,n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(267, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(tenue, vpp-ver:pper, tenue, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(appliquer, vinf-ver:infi, appliquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si(décidées, vpp-ver:pper, décidées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Vingt-Sept', npp-nam, 'Vingt-Sept', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(place, nc-nom, place, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('porte-à-faux', nc-nom, 'porte-à-faux', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(268, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retrouve, v-ver:pres, retrouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(contradiction, nc-nom, contradiction, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(obligations, nc-nom, obligations, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(découlent, v-ver:pres, découlent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('vis-à-vis', p-prp, 'vis-à-vis', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(décisions, nc-nom, décisions, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prises, vpp-ver:pper, prises, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(institutions, nc-nom, institutions, [n-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(donc, adv-adv, donc, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(269, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(respecte, v-ver:pres, respecte, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(échéant, vpr-ver:ppre, échéant, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(saisir, vinf-ver:infi, saisir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dr(0,dl(0,np,s),np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('\'', ponct-pun:cit, '\'', [n-1]), ex_si(recours, nc-nom, recours, [dr(0,dl(0,n,n),n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si('manquement\'', nc-nom, 'manquement\'', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(là, adv-adv, là, [dr(0,s,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(jugée, vpp-ver:pper, jugée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(270, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(juridiction, nc-nom, juridiction, [n-1]), ex_si(compétente, adj-adj, compétente, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(271, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(répondu, vpp-ver:pper, répondu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dilemme, nc-nom, dilemme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(prenant, vpr-ver:ppre, prenant, [dr(0,dr(0,dl(0,np,s_ppres),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(risques, nc-nom, risques, [n-1]), ex_si(juridiques, adj-adj, juridiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(forts, adj-adj, forts, [dl(0,n,n)-1]), ex_si(venant, vpr-ver:ppre, venant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(considérations, nc-nom, considérations, [n-1]), ex_si(géopolitiques, adj-adj, géopolitiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(272, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(diplomatie, nc-nom, diplomatie, [n-1]), ex_si(lituanienne, adj-adj, lituanienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Gabrielius', npp-nam, 'Gabrielius', [dr(0,np,np)-1]), ex_si('Landsbergis', npp-nam, 'Landsbergis', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenu, vpp-ver:pper, tenu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rappeler, vinf-ver:infi, rappeler, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(déplacement, nc-nom, déplacement, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Luxembourg', npp-nam, 'Luxembourg', [dr(0,s_q,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(seuls, adv-adv, seuls, [let-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(biens, nc-nom, biens, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(autorisés, vpp-ver:pper, autorisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(transiter, vinf-ver:infi, transiter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(273, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(biens, nc-nom, biens, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(double, adj-adj, double, [dr(0,n,n)-1]), ex_si(usage, nc-nom, usage, [n-1]), ex_si(sanctionnés, vpp-ver:pper, sanctionnés, [dl(0,n,n)-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(274, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(enclave, nc-nom, enclave, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(mille, det-num, mille, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('avant-poste', nc-nom, 'avant-poste', [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(hautement, adv-adv, hautement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(stratégique, adj-adj, stratégique, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(275, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(flotte, nc-nom, flotte, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Baltique', npp-nam, 'Baltique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(276, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(enclave, nc-nom, enclave, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(mille, det-num, mille, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('avant-poste', nc-nom, 'avant-poste', [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(hautement, adv-adv, hautement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(stratégique, adj-adj, stratégique, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(277, Result) :-
      prob_parse([ ex_si('Face', nc-nom, 'Face', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expansion, nc-nom, expansion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(musclé, vpp-ver:pper, musclé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(organisant, vpr-ver:ppre, organisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(importantes, adj-adj, importantes, [dr(0,n,n)-1]), ex_si(manoeuvres, nc-nom, manoeuvres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(278, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(légale, adj-adj, légale, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(empêcher, vinf-ver:infi, empêcher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(possibles, adj-adj, possibles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contournement, nc-nom, contournement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(restrictives, adj-adj, restrictives, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(souligne, v-ver:pres, souligne, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(279, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(nécessaires, adj-adj, nécessaires, [dl(0,n,n)-1]), ex_si(prévues, vpp-ver:pper, prévues, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(échéant, vpr-ver:ppre, échéant, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(refus, nc-nom, refus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(détention, nc-nom, détention, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(marchandises, nc-nom, marchandises, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(violation, nc-nom, violation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(règlements, nc-nom, règlements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(280, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(insisté, vpp-ver:pper, insisté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(13, adj-num, 13, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(routier, adj-adj, routier, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(opérateurs, nc-nom, opérateurs, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marchandises, nc-nom, marchandises, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(281, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(282, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(forcé, vpp-ver:pper, forcé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(adopter, vinf-ver:infi, adopter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si(décidées, vpp-ver:pper, décidées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(283, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(engagée, vpp-ver:pper, engagée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(large, adj-adj, large, [dr(0,n,n)-1]), ex_si(passage, nc-nom, passage, [n-1]), ex_si(libre, adj-adj, libre, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(signant, vpr-ver:ppre, signant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1993, adj-num, 1993, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(concernait, v-ver:impf, concernait, [dr(0,dl(0,np,s),np)-1]), ex_si(essentiellement, adv-adv, essentiellement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(route, nc-nom, route, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(biens, nc-nom, biens, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(permis, nc-nom, permis, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(284, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(prises, vpp-ver:pper, prises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(limitant, vpr-ver:ppre, limitant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(violent, v-ver:pres, violent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(précédemment, adv-adv, précédemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(conclu, vpp-ver:pper, conclu, [dr(0,dl(0,n,n),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(elles, pro-pro:per, elles, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(285, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(continuent, v-ver:pres, continuent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(donc, cc-adv, donc, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('\'', ponct-pun:cit, '\'', [n-1]), ex_si('blocus\'', nc-nom, 'blocus\'', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(1,s,s),np)-1]), ex_si(ainsi, adv-adv, ainsi, [dr(0,np,np)-1]), ex_si('Jean-Dominique', npp-nam, 'Jean-Dominique', [dr(0,np,np)-1]), ex_si('Giuliani', npp-nam, 'Giuliani', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(286, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(estimé, vpp-ver:pper, estimé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(blocus, nc-nom, blocus, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si('vis-à-vis', p-prp, 'vis-à-vis', [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(287, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Anhalt-Bitterfeld', npp-nam, 'Anhalt-Bitterfeld', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wulfen', npp-nam, 'Wulfen', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si('Saxe-Anhalt', npp-nam, 'Saxe-Anhalt', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signalé, vpp-ver:pper, signalé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),np)-1]), ex_si(date, nc-nom, date, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(10, adj-num, 10, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dl(0,n,n)-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(ici, adv-adv, ici, [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(ici, adv-adv, ici, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(288, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Saxe-Anhalt', npp-nam, 'Saxe-Anhalt', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déroulé, vpp-ver:pper, déroulé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(connaissance, nc-nom, connaissance, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tel, adj-adj, tel, [dr(0,n,n)-1]), ex_si(départ, nc-nom, départ, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(réfugiés, nc-nom, réfugiés, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(289, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Anhalt-Bitterfeld', npp-nam, 'Anhalt-Bitterfeld', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wulfen', npp-nam, 'Wulfen', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si('Saxe-Anhalt', npp-nam, 'Saxe-Anhalt', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signalé, vpp-ver:pper, signalé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),np)-1]), ex_si(date, nc-nom, date, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(10, adj-num, 10, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(290, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(essayant, vpr-ver:ppre, essayant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(brûler, vinf-ver:infi, brûler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(réfugiés, nc-nom, réfugiés, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(brûlent, v-ver:pres, brûlent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Wulfen', npp-nam, 'Wulfen', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(291, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(allemande, nc-nom, allemande, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accablée, vpp-ver:pper, accablée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(destruction, nc-nom, destruction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(292, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si(envoie, v-ver:pres, envoie, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chars, nc-nom, chars, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(montrés, vpp-ver:pper, montrés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(transportés, vpp-ver:pper, transportés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(293, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(transporte, v-ver:pres, transporte, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chars, nc-nom, chars, [n-1]), ex_si(finlandais, adj-adj, finlandais, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dirige, v-ver:pres, dirige, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouest, nc-nom, ouest, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opposé, nc-nom, opposé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(294, Result) :-
      prob_parse([ ex_si('Arrow', npp-nam, 'Arrow', [np-1]), ex_si(22, pro-num, 22, [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(exercice, nc-nom, exercice, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si(prévu, vpp-ver:pper, prévu, [dl(0,n,n)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(295, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(réunit, v-ver:pres, réunit, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Estonie', npp-nam, 'Estonie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déroule, v-ver:pres, déroule, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouest, nc-nom, ouest, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(296, Result) :-
      prob_parse([ ex_si('Arrow', npp-nam, 'Arrow', [np-1]), ex_si(22, pro-num, 22, [dl(0,np,np)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(297, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(drone, nc-nom, drone, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(endommagées, vpp-ver:pper, endommagées, [dl(0,n,n)-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(découverts, vpp-ver:pper, découverts, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(là, adv-adv, là, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(occupation, nc-nom, occupation, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(298, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(découverts, vpp-ver:pper, découverts, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(299, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(renversés, vpp-ver:pper, renversés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(endommagés, vpp-ver:pper, endommagés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(33, adj-num, 33, [dr(0,n,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si('Centrale', npp-nam, 'Centrale', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(résultat, nc-nom, résultat, [np-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(collisions, nc-nom, collisions, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bombardement, nc-nom, bombardement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fenêtres, nc-nom, fenêtres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(immeubles, nc-nom, immeubles, [n-1]), ex_si(autour, adv-adv, autour, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(intactes, adj-adj, intactes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(300, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(33, adj-num, 33, [dr(0,n,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si('Centrale', npp-nam, 'Centrale', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(renversées, vpp-ver:pper, renversées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(équipements, nc-nom, équipements, [n-1]), ex_si(lourds, adj-adj, lourds, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bombes, nc-nom, bombes, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(301, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(internaute, nc-nom, internaute, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(noté, vpp-ver:pper, noté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(grosse, adj-adj, grosse, [dr(0,n,n)-1]), ex_si(rayure, nc-nom, rayure, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(orange, adj-adj, orange, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(renversée, vpp-ver:pper, renversée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(blindé, adj-adj, blindé, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), ex_si(chose, nc-nom, chose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(302, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(renversés, vpp-ver:pper, renversés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(endommagés, vpp-ver:pper, endommagés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(33, adj-num, 33, [dr(0,n,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si('Centrale', npp-nam, 'Centrale', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(résultat, nc-nom, résultat, [np-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(collisions, nc-nom, collisions, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bombardement, nc-nom, bombardement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fenêtres, nc-nom, fenêtres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(immeubles, nc-nom, immeubles, [n-1]), ex_si(autour, adv-adv, autour, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(intactes, adj-adj, intactes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(303, Result) :-
      prob_parse([ ex_si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), ex_si('Trusz', npp-nam, 'Trusz', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(appartement, nc-nom, appartement, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('4ème', adj-num, '4ème', [dr(0,n,n)-1]), ex_si(étage, nc-nom, étage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(traces, nc-nom, traces, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(bâtiment, nc-nom, bâtiment, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(304, Result) :-
      prob_parse([ ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ai, v-ver:pres, ai, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vues, vpp-ver:pper, vues, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si('m\'', clr-pro:per, 'm\'', [cl_r-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,cl_r,dl(0,np,s)),dia(1,box(1,pp_a))))-1]), ex_si(suis, v-ver:pres, suis, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendue, vpp-ver:pper, rendue, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(305, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(douzaine, nc-num, douzaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décrit, vpp-ver:pper, décrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(meurtres, nc-nom, meurtres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(actes, nc-nom, actes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intimidation, nc-nom, intimidation, [n-1]), ex_si(présumés, adj-adj, présumés, [dl(0,n,n)-1]), ex_si(commis, vpp-ver:pper, commis, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(occupaient, v-ver:impf, occupaient, [dr(0,dl(0,np,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(appartements, nc-nom, appartements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(306, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dormi, vpp-ver:pper, dormi, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(mon, det-det:pos, mon, [dr(0,np,n)-1]), ex_si(appartement, nc-nom, appartement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(bu, vpp-ver:pper, bu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alcool, nc-nom, alcool, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mes, det-det:pos, mes, [dr(0,np,n)-1]), ex_si(installations, nc-nom, installations, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(307, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(occuper, vinf-ver:infi, occuper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(appartements, nc-nom, appartements, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(désigné, vpp-ver:pper, désigné, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(tout, adv-pro:ind, tout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(détruit, vpp-ver:pper, détruit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(308, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(douzaine, nc-num, douzaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décrit, vpp-ver:pper, décrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(meurtres, nc-nom, meurtres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(actes, nc-nom, actes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intimidation, nc-nom, intimidation, [n-1]), ex_si(présumés, adj-adj, présumés, [dl(0,n,n)-1]), ex_si(commis, vpp-ver:pper, commis, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(occupaient, v-ver:impf, occupaient, [dr(0,dl(0,np,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(appartements, nc-nom, appartements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(309, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dormi, vpp-ver:pper, dormi, [dl(0,np,s_ppart)-1]), ex_si(là, adv-adv, là, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(bu, vpp-ver:pper, bu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alcool, nc-nom, alcool, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mes, det-det:pos, mes, [dr(0,np,n)-1]), ex_si(installations, nc-nom, installations, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(310, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(bâtiment, nc-nom, bâtiment, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(quartiers, nc-nom, quartiers, [n-1]), ex_si(généraux, adj-adj, généraux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(destructions, nc-nom, destructions, [n-1]), ex_si(importantes, adj-adj, importantes, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marques, nc-nom, marques, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(boue, nc-nom, boue, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(renversées, vpp-ver:pper, renversées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(311, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(dons, nc-nom, dons, [n-1]), ex_si(allemands, adj-adj, allemands, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(abandonnés, vpp-ver:pper, abandonnés, [dl(0,np,s_pass)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(franchir, vinf-ver:infi, franchir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(312, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(livraisons, nc-nom, livraisons, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(humanitaire, adj-adj, humanitaire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(organisées, vpp-ver:pper, organisées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('ONG', nc-abr, 'ONG', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(313, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fournitures, nc-nom, fournitures, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(inconnue, adj-adj, inconnue, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(filmées, vpp-ver:pper, filmées, [dl(0,np,s_pass)-1]), ex_si(traînées, nc-nom, traînées, [dl(0,np,s_pass)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si('polono-ukrainienne', adj-adj, 'polono-ukrainienne', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(humanitaire, adj-adj, humanitaire, [dl(0,n,n)-1]), ex_si(transmise, vpp-ver:pper, transmise, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(biais, nc-nom, biais, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(associations, nc-nom, associations, [n-1]), ex_si(spécialisées, vpp-ver:pper, spécialisées, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(parvenue, vpp-ver:pper, parvenue, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(confirment, v-ver:pres, confirment, [dr(0,dr(0,s,np),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si('ONG', nc-abr, 'ONG', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(314, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(obstacle, nc-nom, obstacle, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si('polono-ukrainienne', adj-adj, 'polono-ukrainienne', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('ONG', nc-abr, 'ONG', [n-1]), ex_si(allemandes, adj-adj, allemandes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(315, Result) :-
      prob_parse([ ex_si('Halima', npp-nam, 'Halima', [dr(0,np,np)-1]), ex_si('Ait', npp-nam, 'Ait', [dr(0,np,np)-1]), ex_si('Lasri', npp-nam, 'Lasri', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approvisionnement, nc-nom, approvisionnement, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('MSF', npp-nam, 'MSF', [np-1]), ex_si(détaille, v-ver:pres, détaille, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(difficultés, nc-nom, difficultés, [n-1]), ex_si(anecdotiques, adj-adj, anecdotiques, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(douaniers, nc-nom, douaniers, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(osent, v-ver:pres, osent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(absence, nc-nom, absence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(supérieur, nc-nom, supérieur, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(obstacle, nc-nom, obstacle, [n-1]), ex_si(bureaucratique, adj-adj, bureaucratique, [dl(0,n,n)-1]), ex_si(particulier, adj-adj, particulier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(316, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(reporter, nc-nom, reporter, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Rico', npp-nam, 'Rico', [dr(0,np,np)-1]), ex_si('Löb', npp-nam, 'Löb', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(précise, v-ver:pres, précise, [dr(0,dl(0,np,s),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(obstacles, nc-nom, obstacles, [n-1]), ex_si(bureaucratiques, adj-adj, bureaucratiques, [dl(0,n,n)-1]), ex_si(dissuadant, vpr-ver:ppre, dissuadant, [dr(0,dl(0,n,n),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(amène, v-ver:pres, amène, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(derniers, nc-nom, derniers, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(décharger, vinf-ver:infi, décharger, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(abandonnées, vpp-ver:pper, abandonnées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(317, Result) :-
      prob_parse([ ex_si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), ex_si(livraisons, nc-nom, livraisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fournitures, nc-nom, fournitures, [n-1]), ex_si(organisées, vpp-ver:pper, organisées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(particuliers, nc-nom, particuliers, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(conformes, adj-adj, conformes, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(transmis, vpp-ver:pper, transmis, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('ONG', nc-abr, 'ONG', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(déconseillé, vpp-ver:pper, déconseillé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(particuliers, nc-nom, particuliers, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(organiser, vinf-ver:infi, organiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(livraisons, nc-nom, livraisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dons, nc-nom, dons, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(318, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(convois, nc-nom, convois, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(organisés, vpp-ver:pper, organisés, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(idéale, adj-adj, idéale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(manque, nc-nom, manque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(documentation, nc-nom, documentation, [n-1]), ex_si(manquante, adj-adj, manquante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(319, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(livrons, v-ver:futu, livrons, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(équipements, nc-nom, équipements, [n-1]), ex_si(conséquents, adj-adj, conséquents, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si('Milan', npp-nam, 'Milan', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(antichars, adj-adj, antichars, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Caesar', npp-nam, 'Caesar', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(camions, nc-nom, camions, [n-1]), ex_si(équipés, vpp-ver:pper, équipés, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(artillerie, nc-nom, artillerie, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(passant, vpr-ver:ppre, passant, [dr(0,dl(0,np,s_ppres),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(types, nc-nom, types, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armements, nc-nom, armements, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Ouest-France', npp-nam, 'Ouest-France', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(320, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(321, Result) :-
      prob_parse([ ex_si('Ni', cc-kon, 'Ni', [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fournissent, v-ver:pres, fournissent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(équipements, nc-nom, équipements, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(322, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si(plein, adj-adj, plein, [dr(0,n,n)-1]), ex_si('entre-deux-tours', nc-nom, 'entre-deux-tours', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(sortant, vpr-ver:ppre, sortant, [dl(0,n,n)-1]), ex_si('Petro', npp-nam, 'Petro', [dl(0,n,n)-1]), ex_si('Porochenko', npp-nam, 'Porochenko', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(consommait, v-ver:impf, consommait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(drogue, nc-nom, drogue, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(323, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(foulée, nc-nom, foulée, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dépistage, nc-nom, dépistage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(retransmis, vpp-ver:pper, retransmis, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(direct, nc-nom, direct, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(finir, vinf-ver:infi, finir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(rumeur, nc-nom, rumeur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(324, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(325, Result) :-
      prob_parse([ ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(cocaïnomane, adj-adj, cocaïnomane, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dr(0,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(ministres, nc-nom, ministres, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(clique, nc-nom, clique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(toxicomanes, nc-nom, toxicomanes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(néonazis, nc-nom, néonazis, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(326, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('sniffe[r]', ponct-pun, 'sniffe[r]', [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),np)-1]), ex_si(du, det-prp:det, du, [np-1]), ex_si(café, nc-nom, café, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parce, adv-kon, parce, [dr(0,np,n)-1]), ex_si(que, cs-kon, que, [n-1]), ex_si(je, cls-pro:per, je, [dr(0,dl(1,s,s),s_q)-1]), ex_si(suis, v-ver:pres, suis, [dr(0,s_q,s)-1]), ex_si(vraiment, adv-adv, vraiment, [np-1]), ex_si(accro, vpp-ver:pper, accro, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(café, nc-nom, café, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,n,n),pp_a)-1])], Result).
sent(327, Result) :-
      prob_parse([ ex_si('J\'', cls-pro:per, 'J\'', [np-1]), ex_si(aime, v-ver:pres, aime, [dr(0,dl(0,np,s),np)-1]), ex_si(vraiment, adv-adv, vraiment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(café, nc-nom, café, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(tout, adv-adv, tout, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(me, clr-pro:per, me, [cl_r-1]), ex_si(drogue, v-ver:pres, drogue, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(328, Result) :-
      prob_parse([ ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(toxicomane, adj-adj, toxicomane, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(329, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Oleg', npp-nam, 'Oleg', [dr(0,np,np)-1]), ex_si('Kuzminykh', npp-nam, 'Kuzminykh', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('lieutenant-colonel', nc-nom, 'lieutenant-colonel', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('81e', adj-num, '81e', [dr(0,n,n)-1]), ex_si(brigade, nc-nom, brigade, [n-1]), ex_si(aéroportée, adj-adj, aéroportée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(capturé, vpp-ver:pper, capturé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(foule, nc-nom, foule, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Donestk', npp-nam, 'Donestk', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(330, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(régiment, nc-nom, régiment, [n-1]), ex_si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Denis', npp-nam, 'Denis', [dr(0,np,np)-1]), ex_si('Prokopenko', npp-nam, 'Prokopenko', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(331, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Oleg', npp-nam, 'Oleg', [dr(0,np,np)-1]), ex_si('Kuzminykh', npp-nam, 'Kuzminykh', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('Telegram', npp-nam, 'Telegram', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('Twitter', npp-nam, 'Twitter', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Azov', npp-nam, 'Azov', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(résultat, nc-nom, résultat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(332, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Oleg', npp-nam, 'Oleg', [dr(0,np,np)-1]), ex_si('Kuzminykh', npp-nam, 'Kuzminykh', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('lieutenant-colonel', nc-nom, 'lieutenant-colonel', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('81e', adj-num, '81e', [dr(0,n,n)-1]), ex_si(brigade, nc-nom, brigade, [n-1]), ex_si(aéroportée, adj-adj, aéroportée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(capturé, vpp-ver:pper, capturé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(foule, nc-nom, foule, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Donestk', npp-nam, 'Donestk', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(333, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(régiment, nc-nom, régiment, [n-1]), ex_si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Denis', npp-nam, 'Denis', [dr(0,np,np)-1]), ex_si('Prokopenko', npp-nam, 'Prokopenko', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(334, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Oleg', npp-nam, 'Oleg', [dr(0,np,np)-1]), ex_si('Kuzminykh', npp-nam, 'Kuzminykh', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(335, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(trace, nc-nom, trace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(message, nc-nom, message, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Azov', npp-nam, 'Azov', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(capturé, vpp-ver:pper, capturé, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(336, Result) :-
      prob_parse([ ex_si('Ramzan', npp-nam, 'Ramzan', [dr(0,np,np)-1]), ex_si('Kadyrov', npp-nam, 'Kadyrov', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Kremlin', npp-nam, 'Kremlin', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(messages, nc-nom, messages, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si('Telegram', npp-nam, 'Telegram', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrestation, nc-nom, arrestation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Azov', npp-nam, 'Azov', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(337, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(mène, v-ver:pres, mène, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Roman', npp-nam, 'Roman', [dr(0,np,np)-1]), ex_si('Kravets', npp-nam, 'Kravets', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(demandait, v-ver:impf, demandait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(consommait, v-ver:impf, consommait, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cocaïne, nc-nom, cocaïne, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(338, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(rétorque, v-ver:pres, rétorque, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(alors, adv-adv, alors, [dl(1,s,s)-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(suis, v-ver:pres, suis, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(assis, vpp-ver:pper, assis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), ex_si(chose, nc-nom, chose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaise, nc-nom, chaise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(339, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coke, nc-nom, coke, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(340, Result) :-
      prob_parse([ ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(consomme, v-ver:pres, consomme, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(341, Result) :-
      prob_parse([ ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(avoue, v-ver:pres, avoue, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(junkie, nc-nom, junkie, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(carbure, v-ver:pres, carbure, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cocaïne, nc-nom, cocaïne, [n-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(les, det-det:art, les, [dr(0,dl(1,s,s),n)-1]), ex_si(matins, nc-nom, matins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(342, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('BBC', npp-abr, 'BBC', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tweet, nc-nom, tweet, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(certifié, vpp-ver:pper, certifié, [dl(0,n,n)-1]), ex_si(alertant, vpr-ver:ppre, alertant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(utilisant, vpr-ver:ppre, utilisant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(charte, nc-nom, charte, [n-1]), ex_si(graphique, adj-adj, graphique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('BBC', npp-abr, 'BBC', [dr(0,np,np)-1]), ex_si('News', npp-nam, 'News', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(relayant, vpr-ver:ppre, relayant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attribution, nc-nom, attribution, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kramatorsk', npp-nam, 'Kramatorsk', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(fausse, adj-adj, fausse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(343, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('BBC', npp-abr, 'BBC', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(désigné, vpp-ver:pper, désigné, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kramatorsk', npp-nam, 'Kramatorsk', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(344, Result) :-
      prob_parse([ ex_si('L\'attaque', nc-nom, 'L\'attaque', [dr(0,np,n)-1]), ex_si(contre, p-prp, contre, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(gare, nc-nom, gare, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Kramatorsk', npp-nam, 'Kramatorsk', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(dans, p-prp, dans, [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(est, nc-nom, est, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(qui, prorel-pro:rel, qui, [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,np,np),n)-1]), ex_si(57, det-num, 57, [n-1]), ex_si(personnes, nc-nom, personnes, [dr(0,np,n)-1]), ex_si(dont, prorel-pro:rel, dont, [n-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(0,n,n),np)-1]), ex_si(enfants, nc-nom, enfants, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(est, v-ver:pres, est, [let-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(un, det-det:art, un, [dr(0,pp_a,np)-1]), ex_si(missile, nc-nom, missile, [dr(0,np,n)-1]), ex_si(russe, adj-adj, russe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(345, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('10H30', pro-num, '10H30', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(346, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parvis, nc-nom, parvis, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(restes, nc-nom, restes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(visibles, adj-adj, visibles, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(lire, vinf-ver:infi, lire, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(russe, nc-nom, russe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Pour', p-prp, 'Pour', [dr(0,dl(1,s,s),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(347, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(numéro, nc-nom, numéro, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('Tochka-U', npp-nam, 'Tochka-U', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kramatorsk', npp-nam, 'Kramatorsk', [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,np,n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(57, det-num, 57, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(confirme, v-ver:pres, confirme, [dr(0,s_q,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [np-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(348, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(départ, nc-nom, départ, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(tirent, v-ver:pres, tirent, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(filins, nc-nom, filins, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(piégés, vpp-ver:pper, piégés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(explosifs, nc-nom, explosifs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(349, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(progressent, v-ver:pres, progressent, [dl(0,np,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(prudence, nc-nom, prudence, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(reprendre, vinf-ver:infi, reprendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si('[Kiev]', ponct-pun, '[Kiev]', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(en, p-prp, en, [let-1]), ex_si(recourant, vpr-ver:ppre, recourant, [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si(cordes, nc-nom, cordes, [dr(0,pp_a,np)-1]), ex_si(pour, p-prp, pour, [dr(0,np,n)-1]), ex_si(extirper, vinf-ver:infi, extirper, [n-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rues, nc-nom, rues, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(crainte, nc-nom, crainte, [let-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),n)-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(forces, nc-nom, forces, [dr(0,dl(0,n,n),s)-1]), ex_si(russes, adj-adj, russes, [dr(0,np,n)-1]), ex_si(ne, adv-adv, ne, [n-1]), ex_si(les, clo-pro:per, les, [dl(0,n,n)-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(piégés, vpp-ver:pper, piégés, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1])], Result).
sent(350, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(départ, nc-nom, départ, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(tirent, v-ver:pres, tirent, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(filins, nc-nom, filins, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(piégés, vpp-ver:pper, piégés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(explosifs, nc-nom, explosifs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(351, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(étale, v-ver:pres, étale, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(352, Result) :-
      prob_parse([ ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(massacre, nc-nom, massacre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(fake, nc-nom, fake, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', npp-nam, 'Défense', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(auparavant, adv-adv, auparavant, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(nié, vpp-ver:pper, nié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(implication, nc-nom, implication, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(353, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(exactions, nc-nom, exactions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(commises, vpp-ver:pper, commises, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(relèvent, v-ver:pres, relèvent, [dr(0,dl(0,np,s),pp)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(354, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(analyses, nc-nom, analyses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(satellites, adj-adj, satellites, [dl(0,n,n)-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,np,dia(0,box(0,n))),dr(0,np,n)),dr(0,np,dia(0,box(0,n))))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(18, adj-num, 18, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(allongées, vpp-ver:pper, allongées, [dl(0,np,s_pass)-1]), ex_si(là, adv-adv, là, [np-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(355, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(indices, nc-nom, indices, [n-1]), ex_si(crédibles, adj-adj, crédibles, [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(inclus, vpp-ver:pper, inclus, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présentes, vpp-ver:pper, présentes, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(356, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(prétendument, adv-adv, prétendument, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(découverts, vpp-ver:pper, découverts, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(urkainienne, adj-adj, urkainienne, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boucha', npp-nam, 'Boucha', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,np,np),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(figurants, nc-nom, figurants, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(recrutés, vpp-ver:pper, recrutés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(préparés, vpp-ver:pper, préparés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(357, Result) :-
      prob_parse([ ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(assommé, vpp-ver:pper, assommé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abolition, nc-nom, abolition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(358, Result) :-
      prob_parse([ ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(abolir, vinf-ver:infi, abolir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(telles, adj-adj, telles, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(lui, clo-pro:per, lui, [np-1]), ex_si(seul, adj-adj, seul, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(359, Result) :-
      prob_parse([ ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(assommé, vpp-ver:pper, assommé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abolition, nc-nom, abolition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(360, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abolition, nc-nom, abolition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ambassadeur, nc-nom, ambassadeur, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(361, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ambassadeur, nc-nom, ambassadeur, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),pp)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(362, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(charte, nc-nom, charte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(exclure, vinf-ver:infi, exclure, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,dr(0,np,np),dr(0,np,np))-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(dissoute, vpp-ver:pper, dissoute, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(membre, nc-nom, membre, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, nc-nom, dernier, [n-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(véto, nc-nom, véto, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(363, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(suspension, nc-nom, suspension, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(dissolution, nc-nom, dissolution, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(expulsion, nc-nom, expulsion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévues, vpp-ver:pper, prévues, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(charte, nc-nom, charte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(364, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Russe', adj-adj, 'Russe', [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abolition, nc-nom, abolition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(365, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(active, adj-adj, active, [dl(0,n,n)-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(prouve, v-ver:pres, prouve, [dr(0,dr(0,s,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(internet, nc-nom, internet, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(366, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(367, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Russe', adj-adj, 'Russe', [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abolition, nc-nom, abolition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(368, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(biens, nc-nom, biens, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(notamment, adv-adv, notamment, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(confisqués, vpp-ver:pper, confisqués, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(369, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(représentation, nc-nom, représentation, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(bureaux, nc-nom, bureaux, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quelconque, adj-adj, quelconque, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(autre, adj-adj, autre, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(370, Result) :-
      prob_parse([ ex_si('Impossible', adv-adj, 'Impossible', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(donc, adv-adv, donc, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(confisquer, vinf-ver:infi, confisquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(biens, nc-nom, biens, [n-1]), ex_si(immobiliers, adj-adj, immobiliers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,dl(0,n,n),txt)-1])], Result).
sent(371, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', nc-nam, 'Homme', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fermées, vpp-ver:pper, fermées, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(372, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(systématiquement, adv-adv, systématiquement, [dl(1,s,s)-1]), ex_si(celles, pro-pro:dem, celles, [np-1]), ex_si(subventionnées, vpp-ver:pper, subventionnées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(souligne, v-ver:pres, souligne, [dr(0,dl(1,s,s),np)-1]), ex_si('Romuald', npp-nam, 'Romuald', [dr(0,np,np)-1]), ex_si('Sciora', npp-nam, 'Sciora', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(spécialiste, nc-nom, spécialiste, [n-1]), ex_si('franco-américain', adj-adj, 'franco-américain', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(373, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aboli, vpp-ver:pper, aboli, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(affiliées, adj-adj, affiliées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Américains', nc-nam, 'Américains', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(374, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(reluisante, vpp-ver:pper, reluisante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(375, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(dissidentes, adj-adj, dissidentes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(défenseurs, nc-nom, défenseurs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(détériorée, vpp-ver:pper, détériorée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(376, Result) :-
      prob_parse([ ex_si('ONG', nc-abr, 'ONG', [n-1]), ex_si(blacklistées, vpp-ver:pper, blacklistées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(marches, nc-nom, marches, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(protestations, nc-nom, protestations, [n-1]), ex_si(violemment, adv-adv, violemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(réprimées, vpp-ver:pper, réprimées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(opposants, nc-nom, opposants, [n-1]), ex_si(empoisonnés, vpp-ver:pper, empoisonnés, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(emprisonnés, vpp-ver:pper, emprisonnés, [dl(0,n,n)-1]), ex_si('...', ponct-pun, '...', [dl(0,n,txt)-1])], Result).
sent(377, Result) :-
      prob_parse([ ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vives, adj-adj, vives, [dr(0,n,n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(violation, nc-nom, violation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(bien, adv-adv, bien, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(378, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(denrées, nc-nom, denrées, [n-1]), ex_si(alimentaires, adj-adj, alimentaires, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(hauts, adj-adj, hauts, [dr(0,n,n)-1]), ex_si(niveaux, nc-nom, niveaux, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistrés, vpp-ver:pper, enregistrés, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(bouleversant, vpr-ver:ppre, bouleversant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alimentation, nc-nom, alimentation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('FAO', npp-abr, 'FAO', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(379, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(denrées, nc-nom, denrées, [n-1]), ex_si(alimentaires, adj-adj, alimentaires, [dl(0,n,n)-1]), ex_si(mondiales, adj-adj, mondiales, [dl(0,n,n)-1]), ex_si(explosent, v-ver:pres, explosent, [dl(0,np,s)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(380, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(adossé, vpp-ver:pper, adossé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rouble, nc-nom, rouble, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(381, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(uniquement, adv-adv, uniquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(courte, adj-adj, courte, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(établissements, nc-nom, établissements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crédit, nc-nom, crédit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(382, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(adosser, vinf-ver:infi, adosser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rouble, nc-nom, rouble, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(anéanti, vpp-ver:pper, anéanti, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dollar, nc-nom, dollar, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(383, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(instauré, vpp-ver:pper, instauré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('étalon-or', nc-nom, 'étalon-or', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(384, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(indiquait, v-ver:impf, indiquait, [dl(0,np,s)-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(uniquement, adv-adv, uniquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(courte, adj-adj, courte, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(établissements, nc-nom, établissements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crédit, nc-nom, crédit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(385, Result) :-
      prob_parse([ ex_si('Ça', pro-pro:dem, 'Ça', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(est, v-ver:pres, est, [dr(0,s,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lâché, vpp-ver:pper, lâché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(386, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Rouble', npp-nam, 'Rouble', [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(étalonné, vpp-ver:pper, étalonné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),n)-1]), ex_si(demain, adv-adv, demain, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(387, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(légende, nc-nom, légende, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(complot, nc-nom, complot, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(388, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pourtant, adv-adv, pourtant, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(instauré, vpp-ver:pper, instauré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('étalon-or', nc-nom, 'étalon-or', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(389, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(indiquait, v-ver:impf, indiquait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(vouloir, vinf-ver:infi, vouloir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(établissements, nc-nom, établissements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crédit, nc-nom, crédit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(390, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(achète, v-ver:pres, achète, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(adossée, vpp-ver:pper, adossée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(métal, nc-nom, métal, [n-1]), ex_si(précieux, adj-adj, précieux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(391, Result) :-
      prob_parse([ ex_si('L\'étalon-or', npp-nam, 'L\'étalon-or', [dr(0,np,n)-1]), ex_si(correspond, v-ver:pres, correspond, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), ex_si(un, det-det:art, un, [dr(0,pp_a,np)-1]), ex_si(système, nc-nom, système, [dr(0,np,n)-1]), ex_si(monétaire, adj-adj, monétaire, [n-1]), ex_si(dans, p-prp, dans, [dl(0,n,n)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,pp,np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [let-1]), ex_si(unité, nc-nom, unité, [dr(0,np,n)-1]), ex_si(monétaire, adj-adj, monétaire, [n-1]), ex_si(est, v-ver:pres, est, [dl(0,n,n)-1]), ex_si(définie, vpp-ver:pper, définie, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(en, p-prp, en, [dl(0,np,s_pass)-1]), ex_si(référence, nc-nom, référence, [dr(0,dl(1,s,s),n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), ex_si(poids, nc-nom, poids, [dr(0,np,n)-1]), ex_si(fixe, adj-adj, fixe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si(or, nc-nom, or, [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(392, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('étalon-or', nc-nom, 'étalon-or', [n-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(directement, adv-adv, directement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(poids, nc-nom, poids, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(défini, vpp-ver:pper, défini, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(393, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('étalon-or', nc-nom, 'étalon-or', [n-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(promet, v-ver:pres, promet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(devise, nc-nom, devise, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(céder, vinf-ver:infi, céder, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(394, Result) :-
      prob_parse([ ex_si('Ici', adv-adv, 'Ici', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(promet, v-ver:pres, promet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(simplement, adv-adv, simplement, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(395, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('étalon-or', nc-nom, 'étalon-or', [n-1]), ex_si(signifierait, v-ver:impf, signifierait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(chacun, pro-pro:ind, chacun, [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(échanger, vinf-ver:infi, échanger, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rouble, nc-nom, rouble, [n-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(fixé, vpp-ver:pper, fixé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(limite, nc-nom, limite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(396, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ici, adv-adv, ici, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(397, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(moyenne, adj-adj, moyenne, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(déstabiliser, vinf-ver:infi, déstabiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(durablement, adv-adv, durablement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(monétaire, adj-adj, monétaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(promettant, vpr-ver:ppre, promettant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(398, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déstabilisation, nc-nom, déstabilisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(monétaire, adj-adj, monétaire, [dl(0,n,n)-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(annonce, v-ver:pres, annonce, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('étalon-or', nc-nom, 'étalon-or', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(399, Result) :-
      prob_parse([ ex_si('Fin', nc-nom, 'Fin', [dr(0,dr(0,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(début, nc-nom, début, [dr(0,dr(0,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(paliers, nc-nom, paliers, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,n,n),pp)-1]), ex_si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(dollar, nc-nom, dollar, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(allant, vpr-ver:ppre, allant, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(140, det-num, 140, [dr(0,np,n)-1]), ex_si(roubles, nc-nom, roubles, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(dollar, nc-nom, dollar, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dl(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(400, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rouble, nc-nom, rouble, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(dollar, nc-nom, dollar, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(401, Result) :-
      prob_parse([ ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réglé, vpp-ver:pper, réglé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(roubles, nc-nom, roubles, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(dette, nc-nom, dette, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(402, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Finances', nc-nom, 'Finances', [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(réglé, vpp-ver:pper, réglé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(roubles, nc-nom, roubles, [n-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(650, det-num, 650, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(dus, vpp-ver:pper, dus, [dl(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(403, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(manipule, v-ver:pres, manipule, [dr(0,dl(0,np,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mannequin, nc-nom, mannequin, [n-1]), ex_si(recouvert, vpp-ver:pper, recouvert, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(scotch, nc-nom, scotch, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(filmée, vpp-ver:pper, filmée, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(tournage, nc-nom, tournage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(télévisée, vpp-ver:pper, télévisée, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(404, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(manipule, v-ver:pres, manipule, [dr(0,dl(0,np,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mannequin, nc-nom, mannequin, [n-1]), ex_si(recouvert, vpp-ver:pper, recouvert, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(scotch, nc-nom, scotch, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(405, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(préparer, vinf-ver:infi, préparer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cadavre, nc-nom, cadavre, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(enroulant, vpr-ver:ppre, enroulant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(bras, nc-nom, bras, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adhésif, nc-nom, adhésif, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(406, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(préparent, v-ver:pres, préparent, [dr(0,dl(0,np,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si(mises, vpp-ver:pper, mises, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(crier, vinf-ver:infi, crier, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si('tue-tête', nc-nom, 'tue-tête', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faute, nc-nom, faute, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(407, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tournage, nc-nom, tournage, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(télévisée, vpp-ver:pper, télévisée, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(séquence, nc-nom, séquence, [n-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chute, nc-nom, chute, [n-1]), ex_si(fatale, adj-adj, fatale, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(étages, nc-nom, étages, [n-1]), ex_si(supérieurs, adj-adj, supérieurs, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prévu, vpp-ver:pper, prévu, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Vsevolojsk', npp-nam, 'Vsevolojsk', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(408, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tournage, nc-nom, tournage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(télévisée, vpp-ver:pper, télévisée, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(409, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('lieutenant-général', nc-nom, 'lieutenant-général', [n-1]), ex_si('Roger', npp-nam, 'Roger', [dl(0,n,n)-1]), ex_si('L.', npp-abr, 'L.', [dl(0,n,n)-1]), ex_si('Cloutier', npp-nam, 'Cloutier', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(messages, nc-nom, messages, [n-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(témoignant, vpr-ver:ppre, témoignant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(loin, adv-adv, loin, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(front, nc-nom, front, [n-1]), ex_si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(410, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(général, adj-adj, général, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), ex_si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), ex_si('Cloutier', npp-nam, 'Cloutier', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvait, v-ver:impf, trouvait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(capturé, vpp-ver:pper, capturé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(assiégée, vpp-ver:pper, assiégée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(411, Result) :-
      prob_parse([ ex_si('Contacté', vpp-ver:pper, 'Contacté', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Grand', adj-adj, 'Grand', [dr(0,n,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(puissances, nc-nom, puissances, [n-1]), ex_si(alliées, adj-adj, alliées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('SHAPE', npp-nam, 'SHAPE', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fermement, adv-adv, fermement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(démenti, vpp-ver:pper, démenti, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capture, nc-nom, capture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('lieutenant-général', nc-nom, 'lieutenant-général', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(412, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(général, adj-adj, général, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), ex_si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), ex_si('Cloutier', npp-nam, 'Cloutier', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(capturé, vpp-ver:pper, capturé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(assiégée, vpp-ver:pper, assiégée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('?', ponct-pun, '?', [dl(0,np,txt)-1])], Result).
sent(413, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(commande, v-ver:pres, commande, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(terrestres, adj-adj, terrestres, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(affirmation, nc-nom, affirmation, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(complètement, adv-adv, complètement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fausse, adj-adj, fausse, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(414, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Lieutenant', nc-nom, 'Lieutenant', [n-1]), ex_si('Général', nc-adj, 'Général', [dl(0,n,n)-1]), ex_si('Roger', npp-nam, 'Roger', [dl(0,n,n)-1]), ex_si('Cloutier', npp-nam, 'Cloutier', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(alliées, adj-adj, alliées, [dl(0,n,n)-1]), ex_si(terrestres, adj-adj, terrestres, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(capturé, vpp-ver:pper, capturé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(pleine, adj-adj, pleine, [dr(0,n,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(spécifiquement, adv-adv, spécifiquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(415, Result) :-
      prob_parse([ ex_si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), ex_si('Cloutier', npp-nam, 'Cloutier', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Izmir', npp-nam, 'Izmir', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Commandement', nc-nam, 'Commandement', [n-1]), ex_si(allié, adj-adj, allié, [dl(0,n,n)-1]), ex_si('Opérations', npp-nam, 'Opérations', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si('ACO', npp-abr, 'ACO', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-abr, 'Otan', [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(dirige, v-ver:pres, dirige, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(416, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(général, adj-adj, général, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), ex_si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), ex_si('Cloutier', npp-nam, 'Cloutier', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvait, v-ver:impf, trouvait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(capturé, vpp-ver:pper, capturé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(assiégée, vpp-ver:pper, assiégée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(417, Result) :-
      prob_parse([ ex_si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), ex_si('Cloutier', npp-nam, 'Cloutier', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('lieutenant-général', adj-adj, 'lieutenant-général', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(virales, adj-adj, virales, [dl(0,n,n)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(418, Result) :-
      prob_parse([ ex_si('Joint', nc-nom, 'Joint', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(boutiques, nc-nom, boutiques, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(mêlant, vpr-ver:ppre, mêlant, [dr(0,dr(0,dl(0,n,n),pp_a),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(logo, nc-nom, logo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(issues, vpp-ver:pper, issues, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(photomontages, nc-nom, photomontages, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(boutiques, nc-nom, boutiques, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(taguées, vpp-ver:pper, taguées, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(419, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(prétend, v-ver:pres, prétend, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(enseignes, nc-nom, enseignes, [n-1]), ex_si(parisiennes, adj-adj, parisiennes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si('Chanel', npp-nam, 'Chanel', [dl(0,n,n)-1]), ex_si(recouvertes, vpp-ver:pper, recouvertes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autocollant, nc-nom, autocollant, [n-1]), ex_si(mêlant, vpr-ver:ppre, mêlant, [dr(0,dr(0,dl(0,n,n),pp_a),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(logo, nc-nom, logo, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(référence, nc-nom, référence, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(passif, nc-nom, passif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Coco', npp-nam, 'Coco', [dr(0,np,np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nazis, nc-nom, nazis, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(420, Result) :-
      prob_parse([ ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(boutiques, nc-nom, boutiques, [n-1]), ex_si(parisiennes, adj-adj, parisiennes, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(taguées, vpp-ver:pper, taguées, [dl(0,np,s_pass)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(autocollants, nc-nom, autocollants, [n-1]), ex_si(mêlant, vpr-ver:ppre, mêlant, [dr(0,dr(0,dl(0,n,n),pp_a),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(logo, nc-nom, logo, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(421, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(autocollants, nc-nom, autocollants, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effigie, nc-nom, effigie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparus, vpp-ver:pper, apparus, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(abritant, vpr-ver:ppre, abritant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bureaux, nc-nom, bureaux, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(boutiques, nc-nom, boutiques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(422, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(logo, nc-nom, logo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(423, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(règlementation, nc-nom, règlementation, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si(oblige, v-ver:pres, oblige, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(exporter, vinf-ver:infi, exporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('[vers', ponct-prp, '[vers', [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),np)-1]), ex_si('Russie]', nc-nam, 'Russie]', [dr(0,np,n)-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(articles, nc-nom, articles, [let-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si('[la]', ponct-pun:cit, '[la]', [n-1]), ex_si(marque, nc-nom, marque, [dr(0,dl(0,n,n),np)-1]), ex_si(achetés, vpp-ver:pper, achetés, [let-1]), ex_si(à, p-prp, à, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [let-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,n,n),pp_a)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,pp_a,np)-1])], Result).
sent(424, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(contraintes, nc-nom, contraintes, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réaliser, vinf-ver:infi, réaliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(achat, nc-nom, achat, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(boutique, nc-nom, boutique, [n-1]), ex_si('Chanel', npp-nam, 'Chanel', [dl(0,n,n)-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,n,n),dr(0,dl(0,n,n),dia(1,box(1,np))))-1]), ex_si(engageant, vpr-ver:ppre, engageant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(exporter, vinf-ver:infi, exporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(425, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), ex_si(57, det-num, 57, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Gabrielle', npp-nam, 'Gabrielle', [dr(0,np,np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si(tombe, v-ver:pres, tombe, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(amoureuse, adj-adj, amoureuse, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Hans', npp-nam, 'Hans', [dr(0,np,np)-1]), ex_si('Günther', npp-nam, 'Günther', [np-1]), ex_si(von, npp-nam, von, [dr(0,dl(0,np,np),np)-1]), ex_si('Dincklage', npp-nam, 'Dincklage', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(426, Result) :-
      prob_parse([ ex_si('Sans', p-prp, 'Sans', [dr(0,dr(0,np,np),n)-1]), ex_si(doute, nc-nom, doute, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(espion, nc-nom, espion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(427, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(vivent, v-ver:pres, vivent, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(liaison, nc-nom, liaison, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immense, adj-adj, immense, [dr(0,n,n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si('Ritz', npp-nam, 'Ritz', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(louée, vpp-ver:pper, louée, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1937, pro-num, 1937, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(428, Result) :-
      prob_parse([ ex_si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),np)-1]), ex_si(1942, pro-num, 1942, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1943, pro-num, 1943, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('[Coco]', ponct-pun, '[Coco]', [let-1]), ex_si('Chanel', npp-nam, 'Chanel', [dr(0,np,np)-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(été, vpp-ver:pper, été, [np-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(maîtresse, nc-nom, maîtresse, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si(espion, nc-nom, espion, [dr(0,dl(0,n,n),np)-1]), ex_si(allemand, adj-adj, allemand, [dr(0,np,n)-1]), ex_si('Gunter', npp-nam, 'Gunter', [n-1]), ex_si('Von', npp-nam, 'Von', [dl(0,n,n)-1]), ex_si('Dinklage', npp-nam, 'Dinklage', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(429, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(biographie, nc-nom, biographie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Coco', npp-nam, 'Coco', [dr(0,np,np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2011, pro-num, 2011, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('Chanel', npp-nam, 'Chanel', [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(détenu, vpp-ver:pper, détenu, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si('Wertheimer', npp-nam, 'Wertheimer', [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(dément, v-ver:pres, dément, [dr(0,dl(0,np,s),s_q)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(fermement, adv-adv, fermement, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Coco', npp-nam, 'Coco', [dr(0,np,np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(antisémite, adj-adj, antisémite, [dl(0,n,n)-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(soulignant, vpr-ver:ppre, soulignant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(conserve, v-ver:pres, conserve, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mystère, nc-nom, mystère, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(430, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Hal', npp-nam, 'Hal', [dl(0,n,n)-1]), ex_si('Vaughan', npp-nam, 'Vaughan', [dl(0,n,n)-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),pp)-1]), ex_si(loin, adv-adv, loin, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(révélations, nc-nom, révélations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2011, pro-num, 2011, [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(biographie, nc-nom, biographie, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Au', p+d-prp:det, 'Au', [dr(0,dl(0,n,n),n)-1]), ex_si(lit, nc-nom, lit, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ennemi, nc-nom, ennemi, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(secrète, adj-adj, secrète, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Coco', npp-nam, 'Coco', [dr(0,np,np)-1]), ex_si('Chanel', npp-nam, 'Chanel', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(431, Result) :-
      prob_parse([ ex_si('Documents', nc-nom, 'Documents', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appui, nc-nom, appui, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si('Vaughan', npp-nam, 'Vaughan', [np-1]), ex_si(écrit, v-ver:pres, écrit, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(recrutée, vpp-ver:pper, recrutée, [dl(0,np,s_pass)-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), ex_si(1940, pro-num, 1940, [np-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(agent, nc-nom, agent, [n-1]), ex_si(secret, adj-adj, secret, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(432, Result) :-
      prob_parse([ ex_si('Nom', nc-nom, 'Nom', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si('Westminster', npp-nam, 'Westminster', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(433, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(anticommuniste, nc-nom, anticommuniste, [n-1]), ex_si(forcenée, adj-adj, forcenée, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(antisémite, adj-adj, antisémite, [n-1]), ex_si(confirmée, vpp-ver:pper, confirmée, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(1,s,s),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(434, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('T-shirt', nc-nom, 'T-shirt', [n-1]), ex_si(arborant, vpr-ver:ppre, arborant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(ukronazie, adj-adj, ukronazie, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(interventions, nc-nom, interventions, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(élus, nc-nom, élus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(435, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,dr(0,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(enchaîné, vpp-ver:pper, enchaîné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(interventions, nc-nom, interventions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(visioconférence, nc-nom, visioconférence, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(élus, nc-nom, élus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(appelant, vpr-ver:ppre, appelant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(436, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('T-shirt', nc-nom, 'T-shirt', [n-1]), ex_si(arborant, vpr-ver:ppre, arborant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(ukronazie, adj-adj, ukronazie, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(interventions, nc-nom, interventions, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(élus, nc-nom, élus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(437, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('T-shirt', nc-nam, 'T-shirt', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emblème, nc-nom, emblème, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(438, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(historiens, nc-nom, historiens, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(héraldique, nc-nom, héraldique, [n-1]), ex_si(interrogés, vpp-ver:pper, interrogés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(lié, vpp-ver:pper, lié, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(symbolisme, nc-nom, symbolisme, [n-1]), ex_si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(héritage, nc-nom, héritage, [n-1]), ex_si(cosaque, adj-adj, cosaque, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(439, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('T-shirt', nc-nom, 'T-shirt', [n-1]), ex_si(arborant, vpr-ver:ppre, arborant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(ukronazie, adj-adj, ukronazie, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(interventions, nc-nom, interventions, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(élus, nc-nom, élus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(440, Result) :-
      prob_parse([ ex_si('Interrogé', vpp-ver:pper, 'Interrogé', [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prétendus, adj-adj, prétendus, [dr(0,n,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(apparaissant, vpr-ver:ppre, apparaissant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('T-shirt', nc-nom, 'T-shirt', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ligue', nc-nam, 'Ligue', [n-1]), ex_si('anti-diffamation', adj-adj, 'anti-diffamation', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ALD', npp-abr, 'ALD', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si('non-gouvernementale', adj-adj, 'non-gouvernementale', [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(traque, v-ver:pres, traque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(références, nc-nom, références, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(antisémitisme, nc-nom, antisémitisme, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ainsi, adv-adv, ainsi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vérifié, vpp-ver:pper, vérifié, [dl(0,np,s_ppart)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(symboles, nc-nom, symboles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haine, nc-nom, haine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(armoiries, nc-nom, armoiries, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(441, Result) :-
      prob_parse([ ex_si('Pas', adv-adv, 'Pas', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haine, nc-nom, haine, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(442, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(historien, nc-nom, historien, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [dl(0,n,n)-1]), ex_si('Borisovich', npp-nam, 'Borisovich', [dl(0,n,n)-1]), ex_si('Muravyov', npp-nam, 'Muravyov', [dl(0,n,n)-1]), ex_si(expliquait, v-ver:impf, expliquait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Almanach', nc-nam, 'Almanach', [n-1]), ex_si('militaro-historique', adj-adj, 'militaro-historique', [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dr(0,dl(0,n,n),pp)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2006, pro-num, 2006, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nouvel, adj-adj, nouvel, [dr(0,np,n)-1]), ex_si(emblème, nc-nom, emblème, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [dl(0,n,n)-1]), ex_si(inspirait, v-ver:impf, inspirait, [cl_r-1]), ex_si(de, p-prp, de, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(drapeaux, nc-nom, drapeaux, [n-1]), ex_si(cosaques, adj-adj, cosaques, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(mentionnait, v-ver:impf, mentionnait, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(références, nc-nom, références, [dr(0,np,n)-1]), ex_si(aux, p+d-prp:det, aux, [n-1]), ex_si(traditions, nc-nom, traditions, [n-1]), ex_si(cosaques, adj-adj, cosaques, [dl(0,n,n)-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),pp)-1]), ex_si(les, det-det:art, les, [dl(0,n,n)-1]), ex_si(symboles, nc-nom, symboles, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(443, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('T-shirt', nc-nam, 'T-shirt', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emblème, nc-nom, emblème, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(444, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(historiens, nc-nom, historiens, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(héraldique, nc-nom, héraldique, [n-1]), ex_si(interrogés, vpp-ver:pper, interrogés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(lié, vpp-ver:pper, lié, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(symbolisme, nc-nom, symbolisme, [n-1]), ex_si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(héritage, nc-nom, héritage, [n-1]), ex_si(cosaque, adj-adj, cosaque, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(445, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(pourpre, adj-adj, pourpre, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emblème, nc-nom, emblème, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(symbolise, v-ver:pres, symbolise, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fidélité, nc-nom, fidélité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(traditions, nc-nom, traditions, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(défenseurs, nc-nom, défenseurs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(446, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emblème, nc-nom, emblème, [n-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(pourpre, adj-adj, pourpre, [dl(0,n,n)-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dévotion, nc-nom, dévotion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(meilleures, adj-adj, meilleures, [dr(0,n,n)-1]), ex_si(traditions, nc-nom, traditions, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(défenseurs, nc-nom, défenseurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(patrie, nc-nom, patrie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(447, Result) :-
      prob_parse([ ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(confession, nc-nom, confession, [n-1]), ex_si(juive, adj-adj, juive, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Holocauste', npp-nam, 'Holocauste', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(seconde, adj-num, seconde, [dr(0,n,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(relaté, vpp-ver:pper, relaté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(médias, nc-nom, médias, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(448, Result) :-
      prob_parse([ ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confié, vpp-ver:pper, confié, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Times', npp-nam, 'Times', [np-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si(venir, vinf-ver:infi, venir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(une, det-det:art, une, [dr(0,pp_de,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(juive, adj-adj, juive, [dl(0,n,n)-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(traditionnelle, adj-adj, traditionnelle, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(449, Result) :-
      prob_parse([ ex_si('L\'emblème', nc-nom, 'L\'emblème', [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(forces, nc-nom, forces, [dr(0,dl(0,n,n),n)-1]), ex_si(armées, adj-adj, armées, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),pp)-1]), ex_si(le, det-det:art, le, [dr(0,pp,np)-1]), ex_si('T-shirt', nc-nom, 'T-shirt', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,dl(0,n,n),np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dr(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si(peut, v-ver:pres, peut, [let-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(décrit, vpp-ver:pper, décrit, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(',', ponct-pun, ',', [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),np)-1]), ex_si(terminologie, nc-nom, terminologie, [dr(0,np,n)-1]), ex_si(héraldique, adj-adj, héraldique, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [let-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),np)-1]), ex_si(croix, nc-nom, croix, [dr(0,np,n)-1]), ex_si(grecque, adj-adj, grecque, [n-1]), ex_si(cunéiforme, adj-adj, cunéiforme, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),np)-1]), ex_si(centre, nc-nom, centre, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(médaillon, nc-nom, médaillon, [dr(0,np,n)-1]), ex_si(rond, adj-adj, rond, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), ex_si(signe, nc-nom, signe, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(trident, nc-nom, trident, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), ex_si('Grand', npp-nam, 'Grand', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('c\'', cls-pro:dem, 'c\'', [let-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emblème, nc-nom, emblème, [dr(0,np,n)-1]), ex_si(national, adj-adj, national, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dl(0,n,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(450, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(diffère, v-ver:pres, diffère, [dr(0,dl(0,np,s),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expert, nc-nom, expert, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(héraldique, nc-nom, héraldique, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fer, nc-nom, fer, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(quant, adv-adv, quant, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(elle, pro-pro:per, elle, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(silhouette, nc-nom, silhouette, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(pattée, adj-adj, pattée, [dl(0,n,n)-1]), ex_si('[dont', ponct-pun, '[dont', [let-1]), ex_si(les, det-det:art, les, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(branches, nc-nom, branches, [dr(0,np,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [n-1]), ex_si(élargissent, v-ver:pres, élargissent, [cl_r-1]), ex_si(vers, p-prp, vers, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), ex_si(extérieur, nc-nom, extérieur, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si('ndlr]', ponct-adv, 'ndlr]', [let-1]), ex_si(grecque, adj-adj, grecque, [dl(0,np,dl(1,s,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(se, clr-pro:per, se, [let-1]), ex_si(caractérise, v-ver:pres, caractérise, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(par, p-prp, par, [cl_r-1]), ex_si(sa, det-det:pos, sa, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(couleur, nc-nom, couleur, [dr(0,pp_par,np)-1]), ex_si(noire, adj-adj, noire, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(sa, det-det:pos, sa, [dl(0,n,n)-1]), ex_si(bordure, nc-nom, bordure, [dr(0,dl(0,np,np),np)-1]), ex_si(argentée, vpp-ver:pper, argentée, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(451, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(emblème, nc-nom, emblème, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(différent, adj-adj, différent, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fer, nc-nom, fer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(452, Result) :-
      prob_parse([ ex_si('L\'emblème', nc-nom, 'L\'emblème', [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(forces, nc-nom, forces, [dr(0,dl(0,n,n),n)-1]), ex_si(armées, adj-adj, armées, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), ex_si(est, v-ver:pres, est, [n-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,np,s),np)-1]), ex_si(croix, nc-nom, croix, [dr(0,np,n)-1]), ex_si(équilatérale, adj-adj, équilatérale, [n-1]), ex_si(droite, nc-nom, droite, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si(branches, nc-nom, branches, [dr(0,dl(0,n,n),n)-1]), ex_si(divergentes, adj-adj, divergentes, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(couleur, nc-nom, couleur, [dr(0,dl(0,n,n),n)-1]), ex_si(pourpre, adj-adj, pourpre, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [let-1]), ex_si(centre, nc-nom, centre, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,n,n),s)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(représenté, vpp-ver:pper, représenté, [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), ex_si(',', ponct-pun, ',', [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [let-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), ex_si(médaillon, nc-nom, médaillon, [dr(0,np,n)-1]), ex_si(rond, adj-adj, rond, [n-1]), ex_si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [let-1]), ex_si(emblème, nc-nom, emblème, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('État', nc-nam, 'État', [dr(0,np,n)-1]), ex_si(princier, adj-adj, princier, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [np-1]), ex_si('Grand', adj-nam, 'Grand', [np-1]), ex_si('[le', p+d-det:art, '[le', [dr(0,dl(0,np,np),np)-1]), ex_si('grand-prince', nc-nom, 'grand-prince', [dr(0,dl(0,np,np),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si('Kiev', npp-nam, 'Kiev', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),np)-1]), ex_si('Xe', adj-num, 'Xe', [np-1]), ex_si(siècle, nc-nom, siècle, [dr(0,dl(0,np,np),n)-1]), ex_si(',', ponct-pun, ',', [dr(0,n,n)-1]), ex_si(considéré, vpp-ver:pper, considéré, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(une, nc-num, une, [dr(0,dl(0,n,n),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(figures, nc-nom, figures, [dr(0,np,n)-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,np),n)-1]), ex_si(importantes, adj-adj, importantes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('l\'', det-det:art, 'l\'', [dl(0,n,n)-1]), ex_si(histoire, nc-nom, histoire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,np,n)-1]), ex_si('ndlr]', ponct-pun, 'ndlr]', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(453, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(hauteur, nc-nom, hauteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(médaillon, nc-nom, médaillon, [n-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(cinquièmes, nc-nom, cinquièmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hauteur, nc-nom, hauteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(454, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(bords, nc-nom, bords, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croix, nc-nom, croix, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(médaillon, nc-nom, médaillon, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dorés, vpp-ver:pper, dorés, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(455, Result) :-
      prob_parse([ ex_si('Ladislav', npp-nam, 'Ladislav', [dr(0,np,np)-1]), ex_si('Vrtel', npp-nam, 'Vrtel', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(dirige, v-ver:pres, dirige, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(héraldique, nc-nom, héraldique, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Intérieur', nc-nom, 'Intérieur', [n-1]), ex_si(slovaque, adj-adj, slovaque, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(expliquait, v-ver:impf, expliquait, [let-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(23, adj-num, 23, [dr(0,dl(1,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(que, cs-kon, que, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,s_q,s)-1]), ex_si(emblème, nc-nom, emblème, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(forces, nc-nom, forces, [dr(0,dl(0,n,n),n)-1]), ex_si(armées, adj-adj, armées, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(décrit, vpp-ver:pper, décrit, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(',', ponct-pun, ',', [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),np)-1]), ex_si(terminologie, nc-nom, terminologie, [dr(0,np,n)-1]), ex_si(héraldique, adj-adj, héraldique, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [let-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),np)-1]), ex_si(croix, nc-nom, croix, [dr(0,np,n)-1]), ex_si(grecque, adj-adj, grecque, [n-1]), ex_si(cunéiforme, adj-adj, cunéiforme, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(médaillon, nc-nom, médaillon, [dr(0,np,n)-1]), ex_si(rond, adj-adj, rond, [dr(0,np,n)-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(signe, nc-nom, signe, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(trident, nc-nom, trident, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [n-1]), ex_si(le, det-det:art, le, [np-1]), ex_si('Grand', npp-nam, 'Grand', [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [np-1]), ex_si('l\'', det-det:art, 'l\'', [np-1]), ex_si(emblème, nc-nom, emblème, [dr(0,np,n)-1]), ex_si(national, adj-adj, national, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(456, Result) :-
      prob_parse([ ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(457, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(virales, adj-adj, virales, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diffusé, vpp-ver:pper, diffusé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(assurant, vpr-ver:ppre, assurant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(cause, v-ver:pres, cause, [dr(0,dl(0,np,s),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(458, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(samedi, nc-nom, samedi, [dr(0,dl(0,n,n),n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('nord-ouest', nc-nom, 'nord-ouest', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entraîné, vpp-ver:pper, entraîné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tollé, nc-nom, tollé, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(459, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si('AFP', npp-abr, 'AFP', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(confirment, v-ver:pres, confirment, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(figurants, nc-nom, figurants, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(bougent, v-ver:pres, bougent, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(460, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passage, nc-nom, passage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(étendus, vpp-ver:pper, étendus, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(voyons, v-ver:pres, voyons, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rétroviseur, nc-nom, rétroviseur, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(figurant, nc-ver:ppre, figurant, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(relève, v-ver:pres, relève, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(écrit, v-ver:pres, écrit, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(3, adj-num, 3, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(internaute, nc-nom, internaute, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Twitter', npp-nam, 'Twitter', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(461, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parcouru, vpp-ver:pper, parcouru, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si(deux, det-num, deux, [dr(0,dl(1,s,s),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(462, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(compté, vpp-ver:pper, compté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(463, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(bouger, vinf-ver:infi, bouger, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(précisé, vpp-ver:pper, précisé, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Danny', npp-nam, 'Danny', [dr(0,np,np)-1]), ex_si('Kemp', npp-nam, 'Kemp', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(464, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passage, nc-nom, passage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(étendus, vpp-ver:pper, étendus, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(voyons, v-ver:pres, voyons, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rétroviseur, nc-nom, rétroviseur, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(figurant, vpr-ver:ppre, figurant, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(relève, v-ver:pres, relève, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(465, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(exécutés, vpp-ver:pper, exécutés, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(arbitraire, adj-adj, arbitraire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(atrocités, nc-nom, atrocités, [n-1]), ex_si(commises, vpp-ver:pper, commises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(occupants, nc-nom, occupants, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(466, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appui, nc-nom, appui, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(467, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(dément, v-ver:pres, dément, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(massacre, nc-nom, massacre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(468, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(satellite, adj-adj, satellite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fournie, vpp-ver:pper, fournie, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Maxar', npp-nam, 'Maxar', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(datée, vpp-ver:pper, datée, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(19, adj-num, 19, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(apparaissent, v-ver:pres, apparaissent, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(endroit, nc-nom, endroit, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,n,n)-1]), ex_si(deux, det-num, deux, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(469, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(haute, adj-adj, haute, [dr(0,dl(0,n,n),n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si(corroborent, v-ver:pres, corroborent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(récentes, adj-adj, récentes, [dr(0,n,n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(révélant, vpr-ver:ppre, révélant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(étendus, vpp-ver:pper, étendus, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boutcha', npp-nam, 'Boutcha', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(abandonnés, vpp-ver:pper, abandonnés, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(470, Result) :-
      prob_parse([ ex_si('Lundi', nc-nom, 'Lundi', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kremlin', npp-nam, 'Kremlin', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(catégoriquement, adv-adv, catégoriquement, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(massacre, nc-nom, massacre, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(assurant, vpr-ver:ppre, assurant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nom, 'Défense', [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(signes, nc-nom, signes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(falsifications, nc-nom, falsifications, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(présentées, vpp-ver:pper, présentées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(471, Result) :-
      prob_parse([ ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(dément, v-ver:pres, dément, [dr(0,dl(0,np,s),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(exaction, nc-nom, exaction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(allait, v-ver:impf, allait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(provocation, nc-nom, provocation, [n-1]), ex_si(haineuse, adj-adj, haineuse, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(vise, v-ver:pres, vise, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(elle, pro-pro:per, elle, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(discréditer, vinf-ver:infi, discréditer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(472, Result) :-
      prob_parse([ ex_si('TikTok', npp-nam, 'TikTok', [np-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(dédié, vpp-ver:pper, dédié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(renforcés, vpp-ver:pper, renforcés, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(menaces, nc-nom, menaces, [n-1]), ex_si(émergentes, adj-adj, émergentes, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plateforme, nc-nom, plateforme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(retirer, vinf-ver:infi, retirer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(désinformation, nc-nom, désinformation, [n-1]), ex_si(préjudiciable, adj-adj, préjudiciable, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(473, Result) :-
      prob_parse([ ex_si('TikTok', npp-nam, 'TikTok', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dl(0,np,s)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(internationaux, adj-adj, internationaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(examinent, v-ver:pres, examinent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(contenus, nc-nom, contenus, [n-1]), ex_si(susceptibles, adj-adj, susceptibles, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(véhiculer, vinf-ver:infi, véhiculer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fausses, adj-adj, fausses, [dr(0,n,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(474, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(actualité, nc-nom, actualité, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Freedom', npp-nam, 'Freedom', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(diffusé, vpp-ver:pper, diffusé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(direct, nc-nom, direct, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Youtube', npp-nam, 'Youtube', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(475, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(émission, nc-nom, émission, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(personne, pro-pro:ind, personne, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(précipite, v-ver:pres, précipite, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plateau, nc-nom, plateau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(suit, v-ver:pres, suit, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(distance, nc-nom, distance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conseiller, nc-nom, conseiller, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Oleksiy', npp-nam, 'Oleksiy', [dr(0,np,np)-1]), ex_si('Arestovych', npp-nam, 'Arestovych', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(476, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interrompu, vpp-ver:pper, interrompu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(célèbre, adj-adj, célèbre, [dr(0,n,n)-1]), ex_si('JT', nc-abr, 'JT', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Freedom', npp-nam, 'Freedom', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pancarte, nc-nom, pancarte, [n-1]), ex_si(surgissant, vpr-ver:ppre, surgissant, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(plateau, nc-nom, plateau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(capituler, vinf-ver:infi, capituler, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(477, Result) :-
      prob_parse([ ex_si('L\'actuel', nc-nam, 'L\'actuel', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,n,n)-1]), ex_si(chef, nc-nom, chef, [let-1]), ex_si(adjoint, adj-adj, adjoint, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(police, nc-nom, police, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Kiev', npp-nam, 'Kiev', [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si(est, v-ver:pres, est, [let-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,dl(0,np,s),np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), ex_si(homme, nc-nom, homme, [dr(0,np,n)-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si(torse, nc-nom, torse, [dr(0,dl(0,n,n),n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(crâne, nc-nom, crâne, [dr(0,dl(0,n,n),n)-1]), ex_si(bardés, vpp-ver:pper, bardés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(tatouages, nc-nom, tatouages, [dr(0,pp_de,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(dont, prorel-pro:rel, dont, [let-1]), ex_si(certains, pro-pro:ind, certains, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(représentent, v-ver:pres, représentent, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,s),np)-1]), ex_si(symboles, nc-nom, symboles, [dr(0,np,n)-1]), ex_si(nazis, adj-adj, nazis, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(478, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(nomme, v-ver:pres, nomme, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('Andrey', npp-nam, 'Andrey', [dr(0,np,np)-1]), ex_si('Anatolyevich', npp-nam, 'Anatolyevich', [dr(0,np,np)-1]), ex_si('Nebitov', npp-nam, 'Nebitov', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(cite, v-ver:pres, cite, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si(adjoints, adj-adj, adjoints, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(479, Result) :-
      prob_parse([ ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(tatouages, nc-nom, tatouages, [n-1]), ex_si(nazis, adj-adj, nazis, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(directeur, nc-nom, directeur, [np-1]), ex_si(adjoint, adj-adj, adjoint, [dl(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(480, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(cite, v-ver:pres, cite, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si(adjoints, adj-adj, adjoints, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(tatouages, nc-nom, tatouages, [n-1]), ex_si(semblables, adj-adj, semblables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(481, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(cite, v-ver:pres, cite, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si(adjoints, adj-adj, adjoints, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(tatouages, nc-nom, tatouages, [n-1]), ex_si(semblables, adj-adj, semblables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(482, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [dr(0,np,np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(apparait, v-ver:pres, apparait, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(dernière, nc-nom, dernière, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(483, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(unité, nc-nom, unité, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ressemble, v-ver:pres, ressemble, [dr(0,dl(0,np,s),pp)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(484, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(consultant, vpr-ver:ppre, consultant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(archives, nc-nom, archives, [n-1]), ex_si(sauvegardées, vpp-ver:pper, sauvegardées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(nulle, adj-adj, nulle, [dr(0,dl(1,s,s),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(mention, nc-nom, mention, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(485, Result) :-
      prob_parse([ ex_si('Ni', cc-kon, 'Ni', [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('Twitter', npp-abr, 'Twitter', [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('YouTube', npp-nam, 'YouTube', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mentionnent, v-ver:pres, mentionnent, [dr(0,dl(0,np,s),np)-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(tatouages, nc-nom, tatouages, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(486, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(mention, nc-nom, mention, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(archives, nc-nom, archives, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(kievienne, adj-adj, kievienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(487, Result) :-
      prob_parse([ ex_si('Cet', det-pro:dem, 'Cet', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(apparaît, v-ver:pres, apparaît, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(outre, adv-adv, outre, [n-1]), ex_si(ni, cc-kon, ni, [dr(0,pp,pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si('Facebook', npp-nam, 'Facebook', [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('YouTube', npp-abr, 'YouTube', [dl(0,n,n)-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(488, Result) :-
      prob_parse([ ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si(apparaît, v-ver:pres, apparaît, [dl(0,np,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(vêtu, vpp-ver:pper, vêtu, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(uniforme, nc-nom, uniforme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(489, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(uniforme, nc-nom, uniforme, [n-1]), ex_si(présenté, vpp-ver:pper, présenté, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(ancien, adj-adj, ancien, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(apercevoir, vinf-ver:infi, apercevoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dos, nc-nom, dos, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mot, nc-nom, mot, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(militia, et-nom, militia, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(490, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(tels, adj-adj, tels, [dr(0,n,n)-1]), ex_si(uniformes, nc-nom, uniformes, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2015, adj-num, 2015, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(491, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(unique, adj-adj, unique, [dr(0,n,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2015, pro-num, 2015, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(492, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(scandaleuse, adj-adj, scandaleuse, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(voulaient, v-ver:impf, voulaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(interrogés, vpp-ver:pper, interrogés, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(auditionnés, vpp-ver:pper, auditionnés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(493, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(régional, adj-adj, régional, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Intérieur', nc-nom, 'Intérieur', [n-1]), ex_si(rapporte, v-ver:pres, rapporte, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(figurant, vpr-ver:ppre, figurant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si(scandaleuses, adj-adj, scandaleuses, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(policiers, nc-nom, policiers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(494, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Corps', nc-nam, 'Corps', [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(branche, nc-nom, branche, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(présenté, vpp-ver:pper, présenté, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Svoboda', npp-nam, 'Svoboda', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(législatives, adj-adj, législatives, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(495, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extrême, adj-adj, extrême, [dr(0,n,n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(politiquement, adv-adv, politiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(institutions, nc-nom, institutions, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(limitée, vpp-ver:pper, limitée, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(496, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(sources, nc-nom, sources, [n-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(très, adv-adv, très, [dr(0,np,pp_de)-1]), ex_si(peu, adv-adv, peu, [dr(0,pp_de,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(réelle, adj-adj, réelle, [dr(0,n,n)-1]), ex_si(implication, nc-nom, implication, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(497, Result) :-
      prob_parse([ ex_si('D\'anciennes', adj-adj, 'D\'anciennes', [dr(0,np,n)-1]), ex_si(archives, nc-nom, archives, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(page, nc-nom, page, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('Artem', npp-nam, 'Artem', [dr(0,dl(0,n,n),np)-1]), ex_si('Bonov', npp-nam, 'Bonov', [dr(0,np,np)-1]), ex_si(sur, p-prp, sur, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), ex_si(réseau, nc-nom, réseau, [dr(0,np,n)-1]), ex_si(social, adj-adj, social, [n-1]), ex_si('VKontakte', npp-nam, 'VKontakte', [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s),np)-1]), ex_si(mentions, nc-nom, mentions, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(fois, nc-nom, fois, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('Azov', npp-nam, 'Azov', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(division, nc-nom, division, [let-1]), ex_si('Misanthropique', npp-nam, 'Misanthropique', [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), ex_si(groupe, nc-nom, groupe, [dr(0,np,n)-1]), ex_si(néonazi, adj-adj, néonazi, [n-1]), ex_si(apparu, vpp-ver:pper, apparu, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dl(0,n,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(498, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(seconde, adj-num, seconde, [dr(0,n,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mobilisées, vpp-ver:pper, mobilisées, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(499, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('5.000', det-num, '5.000', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appui, nc-nom, appui, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('Iraqi', npp-nam, 'Iraqi', [dl(0,n,n)-1]), ex_si('Freedom', npp-nam, 'Freedom', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(500, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(archive, nc-nom, archive, [n-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(circule, v-ver:pres, circule, [dl(0,np,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rappeler, vinf-ver:infi, rappeler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(implication, nc-nom, implication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(invasions, nc-nom, invasions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(occidentaux, nc-nom, occidentaux, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(501, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si('M1A1', npp-abr, 'M1A1', [dl(0,n,n)-1]), ex_si('Abrams', npp-nam, 'Abrams', [dl(0,n,n)-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(502, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si('M1A1', npp-nam, 'M1A1', [dl(0,n,n)-1]), ex_si('Abrams', npp-nam, 'Abrams', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déployé, vpp-ver:pper, déployé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(503, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dispose, v-ver:pres, dispose, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(chars, nc-nom, chars, [n-1]), ex_si('M1A1', npp-nam, 'M1A1', [dl(0,n,n)-1]), ex_si('Abrams', npp-nam, 'Abrams', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(504, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(relayée, vpp-ver:pper, relayée, [dl(0,n,n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(habillé, vpp-ver:pper, habillé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(armoiries, nc-nom, armoiries, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fresque, nc-nom, fresque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dictateur, nc-nom, dictateur, [n-1]), ex_si(irakien, adj-adj, irakien, [dl(0,n,n)-1]), ex_si('Saddam', npp-nam, 'Saddam', [dl(0,n,n)-1]), ex_si('Hussein', npp-nam, 'Hussein', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(505, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ex-militaire', nc-nom, 'ex-militaire', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(contributeur, nc-nom, contributeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(spécialisé, vpp-ver:pper, spécialisé, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si('Bangladesh', npp-nam, 'Bangladesh', [dl(0,n,n)-1]), ex_si('Defence', npp-nam, 'Defence', [dr(0,n,n)-1]), ex_si('Journal', npp-nam, 'Journal', [dl(0,n,n)-1]), ex_si('A.', npp-abr, 'A.', [dl(0,n,n)-1]), ex_si('R', nc-abr, 'R', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(506, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Shahidul', npp-nam, 'Shahidul', [dr(0,np,np)-1]), ex_si('Islam', npp-nam, 'Islam', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tank, nc-nom, tank, [n-1]), ex_si(présent, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(doute, nc-nom, doute, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fresque, nc-nom, fresque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hussein', npp-nam, 'Hussein', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(507, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(probablement, adv-adv, probablement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prise, vpp-ver:pper, prise, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(508, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(philosophe, nc-nom, philosophe, [n-1]), ex_si('Bernard', npp-nam, 'Bernard', [dl(0,n,n)-1]), ex_si('Henri-Lévy', npp-nam, 'Henri-Lévy', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(voyagé, vpp-ver:pper, voyagé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Odessa', npp-nam, 'Odessa', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(509, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), ex_si('Henri-Lévy', npp-nam, 'Henri-Lévy', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Odessa', npp-nam, 'Odessa', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(510, Result) :-
      prob_parse([ ex_si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), ex_si('Henri-Lévy', npp-nam, 'Henri-Lévy', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(voyagé, vpp-ver:pper, voyagé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Odessa', npp-nam, 'Odessa', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(suscitant, vpr-ver:ppre, suscitant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(511, Result) :-
      prob_parse([ ex_si('Friand', npp-nam, 'Friand', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Bosnie', npp-nam, 'Bosnie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Syrie', npp-nam, 'Syrie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), ex_si('Henri-Lévy', npp-nam, 'Henri-Lévy', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(critiqué, vpp-ver:pper, critiqué, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(envahie, vpp-ver:pper, envahie, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(512, Result) :-
      prob_parse([ ex_si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), ex_si('Henri-Lévy', npp-nam, 'Henri-Lévy', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Odessa', npp-nam, 'Odessa', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(513, Result) :-
      prob_parse([ ex_si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), ex_si('Henry-Lévy', npp-nam, 'Henry-Lévy', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(sic, npp-abr, sic, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(photographier, vinf-ver:infi, photographier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(décor, nc-nom, décor, [n-1]), ex_si(falsifié, vpp-ver:pper, falsifié, [dl(0,n,n)-1]), ex_si(monté, vpp-ver:pper, monté, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(studio, nc-nom, studio, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(croire, vinf-ver:infi, croire, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(photographe, nc-nom, photographe, [n-1]), ex_si(pirate, adj-adj, pirate, [dl(0,n,n)-1]), ex_si(photographie, v-ver:pres, photographie, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(studio, nc-nom, studio, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déroule, v-ver:pres, déroule, [dr(0,dl(0,cl_r,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(montage, nc-nom, montage, [n-1]), ex_si('!', ponct-pun, '!', [dl(0,s,txt)-1])], Result).
sent(514, Result) :-
      prob_parse([ ex_si('Emeric', npp-nam, 'Emeric', [dr(0,np,np)-1]), ex_si('Fohlen', npp-nam, 'Fohlen', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('J\'ai', cls-prp:det, 'J\'ai', [np-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(photo, nc-nom, photo, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(0,n,n),np)-1]), ex_si(mise, nc-nom, mise, [dr(0,np,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(scène, nc-nom, scène, [dr(0,dl(0,n,n),n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détournée, vpp-ver:pper, détournée, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(des, det-prp:det, des, [dr(0,pp_par,np)-1]), ex_si(sites, nc-nom, sites, [dr(0,np,n)-1]), ex_si(divers, adj-adj, divers, [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(variés, vpp-ver:pper, variés, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(pour, p-prp, pour, [dl(0,n,n)-1]), ex_si(affirmer, vinf-ver:infi, affirmer, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(ce, cls-pro:dem, ce, [dr(0,s_q,s)-1]), ex_si(serait, v-ver:cond, serait, [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), ex_si(montage, nc-nom, montage, [dr(0,np,n)-1]), ex_si(studio, adj-adj, studio, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(515, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(photographe, nc-nom, photographe, [n-1]), ex_si('Emeric', npp-nam, 'Emeric', [dl(0,n,n)-1]), ex_si('Fohlen', npp-nam, 'Fohlen', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(manipulée, vpp-ver:pper, manipulée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(516, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', nc-nam, 'Wali', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tireur, nc-nom, tireur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(élite, nc-nom, élite, [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(minutes, nc-nom, minutes, [n-1]), ex_si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(oppose, v-ver:pres, oppose, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(fin, nc-nom, fin, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(300, det-num, 300, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(subsaharienne, adj-adj, subsaharienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(517, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sniper, nc-nom, sniper, [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', npp-nam, 'Wali', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(518, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(300, det-num, 300, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(subsaharienne, adj-adj, subsaharienne, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sniper, nc-nom, sniper, [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', npp-nam, 'Wali', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(front, nc-nom, front, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(519, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', nc-nam, 'Wali', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vivant, vpr-ver:ppre, vivant, [dl(0,n,n)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(apparition, nc-nom, apparition, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(rumeurs, nc-nom, rumeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si('Facebook', npp-abr, 'Facebook', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(interviews, nc-nom, interviews, [n-1]), ex_si(vidéos, adj-adj, vidéos, [dl(0,n,n)-1]), ex_si(données, vpp-ver:pper, données, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(différents, adj-adj, différents, [dr(0,n,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(520, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', nc-nam, 'Wali', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royal', npp-nam, 'Royal', [dr(0,n,n)-1]), ex_si('22e', adj-num, '22e', [dr(0,n,n)-1]), ex_si('Régiment', nc-nam, 'Régiment', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entré, vpp-ver:pper, entré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(battre, vinf-ver:infi, battre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(côtés, nc-nom, côtés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(521, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', nc-nam, 'Wali', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tireur, nc-nom, tireur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(élite, nc-nom, élite, [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(minutes, nc-nom, minutes, [n-1]), ex_si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(oppose, v-ver:pres, oppose, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(fin, nc-nom, fin, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(300, det-num, 300, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(subsaharienne, adj-adj, subsaharienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(522, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', npp-nam, 'Wali', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(interviews, nc-nom, interviews, [n-1]), ex_si(vidéos, nc-nom, vidéos, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(une, pro-num, une, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si('CBC', npp-abr, 'CBC', [dl(0,n,n)-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(réaffirme, v-ver:pres, réaffirme, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(vivant, adj-adj, vivant, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(523, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(524, Result) :-
      prob_parse([ ex_si('D\'après', p-prp, 'D\'après', [dr(0,dr(0,s,s),pp)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,pp,np)-1]), ex_si(publication, nc-nom, publication, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(on, cls-pro:per, on, [let-1]), ex_si(situe, v-ver:pres, situe, [np-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(décès, nc-nom, décès, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(soldat, nc-nom, soldat, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('Wali', npp-nam, 'Wali', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [let-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [dr(0,pp_a,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(port, nc-nom, port, [dr(0,dl(0,np,np),n)-1]), ex_si(stratégique, adj-adj, stratégique, [n-1]), ex_si(assiégé, vpp-ver:pper, assiégé, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(pilonné, vpp-ver:pper, pilonné, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,pp_par,np)-1]), ex_si(armée, nc-nom, armée, [dr(0,np,n)-1]), ex_si(russe, adj-adj, russe, [n-1]), ex_si(depuis, p-prp, depuis, [dl(0,n,n)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(525, Result) :-
      prob_parse([ ex_si('Certaines', pro-pro:ind, 'Certaines', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(vérifions, v-ver:pres, vérifions, [dr(0,dl(0,np,s),np)-1]), ex_si(attribuent, v-ver:pres, attribuent, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', npp-nam, 'Wali', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(sniper, nc-nom, sniper, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(526, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sniper, nc-nom, sniper, [n-1]), ex_si('Canadien', adj-adj, 'Canadien', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Wali', npp-nam, 'Wali', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(réfute, v-ver:pres, réfute, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(tireur, nc-nom, tireur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(élite, nc-nom, élite, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(prétendent, v-ver:pres, prétendent, [dr(0,dr(0,s,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(527, Result) :-
      prob_parse([ ex_si('Olivier', npp-nam, 'Olivier', [dr(0,np,np)-1]), ex_si('Lavigne-Ortiz', npp-nam, 'Lavigne-Ortiz', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vrai, adj-adj, vrai, [dr(0,n,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(0,np,np),s)-1]), ex_si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(précise, v-ver:pres, précise, [dr(0,dr(0,s,np),np)-1]), ex_si('France24', npp-nam, 'France24', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(caractérisation, nc-nom, caractérisation, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(sniper, nc-nom, sniper, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(confusion, nc-nom, confusion, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(détenteur, nc-nom, détenteur, [n-1]), ex_si(anonyme, adj-adj, anonyme, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(macabre, adj-adj, macabre, [dr(0,n,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(consistant, vpr-ver:ppre, consistant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(combattant, nc-nom, combattant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(islamique, adj-adj, islamique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(distance, nc-nom, distance, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Kurdistan', npp-nam, 'Kurdistan', [n-1]), ex_si(irakien, adj-adj, irakien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(528, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(pompiers, nc-nom, pompiers, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(portent, v-ver:pres, portent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vestes, nc-nom, vestes, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(lire, vinf-ver:infi, lire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(529, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(vestes, nc-nom, vestes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(envoyées, vpp-ver:pper, envoyées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(pompiers, nc-nom, pompiers, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(530, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si('Firefighter', npp-nam, 'Firefighter', [dl(0,n,n)-1]), ex_si('Aid', npp-nam, 'Aid', [dl(0,n,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(envoie, v-ver:pres, envoie, [dr(0,dl(0,np,s),np)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(récupéré, vpp-ver:pper, récupéré, [dl(0,n,n)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(locaux, adj-adj, locaux, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pompiers, nc-nom, pompiers, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(531, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(équipement, nc-nom, équipement, [n-1]), ex_si(aperçu, vpp-ver:pper, aperçu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(provient, v-ver:pres, provient, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Services', nc-nam, 'Services', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pompiers, nc-nom, pompiers, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dépôt, nc-nom, dépôt, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carburant, nc-nom, carburant, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si(récemment, adv-adv, récemment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(532, Result) :-
      prob_parse([ ex_si('Récemment', adv-adv, 'Récemment', [dr(0,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déroulée, vpp-ver:pper, déroulée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dépôt, nc-nom, dépôt, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carburant, nc-nom, carburant, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(533, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(visible, adj-adj, visible, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(photographies, nc-nom, photographies, [n-1]), ex_si(prises, vpp-ver:pper, prises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Lviv', npp-nam, 'Lviv', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(534, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(géolocalisé, vpp-ver:pper, géolocalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Lviv', npp-nam, 'Lviv', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(photographies, nc-nom, photographies, [n-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(confirment, v-ver:pres, confirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(535, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('après-midi', nc-nom, 'après-midi', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(installation, nc-nom, installation, [n-1]), ex_si(industrielle, adj-adj, industrielle, [dl(0,n,n)-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(stocke, v-ver:pres, stocke, [dr(0,dl(0,np,s),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(carburant, nc-nom, carburant, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(maire, nc-nom, maire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Andriy', npp-nam, 'Andriy', [dr(0,np,np)-1]), ex_si('Sadovy', npp-nam, 'Sadovy', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Telegram', npp-nam, 'Telegram', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(536, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lviv', npp-nam, 'Lviv', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouest, nc-nom, ouest, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dépôt, nc-nom, dépôt, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carburants, nc-nom, carburants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(blessés, nc-nom, blessés, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(537, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dr(0,dl(0,n,n),pp)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si('mi-mars', npp-nom, 'mi-mars', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), ex_si(chanter, vinf-ver:infi, chanter, [dl(0,n,n)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(538, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(chante, v-ver:pres, chante, [dl(0,np,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(539, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dr(0,dl(0,n,n),pp)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si('mi-mars', npp-nom, 'mi-mars', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), ex_si(chanter, vinf-ver:infi, chanter, [dl(0,n,n)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(540, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(inversée, vpp-ver:pper, inversée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(outil, nc-nom, outil, [n-1]), ex_si('InVid', npp-nam, 'InVid', [dl(0,n,n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(interprètes, nc-nom, interprètes, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(541, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(iranien, nc-nom, iranien, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Alireza', npp-nam, 'Alireza', [dr(0,np,np)-1]), ex_si('Firouzja', npp-nam, 'Firouzja', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(champions, nc-nom, champions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(échecs, nc-nom, échecs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devait, v-ver:impf, devait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tournoi, nc-nom, tournoi, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(542, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Fédération', nc-nam, 'Fédération', [n-1]), ex_si(iranienne, adj-adj, iranienne, [dl(0,n,n)-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(protesté, vpp-ver:pper, protesté, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(asile, nc-nom, asile, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(543, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(champion, nc-nom, champion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(échecs, nc-nom, échecs, [n-1]), ex_si('Alireza', npp-nam, 'Alireza', [dl(0,n,n)-1]), ex_si('Firouzjaa', npp-nam, 'Firouzjaa', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(asile, nc-nom, asile, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fédération', nc-nam, 'Fédération', [n-1]), ex_si(iranienne, adj-adj, iranienne, [dl(0,n,n)-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dr(0,pp,np)-1]), ex_si(contre, p-prp, contre, [np-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(544, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(échecs, nc-nom, échecs, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(biélorusses, adj-adj, biélorusses, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(compétitions, nc-nom, compétitions, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(simplement, adv-adv, simplement, [dl(1,s,s)-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(neutre, adj-adj, neutre, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(fédération, nc-nom, fédération, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(545, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Fédération', nc-nam, 'Fédération', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(échecs, nc-nom, échecs, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(banni, vpp-ver:pper, banni, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(drapeaux, nc-nom, drapeaux, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(hymnes, nc-nom, hymnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(invitant, vpr-ver:ppre, invitant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dl(0,np,s_inf)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(neutre, adj-adj, neutre, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(546, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(champion, nc-nom, champion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(échecs, nc-nom, échecs, [n-1]), ex_si('Alireza', npp-nam, 'Alireza', [dl(0,n,n)-1]), ex_si('Firouzjaa', npp-nam, 'Firouzjaa', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, nc-nom, parti, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(installé, vpp-ver:pper, installé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp_a,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fédération', nc-nam, 'Fédération', [n-1]), ex_si(iranienne, adj-adj, iranienne, [dl(0,n,n)-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(interdit, vpp-ver:pper, interdit, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(affronter, vinf-ver:infi, affronter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(547, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(départ, nc-nom, départ, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alireza', npp-nam, 'Alireza', [dr(0,np,np)-1]), ex_si('Firouzja', npp-nam, 'Firouzja', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attribué, vpp-ver:pper, attribué, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnaît, v-ver:pres, reconnaît, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(échecs, nc-nom, échecs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(affronter, vinf-ver:infi, affronter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Israéliens', nc-nam, 'Israéliens', [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),n)-1]), ex_si(peine, nc-nom, peine, [dr(0,dl(1,s,s),n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(sanctionnés, vpp-ver:pper, sanctionnés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(fédération, nc-nom, fédération, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(548, Result) :-
      prob_parse([ ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(visité, vpp-ver:pper, visité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), ex_si('Derusova', npp-nam, 'Derusova', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médecin, nc-nom, médecin, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(blessés, vpp-ver:pper, blessés, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(549, Result) :-
      prob_parse([ ex_si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accompagné, vpp-ver:pper, accompagné, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,pp_de,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Tatiana', npp-nam, 'Tatiana', [dr(0,np,np)-1]), ex_si('Ostashchenko', npp-nam, 'Ostashchenko', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(commandante, nc-nom, commandante, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), ex_si('Derusova', npp-nam, 'Derusova', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,n,n)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(550, Result) :-
      prob_parse([ ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(visité, vpp-ver:pper, visité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), ex_si('Derusova', npp-nam, 'Derusova', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médecin, nc-nom, médecin, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(blessés, vpp-ver:pper, blessés, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(551, Result) :-
      prob_parse([ ex_si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), ex_si('Mykolaivna', npp-nam, 'Mykolaivna', [dr(0,np,np)-1]), ex_si('Derusova', npp-nam, 'Derusova', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [dr(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Okhtyrka', npp-nam, 'Okhtyrka', [dr(0,dl(1,s,s),np)-1]), ex_si('(', ponct-pun, '(', [np-1]), ex_si('nord-est', nc-nom, 'nord-est', [dr(0,dl(0,np,np),n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(dans, p-prp, dans, [let-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), ex_si(bombardement, nc-nom, bombardement, [dr(0,np,n)-1]), ex_si(russe, adj-adj, russe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(sauvé, vpp-ver:pper, sauvé, [np-1]), ex_si(plus, adv-adv, plus, [dr(0,pp_de,np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [n-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(soignait, v-ver:impf, soignait, [np-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,np,s),np)-1])], Result).
sent(552, Result) :-
      prob_parse([ ex_si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), ex_si('Derusova', npp-nam, 'Derusova', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(sergente, nc-nom, sergente, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(infirmière, nc-nom, infirmière, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(médecin, nc-nom, médecin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Okhtyrka', npp-nam, 'Okhtyrka', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(oblast, nc-nom, oblast, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Soumy', npp-nam, 'Soumy', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('nord-est', nc-nom, 'nord-est', [dr(0,dl(0,np,np),n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuée, vpp-ver:pper, tuée, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(lors, adv-adv, lors, [dr(0,pp_de,np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(frappe, nc-nom, frappe, [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(artillerie, nc-nom, artillerie, [n-1]), ex_si(peu, adv-adv, peu, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(553, Result) :-
      prob_parse([ ex_si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), ex_si('Mykolaivna', npp-nam, 'Mykolaivna', [dr(0,np,np)-1]), ex_si('Derusova', npp-nam, 'Derusova', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [dr(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Okhtyrka', npp-nam, 'Okhtyrka', [dr(0,dl(1,s,s),np)-1]), ex_si('(', ponct-pun, '(', [np-1]), ex_si('nord-est', nc-nom, 'nord-est', [dr(0,dl(0,np,np),n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(dans, p-prp, dans, [let-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), ex_si(bombardement, nc-nom, bombardement, [dr(0,np,n)-1]), ex_si(russe, adj-adj, russe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(sauvé, vpp-ver:pper, sauvé, [np-1]), ex_si(plus, adv-adv, plus, [dr(0,pp_de,np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [n-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(soignait, v-ver:impf, soignait, [np-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,np,s),np)-1])], Result).
sent(554, Result) :-
      prob_parse([ ex_si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accompagné, vpp-ver:pper, accompagné, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Tatiana', npp-nam, 'Tatiana', [dr(0,np,np)-1]), ex_si('Ostashchenko', npp-nam, 'Ostashchenko', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(générale, adj-adj, générale, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(brigade, nc-nom, brigade, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(commandante, nc-nom, commandante, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(555, Result) :-
      prob_parse([ ex_si('Tatiana', npp-nam, 'Tatiana', [dr(0,np,np)-1]), ex_si('Mikolajivna', npp-nam, 'Mikolajivna', [dr(0,np,np)-1]), ex_si('Ostashchenko', npp-nam, 'Ostashchenko', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tête, nc-nom, tête, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(commandements, nc-nom, commandements, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_pass))-1]), ex_si(promue, vpp-ver:pper, promue, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(rang, nc-nom, rang, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(générale, nc-nom, générale, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(brigade, nc-nom, brigade, [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(556, Result) :-
      prob_parse([ ex_si('Seuls', adv-adv, 'Seuls', [dr(0,np,np)-1]), ex_si('1,9', det-num, '1,9', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(déplacés, nc-nom, déplacés, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(435, pro-num, 435, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(franchi, vpp-ver:pper, franchi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hexagone, nc-nom, hexagone, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(détiennent, v-ver:pres, détiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(557, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(5000, adj-num, 5000, [dr(0,n,n)-1]), ex_si(arrivées, nc-nom, arrivées, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(recensées, vpp-ver:pper, recensées, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(réfugiés, nc-nom, réfugiés, [n-1]), ex_si(entrés, vpp-ver:pper, entrés, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(nationalité, nc-nom, nationalité, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(originaires, adj-adj, originaires, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Maghreb', npp-nam, 'Maghreb', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(subsaharienne, adj-adj, subsaharienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(558, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(quinzaine, nc-num, quinzaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('non-Ukrainiens', nc-nom, 'non-Ukrainiens', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fuyaient, v-ver:impf, fuyaient, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(refoulés, vpp-ver:pper, refoulés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(essentiellement, adv-adv, essentiellement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si('franco-italienne', adj-adj, 'franco-italienne', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(559, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(préfecture, nc-nom, préfecture, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Alpes-Maritimes', npp-nam, 'Alpes-Maritimes', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('non-admis', vpp-ver:pper, 'non-admis', [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(ressortissants, nc-nom, ressortissants, [n-1]), ex_si(pakistanais, adj-adj, pakistanais, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(nigérians, adj-adj, nigérians, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(quinzaine, nc-nom, quinzaine, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(présentant, vpr-ver:ppre, présentant, [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(frontalière, adj-adj, frontalière, [dl(0,n,n)-1]), ex_si('franco-italienne', adj-adj, 'franco-italienne', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(titres, nc-nom, titres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(séjour, nc-nom, séjour, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(560, Result) :-
      prob_parse([ ex_si('Barbara', npp-nam, 'Barbara', [dr(0,np,np)-1]), ex_si('Pompili', npp-nam, 'Pompili', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invitée, nc-nom, invitée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(matinale, nc-nom, matinale, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('RTL', npp-abr, 'RTL', [dl(0,n,n)-1]), ex_si('MATIN', npp-nam, 'MATIN', [dl(0,n,n)-1]), ex_si('7H', nc-abr, '7H', [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('9H30', npp-num, '9H30', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Yves', npp-nam, 'Yves', [dr(0,np,np)-1]), ex_si('Calvi', npp-nam, 'Calvi', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(561, Result) :-
      prob_parse([ ex_si('Yves', npp-nam, 'Yves', [dr(0,np,np)-1]), ex_si('Calvi', npp-nam, 'Calvi', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Transition', nc-nom, 'Transition', [n-1]), ex_si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), ex_si('Barbara', npp-nam, 'Barbara', [dl(0,n,n)-1]), ex_si('Pompili', npp-nam, 'Pompili', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(matinale, nc-nom, matinale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('RTL', npp-nam, 'RTL', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(562, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Transition', nc-nom, 'Transition', [n-1]), ex_si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), ex_si('Barbara', npp-nam, 'Barbara', [dl(0,n,n)-1]), ex_si('Pompili', npp-nam, 'Pompili', [dl(0,n,n)-1]), ex_si(incite, v-ver:pres, incite, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(foyers, nc-nom, foyers, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(logement, nc-nom, logement, [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dépendance, nc-nom, dépendance, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(énergétiques, adj-adj, énergétiques, [dl(0,n,n)-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(563, Result) :-
      prob_parse([ ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Pompili', npp-nam, 'Pompili', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(foyers, nc-nom, foyers, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(baisser, vinf-ver:infi, baisser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(logement, nc-nom, logement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(degré, nc-nom, degré, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(564, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Transition', nc-nom, 'Transition', [n-1]), ex_si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [dr(0,np,np)-1]), ex_si('Pompili', npp-nam, 'Pompili', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(incité, vpp-ver:pper, incité, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Français', nc-nam, 'Français', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(douche, nc-nom, douche, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(propos, nc-nom, propos, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(détournés, vpp-ver:pper, détournés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(565, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Transition', nc-nom, 'Transition', [n-1]), ex_si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), ex_si('Barbara', npp-nam, 'Barbara', [dl(0,n,n)-1]), ex_si('Pompili', npp-nam, 'Pompili', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Français', nc-nam, 'Français', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(doucher, vinf-ver:infi, doucher, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ça, pro-pro:dem, ça, [np-1]), ex_si(ferait, v-ver:cond, ferait, [dr(0,dl(0,np,s),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(566, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(ordonnant, vpr-ver:ppre, ordonnant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fifa', npp-abr, 'Fifa', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(totalement, adv-adv, totalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fausse, adj-adj, fausse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(567, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Tribunal', nc-nam, 'Tribunal', [n-1]), ex_si(arbitral, adj-adj, arbitral, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('TAS', npp-abr, 'TAS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fifa', npp-abr, 'Fifa', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réintégrer, vinf-ver:infi, réintégrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(immédiatement, adv-adv, immédiatement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(568, Result) :-
      prob_parse([ ex_si('Fin', nc-nom, 'Fin', [dr(0,dr(0,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quatre, det-num, quatre, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(lancée, vpp-ver:pper, lancée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Uefa', npp-nam, 'Uefa', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fifa', npp-nam, 'Fifa', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(exclure, vinf-ver:infi, exclure, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prochaine, adj-adj, prochaine, [dr(0,n,n)-1]), ex_si('Coupe', nc-nom, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),np)-1]), ex_si(de, p-prp, de, [dr(0,dr(0,np,np),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(clubs, nc-nom, clubs, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(sélections, nc-nom, sélections, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(compétitions, nc-nom, compétitions, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(569, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quatre, det-num, quatre, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fédération, nc-nom, fédération, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(foot, nc-nom, foot, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(banni, vpp-ver:pper, banni, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(équipes, nc-nom, équipes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(compétitions, nc-nom, compétitions, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(570, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),dl(0,np,s_ppres))-1]), ex_si(attendant, vpr-ver:ppre, attendant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Fifa', npp-abr, 'Fifa', [n-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(tranché, vpp-ver:pper, tranché, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fond, nc-nom, fond, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(prendra, v-ver:futu, prendra, [dr(0,dl(0,np,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(minimum, nc-nom, minimum, [n-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('TAS', npp-abr, 'TAS', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(suspendre, vinf-ver:infi, suspendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(provisoirement, adv-adv, provisoirement, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(décisions, nc-nom, décisions, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(instances, nc-nom, instances, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(équipes, nc-nom, équipes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(reprendre, vinf-ver:infi, reprendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(compétitions, nc-nom, compétitions, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(571, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(décisions, nc-nom, décisions, [n-1]), ex_si(rendues, vpp-ver:pper, rendues, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('TAS', npp-abr, 'TAS', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(préjugent, v-ver:pres, préjugent, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(future, adj-adj, future, [dr(0,n,n)-1]), ex_si(sentence, nc-nom, sentence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(sportive, adj-adj, sportive, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fond, nc-nom, fond, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(litige, nc-nom, litige, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(attendue, vpp-ver:pper, attendue, [dl(0,np,s_pass)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(572, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(politiciens, nc-nom, politiciens, [n-1]), ex_si(tenant, vpr-ver:ppre, tenant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(renversé, vpp-ver:pper, renversé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bouteille, nc-nom, bouteille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(brandit, v-ver:simp, brandit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(parlementaires, nc-nom, parlementaires, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(573, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(parlementaires, nc-nom, parlementaires, [n-1]), ex_si(slovaques, adj-adj, slovaques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vidé, vpp-ver:pper, vidé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bouteille, nc-nom, bouteille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(574, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(slovaques, adj-adj, slovaques, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(réunis, vpp-ver:pper, réunis, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(session, nc-nom, session, [n-1]), ex_si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('DCA', npp-abr, 'DCA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(devait, v-ver:impf, devait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(discuté, vpp-ver:pper, discuté, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(voté, vpp-ver:pper, voté, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(575, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(bilatéral, adj-adj, bilatéral, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(discuté, vpp-ver:pper, discuté, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(576, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(577, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Slovaques', nc-nam, 'Slovaques', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(unis, vpp-ver:pper, unis, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(condamner, vinf-ver:infi, condamner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(actions, nc-nom, actions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(578, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(emballé, vpp-ver:pper, emballé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(sac, nc-nom, sac, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si(fume, v-ver:pres, fume, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cigarette, nc-nom, cigarette, [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(couché, vpp-ver:pper, couché, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si(rempli, vpp-ver:pper, rempli, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(longs, adj-adj, longs, [dr(0,n,n)-1]), ex_si(sacs, nc-nom, sacs, [n-1]), ex_si(sombres, adj-adj, sombres, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(semblent, v-ver:pres, semblent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(contenir, vinf-ver:infi, contenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(579, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(couleur, nc-nom, couleur, [n-1]), ex_si(orange, adj-adj, orange, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(rempli, vpp-ver:pper, rempli, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(empaquetées, vpp-ver:pper, empaquetées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sacs, nc-nom, sacs, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(580, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(unités, nc-nom, unités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(franchi, vpp-ver:pper, franchi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fleuve, nc-nom, fleuve, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2017, adj-num, 2017, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(amphibies, adj-adj, amphibies, [dl(0,n,n)-1]), ex_si('M3', npp-nam, 'M3', [dl(0,n,n)-1]), ex_si('Amphibious', npp-nam, 'Amphibious', [dl(0,n,n)-1]), ex_si('Rigs', npp-nam, 'Rigs', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rukla', npp-nam, 'Rukla', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Saber', npp-nam, 'Saber', [dr(0,n,n)-1]), ex_si('Strike', npp-nam, 'Strike', [n-1]), ex_si(17, adj-num, 17, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(581, Result) :-
      prob_parse([ ex_si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exercice, nc-nom, exercice, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2017, pro-num, 2017, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(chars, nc-nom, chars, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déployés, vpp-ver:pper, déployés, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rivière, nc-nom, rivière, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(traverser, vinf-ver:infi, traverser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(582, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(transformé, vpp-ver:pper, transformé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(remplacer, vinf-ver:infi, remplacer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(infrastructures, nc-nom, infrastructures, [n-1]), ex_si(sabotées, vpp-ver:pper, sabotées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(583, Result) :-
      prob_parse([ ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(transforme, v-ver:pres, transforme, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pallier, vinf-ver:infi, pallier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(destruction, nc-nom, destruction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(ponts, nc-nom, ponts, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ralentir, vinf-ver:infi, ralentir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(584, Result) :-
      prob_parse([ ex_si('Petro', npp-nam, 'Petro', [dr(0,np,np)-1]), ex_si('Porochenko', npp-nam, 'Porochenko', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(menacé, vpp-ver:pper, menacé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(populations, nc-nom, populations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(585, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ex-président', nc-nom, 'ex-président', [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Petro', npp-nam, 'Petro', [dl(0,n,n)-1]), ex_si('Porochenko', npp-nam, 'Porochenko', [dl(0,n,n)-1]), ex_si(menace, v-ver:pres, menace, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(populations, nc-nom, populations, [n-1]), ex_si(russophones, adj-adj, russophones, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(tenu, vpp-ver:pper, tenu, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(586, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(constamment, adv-adv, constamment, [dl(1,s,s)-1]), ex_si(usage, nc-nom, usage, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(lourdes, adj-adj, lourdes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(construites, vpp-ver:pper, construites, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(587, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(attaques, nc-nom, attaques, [n-1]), ex_si(aveugles, adj-adj, aveugles, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(délibérées, vpp-ver:pper, délibérées, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(construites, vpp-ver:pper, construites, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fins, nc-nom, fins, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(588, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si('TGCOM24', npp-nam, 'TGCOM24', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(tirée, vpp-ver:pper, tirée, [dr(0,dl(0,n,n),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si('Deep', npp-nam, 'Deep', [dr(0,np,np)-1]), ex_si('Impact', npp-nam, 'Impact', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fuite, nc-nom, fuite, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(589, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(mère, nc-nom, mère, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('TGCOM24', npp-nam, 'TGCOM24', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démenti, vpp-ver:pper, démenti, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(diffusion, nc-nom, diffusion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(tirée, vpp-ver:pper, tirée, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Deep', npp-nam, 'Deep', [dr(0,np,np)-1]), ex_si('Impact', npp-nam, 'Impact', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contexte, nc-nom, contexte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(590, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Deep', npp-nam, 'Deep', [dr(0,np,np)-1]), ex_si('Impact', npp-nam, 'Impact', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(catastrophe, nc-nom, catastrophe, [dl(0,n,n)-1]), ex_si(sorti, vpp-ver:pper, sorti, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1998, pro-num, 1998, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(met, v-ver:pres, met, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si(fonçant, vpr-ver:ppre, fonçant, [dr(0,dl(0,n,n),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(menaçant, vpr-ver:ppre, menaçant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Humanité', npp-nam, 'Humanité', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(591, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Deep', npp-nam, 'Deep', [dr(0,np,np)-1]), ex_si('Impact', npp-nam, 'Impact', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(tentent, v-ver:pres, tentent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fuir, vinf-ver:infi, fuir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(592, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('Africains', nc-nam, 'Africains', [n-1]), ex_si(fuyant, vpr-ver:ppre, fuyant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(victimes, nc-nom, victimes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(tirs, nc-nom, tirs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(balles, nc-nom, balles, [n-1]), ex_si(réelles, adj-adj, réelles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(polonaise, adj-adj, polonaise, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dr(0,s,s),np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(593, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(polonaise, adj-adj, polonaise, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réfugiés, nc-nom, réfugiés, [n-1]), ex_si(fuyant, vpr-ver:ppre, fuyant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(africains, adj-adj, africains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(594, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('Africains', nc-nam, 'Africains', [n-1]), ex_si(fuyant, vpr-ver:ppre, fuyant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(victimes, nc-nom, victimes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(tirs, nc-nom, tirs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(balles, nc-nom, balles, [n-1]), ex_si(réelles, adj-adj, réelles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(polonaise, adj-adj, polonaise, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dr(0,s,s),np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(595, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(polonaise, adj-adj, polonaise, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tiré, vpp-ver:pper, tiré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(balle, nc-nom, balle, [n-1]), ex_si(réelle, adj-adj, réelle, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Africains', nc-nam, 'Africains', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(tentent, v-ver:pres, tentent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(refuge, nc-nom, refuge, [np-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(596, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(jeunes, adj-adj, jeunes, [dr(0,n,n)-1]), ex_si('Africains', nc-nam, 'Africains', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(blessés, nc-nom, blessés, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(597, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(racisme, nc-nom, racisme, [n-1]), ex_si(envers, p-prp, envers, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Africains', nc-nam, 'Africains', [n-1]), ex_si(fuyant, vpr-ver:ppre, fuyant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signalés, vpp-ver:pper, signalés, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(relayés, vpp-ver:pper, relayés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(598, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Fondation', nc-nam, 'Fondation', [n-1]), ex_si('Helsinki', npp-nam, 'Helsinki', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(présente, adj-adj, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1989, pro-num, 1989, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(traitements, nc-nom, traitements, [n-1]), ex_si(inégaux, adj-adj, inégaux, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réfugiés, nc-nom, réfugiés, [n-1]), ex_si(originaires, adj-adj, originaires, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,dr(0,n,s_q),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(599, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(racisme, nc-nom, racisme, [n-1]), ex_si(envers, p-prp, envers, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Africains', nc-nam, 'Africains', [n-1]), ex_si(fuyant, vpr-ver:ppre, fuyant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signalés, vpp-ver:pper, signalés, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(relayés, vpp-ver:pper, relayés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(600, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(polonaise, adj-adj, polonaise, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(relayé, vpp-ver:pper, relayé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(racisme, nc-nom, racisme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(violences, nc-nom, violences, [n-1]), ex_si(physiques, adj-adj, physiques, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(601, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vague, nc-nom, vague, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réfugiés, nc-nom, réfugiés, [n-1]), ex_si(déclenchée, vpp-ver:pper, déclenchée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fédération', nc-nam, 'Fédération', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(policiers, nc-nom, policiers, [n-1]), ex_si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(602, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(polonaise, adj-adj, polonaise, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tiré, vpp-ver:pper, tiré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(balle, nc-nom, balle, [n-1]), ex_si(réelle, adj-adj, réelle, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Africains', nc-nam, 'Africains', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(tentent, v-ver:pres, tentent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(refuge, nc-nom, refuge, [np-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(603, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(jeunes, adj-adj, jeunes, [dr(0,n,n)-1]), ex_si('Africains', nc-nam, 'Africains', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(blessés, nc-nom, blessés, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(604, Result) :-
      prob_parse([ ex_si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(migrants, nc-nom, migrants, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivés, vpp-ver:pper, arrivés, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(espagnole, adj-adj, espagnole, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Melilla', npp-nam, 'Melilla', [np-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(africaine, adj-adj, africaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(605, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(3, adj-num, 3, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(massive, adj-adj, massive, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(migrants, nc-nom, migrants, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enclave, nc-nom, enclave, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Melilla', npp-nam, 'Melilla', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(606, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('3,2', det-num, '3,2', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fui, vpp-ver:pper, fui, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(déclenchés, vpp-ver:pper, déclenchés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allées, vpp-ver:pper, allées, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(',', ponct-pun, ',', [dl(0,s,txt)-1])], Result).
sent(607, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(routes, nc-nom, routes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exil, nc-nom, exil, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(608, Result) :-
      prob_parse([ ex_si('L\'Ukraine', npp-nam, 'L\'Ukraine', [dr(0,np,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [dl(0,np,s_ppart)-1]), ex_si(avec, p-prp, avec, [let-1]), ex_si(les, det-det:art, les, [dr(0,dl(1,s,s),np)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(en, p-prp, en, [let-1]), ex_si(2021, pro-num, 2021, [dr(0,dl(1,s,s),np)-1]), ex_si(contre, p-prp, contre, [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), ex_si(projet, nc-nom, projet, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(résolution, nc-nom, résolution, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [dr(0,np,n)-1]), ex_si(générale, adj-adj, générale, [n-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si('Nations', nc-nam, 'Nations', [dr(0,dl(0,n,n),n)-1]), ex_si(unies, vpp-ver:pper, unies, [n-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(la, det-det:art, la, [dr(0,pp_par,np)-1]), ex_si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(condamner, vinf-ver:infi, condamner, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(glorification, nc-nom, glorification, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(nazisme, nc-nom, nazisme, [dr(0,dl(0,n,n),n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(néonazisme, nc-nom, néonazisme, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(609, Result) :-
      prob_parse([ ex_si('L\'Ukraine', npp-nam, 'L\'Ukraine', [dr(0,np,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(une, det-det:art, une, [dr(0,pp,np)-1]), ex_si(résolution, nc-nom, résolution, [dr(0,np,n)-1]), ex_si(russe, adj-adj, russe, [n-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ONU', npp-abr, 'ONU', [dr(0,np,n)-1]), ex_si(visant, vpr-ver:ppre, visant, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(condamner, vinf-ver:infi, condamner, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(glorification, nc-nom, glorification, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(nazisme, nc-nom, nazisme, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(610, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,dl(1,s,s))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(611, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(voter, vinf-ver:infi, voter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(proposée, vpp-ver:pper, proposée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(motivée, vpp-ver:pper, motivée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sympathie, nc-nom, sympathie, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(idéologie, nc-nom, idéologie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nazis', nc-nam, 'Nazis', [n-1]), ex_si(actifs, adj-adj, actifs, [dl(0,n,n)-1]), ex_si(historiques, adj-adj, historiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(génocidaires, adj-adj, génocidaires, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(612, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(vraiment, adv-adv, vraiment, [dl(1,s,s)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sympathie, nc-nom, sympathie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élite, nc-nom, élite, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nazis, nc-nom, nazis, [n-1]), ex_si(historiques, adj-adj, historiques, [dl(0,n,n)-1]), ex_si(génocidaires, adj-adj, génocidaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(613, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si('2021,130', det-num, '2021,130', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glorification, nc-nom, glorification, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nazisme, nc-nom, nazisme, [n-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(49, pro-num, 49, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(abstenus, vpp-ver:pper, abstenus, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intégralité, nc-nom, intégralité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(incluant, vpr-ver:ppre, incluant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(614, Result) :-
      prob_parse([ ex_si('Deux', pro-num, 'Deux', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(enfin, adv-adv, enfin, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dl(0,np,s_ppart)-1]), ex_si(contre, p-prp, contre, [pp-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(615, Result) :-
      prob_parse([ ex_si('L\'Ukraine', npp-nam, 'L\'Ukraine', [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,np),np)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [dr(0,np,n)-1]), ex_si(sont, v-ver:pres, sont, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,s),np)-1]), ex_si(seuls, adj-adj, seuls, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [dr(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(le, det-det:art, le, [dr(0,pp,np)-1]), ex_si(texte, nc-nom, texte, [dr(0,np,n)-1]), ex_si(intitulé, vpp-ver:pper, intitulé, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si(lutte, nc-nom, lutte, [let-1]), ex_si(contre, p-prp, contre, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(glorification, nc-nom, glorification, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(nazisme, nc-nom, nazisme, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(présenté, vpp-ver:pper, présenté, [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),pp_a)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,pp_a,np)-1]), ex_si('ONU', nc-abr, 'ONU', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(616, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(élimination, nc-nom, élimination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Juifs', nc-nom, 'Juifs', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(nazie, adj-adj, nazie, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(617, Result) :-
      prob_parse([ ex_si('Pendant', p-prp, 'Pendant', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(durant, p-prp, durant, [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(occupation, nc-nom, occupation, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(juives, adj-adj, juives, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('quasi-totalité', nc-nom, 'quasi-totalité', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(juive, adj-adj, juive, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déportée, vpp-ver:pper, déportée, [dl(0,np,s_pass)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(forcés, vpp-ver:pper, forcés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(élimination, nc-nom, élimination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(618, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nazi, nc-nom, nazi, [n-1]), ex_si(renvoie, v-ver:pres, renvoie, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(événements, nc-nom, événements, [n-1]), ex_si(auxquels, p+pro-pro:rel, auxquels, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sensibles, adj-adj, sensibles, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(lourdes, adj-adj, lourdes, [dl(0,n,n)-1]), ex_si(subies, vpp-ver:pper, subies, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(619, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nazi, nc-nom, nazi, [n-1]), ex_si(touche, v-ver:pres, touche, [dr(0,dl(0,np,s),np)-1]), ex_si(volontairement, adv-adv, volontairement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(corde, nc-nom, corde, [n-1]), ex_si(sensible, adj-adj, sensible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(620, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Gates', npp-nam, 'Gates', [np-1]), ex_si(profitent, v-ver:pres, profitent, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(distrait, vpp-ver:pper, distrait, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(s, nc-abr, s, [cl_r-1]), ex_si(')', ponct-pun, ')', [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si(constitution, nc-nom, constitution, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(621, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(profite, v-ver:pres, profite, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(622, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(recommandation, nc-nom, recommandation, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(invite, v-ver:pres, invite, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(généraliser, vinf-ver:infi, généraliser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(623, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émis, vpp-ver:pper, émis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(certain, adj-adj, certain, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recommandations, nc-nom, recommandations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dr(0,np,np),np)-1]), ex_si(elles, pro-pro:per, elles, [np-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(recommandation, nc-nom, recommandation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(généraliser, vinf-ver:infi, généraliser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(624, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(contraire, adj-adj, contraire, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(fonctionnement, nc-nom, fonctionnement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(volonté, nc-nom, volonté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, nc-nom, dernier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(625, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(gré, nc-nom, gré, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(626, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(délégations, nc-nom, délégations, [n-1]), ex_si(réunies, vpp-ver:pper, réunies, [dl(0,n,n)-1]), ex_si(votent, v-ver:pres, votent, [dl(0,np,s)-1]), ex_si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(adopter, vinf-ver:infi, adopter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(627, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', npp-nam, 'Santé', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consensus, nc-nom, consensus, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(628, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(adopter, vinf-ver:infi, adopter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(consensus, nc-nom, consensus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(629, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(restent, v-ver:pres, restent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(souverains, adj-adj, souverains, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(décider, vinf-ver:infi, décider, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(implémenter, vinf-ver:infi, implémenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(recommandations, nc-nom, recommandations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(630, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(recommandation, nc-nom, recommandation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(reste, v-ver:pres, reste, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(discrétion, nc-nom, discrétion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(631, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(632, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(adopter, vinf-ver:infi, adopter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(conventions, nc-nom, conventions, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(internationaux, adj-adj, internationaux, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(biais, nc-nom, biais, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Assemblées', nc-nam, 'Assemblées', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(633, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(souhaitent, v-ver:pres, souhaitent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(634, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(traités, nc-nom, traités, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(signe, v-ver:pres, signe, [dr(0,dl(0,np,s),np)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(contraignantes, adj-adj, contraignantes, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(635, Result) :-
      prob_parse([ ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diffusé, vpp-ver:pper, diffusé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fournie, vpp-ver:pper, fournie, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(apparaît, v-ver:pres, apparaît, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(636, Result) :-
      prob_parse([ ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diffusé, vpp-ver:pper, diffusé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(datant, vpr-ver:ppre, datant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2015, pro-num, 2015, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(637, Result) :-
      prob_parse([ ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diffusé, vpp-ver:pper, diffusé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fournie, vpp-ver:pper, fournie, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(638, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(fournie, vpp-ver:pper, fournie, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tôt, adv-adv, tôt, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(jeudi, nc-nom, jeudi, [dr(0,dl(1,s,s),n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(639, Result) :-
      prob_parse([ ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(640, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(multinationale, nc-nom, multinationale, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(gazières, adj-adj, gazières, [dl(0,n,n)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(641, Result) :-
      prob_parse([ ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(installé, vpp-ver:pper, installé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Economie', nc-nam, 'Economie', [n-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(642, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dl(0,n,n)-1]), ex_si('Macron', npp-nam, 'Macron', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(implanté, vpp-ver:pper, implanté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(ministre, nc-nom, ministre, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Economie', nc-nom, 'Economie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(643, Result) :-
      prob_parse([ ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(suit, v-ver:pres, suit, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(stratégie, nc-nom, stratégie, [n-1]), ex_si(commerciale, adj-adj, commerciale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(revêt, v-ver:pres, revêt, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(dimension, nc-nom, dimension, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(644, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(mégaprojets, nc-nom, mégaprojets, [n-1]), ex_si(menés, vpp-ver:pper, menés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(découlent, v-ver:pres, découlent, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(partenariat, nc-nom, partenariat, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(noué, vpp-ver:pper, noué, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2011, pro-num, 2011, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(stratégie, nc-nom, stratégie, [n-1]), ex_si(propre, adj-adj, propre, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(revêtent, v-ver:pres, revêtent, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dl(1,s,s)-1]), ex_si(dimension, nc-nom, dimension, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(645, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(multinationale, nc-nom, multinationale, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(646, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(implantation, nc-nom, implantation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(remonte, v-ver:pres, remonte, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(647, Result) :-
      prob_parse([ ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(trentaine, nc-num, trentaine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(648, Result) :-
      prob_parse([ ex_si('Monsieur', nc-abr, 'Monsieur', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(chef, nc-nom, chef, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(constante, adj-adj, constante, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(649, Result) :-
      prob_parse([ ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(installé, vpp-ver:pper, installé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(650, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Macron', npp-nam, 'Macron', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(651, Result) :-
      prob_parse([ ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,n,n),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(investisseur, nc-nom, investisseur, [n-1]), ex_si(étranger, adj-adj, étranger, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(652, Result) :-
      prob_parse([ ex_si('Loin', adv-adv, 'Loin', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(devant, p-prp, devant, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Nigéria', npp-nam, 'Nigéria', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(653, Result) :-
      prob_parse([ ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(entièrement, adv-adv, entièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(privé, vpp-ver:pper, privé, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(suit, v-ver:pres, suit, [dr(0,dl(0,np,s),np)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(tout, pro-pro:ind, tout, [np-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(stratégie, nc-nom, stratégie, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(répond, v-ver:pres, répond, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(forcément, adv-adv, forcément, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aligné, vpp-ver:pper, aligné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(654, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(importance, nc-nom, importance, [n-1]), ex_si(stratégique, adj-adj, stratégique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(diplomatie, nc-nom, diplomatie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(655, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si(dépit, nc-nom, dépit, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(brutal, adj-adj, brutal, [dr(0,n,n)-1]), ex_si(refroidissement, nc-nom, refroidissement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(consécutif, adj-adj, consécutif, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(continue, v-ver:pres, continue, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(imité, vpp-ver:pper, imité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(concurrents, nc-nom, concurrents, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Shell', npp-nam, 'Shell', [np-1]), ex_si(ou, cc-kon, ou, [np-1]), ex_si('BP', npp-abr, 'BP', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(656, Result) :-
      prob_parse([ ex_si('Contrairement', adv-adv, 'Contrairement', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(concurrents, nc-nom, concurrents, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), ex_si(maintient, v-ver:pres, maintient, [dr(0,dl(0,np,s),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instant, nc-nom, instant, [n-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(657, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(séquences, nc-nom, séquences, [n-1]), ex_si(vidéo, adj-nom, vidéo, [dl(0,n,n)-1]), ex_si(amateurs, adj-adj, amateurs, [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('BMP', nc-abr, 'BMP', [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(brisant, vpr-ver:ppre, brisant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(barricades, nc-nom, barricades, [n-1]), ex_si(construites, vpp-ver:pper, construites, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2014, adj-num, 2014, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(658, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(barricade, nc-nom, barricade, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démolie, vpp-ver:pper, démolie, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('BMP', npp-abr, 'BMP', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Ndlr', npp-nam, 'Ndlr', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2014, adj-num, 2014, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(659, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2014, adj-num, 2014, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(parlait, v-ver:impf, parlait, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(vingt, det-num, vingt, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(affrontements, nc-nom, affrontements, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(séparatistes, nc-nom, séparatistes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(660, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(affrontements, nc-nom, affrontements, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2014, adj-num, 2014, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vingtaine, nc-num, vingtaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suivis, vpp-ver:pper, suivis, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(anarchie, nc-nom, anarchie, [n-1]), ex_si(marqués, vpp-ver:pper, marqués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pillages, nc-nom, pillages, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(magasins, nc-nom, magasins, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(661, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(théâtrale, adj-adj, théâtrale, [dl(0,n,n)-1]), ex_si(éphémère, adj-adj, éphémère, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si('Royal', npp-nam, 'Royal', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Luxe', npp-nam, 'Luxe', [np-1]), ex_si(mettant, vpr-ver:ppre, mettant, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(explorateurs, nc-nom, explorateurs, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(contrée, nc-nom, contrée, [n-1]), ex_si(glaciale, adj-adj, glaciale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(installé, vpp-ver:pper, installé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(toit, nc-nom, toit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nantes', npp-nam, 'Nantes', [np-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(662, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(installation, nc-nom, installation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(igloo, nc-nom, igloo, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(trappeurs, nc-nom, trappeurs, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(toit, nc-nom, toit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Nantes', npp-nam, 'Nantes', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(autre, adj-adj, autre, [dr(0,dl(0,n,n),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(artistique, adj-adj, artistique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si('Royal', npp-nam, 'Royal', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Luxe', npp-nam, 'Luxe', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Nantes', npp-nam, 'Nantes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(663, Result) :-
      prob_parse([ ex_si('Jean-Luc', npp-nam, 'Jean-Luc', [dr(0,np,np)-1]), ex_si('Courcoult', npp-nam, 'Courcoult', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(monter, vinf-ver:infi, monter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(installation, nc-nom, installation, [n-1]), ex_si(artistique, adj-adj, artistique, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(toit, nc-nom, toit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Nantes', npp-nam, 'Nantes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(664, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(hissé, vpp-ver:pper, hissé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(toit, nc-nom, toit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Nantes', npp-nam, 'Nantes', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(signe, nc-nom, signe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(665, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(filmé, vpp-ver:pper, filmé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(théâtrale, adj-adj, théâtrale, [dl(0,n,n)-1]), ex_si(éphémère, adj-adj, éphémère, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(toit, nc-nom, toit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nantes', npp-nam, 'Nantes', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(campement, nc-nom, campement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(666, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(filmé, vpp-ver:pper, filmé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(camp, nc-nom, camp, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(toit, nc-nom, toit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nantes', npp-nam, 'Nantes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(667, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(antichars, adj-adj, antichars, [dl(0,n,n)-1]), ex_si(présentées, vpp-ver:pper, présentées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arsenal, nc-nom, arsenal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(668, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(antichars, adj-adj, antichars, [dl(0,n,n)-1]), ex_si(appartenant, vpr-ver:ppre, appartenant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(illustrant, vpr-ver:ppre, illustrant, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(puissance, nc-nom, puissance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(669, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(antichar, npp-adj, antichar, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vraie, adj-adj, vraie, [dr(0,n,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(juste, adv-adv, juste, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ingénierie, nc-nom, ingénierie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(670, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(animation, nc-nom, animation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('3D', nc-abr, '3D', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(date, v-ver:pres, date, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2016, pro-num, 2016, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créée, vpp-ver:pper, créée, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(toutes, det-pro:ind, toutes, [dr(0,np,n)-1]), ex_si(pièces, nc-nom, pièces, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(671, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('Dahir', npp-nam, 'Dahir', [dl(0,n,n)-1]), ex_si('Insaat', npp-nam, 'Insaat', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2016, pro-num, 2016, [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('YouTube', npp-nam, 'YouTube', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(672, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(impressionnantes, adj-adj, impressionnantes, [dr(0,n,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(antichars, adj-adj, antichars, [dl(0,n,n)-1]), ex_si(relayée, vpp-ver:pper, relayée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,n)-1]), ex_si(internet, pro-abr, internet, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(exercice, nc-nom, exercice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(créativité, nc-nom, créativité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dr(0,s,np),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(futur, nc-nom, futur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(673, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(antichars, adj-adj, antichars, [dl(0,n,n)-1]), ex_si(impressionnantes, adj-adj, impressionnantes, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(animation, nc-nom, animation, [n-1]), ex_si(imaginant, vpr-ver:ppre, imaginant, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(pourraient, v-ver:pres, pourraient, [dr(0,dr(0,s,np),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(futur, nc-nom, futur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(674, Result) :-
      prob_parse([ ex_si('Dirigeant', vpr-ver:ppre, 'Dirigeant', [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(turque, adj-adj, turque, [dl(0,n,n)-1]), ex_si('Dahir', npp-nam, 'Dahir', [dl(0,n,n)-1]), ex_si('Insaat', npp-nam, 'Insaat', [dl(0,n,n)-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créée, vpp-ver:pper, créée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Dahir', npp-nam, 'Dahir', [dr(0,np,np)-1]), ex_si('Semenov', npp-nam, 'Semenov', [np-1]), ex_si(conçoit, v-ver:pres, conçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(engins, nc-nom, engins, [n-1]), ex_si(futuristes, adj-adj, futuristes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(imagine, v-ver:pres, imagine, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(ses, det-det:pos, ses, [n-1]), ex_si(créations, nc-nom, créations, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(futur, nc-nom, futur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(675, Result) :-
      prob_parse([ ex_si('Dahir', npp-nam, 'Dahir', [dr(0,np,np)-1]), ex_si('Semenov', npp-nam, 'Semenov', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(grandi, vpp-ver:pper, grandi, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créée, vpp-ver:pper, créée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(676, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(antichars, adj-adj, antichars, [dl(0,n,n)-1]), ex_si(appartenant, vpr-ver:ppre, appartenant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(illustrant, vpr-ver:ppre, illustrant, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(puissance, nc-nom, puissance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(677, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(certainement, adv-adv, certainement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(678, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(impressionnantes, adj-adj, impressionnantes, [dr(0,n,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(antichars, adj-adj, antichars, [dl(0,n,n)-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(illustre, v-ver:pres, illustre, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(679, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(impressionnantes, adj-adj, impressionnantes, [dr(0,n,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(antichars, adj-adj, antichars, [dl(0,n,n)-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(680, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(acteurs, nc-nom, acteurs, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(payés, vpp-ver:pper, payés, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(victimes, nc-nom, victimes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(681, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(victimes, nc-nom, victimes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(réels, adj-adj, réels, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(acteurs, nc-nom, acteurs, [n-1]), ex_si(jouant, vpr-ver:ppre, jouant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si('Ukrainiens', adj-nam, 'Ukrainiens', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(682, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(appliquer, vinf-ver:infi, appliquer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(liquide, nc-nom, liquide, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(semblable, adj-adj, semblable, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(rit, v-ver:pres, rit, [dl(0,np,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(blonde, adj-adj, blonde, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(683, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(maquiller, vinf-ver:infi, maquiller, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appui, nc-nom, appui, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(684, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(séquence, nc-nom, séquence, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(identique, adj-adj, identique, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Daria', npp-nam, 'Daria', [dr(0,np,np)-1]), ex_si('Driuchenko', npp-nam, 'Driuchenko', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(supprimée, vpp-ver:pper, supprimée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(685, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(séquence, nc-nom, séquence, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(antérieure, adj-adj, antérieure, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(686, Result) :-
      prob_parse([ ex_si('Daria', npp-nam, 'Daria', [dr(0,np,np)-1]), ex_si('Driuchenko', npp-nam, 'Driuchenko', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(productrice, nc-nom, productrice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(précisé, vpp-ver:pper, précisé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(proviennent, v-ver:pres, proviennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(tournage, nc-nom, tournage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(nommée, vpp-ver:pper, nommée, [dr(0,dl(0,n,n),np)-1]), ex_si('Contamin', npp-nam, 'Contamin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(687, Result) :-
      prob_parse([ ex_si('Daria', npp-nam, 'Daria', [dr(0,np,np)-1]), ex_si('Driuchenko', npp-nam, 'Driuchenko', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(filmées, vpp-ver:pper, filmées, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(tournage, nc-nom, tournage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(épisode, nc-nom, épisode, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Contamin', npp-nam, 'Contamin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(688, Result) :-
      prob_parse([ ex_si('Daria', npp-nam, 'Daria', [dr(0,np,np)-1]), ex_si('Driuchenko', npp-nam, 'Driuchenko', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('TikTok', npp-nam, 'TikTok', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(séquence, nc-nom, séquence, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(filmée, vpp-ver:pper, filmée, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(tournage, nc-nom, tournage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(épisode, nc-nom, épisode, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Contamin', npp-nam, 'Contamin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(689, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tournage, nc-nom, tournage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(télévisée, vpp-ver:pper, télévisée, [dl(0,n,n)-1]), ex_si('Contamin', npp-nam, 'Contamin', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(690, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(concernée, vpp-ver:pper, concernée, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tournage, nc-nom, tournage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(télévisée, vpp-ver:pper, télévisée, [dl(0,n,n)-1]), ex_si('Contamin', npp-nam, 'Contamin', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(691, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(concernée, vpp-ver:pper, concernée, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(692, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(autoriser, vinf-ver:infi, autoriser, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ressortissants, nc-nom, ressortissants, [n-1]), ex_si(syriens, adj-adj, syriens, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(porter, vinf-ver:infi, porter, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(volontaires, adj-adj, volontaires, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(combattre, vinf-ver:infi, combattre, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(693, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(volontaires, nc-nom, volontaires, [n-1]), ex_si(autorisés, vpp-ver:pper, autorisés, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(combattre, vinf-ver:infi, combattre, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ressortissants, nc-nom, ressortissants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Proche-Orient', npp-nam, 'Proche-Orient', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si('Syriens', nc-nam, 'Syriens', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(694, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Première', adj-num, 'Première', [dr(0,n,n)-1]), ex_si(dame, nc-nom, dame, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Nice', npp-nam, 'Nice', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(vendredi, nc-nom, vendredi, [dr(0,n,n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(695, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(repérée, vpp-ver:pper, repérée, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Nice', npp-nam, 'Nice', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(696, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(vendredi, nc-nom, vendredi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Première', adj-num, 'Première', [dr(0,n,n)-1]), ex_si(dame, nc-nom, dame, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Nice', npp-nam, 'Nice', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(697, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), ex_si('Zelenska', npp-nam, 'Zelenska', [np-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si('Kimberley', npp-nam, 'Kimberley', [dr(0,np,np)-1]), ex_si('Garner', npp-nam, 'Garner', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Eden', npp-nam, 'Eden', [n-1]), ex_si('Roc', npp-nam, 'Roc', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Antibes', npp-nam, 'Antibes', [np-1]), ex_si(le, det-det:art, le, [np-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(698, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(0,n,n),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('MiG-29', nc-abr, 'MiG-29', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(abat, v-ver:pres, abat, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si('Su-35', npp-nam, 'Su-35', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('Kyiv', npp-nam, 'Kyiv', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(699, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(0,n,n),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(abat, v-ver:pres, abat, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(700, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(impressionnant, adj-adj, impressionnant, [dr(0,n,n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(relayé, vpp-ver:pper, relayé, [dl(0,n,n)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(provient, v-ver:pres, provient, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('DCS', npp-abr, 'DCS', [dr(0,np,np)-1]), ex_si('World', npp-nam, 'World', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(simulateur, nc-nom, simulateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(suisse, adj-adj, suisse, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), ex_si('Eagle', npp-nam, 'Eagle', [dl(0,n,n)-1]), ex_si('Dynamics', npp-nam, 'Dynamics', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(701, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(générée, vpp-ver:pper, générée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('Digital', npp-nam, 'Digital', [dr(0,np,np)-1]), ex_si('Combat', npp-nam, 'Combat', [dr(0,np,np)-1]), ex_si('Simulator', npp-nam, 'Simulator', [dr(0,np,np)-1]), ex_si('World', npp-nam, 'World', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('DCS', npp-abr, 'DCS', [dr(0,np,np)-1]), ex_si('World', npp-nam, 'World', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(jeu, nc-nom, jeu, [n-1]), ex_si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(simulation, nc-nom, simulation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(702, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(séquence, nc-nom, séquence, [n-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(détruisant, vpr-ver:ppre, détruisant, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(appareil, nc-nom, appareil, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(occupants, nc-nom, occupants, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(relayée, vpp-ver:pper, relayée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Twitter', npp-nam, 'Twitter', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si('Facebook', npp-nam, 'Facebook', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(703, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(détruit, v-ver:pres, détruit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(partagée, vpp-ver:pper, partagée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si(officiels, adj-adj, officiels, [dl(0,n,n)-1]), ex_si(représentant, vpr-ver:ppre, représentant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(704, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(duquel, p+pro-pro:rel, duquel, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(détruit, v-ver:pres, détruit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(capté, vpp-ver:pper, capté, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(705, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(censée, adj-adj, censée, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(captée, vpp-ver:pper, captée, [dl(0,np,s_pass)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(éditée, vpp-ver:pper, éditée, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jeu, nc-nom, jeu, [n-1]), ex_si('DCS', npp-nam, 'DCS', [dl(0,n,n)-1]), ex_si('World', npp-nam, 'World', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Eagle', npp-nam, 'Eagle', [dr(0,np,np)-1]), ex_si('Dynamics', npp-nam, 'Dynamics', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(706, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(0,n,n),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('MiG-29', nc-abr, 'MiG-29', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(abat, v-ver:simp, abat, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si('Su-35', npp-nam, 'Su-35', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('Kyiv', npp-nam, 'Kyiv', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(707, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(avions, nc-nom, avions, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(apparaissent, v-ver:pres, apparaissent, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('MiG-29', npp-abr, 'MiG-29', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Su-27', nc-nom, 'Su-27', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(708, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(internaute, nc-nom, internaute, [n-1]), ex_si(congolais, adj-adj, congolais, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(blog, nc-nom, blog, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),pp)-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(709, Result) :-
      prob_parse([ ex_si('Dès', p-prp, 'Dès', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(introduction, nc-nom, introduction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(précisé, vpp-ver:pper, précisé, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(710, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(adressée, vpp-ver:pper, adressée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), ex_si(correspondance, nc-nom, correspondance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Président', nc-nom, 'Président', [n-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(711, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(internaute, nc-nom, internaute, [n-1]), ex_si(congolais, adj-adj, congolais, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(blog, nc-nom, blog, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),pp)-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(712, Result) :-
      prob_parse([ ex_si('Dès', p-prp, 'Dès', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(introduction, nc-nom, introduction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(précisé, vpp-ver:pper, précisé, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(713, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(adressée, vpp-ver:pper, adressée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(contient, v-ver:pres, contient, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(exacts, adj-adj, exacts, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Président', nc-nom, 'Président', [n-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(714, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détaillé, vpp-ver:pper, détaillé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(715, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dirigeant, nc-nom, dirigeant, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(analyse, v-ver:pres, analyse, [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(géopolitiques, adj-adj, géopolitiques, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(offensive, nc-nom, offensive, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('2.000', det-num, '2.000', [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(716, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(dite, vpp-ver:pper, dite, [dr(0,dl(0,n,n),pp)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dirigeant, nc-nom, dirigeant, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(analyse, v-ver:pres, analyse, [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(géopolitiques, adj-adj, géopolitiques, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(offensive, nc-nom, offensive, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('2.000', det-num, '2.000', [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(717, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(dite, vpp-ver:pper, dite, [dr(0,dl(0,n,n),pp)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrite, vpp-ver:pper, écrite, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Merseign', npp-nam, 'Merseign', [dr(0,np,np)-1]), ex_si('Luzonzo', npp-nam, 'Luzonzo', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('Wordpress', npp-nam, 'Wordpress', [dl(0,n,n)-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si('Démocratique', adj-nam, 'Démocratique', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Congo', npp-nam, 'Congo', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('RDC', npp-abr, 'RDC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(718, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(émise, vpp-ver:pper, émise, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(rédigée, vpp-ver:pper, rédigée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(russe, nc-nom, russe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(719, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(partagée, vpp-ver:pper, partagée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(russe, nc-nom, russe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(renvoyer, vinf-ver:infi, renvoyer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sources, nc-nom, sources, [n-1]), ex_si(officielles, adj-adj, officielles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(émise, vpp-ver:pper, émise, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(720, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(présentatrice, nc-nom, présentatrice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si('France', npp-nam, 'France', [dl(0,n,n)-1]), ex_si(24, adj-num, 24, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interviewé, vpp-ver:pper, interviewé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Gabon', npp-nam, 'Gabon', [n-1]), ex_si('Ali', npp-nam, 'Ali', [dl(0,n,n)-1]), ex_si('Bongo', npp-nam, 'Bongo', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(721, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('France', npp-nam, 'France', [dl(0,n,n)-1]), ex_si(24, adj-num, 24, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), ex_si('[n\'avait]', ponct-pun, '[n\'avait]', [let-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(depuis, p-prp, depuis, [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déclenchement, nc-nom, déclenchement, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(722, Result) :-
      prob_parse([ ex_si('France', npp-nam, 'France', [np-1]), ex_si(24, adj-num, 24, [dl(0,np,np)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), ex_si('Ali', npp-nam, 'Ali', [dl(0,n,n)-1]), ex_si('Bongo', npp-nam, 'Bongo', [dl(0,n,n)-1]), ex_si('Ondimba', npp-nam, 'Ondimba', [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(723, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Gabon', npp-nam, 'Gabon', [n-1]), ex_si('Ali', npp-nam, 'Ali', [dl(0,n,n)-1]), ex_si('Bongo', npp-nam, 'Bongo', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(24, adj-num, 24, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(724, Result) :-
      prob_parse([ ex_si('Ali', npp-nam, 'Ali', [dr(0,np,np)-1]), ex_si('Bongo', npp-nam, 'Bongo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(menacé, vpp-ver:pper, menacé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(attaquer, vinf-ver:infi, attaquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retirait, v-ver:impf, retirait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envahi, vpp-ver:pper, envahi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(rage, nc-nom, rage, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(725, Result) :-
      prob_parse([ ex_si('Ali', npp-nam, 'Ali', [dr(0,np,np)-1]), ex_si('Bongo', npp-nam, 'Bongo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,n,n))-1]), ex_si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('ATTAQUER', vinf-ver:infi, 'ATTAQUER', [dr(0,dl(0,np,s_inf),np)-1]), ex_si('LA', det-det:art, 'LA', [dr(0,np,n)-1]), ex_si('RUSSIE', npp-nom, 'RUSSIE', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(recule, v-ver:pres, recule, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(726, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(menacé, vpp-ver:pper, menacé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retirait, v-ver:impf, retirait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(727, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(rumeur, nc-nom, rumeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(contra, et-ver:pres, contra, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(prétendue, adj-adj, prétendue, [dr(0,n,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(fake, et-nom, fake, [dr(0,n,n)-1]), ex_si(news, nc-nom, news, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(728, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Gabon', npp-nam, 'Gabon', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', vpp-ver:pper, 'Unies', [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(venir, vinf-ver:infi, venir, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(condamnant, vpr-ver:ppre, condamnant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(agression, nc-nom, agression, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(commise, vpp-ver:pper, commise, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(729, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(expliquant, vpr-ver:ppre, expliquant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Gabon', npp-nam, 'Gabon', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(attaché, vpp-ver:pper, attaché, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intégrité, nc-nom, intégrité, [n-1]), ex_si(territoriale, adj-adj, territoriale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(730, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(lendemain, nc-nom, lendemain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrasé, vpp-ver:pper, écrasé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(autant, adv-adv, autant, [np-1]), ex_si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passager, nc-nom, passager, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(731, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tank, nc-nom, tank, [n-1]), ex_si(roule, v-ver:pres, roule, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(allure, nc-nom, allure, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(route, nc-nom, route, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(résidentiel, adj-adj, résidentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(croise, v-ver:pres, croise, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(route, nc-nom, route, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(roule, v-ver:pres, roule, [dl(0,np,s)-1]), ex_si('par-dessus', adv-adv, 'par-dessus', [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(732, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(conducteur, nc-nom, conducteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(survécu, vpp-ver:pper, survécu, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(733, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(734, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(écrase, v-ver:pres, écrase, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(735, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(lendemain, nc-nom, lendemain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrasé, vpp-ver:pper, écrasé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(autant, adv-adv, autant, [np-1]), ex_si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passager, nc-nom, passager, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(736, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(passager, nc-nom, passager, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vivant, adj-ver:ppre, vivant, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrasé, vpp-ver:pper, écrasé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(737, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(lendemain, nc-nom, lendemain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(écraser, vinf-ver:infi, écraser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(autant, adv-adv, autant, [np-1]), ex_si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passager, nc-nom, passager, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(738, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(passager, nc-nom, passager, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrasé, vpp-ver:pper, écrasé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(739, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('9K35', npp-abr, '9K35', [dr(0,n,n)-1]), ex_si('Strela-10', npp-nam, 'Strela-10', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(740, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(identifié, vpp-ver:pper, identifié, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(741, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(fuyant, vpr-ver:ppre, fuyant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(saboteurs, nc-nom, saboteurs, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(742, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(conducteur, nc-nom, conducteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(saboteur, nc-nom, saboteur, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(bien, adv-adv, bien, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(percuté, vpp-ver:pper, percuté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(fuyant, vpr-ver:ppre, fuyant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(743, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Obolon', npp-nam, 'Obolon', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(fuyant, vpr-ver:ppre, fuyant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(saboteurs, nc-nom, saboteurs, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(744, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(char, nc-nom, char, [n-1]), ex_si(impliqué, vpp-ver:pper, impliqué, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Obolono', npp-nam, 'Obolono', [np-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(perturbé, vpp-ver:pper, perturbé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(745, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(saboteurs, nc-nom, saboteurs, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(746, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Natasha', npp-nam, 'Natasha', [dr(0,np,np)-1]), ex_si('Perakov', npp-nam, 'Perakov', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(747, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(pilote, nc-adj, pilote, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Nadia', npp-nam, 'Nadia', [dr(0,np,np)-1]), ex_si('Savtchenko', npp-nam, 'Savtchenko', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(active, adj-adj, active, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(748, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(749, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(pilote, adj-adj, pilote, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(active, adj-adj, active, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(annonçant, vpr-ver:ppre, annonçant, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(éventuel, adj-adj, éventuel, [dr(0,n,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(750, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Natasha', npp-nam, 'Natasha', [dr(0,np,np)-1]), ex_si('Perakov', npp-nam, 'Perakov', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(751, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('Nadia', npp-nam, 'Nadia', [dr(0,np,np)-1]), ex_si('Savtchenko', npp-nam, 'Savtchenko', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(752, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(pilote, adj-adj, pilote, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('Nadia', npp-nam, 'Nadia', [dr(0,np,np)-1]), ex_si('Savtchenko', npp-nam, 'Savtchenko', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(753, Result) :-
      prob_parse([ ex_si('Nadia', npp-nam, 'Nadia', [dr(0,np,np)-1]), ex_si('Savtchenko', npp-nam, 'Savtchenko', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusée, vpp-ver:pper, accusée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(754, Result) :-
      prob_parse([ ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Xi', npp-nam, 'Xi', [dr(0,np,np)-1]), ex_si('Jinping', npp-nam, 'Jinping', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Rumen', npp-nam, 'Rumen', [dr(0,np,np)-1]), ex_si('Radev', npp-nam, 'Radev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Nikol', npp-nam, 'Nikol', [dr(0,np,np)-1]), ex_si('Pashinyan', npp-nam, 'Pashinyan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Pellegrini', npp-nam, 'Pellegrini', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(faisaient, v-ver:impf, faisaient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(personnalités, nc-nom, personnalités, [n-1]), ex_si(présentes, vpp-ver:pper, présentes, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Forum', nc-nam, 'Forum', [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si(instar, nc-nom, instar, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('António', npp-nam, 'António', [dr(0,np,np)-1]), ex_si('Guterres', npp-nam, 'Guterres', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), ex_si(secrétaire, nc-nom, secrétaire, [dr(0,np,n)-1]), ex_si(général, adj-adj, général, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', npp-nam, 'Organisation', [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(nations, nc-nom, nations, [dr(0,dl(0,n,n),n)-1]), ex_si(unies, adj-adj, unies, [dr(0,dl(0,n,n),n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si('ONU', npp-abr, 'ONU', [let-1]), ex_si(')', ponct-pun, ')', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(755, Result) :-
      prob_parse([ ex_si('António', npp-nam, 'António', [dr(0,np,np)-1]), ex_si('Guterres', npp-nam, 'Guterres', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(édition, nc-nom, édition, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Forum', nc-nam, 'Forum', [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(756, Result) :-
      prob_parse([ ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(mention, nc-nom, mention, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(propos, nc-nom, propos, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(présidentielles, adj-adj, présidentielles, [dl(0,n,n)-1]), ex_si(françaises, adj-adj, françaises, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(757, Result) :-
      prob_parse([ ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(avis, nc-nom, avis, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(758, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(parodique, adj-adj, parodique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accolé, vpp-ver:pper, accolé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('sous-titres', nc-nom, 'sous-titres', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(erronés, vpp-ver:pper, erronés, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(datant, vpr-ver:ppre, datant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(édition, nc-nom, édition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Forum', nc-nam, 'Forum', [n-1]), ex_si(économique, adj-adj, économique, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(759, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('sous-titres', nc-nom, 'sous-titres', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(injurieux, adj-adj, injurieux, [dl(0,n,n)-1]), ex_si(ajoutés, vpp-ver:pper, ajoutés, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(propos, nc-nom, propos, [n-1]), ex_si(tenus, vpp-ver:pper, tenus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(date, v-ver:pres, date, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(édition, nc-nom, édition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(forum, nc-nom, forum, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(parodiques, adj-adj, parodiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(760, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(qui, prorel-pro:rel, qui, [cl_r-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dl(0,np,s_inf)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prochaine, adj-adj, prochaine, [dr(0,n,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(761, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Français', nc-nam, 'Français', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(voter, vinf-ver:infi, voter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(762, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(état, nc-nom, état, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quelconque, adj-adj, quelconque, [dr(0,n,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(homologue, nc-nom, homologue, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(perspective, nc-nom, perspective, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, adj-adj, présidentielle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(763, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(envoyés, nc-nom, envoyés, [n-1]), ex_si(spéciaux, adj-adj, spéciaux, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dr(0,np,np),dr(0,np,np))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(état, nc-nom, état, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quelconque, adj-adj, quelconque, [dr(0,n,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(764, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(flashes, nc-nom, flashes, [n-1]), ex_si(lumineux, adj-adj, lumineux, [dl(0,n,n)-1]), ex_si(déchirant, vpr-ver:ppre, déchirant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ciel, nc-nom, ciel, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(accompagnés, vpp-ver:pper, accompagnés, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(grondements, nc-nom, grondements, [n-1]), ex_si(sourds, adj-adj, sourds, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(observés, vpp-ver:pper, observés, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(orage, nc-nom, orage, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(765, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(flashes, nc-nom, flashes, [n-1]), ex_si(lumineux, adj-adj, lumineux, [dl(0,n,n)-1]), ex_si(déchirant, vpr-ver:ppre, déchirant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ciel, nc-nom, ciel, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(accompagnés, vpp-ver:pper, accompagnés, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(grondements, nc-nom, grondements, [n-1]), ex_si(sourds, adj-adj, sourds, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(provoqués, vpp-ver:pper, provoqués, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(766, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(allongés, vpp-ver:pper, allongés, [dr(0,dl(0,n,n),pp)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sacs, nc-nom, sacs, [n-1]), ex_si(sombres, adj-adj, sombres, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(protesté, vpp-ver:pper, protesté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(767, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(protesté, vpp-ver:pper, protesté, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(autrichienne, adj-adj, autrichienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chancellerie', nc-nam, 'Chancellerie', [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(768, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(allongés, vpp-ver:pper, allongés, [dr(0,dl(0,n,n),pp)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sacs, nc-nom, sacs, [n-1]), ex_si(sombres, adj-adj, sombres, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(protesté, vpp-ver:pper, protesté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(769, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(uniquement, adv-adv, uniquement, [dr(0,pp,pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(770, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(tués, vpp-ver:pper, tués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(771, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(filmé, vpp-ver:pper, filmé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(direct, nc-nom, direct, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(772, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Fridays', npp-nam, 'Fridays', [np-1]), ex_si('For', et-nam, 'For', [dr(0,dl(0,np,np),np)-1]), ex_si('Future', npp-nam, 'Future', [np-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(militants, nc-nom, militants, [n-1]), ex_si(gisaient, v-ver:impf, gisaient, [dl(0,np,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(morts, nc-nom, morts, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chancellerie, nc-nom, chancellerie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(773, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(symbolisent, v-ver:pres, symbolisent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(mourront, v-ver:pres, mourront, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échec, nc-nom, échec, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(774, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(militants, nc-nom, militants, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(gisaient, v-ver:impf, gisaient, [dl(0,np,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(morts, nc-nom, morts, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chancellerie, nc-nom, chancellerie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(conçus, vpp-ver:pper, conçus, [dl(0,np,s_pass)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(symbole, nc-nom, symbole, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(vrais, adj-adj, vrais, [dr(0,n,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(775, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(allongés, vpp-ver:pper, allongés, [dr(0,dl(0,n,n),pp)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sacs, nc-nom, sacs, [n-1]), ex_si(sombres, adj-adj, sombres, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(protesté, vpp-ver:pper, protesté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(uniquement, adv-adv, uniquement, [dr(0,pp,pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(776, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(allongés, vpp-ver:pper, allongés, [dr(0,dl(0,n,n),pp)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sacs, nc-nom, sacs, [n-1]), ex_si(sombres, adj-adj, sombres, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(protesté, vpp-ver:pper, protesté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(777, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(déclassifié, vpp-ver:pper, déclassifié, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prouve, v-ver:pres, prouve, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rupture, nc-nom, rupture, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(écrit, vpp-ver:pper, écrit, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Soviétiques', nc-nam, 'Soviétiques', [n-1]), ex_si(promettant, vpr-ver:ppre, promettant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(élargir, vinf-ver:infi, élargir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alliance, nc-nom, alliance, [n-1]), ex_si('politico-militaire', adj-adj, 'politico-militaire', [dl(0,n,n)-1]), ex_si('au-delà', p-prp, 'au-delà', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(réunifiée, vpp-ver:pper, réunifiée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(778, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rompu, vpp-ver:pper, rompu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(passé, vpp-ver:pper, passé, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(prévoyant, vpr-ver:ppre, prévoyant, [dr(0,dl(0,n,n),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étendrait, v-ver:impf, étendrait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(779, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(déclassifié, vpp-ver:pper, déclassifié, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prouve, v-ver:pres, prouve, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rupture, nc-nom, rupture, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(écrit, vpp-ver:pper, écrit, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Soviétiques', nc-nam, 'Soviétiques', [n-1]), ex_si(promettant, vpr-ver:ppre, promettant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(élargir, vinf-ver:infi, élargir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alliance, nc-nom, alliance, [n-1]), ex_si('politico-militaire', adj-adj, 'politico-militaire', [dl(0,n,n)-1]), ex_si('au-delà', p-prp, 'au-delà', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(réunifiée, vpp-ver:pper, réunifiée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(780, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(datant, vpr-ver:ppre, datant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(classé, vpp-ver:pper, classé, [dr(0,dl(0,n,n),np)-1]), ex_si('\'', ponct-pun:cit, '\'', [np-1]), ex_si('secret\'', npp-nom, 'secret\'', [let-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(déclassifié, vpp-ver:pper, déclassifié, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(781, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Alliance', nc-nam, 'Alliance', [n-1]), ex_si('nord-atlantique', adj-adj, 'nord-atlantique', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(violé, vpp-ver:pper, violé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(passé, vpp-ver:pper, passé, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sortie, nc-nom, sortie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('URSS', npp-abr, 'URSS', [n-1]), ex_si(prévoyant, vpr-ver:ppre, prévoyant, [dr(0,dl(0,n,n),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étende, v-ver:pres, étende, [dr(0,dl(0,np,s),np)-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(782, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rompu, vpp-ver:pper, rompu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(promesse, nc-nom, promesse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étendre, vinf-ver:infi, étendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(actée, vpp-ver:pper, actée, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunification, nc-nom, réunification, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chute, nc-nom, chute, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mur, nc-nom, mur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(783, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(juridiquement, adv-adv, juridiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(contraignant, adj-adj, contraignant, [dl(0,n,n)-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,n,n),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(démarcation, nc-nom, démarcation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(784, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(suivant, vpr-ver:ppre, suivant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,n,n),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(naissante, adj-adj, naissante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(démarcation, nc-nom, démarcation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(785, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(écrit, vpp-ver:pper, écrit, [dl(0,n,n)-1]), ex_si(contraignant, adj-adj, contraignant, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,np,s_pass)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(interdit, v-ver:pres, interdit, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(élargir, vinf-ver:infi, élargir, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(786, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(juridiquement, adv-adv, juridiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(contraignant, adj-adj, contraignant, [dl(0,n,n)-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(démarcation, nc-nom, démarcation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(787, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(engagements, nc-nom, engagements, [n-1]), ex_si(verbaux, adj-adj, verbaux, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(rassurer, vinf-ver:infi, rassurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Soviétiques', nc-nam, 'Soviétiques', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunification, nc-nom, réunification, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alliance', nc-nam, 'Alliance', [n-1]), ex_si('nord-atlantique', adj-adj, 'nord-atlantique', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(788, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(engagement, nc-nom, engagement, [n-1]), ex_si(oral, adj-adj, oral, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(émise, vpp-ver:pper, émise, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('Soviétique', adj-nam, 'Soviétique', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(789, Result) :-
      prob_parse([ ex_si('L\'OTAN', npp-abr, 'L\'OTAN', [dr(0,np,n)-1]), ex_si(affirme, v-ver:pres, affirme, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,np,s),s_q)-1]), ex_si(équivoque, nc-nom, équivoque, [dr(0,dl(1,s,s),n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [n-1]), ex_si(il, cls-pro:per, il, [dr(0,s_q,s)-1]), ex_si('n\'', adv-adv, 'n\'', [np-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aura, v-ver:futu, aura, [cl_y-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,pp_de)-1]), ex_si(expansion, nc-nom, expansion, [dr(0,pp_de,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(territoire, nc-nom, territoire, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('OTAN', npp-abr, 'OTAN', [dr(0,np,n)-1]), ex_si(vers, p-prp, vers, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Est', npp-nam, 'Est', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si('c\'', cls-pro:dem, 'c\'', [let-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [np-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,dl(0,dl(1,s,s),dl(1,s,s))),dl(1,s,s))-1]), ex_si(près, adv-adv, près, [dr(0,pp,pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_a,pp_de)-1]), ex_si(frontières, nc-nom, frontières, [dr(0,pp_de,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Union', npp-nam, 'Union', [dr(0,np,n)-1]), ex_si(soviétique, adj-adj, soviétique, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(ministre, nc-nom, ministre, [dr(0,np,n)-1]), ex_si(allemand, adj-adj, allemand, [n-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [dr(0,dl(0,n,n),n)-1]), ex_si(étrangères, adj-adj, étrangères, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si('Hans-Dietrich', npp-nam, 'Hans-Dietrich', [dr(0,dl(0,np,np),np)-1]), ex_si('Genscher', npp-nam, 'Genscher', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(lors, adv-adv, lors, [let-1]), ex_si('d\'', p-prp, 'd\'', [let-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(discours, nc-nom, discours, [dr(0,pp_de,np)-1]), ex_si(prononcé, vpp-ver:pper, prononcé, [dr(0,np,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(janvier, nc-nom, janvier, [dl(0,n,n)-1]), ex_si(1990, adj-num, 1990, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(790, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si(expansion, nc-nom, expansion, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si('OTAN\'', npp-abr, 'OTAN\'', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(discuté, vpp-ver:pper, discuté, [dl(0,np,s_pass)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(tout, nc-nom, tout, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(évoqué, vpp-ver:pper, évoqué, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, adv-adv, avant, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(791, Result) :-
      prob_parse([ ex_si('Pas', adv-adv, 'Pas', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soulevé, vpp-ver:pper, soulevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(792, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(793, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('comptes-rendus', nc-nom, 'comptes-rendus', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entretiens, nc-nom, entretiens, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Ministres', nc-nom, 'Ministres', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si('Étrangères', adj-adj, 'Étrangères', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(commencent, v-ver:pres, commencent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(publiés, vpp-ver:pper, publiés, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),np),dl(0,np,s_inf))-1]), ex_si(apparaître, vinf-ver:infi, apparaître, [dl(0,np,s_inf)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(engagements, nc-nom, engagements, [n-1]), ex_si(oraux, adj-adj, oraux, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(entendu, vpp-ver:pper, entendu, [dl(0,n,n)-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étendre, vinf-ver:infi, étendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(794, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(garanties, nc-nom, garanties, [n-1]), ex_si(orales, adj-adj, orales, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(émises, vpp-ver:pper, émises, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(795, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mémorandum, nc-nom, mémorandum, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Budapest', npp-nam, 'Budapest', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(engageait, v-ver:impf, engageait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(signataires, nc-nom, signataires, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(existantes, adj-adj, existantes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(abstenir, vinf-ver:infi, abstenir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intégrité, nc-nom, intégrité, [n-1]), ex_si(territoriale, adj-adj, territoriale, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(796, Result) :-
      prob_parse([ ex_si('Toutefois', adv-adv, 'Toutefois', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(respecté, vpp-ver:pper, respecté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(recouru, vpp-ver:pper, recouru, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intégrité, nc-nom, intégrité, [n-1]), ex_si(territoriale, adj-adj, territoriale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(envahissant, vpr-ver:ppre, envahissant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(797, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(enfreint, vpp-ver:pper, enfreint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(promesse, nc-nom, promesse, [n-1]), ex_si(écrite, vpp-ver:pper, écrite, [dl(0,n,n)-1]), ex_si(passée, vpp-ver:pper, passée, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mémorandum, nc-nom, mémorandum, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Budapest', npp-nam, 'Budapest', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(798, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('13.000', det-num, '13.000', [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(799, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Donbass', npp-nam, 'Donbass', [np-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(huit, adj-num, huit, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('13.000', det-num, '13.000', [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(tués, vpp-ver:pper, tués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(800, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épicentre, nc-nom, épicentre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(éclaté, vpp-ver:pper, éclaté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(annexion, nc-nom, annexion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Crimée', npp-nam, 'Crimée', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(801, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(confrontée, vpp-ver:pper, confrontée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(annexion, nc-nom, annexion, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Crimée', npp-nam, 'Crimée', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(802, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2015, pro-num, 2015, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diminué, vpp-ver:pper, diminué, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(intensité, nc-nom, intensité, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(signature, nc-nom, signature, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(803, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(intensité, nc-nom, intensité, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('cessez-le-feu', nc-nom, 'cessez-le-feu', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2015, adj-num, 2015, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(804, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('13.000', adj-num, '13.000', [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Donbass', npp-nam, 'Donbass', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(toutes, adv-adv, toutes, [dl(1,s,s)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(805, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('13.000', adj-num, '13.000', [dr(0,n,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('10.000', pro-num, '10.000', [np-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(combattants, nc-nom, combattants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(prenantes, vpr-ver:ppre, prenantes, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(806, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Donbass', npp-nam, 'Donbass', [np-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si('13.000', det-num, '13.000', [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(807, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si('2014-2021', adj-num, '2014-2021', [dl(0,n,n)-1]), ex_si(couvrant, vpr-ver:ppre, couvrant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Onu', npp-nam, 'Onu', [n-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('14.200', pro-num, '14.200', [np-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), ex_si('3.400', det-num, '3.400', [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(808, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(décédés, vpp-ver:pper, décédés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('14.200', pro-num, '14.200', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(809, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si('2014-2021', adj-num, '2014-2021', [dl(0,n,n)-1]), ex_si(couvrant, vpr-ver:ppre, couvrant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Onu', npp-nam, 'Onu', [n-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('14.200', pro-num, '14.200', [np-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), ex_si('3.400', det-num, '3.400', [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(810, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(décédés, vpp-ver:pper, décédés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('3.400', pro-num, '3.400', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(811, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(responsabilités, nc-nom, responsabilités, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(partagées, vpp-ver:pper, partagées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(pénale, adj-adj, pénale, [dl(0,n,n)-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CPI', npp-abr, 'CPI', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(évoquant, vpr-ver:ppre, évoquant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(armé, vpp-ver:pper, armé, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(constamment, adv-adv, constamment, [dl(1,s,s)-1]), ex_si(usage, nc-nom, usage, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(lourdes, adj-adj, lourdes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(construites, vpp-ver:pper, construites, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(812, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(différents, adj-adj, différents, [dr(0,n,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(publiés, vpp-ver:pper, publiés, [dl(0,n,n)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(dressent, v-ver:pres, dressent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tableau, nc-nom, tableau, [n-1]), ex_si(nuancé, vpp-ver:pper, nuancé, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(responsabilité, nc-nom, responsabilité, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(813, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(responsabilités, nc-nom, responsabilités, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,np,s_pass)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(abonde, v-ver:pres, abonde, [dr(0,dl(1,s,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(pénale, adj-adj, pénale, [dl(0,n,n)-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CPI', npp-abr, 'CPI', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(évoquant, vpr-ver:ppre, évoquant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(armé, vpp-ver:pper, armé, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(constamment, adv-adv, constamment, [dl(1,s,s)-1]), ex_si(usage, nc-nom, usage, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(lourdes, adj-adj, lourdes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(construites, vpp-ver:pper, construites, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(814, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(exactions, nc-nom, exactions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(imputables, adj-adj, imputables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CPI', npp-abr, 'CPI', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(815, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(large, adj-adj, large, [dr(0,n,n)-1]), ex_si(éventail, nc-nom, éventail, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(comportements, nc-nom, comportements, [n-1]), ex_si(constitutifs, adj-adj, constitutifs, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(relevant, vpr-ver:ppre, relevant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compétence, nc-nom, compétence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(pénale, adj-adj, pénale, [dl(0,n,n)-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CPI', npp-abr, 'CPI', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(commis, vpp-ver:pper, commis, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contexte, nc-nom, contexte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(armé, vpp-ver:pper, armé, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(816, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(constaté, vpp-ver:pper, constaté, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(817, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(redoutable, adj-adj, redoutable, [dr(0,n,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(capable, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(piétiner, vinf-ver:infi, piétiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(818, Result) :-
      prob_parse([ ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(donnerait, v-ver:cond, donnerait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(secondes, nc-nom, secondes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(819, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(redoutable, adj-adj, redoutable, [dr(0,n,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(capable, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(piétiner, vinf-ver:infi, piétiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(820, Result) :-
      prob_parse([ ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(puissant, adj-adj, puissant, [dr(0,n,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(821, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('RS-28', npp-nam, 'RS-28', [dl(0,n,n)-1]), ex_si('Sarmat', npp-nam, 'Sarmat', [dl(0,n,n)-1]), ex_si(surnommé, vpp-ver:pper, surnommé, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(822, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tout, adv-adv, tout, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(existe, v-ver:pres, existe, [dl(0,np,s)-1]), ex_si(bel, adj-adj, bel, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(823, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tout, adv-adv, tout, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(existe, v-ver:pres, existe, [dl(0,np,s)-1]), ex_si(bel, adj-adj, bel, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(824, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('Topol', npp-nam, 'Topol', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(exact, adj-adj, exact, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('RT-2PM2', npp-nam, 'RT-2PM2', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(existe, v-ver:pres, existe, [dl(0,np,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contrairement, adv-adv, contrairement, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('Satan', npp-nam, 'Satan', [dl(0,n,n)-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(825, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('Topol', npp-nam, 'Topol', [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('RT-2PM2', npp-nam, 'RT-2PM2', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1997, pro-num, 1997, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(balistiques, adj-adj, balistiques, [dl(0,n,n)-1]), ex_si(intercontinentaux, adj-adj, intercontinentaux, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(propergol, nc-nom, propergol, [n-1]), ex_si(solide, adj-adj, solide, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(portée, nc-nom, portée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('11.000', det-num, '11.000', [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(826, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('Topol', npp-nam, 'Topol', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(exact, adj-adj, exact, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('RT-2PM2', npp-nam, 'RT-2PM2', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(existe, v-ver:pres, existe, [dl(0,np,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contrairement, adv-adv, contrairement, [dr(0,dl(1,s,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('Satan', npp-nam, 'Satan', [dl(0,n,n)-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(827, Result) :-
      prob_parse([ ex_si('Sans', p-prp, 'Sans', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(préciser, vinf-ver:infi, préciser, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(quel, prowh-pro:rel, quel, [dr(0,s_whq,dr(0,s,dia(1,box(1,dl(0,n,n)))))-1]), ex_si(était, v-ver:impf, était, [dr(0,dr(0,s,dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(exact, adj-adj, exact, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('R-36', npp-nam, 'R-36', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Pavel', npp-nam, 'Pavel', [dr(0,np,np)-1]), ex_si('Korsun', npp-nam, 'Korsun', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agissait, v-ver:impf, agissait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Satan', npp-nam, 'Satan', [n-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(bien, adv-adv, bien, [dr(0,pp,pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(antérieur, adj-adj, antérieur, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(828, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('R-36', npp-nam, 'R-36', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si('Satan', npp-nam, 'Satan', [dl(0,n,n)-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(829, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si('RS-28', npp-nam, 'RS-28', [dl(0,n,n)-1]), ex_si('Sarmart', npp-nam, 'Sarmart', [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('SS-X-30', npp-nam, 'SS-X-30', [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(néanmoins, adv-adv, néanmoins, [dl(1,s,s)-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(néant, nc-nom, néant, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('puisqu\'il', cls-pro:rel, 'puisqu\'il', [dr(0,dl(0,s,s),s)-1]), ex_si(est, v-ver:pres, est, [np-1]), ex_si(capable, adj-adj, capable, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(transporter, vinf-ver:infi, transporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(dizaine, nc-num, dizaine, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ogives, nc-nom, ogives, [dr(0,dl(0,n,n),n)-1]), ex_si(nucléaires, adj-adj, nucléaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(830, Result) :-
      prob_parse([ ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(donnerait, v-ver:cond, donnerait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(secondes, nc-nom, secondes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(831, Result) :-
      prob_parse([ ex_si('RS-28', npp-abr, 'RS-28', [dr(0,np,np)-1]), ex_si('Sarmart', npp-nam, 'Sarmart', [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('Satan', npp-nam, 'Satan', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(balistique, adj-adj, balistique, [dl(0,n,n)-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(donnerait, v-ver:cond, donnerait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(secondes, nc-nom, secondes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(832, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('RS-28', npp-abr, 'RS-28', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(balistique, adj-adj, balistique, [dl(0,n,n)-1]), ex_si(intercontinental, adj-adj, intercontinental, [dl(0,n,n)-1]), ex_si(avancé, vpp-ver:pper, avancé, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ICBM', npp-abr, 'ICBM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(conçu, vpp-ver:pper, conçu, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(échapper, vinf-ver:infi, échapper, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(ennemies, adj-adj, ennemies, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(833, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('900.000', det-num, '900.000', [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(actif, adj-adj, actif, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(équipée, vpp-ver:pper, équipée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(dernier, adj-adj, dernier, [dr(0,dl(0,n,n),n)-1]), ex_si(cri, nc-nom, cri, [n-1]), ex_si(telles, adj-adj, telles, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(antiaériens, adj-adj, antiaériens, [dl(0,n,n)-1]), ex_si('S-400', npp-nam, 'S-400', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(croisière, nc-nom, croisière, [n-1]), ex_si('Kalibr', npp-nam, 'Kalibr', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(834, Result) :-
      prob_parse([ ex_si('S-400', npp-nam, 'S-400', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Kalibr', npp-nam, 'Kalibr', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arsenal, nc-nom, arsenal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(835, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(portait, v-ver:impf, portait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(épaules, nc-nom, épaules, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si(côtés, nc-nom, côtés, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(arborant, vpr-ver:ppre, arborant, [dr(0,dl(0,n,n),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,np,np),n)-1]), ex_si(couleurs, nc-nom, couleurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(836, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(portait, v-ver:impf, portait, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(accompagné, vpp-ver:pper, accompagné, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(837, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(appuyant, vpr-ver:ppre, appuyant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(front, nc-nom, front, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(épaules, nc-nom, épaules, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(existait, v-ver:impf, existait, [dl(0,np,s)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(838, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cliché, nc-nom, cliché, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(drapeaux, nc-nom, drapeaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(pris, vpp-ver:pper, pris, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(839, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(appuyant, vpr-ver:ppre, appuyant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(front, nc-nom, front, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(épaules, nc-nom, épaules, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(existait, v-ver:impf, existait, [dl(0,np,s)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(840, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cliché, nc-nom, cliché, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(drapeaux, nc-nom, drapeaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(marge, nc-nom, marge, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(concert, nc-nom, concert, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(841, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(drapeaux, nc-nom, drapeaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(illustré, vpp-ver:pper, illustré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('The', et-nam, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Washington', npp-nam, 'Washington', [n-1]), ex_si('Post', npp-nam, 'Post', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(842, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(drapeaux, nc-nom, drapeaux, [n-1]), ex_si(portés, vpp-ver:pper, portés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Washington', npp-nam, 'Washington', [dr(0,n,n)-1]), ex_si('Post', npp-nam, 'Post', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(843, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(drapeaux, nc-nom, drapeaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(illustré, vpp-ver:pper, illustré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('The', et-nam, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Washington', npp-nam, 'Washington', [n-1]), ex_si('Post', npp-nam, 'Post', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(844, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Washington', npp-nam, 'Washington', [dr(0,n,n)-1]), ex_si('Post', npp-nam, 'Post', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(illustration, nc-nom, illustration, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(drapeaux, nc-nom, drapeaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(845, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(condamnant, vpr-ver:ppre, condamnant, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(violations, nc-nom, violations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(846, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(votée, vpp-ver:pper, votée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(violations, nc-nom, violations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(commises, vpp-ver:pper, commises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(847, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(convoquant, vpr-ver:ppre, convoquant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(réunit, v-ver:pres, réunit, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(193, adj-num, 193, [dr(0,n,n)-1]), ex_si('Etats', nc-nam, 'Etats', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('elle-même', pro-pro:per, 'elle-même', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(prononce, v-ver:pres, prononce, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(ensuite, adv-adv, ensuite, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(condamnant, vpr-ver:ppre, condamnant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(848, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(convoqué, vpp-ver:pper, convoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(prononcent, v-ver:pres, prononcent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(exigeant, vpr-ver:ppre, exigeant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(849, Result) :-
      prob_parse([ ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(salué, vpp-ver:pper, salué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(votée, vpp-ver:pper, votée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(violations, nc-nom, violations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(commises, vpp-ver:pper, commises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(850, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('Macron', npp-nam, 'Macron', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(référait, v-ver:impf, référait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(851, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(résolutions, nc-nom, résolutions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(papier, nc-nom, papier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contraignantes, adj-ver:ppre, contraignantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(852, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(violations, nc-nom, violations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(commises, vpp-ver:pper, commises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(contraignante, vpr-ver:ppre, contraignante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(853, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(résolutions, nc-nom, résolutions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(papier, nc-nom, papier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contraignantes, adj-ver:ppre, contraignantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(854, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(violations, nc-nom, violations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(commises, vpp-ver:pper, commises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(contraignante, adj-adj, contraignante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(855, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(proposée, vpp-ver:pper, proposée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Albanie', npp-nam, 'Albanie', [n-1]), ex_si(condamnant, vpr-ver:ppre, condamnant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retoquée, vpp-ver:pper, retoquée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Sécurité', npp-nam, 'Sécurité', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(856, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fallu, vpp-ver:pper, fallu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(permanents, adj-adj, permanents, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Sécurité', npp-nam, 'Sécurité', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vote, v-ver:pres, vote, [dl(0,np,s)-1]), ex_si(contre, p-prp, contre, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(857, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Sécurité', npp-nam, 'Sécurité', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(858, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rejetée, vpp-ver:pper, rejetée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,cl_r,dl(0,np,s)),dia(1,box(1,pp_a))))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(opposée, vpp-ver:pper, opposée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(859, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(condamner, vinf-ver:infi, condamner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(validé, vpp-ver:pper, validé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tenue, nc-nom, tenue, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(860, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(convoqué, vpp-ver:pper, convoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(861, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(convoqué, vpp-ver:pper, convoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(862, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(astuce, nc-nom, astuce, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(votant, vpr-ver:ppre, votant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(convoquant, vpr-ver:ppre, convoquant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(863, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(extraordinaire, adj-adj, extraordinaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(massif, adj-adj, massif, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(exigé, vpp-ver:pper, exigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(contraignante, adj-adj, contraignante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(864, Result) :-
      prob_parse([ ex_si('L\'Assemblée', nc-nom, 'L\'Assemblée', [dr(0,np,n)-1]), ex_si(générale, adj-adj, générale, [n-1]), ex_si(a, v-ver:pres, a, [dl(0,n,n)-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),np)-1]), ex_si(très, adv-adv, très, [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(majorité, nc-nom, majorité, [dr(0,n,n)-1]), ex_si(une, det-det:art, une, [n-1]), ex_si(résolution, nc-nom, résolution, [dr(0,np,n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(exige, v-ver:pres, exige, [let-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s),s_q)-1]), ex_si(la, det-det:art, la, [dr(0,s_q,s)-1]), ex_si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), ex_si(cesse, v-ver:pres, cesse, [n-1]), ex_si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dl(1,s,s)-1]), ex_si(invasion, nc-nom, invasion, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(865, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(extraordinaire, adj-adj, extraordinaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(massif, adj-adj, massif, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(exigé, vpp-ver:pper, exigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(contraignante, adj-adj, contraignante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(866, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(condamne, v-ver:pres, condamne, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(politiquement, adv-adv, politiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fort, adj-adj, fort, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(juridiquement, adv-adv, juridiquement, [dr(0,s,s)-1]), ex_si(ça, pro-pro:dem, ça, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(contraint, v-ver:pres, contraint, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(867, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('Canadian', npp-nam, 'Canadian', [dl(0,n,n)-1]), ex_si('National', npp-nam, 'National', [dl(0,n,n)-1]), ex_si('Railway', npp-nam, 'Railway', [dl(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('CN', npp-abr, 'CN', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assuré, vpp-ver:pper, assuré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(disposait, v-ver:impf, disposait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(868, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(improbable, adj-adj, improbable, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(locomotives, nc-nom, locomotives, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Canadian', npp-nam, 'Canadian', [dr(0,np,np)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Railway', npp-nam, 'Railway', [dr(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(869, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('Canadian', npp-nam, 'Canadian', [dl(0,n,n)-1]), ex_si('National', npp-nam, 'National', [dl(0,n,n)-1]), ex_si('Railway', npp-nam, 'Railway', [dl(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('CN', npp-abr, 'CN', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assuré, vpp-ver:pper, assuré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(disposait, v-ver:impf, disposait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(870, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Canadian', npp-nam, 'Canadian', [dr(0,n,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Railway', npp-nam, 'Railway', [dr(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(transporter, vinf-ver:infi, transporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(871, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dirige, v-ver:pres, dirige, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(ravitailler, vinf-ver:infi, ravitailler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(872, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(transporte, v-ver:pres, transporte, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(chars, nc-nom, chars, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(873, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dirige, v-ver:pres, dirige, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(ravitailler, vinf-ver:infi, ravitailler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(874, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fret, nc-nom, fret, [n-1]), ex_si('Canadian', npp-nam, 'Canadian', [dl(0,n,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Railway', npp-nam, 'Railway', [dr(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CN', npp-abr, 'CN', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(875, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(établis, vpp-ver:pper, établis, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(financés, vpp-ver:pper, financés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(exclusivement, adv-adv, exclusivement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(cibles, nc-nom, cibles, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(876, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(opérés, vpp-ver:pper, opérés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(financés, vpp-ver:pper, financés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(877, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(biologique, adj-adj, biologique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(assure, v-ver:pres, assure, [dr(0,dl(1,s,s),np)-1]), ex_si('Andrew', npp-nam, 'Andrew', [dr(0,np,np)-1]), ex_si('Weber', npp-nam, 'Weber', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(programmes, nc-nom, programmes, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(chimique, adj-adj, chimique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(biologique, adj-adj, biologique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,s,txt)-1])], Result).
sent(878, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(biolabs, nc-nom, biolabs, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(exclusifs, adj-adj, exclusifs, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(financés, vpp-ver:pper, financés, [dl(0,np,s_pass)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si(frais, nc-nom, frais, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(879, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(établis, vpp-ver:pper, établis, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(financés, vpp-ver:pper, financés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(exclusivement, adv-adv, exclusivement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(cibles, nc-nom, cibles, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(880, Result) :-
      prob_parse([ ex_si(9, det-num, 9, [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(détruits, vpp-ver:pper, détruits, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si('Iskander', npp-nam, 'Iskander', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(881, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(partenariat, nc-nom, partenariat, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(vise, v-ver:pres, vise, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(destruction, nc-nom, destruction, [n-1]), ex_si(massive, adj-adj, massive, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(882, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(visent, v-ver:pres, visent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(financés, vpp-ver:pper, financés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(883, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réduction, nc-nom, réduction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(menaces, nc-nom, menaces, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(travaille, v-ver:pres, travaille, [dl(0,np,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(sécuriser, vinf-ver:infi, sécuriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(pathogènes, adj-adj, pathogènes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(884, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(travaille, v-ver:pres, travaille, [dl(0,np,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(veiller, vinf-ver:infi, veiller, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(signaler, vinf-ver:infi, signaler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(pathogènes, adj-adj, pathogènes, [dl(0,n,n)-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(885, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(détenir, vinf-ver:infi, détenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(biologique, adj-adj, biologique, [dl(0,n,n)-1]), ex_si(financé, vpp-ver:pper, financé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(886, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(affirmations, nc-nom, affirmations, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(allégations, nc-nom, allégations, [n-1]), ex_si(trompeuses, adj-adj, trompeuses, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(désinformation, nc-nom, désinformation, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(887, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(participent, v-ver:pres, participent, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(établis, vpp-ver:pper, établis, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(888, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(visent, v-ver:pres, visent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(889, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Convention', npp-nam, 'Convention', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(890, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(renonce, v-ver:pres, renonce, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, det-pro:ind, tous, [dr(0,np,n)-1]), ex_si(types, nc-nom, types, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(891, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(désactivation, nc-nom, désactivation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(vise, v-ver:pres, vise, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(892, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(visent, v-ver:pres, visent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(biologiques, adj-adj, biologiques, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(893, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(visité, vpp-ver:pper, visité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tenue, nc-nom, tenue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(camouflage, nc-nom, camouflage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(gilet, nc-nom, gilet, [n-1]), ex_si('pare-balles', adj-adj, 'pare-balles', [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(séparatiste, adj-adj, séparatiste, [dl(0,n,n)-1]), ex_si('pro-russe', adj-adj, 'pro-russe', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(894, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(visité, vpp-ver:pper, visité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(positions, nc-nom, positions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(première, adj-num, première, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(895, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(visité, vpp-ver:pper, visité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tenue, nc-nom, tenue, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étais, v-ver:impf, étais, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('lui-même', pro-pro:per, 'lui-même', [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(batailles, nc-nom, batailles, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(896, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(uniforme, nc-nom, uniforme, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(patrie, nc-nom, patrie, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(897, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [n-1]), ex_si(englobe, v-ver:pres, englobe, [dr(0,dl(0,np,s),np)-1]), ex_si('Donetsk', npp-nam, 'Donetsk', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Louhansk', npp-nam, 'Louhansk', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(républiques, nc-nom, républiques, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(séparatistes, adj-adj, séparatistes, [dl(0,n,n)-1]), ex_si(soutenues, vpp-ver:pper, soutenues, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(898, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), ex_si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(visité, vpp-ver:pper, visité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tenue, nc-nom, tenue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(camouflage, nc-nom, camouflage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(gilet, nc-nom, gilet, [n-1]), ex_si('pare-balles', adj-ver:ppre, 'pare-balles', [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(séparatiste, adj-adj, séparatiste, [dl(0,n,n)-1]), ex_si('pro-russe', adj-adj, 'pro-russe', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Donbass', npp-nam, 'Donbass', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(899, Result) :-
      prob_parse([ ex_si('Bild', npp-nam, 'Bild', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(tabloïd, nc-nom, tabloïd, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(lu, vpp-ver:pper, lu, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(emprunté, vpp-ver:pper, emprunté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conséquences, nc-nom, conséquences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(900, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(diffusées, vpp-ver:pper, diffusées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déclenchement, nc-nom, déclenchement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si('russo-ukrainienne', adj-adj, 'russo-ukrainienne', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(901, Result) :-
      prob_parse([ ex_si('Bild', npp-nam, 'Bild', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(tabloïd, nc-nom, tabloïd, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(lu, vpp-ver:pper, lu, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(emprunté, vpp-ver:pper, emprunté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conséquences, nc-nom, conséquences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(902, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tabloïd, nc-nom, tabloïd, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(survenue, vpp-ver:pper, survenue, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2018, pro-num, 2018, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(causés, vpp-ver:pper, causés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bombardement, nc-nom, bombardement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(903, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tabloïd, nc-nom, tabloïd, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(survenue, vpp-ver:pper, survenue, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2018, pro-num, 2018, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(causés, vpp-ver:pper, causés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bombardement, nc-nom, bombardement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(904, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prise, vpp-ver:pper, prise, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déclenchement, nc-nom, déclenchement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si('russo-ukrainienne', adj-adj, 'russo-ukrainienne', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(905, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fausses, adj-adj, fausses, [dr(0,n,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(survenue, vpp-ver:pper, survenue, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2018, pro-num, 2018, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(causés, vpp-ver:pper, causés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bombardement, nc-nom, bombardement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(906, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(quotidien, nc-nom, quotidien, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(véhiculé, vpp-ver:pper, véhiculé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(fausses, adj-adj, fausses, [dr(0,n,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bombardement, nc-nom, bombardement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(907, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(photographies, nc-nom, photographies, [n-1]), ex_si(diffusées, vpp-ver:pper, diffusées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quotidien, nc-nom, quotidien, [n-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(908, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(photographies, nc-nom, photographies, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparues, vpp-ver:pper, apparues, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quotidien, nc-nom, quotidien, [n-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2018, pro-num, 2018, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(909, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tête, nc-nom, tête, [n-1]), ex_si(bandée, vpp-ver:pper, bandée, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(couvert, vpp-ver:pper, couvert, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Anadolu', npp-nam, 'Anadolu', [np-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(910, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), ex_si('Kurilo', npp-nam, 'Kurilo', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(911, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(photojournaliste, nc-nom, photojournaliste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si('Anadolu', npp-nam, 'Anadolu', [dl(0,n,n)-1]), ex_si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), ex_si('Schwan', npp-nam, 'Schwan', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(clichés, nc-nom, clichés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(blessés, vpp-ver:pper, blessés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(912, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignante, nc-nom, enseignante, [n-1]), ex_si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), ex_si('Kurilo', npp-nam, 'Kurilo', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(marquantes, adj-adj, marquantes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(913, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bel, adj-adj, bel, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(blessée, vpp-ver:pper, blessée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(914, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(identité, nc-nom, identité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inconnue, adj-adj, inconnue, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(915, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(photojournaliste, nc-nom, photojournaliste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si('Anadolu', npp-nam, 'Anadolu', [dl(0,n,n)-1]), ex_si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), ex_si('Schwan', npp-nam, 'Schwan', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(clichés, nc-nom, clichés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(blessés, vpp-ver:pper, blessés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(916, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignante, nc-nom, enseignante, [n-1]), ex_si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), ex_si('Kurilo', npp-nam, 'Kurilo', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(marquantes, adj-adj, marquantes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(917, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(prise, vpp-ver:pper, prise, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si('Anadolu', npp-nam, 'Anadolu', [dl(0,n,n)-1]), ex_si('[...]', ponct-pun, '[...]', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(fait, vpp-ver:pper, fait, [let-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gros, adj-adj, gros, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(titres, nc-nom, titres, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [dr(0,n,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(presse, nc-nom, presse, [dr(0,dl(0,n,n),np)-1]), ex_si(internationale, adj-adj, internationale, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(918, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(photojournaliste, nc-nom, photojournaliste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si('Anadolu', npp-nam, 'Anadolu', [dl(0,n,n)-1]), ex_si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), ex_si('Schwan', npp-nam, 'Schwan', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(clichés, nc-nom, clichés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(blessés, vpp-ver:pper, blessés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(919, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(inversée, vpp-ver:pper, inversée, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Google', npp-nam, 'Google', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(identifier, vinf-ver:infi, identifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Anadolu', npp-nam, 'Anadolu', [np-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(920, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(façade, nc-nom, façade, [n-1]), ex_si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(détruit, vpp-ver:pper, détruit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(ravagé, vpp-ver:pper, ravagé, [dr(0,dl(0,np,np),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2018, adj-num, 2018, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(921, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(détruit, vpp-ver:pper, détruit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2018, pro-num, 2018, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bâtiment, nc-nom, bâtiment, [n-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bombardements, nc-nom, bombardements, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(excepté, cc-prp, excepté, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(apparence, nc-nom, apparence, [n-1]), ex_si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(922, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(propagation, nc-nom, propagation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fausses, adj-adj, fausses, [dr(0,n,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(intensifie, v-ver:pres, intensifie, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(meurtriers, adj-adj, meurtriers, [dl(0,n,n)-1]), ex_si(opposent, v-ver:pres, opposent, [dr(0,dl(0,np,s),np)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(forces, nc-nom, forces, [np-1]), ex_si(armées, adj-adj, armées, [dl(0,np,np)-1]), ex_si(russes, adj-adj, russes, [dl(0,np,np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(923, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(désinformation, nc-nom, désinformation, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(intensifie, v-ver:pres, intensifie, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(rythme, nc-nom, rythme, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(tensions, nc-nom, tensions, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(924, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(internationalement, adv-adv, internationalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnues, vpp-ver:pper, reconnues, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(925, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(généralement, adv-adv, généralement, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, adj-adj, unies, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(926, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(généralement, adv-adv, généralement, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, adj-adj, unies, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(927, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commis, vpp-ver:pper, commis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(violation, nc-nom, violation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(envahissant, vpr-ver:ppre, envahissant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(928, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(internationalement, adv-adv, internationalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnues, vpp-ver:pper, reconnues, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),dl(1,s,s))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(929, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('Ban', npp-nam, 'Ban', [dl(0,n,n)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existait, v-ver:impf, existait, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,n)-1]), ex_si('Etat', nc-nom, 'Etat', [n-1]), ex_si(souverain, adj-adj, souverain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(930, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(internationalement, adv-adv, internationalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnues, vpp-ver:pper, reconnues, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),dl(1,s,s))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(931, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(intégrité, nc-nom, intégrité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(reconnues, vpp-ver:pper, reconnues, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,n)-1]), ex_si(différents, adj-adj, différents, [dr(0,n,n)-1]), ex_si(traités, nc-nom, traités, [n-1]), ex_si(internationaux, adj-adj, internationaux, [dl(0,n,n)-1]), ex_si(consultables, adj-adj, consultables, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n))),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),dl(1,s,s))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(932, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(933, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(experte, nc-nom, experte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(934, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(directement, adv-adv, directement, [dl(1,s,s)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(935, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(experte, nc-nom, experte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(936, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(experte, nc-nom, experte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(937, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(938, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si('07.04.2014', nc-num, '07.04.2014', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(étonnante, adj-adj, étonnante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dr(0,np,np),n)-1]), ex_si(conclusion, nc-nom, conclusion, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1991, adj-num, 1991, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(939, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('Ban', npp-nam, 'Ban', [dl(0,n,n)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existait, v-ver:impf, existait, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(souverain, adj-adj, souverain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(940, Result) :-
      prob_parse([ ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(secrétaire, nc-nom, secrétaire, [np-1]), ex_si(général, adj-adj, général, [dl(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(2007, pro-num, 2007, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(2016, pro-num, 2016, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(941, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si('07.04.2014', nc-num, '07.04.2014', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(étonnante, adj-adj, étonnante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dr(0,np,np),n)-1]), ex_si(conclusion, nc-nom, conclusion, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1991, adj-num, 1991, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(942, Result) :-
      prob_parse([ ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(secrétaire, nc-nom, secrétaire, [np-1]), ex_si(général, adj-adj, général, [dl(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(2007, pro-num, 2007, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(2016, pro-num, 2016, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(943, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si('20.03.2005', nc-num, '20.03.2005', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(étonnante, adj-adj, étonnante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dr(0,np,np),n)-1]), ex_si(conclusion, nc-nom, conclusion, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1991, adj-num, 1991, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(944, Result) :-
      prob_parse([ ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvait, v-ver:impf, trouvait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Rwanda', npp-nam, 'Rwanda', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2014, adj-num, 2014, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(945, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(prise, nc-nom, prise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(parole, nc-nom, parole, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(événement, nc-nom, événement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(nulle, det-pro:ind, nulle, [dr(0,dl(1,s,s),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(mention, nc-nom, mention, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(946, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si('07.04.2014', nc-num, '07.04.2014', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1991, adj-num, 1991, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(947, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(constituait, v-ver:impf, constituait, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('07.04.2014', nc-num, '07.04.2014', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(948, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agenda, nc-nom, agenda, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(réunions, nc-nom, réunions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(résolutions, nc-nom, résolutions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(réunie, vpp-ver:pper, réunie, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2014, adj-num, 2014, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(949, Result) :-
      prob_parse([ ex_si('Aucune', pro-pro:ind, 'Aucune', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(déclarations, nc-nom, déclarations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(hauts, adj-adj, hauts, [dr(0,n,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remettait, v-ver:impf, remettait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(950, Result) :-
      prob_parse([ ex_si('Elles', cls-pro:per, 'Elles', [np-1]), ex_si(appelaient, v-ver:impf, appelaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(contraire, nc-nom, contraire, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(préserver, vinf-ver:infi, préserver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(menaces, nc-nom, menaces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(951, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('Ban', npp-nam, 'Ban', [dl(0,n,n)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnues, vpp-ver:pper, reconnues, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(952, Result) :-
      prob_parse([ ex_si('Aucune', pro-pro:ind, 'Aucune', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(déclarations, nc-nom, déclarations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(hauts, adj-adj, hauts, [dr(0,n,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remettait, v-ver:impf, remettait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(953, Result) :-
      prob_parse([ ex_si('Elles', cls-pro:per, 'Elles', [np-1]), ex_si(appelaient, v-ver:impf, appelaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(contraire, nc-nom, contraire, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(préserver, vinf-ver:infi, préserver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(menaces, nc-nom, menaces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(954, Result) :-
      prob_parse([ ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réitéré, vpp-ver:pper, réitéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(appel, nc-nom, appel, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(respect, nc-nom, respect, [n-1]), ex_si(absolu, adj-adj, absolu, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(préservation, nc-nom, préservation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intégrité, nc-nom, intégrité, [n-1]), ex_si(territoriale, adj-adj, territoriale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(955, Result) :-
      prob_parse([ ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réitéré, vpp-ver:pper, réitéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(appel, nc-nom, appel, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(respect, nc-nom, respect, [n-1]), ex_si(absolu, adj-adj, absolu, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(préservation, nc-nom, préservation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intégrité, nc-nom, intégrité, [n-1]), ex_si(territoriale, adj-adj, territoriale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(956, Result) :-
      prob_parse([ ex_si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), ex_si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(pleinement, adv-adv, pleinement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intégrité, nc-nom, intégrité, [n-1]), ex_si(territoriale, adj-adj, territoriale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(957, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(dialogue, v-ver:pres, dialogue, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(acteurs, nc-nom, acteurs, [n-1]), ex_si(clés, adj-adj, clés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(désamorcer, vinf-ver:infi, désamorcer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(exhortant, vpr-ver:ppre, exhortant, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(cesse, nc-nom, cesse, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(dialogue, nc-nom, dialogue, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(bon, adj-adj, bon, [dr(0,n,n)-1]), ex_si(suivi, nc-nom, suivi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(958, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(exhorte, v-ver:pres, exhorte, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsabilités, nc-nom, responsabilités, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(désamorcer, vinf-ver:infi, désamorcer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tensions, nc-nom, tensions, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(encourage, v-ver:pres, encourage, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(exprimer, vinf-ver:infi, exprimer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(pacifiquement, adv-adv, pacifiquement, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(apaiser, vinf-ver:infi, apaiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(959, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(exhorte, v-ver:pres, exhorte, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsabilités, nc-nom, responsabilités, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(désamorcer, vinf-ver:infi, désamorcer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tensions, nc-nom, tensions, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(encourage, v-ver:pres, encourage, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(exprimer, vinf-ver:infi, exprimer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(pacifiquement, adv-adv, pacifiquement, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(apaiser, vinf-ver:infi, apaiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(960, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(restent, v-ver:pres, restent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(attachés, vpp-ver:pper, attachés, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rechercher, vinf-ver:infi, rechercher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(pacifique, adj-adj, pacifique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(cesse, v-ver:pres, cesse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(aggraver, vinf-ver:infi, aggraver, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(961, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistrées, vpp-ver:pper, enregistrées, [dl(0,np,s_pass)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(962, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(traités, nc-nom, traités, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(102, adj-num, 102, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(963, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(964, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistrées, vpp-ver:pper, enregistrées, [dl(0,np,s_pass)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(965, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(traités, nc-nom, traités, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(102, adj-num, 102, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Charte', npp-nam, 'Charte', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(966, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, adj-adj, unies, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(967, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(absence, nc-nom, absence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enregistrement, nc-nom, enregistrement, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(cause, nc-nom, cause, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(invalidité, nc-nom, invalidité, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pleinement, adv-adv, pleinement, [dl(1,s,s)-1]), ex_si(force, nc-nom, force, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(968, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(passées, vpp-ver:pper, passées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrées, vpp-ver:pper, enregistrées, [dl(0,np,s_pass)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(invalides, adj-adj, invalides, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(969, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Boris', npp-nam, 'Boris', [dl(0,n,n)-1]), ex_si('Eltsine', npp-nam, 'Eltsine', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('2ème', adj-num, '2ème', [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1991, adj-num, 1991, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(970, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1997, pro-num, 1997, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Traité', nc-nam, 'Traité', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(amitié, nc-nom, amitié, [n-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(de, p-prp, de, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),n)-1]), ex_si(nouveau, adj-adj, nouveau, [n-1]), ex_si(reconnues, vpp-ver:pper, reconnues, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(971, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2003, adj-num, 2003, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(commune, adj-adj, commune, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(972, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(973, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(1, adj-num, 1, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Mémorandum', nc-nom, 'Mémorandum', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Budapest', npp-nam, 'Budapest', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(signataires, nc-nom, signataires, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(accordent, v-ver:pres, accordent, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(existantes, vpr-ver:ppre, existantes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(974, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Mémorandum', nc-nom, 'Mémorandum', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Budapest', npp-nam, 'Budapest', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dispose, v-ver:pres, dispose, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(tout, nc-nom, tout, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(975, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(détruite, vpp-ver:pper, détruite, [dl(0,n,n)-1]), ex_si(circulent, v-ver:pres, circulent, [dl(0,np,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(976, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(détruite, vpp-ver:pper, détruite, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(977, Result) :-
      prob_parse([ ex_si('Trois', pro-num, 'Trois', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(partagées, vpp-ver:pper, partagées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,np,s_pass)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(éclaté, vpp-ver:pper, éclaté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soulèvement, nc-nom, soulèvement, [n-1]), ex_si('pro-européen', adj-adj, 'pro-européen', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(concentré, vpp-ver:pper, concentré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si('Maïdan', npp-nam, 'Maïdan', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2014, adj-num, 2014, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(978, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(quatre, nc-num, quatre, [n-1]), ex_si(contenues, vpp-ver:pper, contenues, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(datent, v-ver:impf, datent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2014, adj-num, 2014, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(soulèvement, nc-nom, soulèvement, [n-1]), ex_si('pro-européen', adj-adj, 'pro-européen', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(épicentre, nc-nom, épicentre, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si('Maïdan', npp-nam, 'Maïdan', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(979, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(héros, nc-nom, héros, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si(jeudi, nc-nom, jeudi, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(980, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', nc-nam, 'Serpents', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(vivants, adj-adj, vivants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(981, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(13, adj-num, 13, [dr(0,n,n)-1]), ex_si('gardes-frontières', nc-nom, 'gardes-frontières', [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(serpents, nc-nom, serpents, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Mer', nc-nam, 'Mer', [n-1]), ex_si(noire, adj-adj, noire, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(final, adj-adj, final, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(aller, vinf-ver:infi, aller, [cl_r-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si('foutre\'.', adv-adv, 'foutre\'.', [let-1])], Result).
sent(982, Result) :-
      prob_parse([ ex_si('\'Allez', vimp-ver:impe, '\'Allez', [let-1]), ex_si('-vous', clo-pro:per, '-vous', [dr(0,s,dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [cl_r-1]), ex_si('foutre\'', nc-adv, 'foutre\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(mots, nc-nom, mots, [dr(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(13, adj-num, 13, [dr(0,n,n)-1]), ex_si('gardes-frontières', nc-nom, 'gardes-frontières', [dr(0,n,n)-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(sommations, nc-nom, sommations, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(île, nc-nom, île, [dr(0,np,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(serpents, nc-nom, serpents, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(983, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', nc-nam, 'Serpents', [n-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédés, vpp-ver:pper, décédés, [dl(0,np,s_ppart)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démentie, vpp-ver:pper, démentie, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(984, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si(île, nc-nom, île, [dr(0,np,np)-1]), ex_si('Zmiïnyï', npp-nam, 'Zmiïnyï', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Zmeïny', npp-nam, 'Zmeïny', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chute, nc-nom, chute, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('URSS', npp-abr, 'URSS', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(situe, v-ver:pres, situe, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(cinquantaine, nc-num, cinquantaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,pp_de,np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(300, det-num, 300, [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Crimée', npp-nam, 'Crimée', [n-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(région, nc-nom, région, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(annexée, vpp-ver:pper, annexée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(985, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', nc-nam, 'Serpents', [n-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédés, vpp-ver:pper, décédés, [dl(0,np,s_ppart)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démentie, vpp-ver:pper, démentie, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(986, Result) :-
      prob_parse([ ex_si('Tentant', vpr-ver:ppre, 'Tentant', [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(défendre, vinf-ver:infi, défendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédés, vpp-ver:pper, décédés, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(987, Result) :-
      prob_parse([ ex_si('Anton', npp-nam, 'Anton', [dr(0,np,np)-1]), ex_si('Herashchenko', npp-nam, 'Herashchenko', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(conseiller, nc-nom, conseiller, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Intérieur', nc-nom, 'Intérieur', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(présenté, vpp-ver:pper, présenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(enregistrement, nc-nom, enregistrement, [n-1]), ex_si(audio, adj-adj, audio, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(témoignant, vpr-ver:ppre, témoignant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(paroles, nc-nom, paroles, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(988, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(enregistrement, nc-nom, enregistrement, [n-1]), ex_si(sonore, adj-adj, sonore, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(capturé, vpp-ver:pper, capturé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(paroles, nc-nom, paroles, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(prétendument, adv-adv, prétendument, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(décédés, vpp-ver:pper, décédés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(989, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('garde-frontières', nc-nom, 'garde-frontières', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Zmiïnyï', npp-nam, 'Zmiïnyï', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si(héroïquement, adv-adv, héroïquement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(défendant, vpr-ver:ppre, défendant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(bout, nc-nom, bout, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(990, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(recevront, v-ver:futu, recevront, [dr(0,dl(0,np,s),np)-1]), ex_si(tous, adv-adv, tous, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(posthume, adj-adj, posthume, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Héros', nc-nam, 'Héros', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(991, Result) :-
      prob_parse([ ex_si('Tentant', vpr-ver:ppre, 'Tentant', [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(défendre, vinf-ver:infi, défendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Zmiïnyï', npp-nam, 'Zmiïnyï', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(héros, nc-nom, héros, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(jeudi, nc-nom, jeudi, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(992, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('garde-frontières', nc-nom, 'garde-frontières', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Zmiïnyï', npp-nam, 'Zmiïnyï', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si(héroïquement, adv-adv, héroïquement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(défendant, vpr-ver:ppre, défendant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(bout, nc-nom, bout, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(993, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(recevront, v-ver:futu, recevront, [dr(0,dl(0,np,s),np)-1]), ex_si(tous, adv-adv, tous, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(posthume, adj-adj, posthume, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Héros', nc-nam, 'Héros', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(994, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('garde-frontières', nc-nom, 'garde-frontières', [n-1]), ex_si(présumés, adj-adj, présumés, [dl(0,n,n)-1]), ex_si(morts, adj-adj, morts, [dl(0,n,n)-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Zmiïnyï', npp-nam, 'Zmiïnyï', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(995, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(communiquées, vpp-ver:pper, communiquées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(82, adj-num, 82, [dr(0,n,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(arrivés, vpp-ver:pper, arrivés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Sébastopol', npp-nam, 'Sébastopol', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(diffusées, vpp-ver:pper, diffusées, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(chaînes, nc-nom, chaînes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(996, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(communiqué, vpp-ver:pper, communiqué, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(82, adj-num, 82, [dr(0,n,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(ferme, adj-adj, ferme, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(997, Result) :-
      prob_parse([ ex_si(82, det-num, 82, [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', nc-nam, 'Serpents', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Noire', npp-nam, 'Noire', [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(volontairement, adv-adv, volontairement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(rendus, vpp-ver:pper, rendus, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(998, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', nc-nam, 'Serpents', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déposé, vpp-ver:pper, déposé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(999, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(navales, adj-adj, navales, [dl(0,n,n)-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(détenus, vpp-ver:pper, détenus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1000, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(emprisonnés, vpp-ver:pper, emprisonnés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1001, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(marines, nc-nom, marines, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('gardes-frontières', nc-nom, 'gardes-frontières', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(faits, vpp-ver:pper, faits, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), ex_si(prisonniers, nc-nom, prisonniers, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(envahisseurs, nc-nom, envahisseurs, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1002, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(emprisonnés, vpp-ver:pper, emprisonnés, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1003, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(épisode, nc-nom, épisode, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Internet', npp-nam, 'Internet', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(mêlant, vpr-ver:ppre, mêlant, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(propagande, nc-nom, propagande, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('contre-propagande', nc-nom, 'contre-propagande', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(tout, pro-pro:ind, tout, [np-1]), ex_si(représentatif, adj-adj, représentatif, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(brouillard, nc-nom, brouillard, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1004, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(rebondissements, nc-nom, rebondissements, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épisode, nc-nom, épisode, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', nc-nam, 'Serpents', [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(illustrent, v-ver:pres, illustrent, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(brouillard, nc-nom, brouillard, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(désir, nc-nom, désir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(propagande, nc-nom, propagande, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(camps, nc-nom, camps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1005, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,dl(1,s,s),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(heureuses, adj-adj, heureuses, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', npp-nam, 'Serpents', [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), ex_si(vivants, adj-adj, vivants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1006, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ukrainiennes, adj-adj, ukrainiennes, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ravis, vpp-ver:pper, ravis, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serpents', nc-nam, 'Serpents', [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(vivants, adj-adj, vivants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1007, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intermédiaire, nc-nom, intermédiaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tiendrait, v-ver:impf, tiendrait, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,n,n))-1]), ex_si(prête, adj-adj, prête, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(importe, v-ver:pres, importe, [dl(0,np,s)-1]), ex_si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1008, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Tan', npp-nam, 'Tan', [dr(0,np,np)-1]), ex_si('Kefei', npp-nam, 'Kefei', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(importe, v-ver:pres, importe, [dl(0,np,s)-1]), ex_si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêts, adj-adj, prêts, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(voudraient, v-ver:impf, voudraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(intervenir, vinf-ver:infi, intervenir, [dl(0,np,s_inf)-1]), ex_si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1009, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Tan', npp-nam, 'Tan', [dr(0,np,np)-1]), ex_si('Kefei', npp-nam, 'Kefei', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(importe, v-ver:pres, importe, [dl(0,np,s)-1]), ex_si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêts, adj-adj, prêts, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(voudraient, v-ver:impf, voudraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(intervenir, vinf-ver:infi, intervenir, [dl(0,np,s_inf)-1]), ex_si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1010, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intermédiaire, nc-nom, intermédiaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tiendrait, v-ver:impf, tiendrait, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,n,n))-1]), ex_si(prête, adj-adj, prête, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(importe, v-ver:pres, importe, [dl(0,np,s)-1]), ex_si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1011, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Tan', npp-nam, 'Tan', [dr(0,np,np)-1]), ex_si('Kefei', npp-nam, 'Kefei', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(importe, v-ver:pres, importe, [dl(0,np,s)-1]), ex_si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêts, adj-adj, prêts, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(voudraient, v-ver:impf, voudraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(intervenir, vinf-ver:infi, intervenir, [dl(0,np,s_inf)-1]), ex_si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1012, Result) :-
      prob_parse([ ex_si('Tan', npp-nam, 'Tan', [dr(0,np,np)-1]), ex_si('Kefei', npp-nam, 'Kefei', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1013, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si(couvrant, vpr-ver:ppre, couvrant, [dr(0,dl(0,n,n),np)-1]), ex_si(habituellement, adv-adv, habituellement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conférences, nc-nom, conférences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mentionner, vinf-ver:infi, mentionner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(phrase, nc-nom, phrase, [n-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1014, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(retranscription, nc-nom, retranscription, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(propos, nc-nom, propos, [n-1]), ex_si(disponible, adj-adj, disponible, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(internet, nc-nom, internet, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(retrouve, v-ver:pres, retrouve, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(phrase, nc-nom, phrase, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1015, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(trace, nc-nom, trace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(prêtée, vpp-ver:pper, prêtée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1016, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prononcé, vpp-ver:pper, prononcé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(répondu, vpp-ver:pper, répondu, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1017, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(importe, v-ver:pres, importe, [dl(0,np,s)-1]), ex_si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêts, adj-adj, prêts, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(voudraient, v-ver:cond, voudraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(intervenir, vinf-ver:infi, intervenir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1018, Result) :-
      prob_parse([ ex_si('L\'ambassadeur', nc-nom, 'L\'ambassadeur', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Chine', npp-nam, 'Chine', [dr(0,dl(0,n,n),n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ONU', nc-abr, 'ONU', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si('Zhang', npp-nam, 'Zhang', [dr(0,dl(0,np,np),np)-1]), ex_si('Jun', npp-nam, 'Jun', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,s_q,s)-1]), ex_si(monde, nc-nom, monde, [dr(0,np,n)-1]), ex_si('n\'', adv-adv, 'n\'', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [let-1]), ex_si(à, p-prp, à, [np-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', p-prp, 'd\'', [let-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),np)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,np,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [dr(0,n,n)-1]), ex_si(froide, adj-adj, froide, [n-1]), ex_si(lors, adv-adv, lors, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),pp_de)-1]), ex_si(une, det-det:art, une, [dr(0,pp_de,np)-1]), ex_si(session, nc-nom, session, [dr(0,np,n)-1]), ex_si(extraordinaire, adj-adj, extraordinaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si(urgence, nc-nom, urgence, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [dr(0,np,n)-1]), ex_si(générale, adj-adj, générale, [n-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si('Nations', nc-nam, 'Nations', [dr(0,dl(0,n,n),n)-1]), ex_si(unies, vpp-ver:pper, unies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1019, Result) :-
      prob_parse([ ex_si('Zhang', npp-nam, 'Zhang', [dr(0,np,np)-1]), ex_si('Jun', npp-nam, 'Jun', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tribune, nc-nom, tribune, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(perdre, vinf-ver:infi, perdre, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mentalité, nc-nom, mentalité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guerre', nc-nom, 'Guerre', [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(confrontation, nc-nom, confrontation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blocs, nc-nom, blocs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1020, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si('Wang', npp-nam, 'Wang', [dl(0,n,n)-1]), ex_si('Wenbin', npp-nam, 'Wenbin', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(belligérants, nc-nom, belligérants, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(calme, adj-adj, calme, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(preuve, nc-nom, preuve, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(retenue, nc-nom, retenue, [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(escalade, nc-nom, escalade, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1021, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(désescalade, nc-nom, désescalade, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si('Wang', npp-nam, 'Wang', [dl(0,n,n)-1]), ex_si('Wenbin', npp-nam, 'Wenbin', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1022, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(prise, vpp-ver:pper, prise, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dos, nc-nom, dos, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(regardant, vpr-ver:ppre, regardant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(chars, nc-nom, chars, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(passer, vinf-ver:infi, passer, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1023, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(figure, v-ver:pres, figure, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(album, nc-nom, album, [n-1]), ex_si(photos, nc-nom, photos, [dl(0,n,n)-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2016, adj-num, 2016, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1024, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(garçon, nc-nom, garçon, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fusil, nc-nom, fusil, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dos, nc-nom, dos, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(soeur, nc-nom, soeur, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lapin, nc-nom, lapin, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(peluche, nc-nom, peluche, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(main, nc-nom, main, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(saluent, v-ver:pres, saluent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(chars, nc-nom, chars, [n-1]), ex_si(arborant, vpr-ver:ppre, arborant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1025, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lapin, nc-nom, lapin, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(peluche, nc-nom, peluche, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(main, nc-nom, main, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(soeur, nc-nom, soeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(garçon, nc-nom, garçon, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fusil, nc-nom, fusil, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dos, nc-nom, dos, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1026, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si('Bernie', npp-nam, 'Bernie', [dl(0,n,n)-1]), ex_si('Gores', npp-nam, 'Gores', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(exécuté, vpp-ver:pper, exécuté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Kaboul', npp-nam, 'Kaboul', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si('Talibans', adj-nam, 'Talibans', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1027, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si('Bernie', npp-nam, 'Bernie', [dl(0,n,n)-1]), ex_si('Gores', npp-nam, 'Gores', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(posée, vpp-ver:pper, posée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(séparatistes, nc-nom, séparatistes, [n-1]), ex_si(soutenus, vpp-ver:pper, soutenus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1028, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(citoyen, nc-nom, citoyen, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(travaillait, v-ver:impf, travaillait, [dr(0,dl(0,np,s),np)-1]), ex_si(comm, p+d-prp:det, comm, [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(posée, vpp-ver:pper, posée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(séparatistes, nc-nom, séparatistes, [n-1]), ex_si(soutenus, vpp-ver:pper, soutenus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1029, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(posée, vpp-ver:pper, posée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(séparatistes, nc-nom, séparatistes, [n-1]), ex_si(soutenus, vpp-ver:pper, soutenus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(travaillait, v-ver:impf, travaillait, [dl(0,np,s)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(youtubeur, nc-nom, youtubeur, [n-1]), ex_si(adepte, nc-nom, adepte, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si(vidéos, nc-nom, vidéos, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1030, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(youtubeur, nc-nom, youtubeur, [n-1]), ex_si(adepte, adj-adj, adepte, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jordie', npp-nam, 'Jordie', [dr(0,np,np)-1]), ex_si('Jordan', npp-nam, 'Jordan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(posée, vpp-ver:pper, posée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(séparatistes, nc-nom, séparatistes, [n-1]), ex_si(soutenus, vpp-ver:pper, soutenus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1031, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(ni, cc-kon, ni, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(activiste, nc-nom, activiste, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1032, Result) :-
      prob_parse([ ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si('Afghan', npp-nam, 'Afghan', [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('CNNUKR', npp-nam, 'CNNUKR', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(adoptant, vpr-ver:ppre, adoptant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(codes, nc-nom, codes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(authentiques, adj-adj, authentiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1033, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), ex_si('Afghan', npp-nam, 'Afghan', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('CNNUKR', npp-nam, 'CNNUKR', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si(officiels, adj-adj, officiels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1034, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si('Twitter', npp-nam, 'Twitter', [dl(0,n,n)-1]), ex_si(officiels, adj-adj, officiels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(comportent, v-ver:pres, comportent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(badge, nc-nom, badge, [n-1]), ex_si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(authenticité, nc-nom, authenticité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1035, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('Twitter', adj-nam, 'Twitter', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), ex_si('Afghan', npp-nam, 'Afghan', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(comporte, v-ver:pres, comporte, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(badge, nc-nom, badge, [n-1]), ex_si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1036, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1037, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si('Twitter', npp-nam, 'Twitter', [dl(0,n,n)-1]), ex_si(officiels, adj-adj, officiels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(comportent, v-ver:pres, comportent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(badge, nc-nom, badge, [n-1]), ex_si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(authenticité, nc-nom, authenticité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1038, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('Twitter', adj-nam, 'Twitter', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), ex_si('Afghan', npp-nam, 'Afghan', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(comporte, v-ver:pres, comporte, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(badge, nc-nom, badge, [n-1]), ex_si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1039, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1040, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si('Twitter', npp-nam, 'Twitter', [dl(0,n,n)-1]), ex_si(officiels, adj-adj, officiels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(comportent, v-ver:pres, comportent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(badge, nc-nom, badge, [n-1]), ex_si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(authenticité, nc-nom, authenticité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1041, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('Twitter', adj-nam, 'Twitter', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), ex_si('Afghan', npp-nam, 'Afghan', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(comporte, v-ver:pres, comporte, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(badge, nc-nom, badge, [n-1]), ex_si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1042, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1043, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(couverture, nc-nom, couverture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(édition, nc-nom, édition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(grimé, vpp-ver:pper, grimé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(nez, nc-nom, nez, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moustache, nc-nom, moustache, [n-1]), ex_si(caractéristiques, nc-nom, caractéristiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1044, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), ex_si(datée, vpp-ver:pper, datée, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(garçon, nc-nom, garçon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(onze, det-num, onze, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Orion', npp-nam, 'Orion', [dr(0,np,np)-1]), ex_si('James', npp-nam, 'James', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1045, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(couverture, nc-nom, couverture, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(grimé, vpp-ver:pper, grimé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(nez, nc-nom, nez, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moustache, nc-nom, moustache, [n-1]), ex_si(caractéristiques, nc-nom, caractéristiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), ex_si('Hitler', npp-nam, 'Hitler', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1046, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(couverture, nc-nom, couverture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Time', npp-nam, 'Time', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(portrait, nc-nom, portrait, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1047, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(garçon, nc-nom, garçon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(onze, det-num, onze, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Orion', npp-nam, 'Orion', [dr(0,np,np)-1]), ex_si('James', npp-nam, 'James', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1048, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Une', npp-nam, 'Une', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Time', npp-nam, 'Time', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(portrait, nc-nom, portrait, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1049, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si(évoque, v-ver:pres, évoque, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déploiement, nc-nom, déploiement, [n-1]), ex_si(prochain, adj-adj, prochain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('Bucarest', npp-nam, 'Bucarest', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1050, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(mention, nc-nom, mention, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(déploiement, nc-nom, déploiement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1051, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(détachement, nc-nom, détachement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(250, det-num, 250, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('27e', adj-num, '27e', [dr(0,n,n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chasseurs, nc-nom, chasseurs, [n-1]), ex_si(alpins, adj-adj, alpins, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Annecy', npp-nam, 'Annecy', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Bouches-du-Rhône', npp-nam, 'Bouches-du-Rhône', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(embarqueront, v-ver:futu, embarqueront, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(renforcer, vinf-ver:infi, renforcer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dispositif, nc-nom, dispositif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-nam, 'Otan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1052, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Otan', npp-abr, 'Otan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1053, Result) :-
      prob_parse([ ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(mentionnés, vpp-ver:pper, mentionnés, [dl(0,n,n)-1]), ex_si(partent, v-ver:pres, partent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1054, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(troupe, nc-nom, troupe, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(engagée, vpp-ver:pper, engagée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1055, Result) :-
      prob_parse([ ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si('Français', adj-nam, 'Français', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(route, nc-nom, route, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1056, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('Français', nc-nam, 'Français', [n-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aval, nc-nom, aval, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Légion', nc-nam, 'Légion', [n-1]), ex_si(étrangère, adj-adj, étrangère, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1057, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Légion', nc-nam, 'Légion', [n-1]), ex_si(étrangère, adj-adj, étrangère, [dl(0,n,n)-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aval, nc-nom, aval, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1058, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(annonçant, vpr-ver:ppre, annonçant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(diffusée, vpp-ver:pper, diffusée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,np,s_pass)-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(diffusion, nc-nom, diffusion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1059, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(allocution, nc-nom, allocution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(datent, v-ver:pres, datent, [dr(0,dl(0,np,s),pp)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1060, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(annonçant, vpr-ver:ppre, annonçant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(diffusée, vpp-ver:pper, diffusée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,np,s_pass)-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(diffusion, nc-nom, diffusion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1061, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(allocution, nc-nom, allocution, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(annonçant, vpr-ver:ppre, annonçant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(diffusée, vpp-ver:pper, diffusée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kremlin', npp-nam, 'Kremlin', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(filmée, vpp-ver:pper, filmée, [dl(0,np,s_pass)-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1062, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(annonçant, vpr-ver:ppre, annonçant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(diffusée, vpp-ver:pper, diffusée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,np,s_pass)-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(diffusion, nc-nom, diffusion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1063, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(vérifiant, vpr-ver:ppre, vérifiant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,np,s_pass)-1]), ex_si(lundi, nc-nom, lundi, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1064, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(regardant, vpr-ver:ppre, regardant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(internet, nc-nom, internet, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kremlin', npp-nam, 'Kremlin', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(vérifier, vinf-ver:infi, vérifier, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,np,s_pass)-1]), ex_si(lundi, nc-nom, lundi, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1065, Result) :-
      prob_parse([ ex_si('Lorsqu\'', cs-kon, 'Lorsqu\'', [dr(0,dr(0,s,s),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fichier, nc-nom, fichier, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(récupérer, vinf-ver:infi, récupérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(indiquer, vinf-ver:infi, indiquer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(quelle, detwh-pro:rel, quelle, [dr(0,dr(0,dl(0,dr(0,pp,np),s_whq),s),n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(pris, vpp-ver:pper, pris, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1066, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(indiquent, v-ver:pres, indiquent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(fichier, nc-nom, fichier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(date, v-ver:pres, date, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nuit, nc-nom, nuit, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('3h35', det-num, '3h35', [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1067, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1068, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(facilement, adv-adv, facilement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(manipulables, adj-adj, manipulables, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(postdatées, vpp-ver:pper, postdatées, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(altérer, vinf-ver:infi, altérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(enregistrement, nc-nom, enregistrement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1069, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(tirées, vpp-ver:pper, tirées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(formelle, adj-adj, formelle, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enregistrement, nc-nom, enregistrement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1070, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fichier, nc-nom, fichier, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(relayé, vpp-ver:pper, relayé, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si('Twitter', npp-nam, 'Twitter', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Instagram', npp-nam, 'Instagram', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('WhatsApp', npp-abr, 'WhatsApp', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(automatiquement, adv-adv, automatiquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistrées, vpp-ver:pper, enregistrées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(conservées, vpp-ver:pper, conservées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(plateformes, nc-nom, plateformes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1071, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si('Telegram', npp-nam, 'Telegram', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(efface, v-ver:pres, efface, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si(diffusées, vpp-ver:pper, diffusées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(plateforme, nc-nom, plateforme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1072, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fichier, nc-nom, fichier, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(relayé, vpp-ver:pper, relayé, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si('Twitter', npp-nam, 'Twitter', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Instagram', npp-nam, 'Instagram', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('WhatsApp', npp-abr, 'WhatsApp', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(automatiquement, adv-adv, automatiquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(effacées, vpp-ver:pper, effacées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(plateformes, nc-nom, plateformes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1073, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si('Instagram', npp-abr, 'Instagram', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(efface, v-ver:pres, efface, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(métadonnées, nc-nom, métadonnées, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si(diffusées, vpp-ver:pper, diffusées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(plateforme, nc-nom, plateforme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1074, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(prières, nc-nom, prières, [n-1]), ex_si(collectives, adj-adj, collectives, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tiennent, v-ver:pres, tiennent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2014, pro-num, 2014, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kharkiv', npp-nam, 'Kharkiv', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1075, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(prières, nc-nom, prières, [n-1]), ex_si(collectives, adj-adj, collectives, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(organisent, v-ver:pres, organisent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kharkiv', npp-nam, 'Kharkiv', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1076, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('Chrétiens', nc-nom, 'Chrétiens', [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(emmitouflées, vpp-ver:pper, emmitouflées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(manteaux, nc-nom, manteaux, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(agenouillées, vpp-ver:pper, agenouillées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tiennent, v-ver:pres, tiennent, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(priant, vpr-ver:ppre, priant, [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1077, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('Chrétiens', nc-nom, 'Chrétiens', [n-1]), ex_si('Ukrainiens', adj-nam, 'Ukrainiens', [dl(0,n,n)-1]), ex_si(prient, v-ver:impf, prient, [dl(0,np,s)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(genoux, nc-nom, genoux, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1078, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(moments, nc-nom, moments, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recueillement, nc-nom, recueillement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(organisés, vpp-ver:pper, organisés, [dl(0,n,n)-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(initiative, nc-nom, initiative, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pasteurs, nc-nom, pasteurs, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(évangéliques, adj-adj, évangéliques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fidèles, nc-nom, fidèles, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(appelés, vpp-ver:pper, appelés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prier, vinf-ver:infi, prier, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1079, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(moments, nc-nom, moments, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recueillement, nc-nom, recueillement, [n-1]), ex_si(destinés, vpp-ver:pper, destinés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(fidèles, nc-nom, fidèles, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(organisés, vpp-ver:pper, organisés, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(initiative, nc-nom, initiative, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1080, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(annonce, nc-nom, annonce, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(avions, nc-nom, avions, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(volé, vpp-ver:pper, volé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ciel, nc-nom, ciel, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1081, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(avions, nc-nom, avions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(bombardiers, nc-nom, bombardiers, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(survolé, vpp-ver:pper, survolé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(juste, adv-adv, juste, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(annonce, nc-nom, annonce, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1082, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(parade, nc-nom, parade, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(organisée, vpp-ver:pper, organisée, [dl(0,np,s_pass)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1083, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(célébré, vpp-ver:pper, célébré, [dl(0,np,s_pass)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(parade, nc-nom, parade, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(nazie, adj-adj, nazie, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1084, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(célébré, vpp-ver:pper, célébré, [dl(0,np,s_pass)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(parade, nc-nom, parade, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(nazie, adj-adj, nazie, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1085, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(parade, nc-nom, parade, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(organisée, vpp-ver:pper, organisée, [dl(0,np,s_pass)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dissolution, nc-nom, dissolution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('URSS', npp-abr, 'URSS', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1086, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(du, p-prp, du, [dr(0,dl(0,n,n),n)-1]), ex_si(24, det-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tirs, nc-nom, tirs, [n-1]), ex_si(nocturnes, adj-adj, nocturnes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tirs, nc-nom, tirs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si('Gaza', npp-nam, 'Gaza', [np-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1087, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(du, p-ver:pper, du, [dr(0,dl(0,n,n),n)-1]), ex_si(24, det-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lancement, nc-nom, lancement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1088, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(explosions, nc-nom, explosions, [n-1]), ex_si(attribuées, vpp-ver:pper, attribuées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(entendues, vpp-ver:pper, entendues, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Kiev', npp-nam, 'Kiev', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Kramatorsk', npp-nam, 'Kramatorsk', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kharkiv', npp-nam, 'Kharkiv', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Odessa', npp-nam, 'Odessa', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(à, p-prp, à, [np-1]), ex_si('Marioupol', npp-nam, 'Marioupol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1089, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si('Kiev', npp-nam, 'Kiev', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1090, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aviation, nc-nom, aviation, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1091, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(civils, adj-adj, civils, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(annulés, vpp-ver:pper, annulés, [dl(0,np,s_pass)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(aéroports, nc-nom, aéroports, [n-1]), ex_si(ukrainiens, adj-adj, ukrainiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1092, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aviation, nc-nom, aviation, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1093, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(civils, adj-adj, civils, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1094, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(du, p-prp, du, [dr(0,dl(0,n,n),n)-1]), ex_si(24, det-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tirs, nc-nom, tirs, [n-1]), ex_si(nocturnes, adj-adj, nocturnes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tirs, nc-nom, tirs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si('Gaza', npp-nam, 'Gaza', [np-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1095, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(du, p-ver:pper, du, [dr(0,dl(0,n,n),n)-1]), ex_si(24, det-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(massives, adj-adj, massives, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1096, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chiffres, nc-nom, chiffres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1097, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(statistiques, nc-nom, statistiques, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisés, nc-nom, hospitalisés, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1098, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(mortes, adj-adj, mortes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(hospitalisées, vpp-ver:pper, hospitalisées, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1099, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chiffres, nc-nom, chiffres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1100, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('CADA', npp-abr, 'CADA', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(statistique, nc-nom, statistique, [n-1]), ex_si(relative, adj-adj, relative, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(statistique, nc-nom, statistique, [n-1]), ex_si(relative, adj-adj, relative, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1101, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cada', npp-nam, 'Cada', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(statistiques, nc-nom, statistiques, [n-1]), ex_si(demandées, vpp-ver:pper, demandées, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1102, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('DREES', npp-abr, 'DREES', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(répondu, vpp-ver:pper, répondu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existait, v-ver:impf, existait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(routine, nc-nom, routine, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(toutes, det-adv, toutes, [dr(0,dl(0,n,n),n)-1]), ex_si(causes, nc-nom, causes, [n-1]), ex_si(confondues, vpp-ver:pper, confondues, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1103, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(revanche, nc-nom, revanche, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('DREES', npp-abr, 'DREES', [n-1]), ex_si(dispose, v-ver:pres, dispose, [dr(0,dl(0,np,s),pp)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1104, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fichier, nc-nom, fichier, [n-1]), ex_si(global, adj-adj, global, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(recense, v-ver:pres, recense, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(hospitalisées, vpp-ver:pper, hospitalisées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(des, det-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(testées, vpp-ver:pper, testées, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(positives, adj-adj, positives, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1105, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(statistiques, nc-nom, statistiques, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(statuts, nc-nom, statuts, [n-1]), ex_si(vaccinaux, adj-adj, vaccinaux, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1106, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(statistiques, nc-nom, statistiques, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisés, nc-nom, hospitalisés, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1107, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(statistiques, nc-nom, statistiques, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(statuts, nc-nom, statuts, [n-1]), ex_si(vaccinaux, adj-adj, vaccinaux, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1108, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(mortes, adj-adj, mortes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(hospitalisées, vpp-ver:pper, hospitalisées, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1109, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(suivi, nc-nom, suivi, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(testées, vpp-ver:pper, testées, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(positives, adj-adj, positives, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(hospitalisées, vpp-ver:pper, hospitalisées, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,np,s_pass)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1110, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(statistiques, nc-nom, statistiques, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(testées, vpp-ver:pper, testées, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(positives, adj-adj, positives, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(hospitalisées, vpp-ver:pper, hospitalisées, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(publiées, vpp-ver:pper, publiées, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rythme, nc-nom, rythme, [n-1]), ex_si(hebdomadaires, adj-adj, hebdomadaires, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1111, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('DREES', npp-abr, 'DREES', [n-1]), ex_si(dispose, v-ver:pres, dispose, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(démontrer, vinf-ver:infi, démontrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1112, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(publiées, vpp-ver:pper, publiées, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fur, nc-nom, fur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n))),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(confirment, v-ver:pres, confirment, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1113, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(visuel, nc-nom, visuel, [n-1]), ex_si(relayé, vpp-ver:pper, relayé, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(13, adj-num, 13, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(logo, nc-nom, logo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ARS', npp-abr, 'ARS', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('PACA', npp-nam, 'PACA', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Région', npp-nam, 'Région', [n-1]), ex_si('Sud', npp-nam, 'Sud', [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(détournement, nc-nom, détournement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ARS', npp-abr, 'ARS', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(grippe, nc-nom, grippe, [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1114, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(montage, nc-nom, montage, [n-1]), ex_si(détourne, v-ver:pres, détourne, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(visuel, nc-nom, visuel, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(logo, nc-nom, logo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ARS', npp-abr, 'ARS', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('PACA', npp-nam, 'PACA', [np-1]), ex_si(datant, vpr-ver:ppre, datant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1115, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(autorisée, vpp-ver:pper, autorisée, [dl(0,np,s_pass)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(âgés, adj-adj, âgés, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1116, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(âgés, adj-adj, âgés, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1117, Result) :-
      prob_parse([ ex_si('Rien', pro-pro:ind, 'Rien', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(outrepasser, vinf-ver:infi, outrepasser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(ailleurs, adv-adv, ailleurs, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1118, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(textes, nc-nom, textes, [n-1]), ex_si(adoptés, vpp-ver:pper, adoptés, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(permettent, v-ver:pres, permettent, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(remplacer, vinf-ver:infi, remplacer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réponses, nc-nom, réponses, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(pandémies, nc-nom, pandémies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(instaurer, vinf-ver:infi, instaurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1119, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(confie, v-ver:pres, confie, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(von, npp-nam, von, [dr(0,np,np)-1]), ex_si(der, et-prp, der, [dr(0,np,np)-1]), ex_si('Leyen', npp-nam, 'Leyen', [np-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(instaurer, vinf-ver:infi, instaurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1120, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Ursula', npp-nam, 'Ursula', [np-1]), ex_si(von, et-abr, von, [dr(0,dl(0,np,np),np)-1]), ex_si(der, et-abr, der, [dr(0,np,np)-1]), ex_si('Leyen', npp-nam, 'Leyen', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(décidera, v-ver:cond, décidera, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1121, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(règlements, nc-nom, règlements, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(capacités, nc-nom, capacités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réagir, vinf-ver:infi, réagir, [dl(0,np,s_inf)-1]), ex_si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(futures, adj-adj, futures, [dr(0,n,n)-1]), ex_si(pandémies, nc-nom, pandémies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1122, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(règlements, nc-nom, règlements, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptés, vpp-ver:pper, adoptés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1123, Result) :-
      prob_parse([ ex_si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coordination, nc-nom, coordination, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consultation, nc-nom, consultation, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expertise, nc-nom, expertise, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avis, nc-nom, avis, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recommandation, nc-nom, recommandation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rechercher, vinf-ver:infi, rechercher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cohérence, nc-nom, cohérence, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1124, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(que, adv-adv, que, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(concerter, vinf-ver:infi, concerter, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(coordonner, vinf-ver:infi, coordonner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1125, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tâche, nc-nom, tâche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(coordonner, vinf-ver:infi, coordonner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(définir, vinf-ver:infi, définir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(paramètres, nc-nom, paramètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(instruments, nc-nom, instruments, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(épidémiologique, adj-adj, épidémiologique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coordination, nc-nom, coordination, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1126, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(prévues, vpp-ver:pper, prévues, [dl(0,n,n)-1]), ex_si(face, nc-nom, face, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(essentiellement, adv-adv, essentiellement, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(épidémiologique, adj-adj, épidémiologique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coordination, nc-nom, coordination, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1127, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(adopté, vpp-ver:pper, adopté, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tâche, nc-nom, tâche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(coordonner, vinf-ver:infi, coordonner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(définir, vinf-ver:infi, définir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(paramètres, nc-nom, paramètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(épidémiologique, adj-adj, épidémiologique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(instruments, nc-nom, instruments, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coordination, nc-nom, coordination, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(rien, pro-pro:ind, rien, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),np))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(certainement, adv-adv, certainement, [dr(0,dr(0,np,np),dr(0,np,np))-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1128, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(adoption, nc-nom, adoption, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faculté, nc-nom, faculté, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1129, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(prononcée, vpp-ver:pper, prononcée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mardi, nc-nom, mardi, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(licenciés, vpp-ver:pper, licenciés, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(conformer, vinf-ver:infi, conformer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(faite, vpp-ver:pper, faite, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(fonctionnaires, nc-nom, fonctionnaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1130, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(devaient, v-ver:impf, devaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(salaire, nc-nom, salaire, [n-1]), ex_si(rétroactif, adj-adj, rétroactif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1131, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réintégrer, vinf-ver:infi, réintégrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(municipaux, adj-adj, municipaux, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(arriérés, nc-nom, arriérés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(salaire, nc-nom, salaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1132, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(ordonnant, vpr-ver:ppre, ordonnant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(propreté, nc-nom, propreté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1133, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réintégrer, vinf-ver:infi, réintégrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(municipaux, adj-adj, municipaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1134, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1135, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déposé, vpp-ver:pper, déposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si('Porzio', npp-nam, 'Porzio', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1136, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(appel, nc-nom, appel, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si('Porzio', npp-nam, 'Porzio', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1137, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(requérants, nc-nom, requérants, [n-1]), ex_si(individuels, adj-adj, individuels, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1138, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(procédure, nc-nom, procédure, [n-1]), ex_si(judiciaire, adj-adj, judiciaire, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1139, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1140, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fonctionnaires, nc-nom, fonctionnaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(enseignants, nc-nom, enseignants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(soignants, nc-nom, soignants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(policiers, nc-nom, policiers, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('pompiers...', nc-nom, 'pompiers...', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(le, det-det:art, le, [let-1]), ex_si('1er', adj-num, '1er', [dr(0,dl(1,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [dr(0,n,n)-1]), ex_si(2021, adj-num, 2021, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1141, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(requérants, nc-nom, requérants, [n-1]), ex_si(individuels, adj-adj, individuels, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1142, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnels, nc-nom, personnels, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),n)-1]), ex_si(paiement, nc-nom, paiement, [n-1]), ex_si(rétroactif, adj-adj, rétroactif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(salaires, nc-nom, salaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1143, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(ordonnant, vpr-ver:ppre, ordonnant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(propreté, nc-nom, propreté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1144, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(municipaux, adj-adj, municipaux, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soignants, nc-nom, soignants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(municipaux, adj-adj, municipaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1145, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cours', npp-nam, 'Cours', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(municipaux, adj-adj, municipaux, [dl(0,n,n)-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(appel, nc-nom, appel, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(suspendue, vpp-ver:pper, suspendue, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1146, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déposé, vpp-ver:pper, déposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si('Porzio', npp-nam, 'Porzio', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(bloquant, vpr-ver:ppre, bloquant, [dr(0,dl(0,n,n),np)-1]), ex_si(automatiquement, adv-adv, automatiquement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réintégrer, vinf-ver:infi, réintégrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(licenciés, vpp-ver:pper, licenciés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1147, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cours', npp-nam, 'Cours', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(municipaux, adj-adj, municipaux, [dl(0,n,n)-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(appel, nc-nom, appel, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réintégration, nc-nom, réintégration, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(suspendue, vpp-ver:pper, suspendue, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1148, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(procédure, nc-nom, procédure, [n-1]), ex_si(judiciaire, adj-adj, judiciaire, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1149, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(éreintent, v-ver:pres, éreintent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mortalité, nc-nom, mortalité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('80%.', nc-num, '80%.', [dr(0,np,n)-1])], Result).
sent(1150, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(létalité, nc-nom, létalité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('80%.', pro-num, '80%.', [dr(0,np,n)-1])], Result).
sent(1151, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(éreintent, v-ver:pres, éreintent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(variant, vpr-ver:ppre, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mortalité, nc-nom, mortalité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1152, Result) :-
      prob_parse([ ex_si('Huit', pro-num, 'Huit', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dix, adj-num, dix, [dr(0,n,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(infectées, vpp-ver:pper, infectées, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1153, Result) :-
      prob_parse([ ex_si('Huit', pro-num, 'Huit', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dix, adj-num, dix, [dr(0,n,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(infectées, vpp-ver:pper, infectées, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1154, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(expériences, nc-nom, expériences, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', nc-nam, 'Homme', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1155, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(prépublication, nc-nom, prépublication, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,dl(1,s,s),dl(1,s,s))),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),n)-1]), ex_si(évaluation, nc-nom, évaluation, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(éventuelle, adj-adj, éventuelle, [dr(0,n,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1156, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(menées, vpp-ver:pper, menées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prépublication, nc-nom, prépublication, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1157, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(prépublication, nc-nom, prépublication, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,dl(1,s,s),dl(1,s,s))),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),n)-1]), ex_si(évaluation, nc-nom, évaluation, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(éventuelle, adj-adj, éventuelle, [dr(0,n,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1158, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(évalués, vpp-ver:pper, évalués, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1159, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(analysant, vpr-ver:ppre, analysant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conclu, vpp-ver:pper, conclu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('SARS-CoV-2', nc-abr, 'SARS-CoV-2', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(transmis, vpp-ver:pper, transmis, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Wuhan', npp-nam, 'Wuhan', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si('Chine', npp-nam, 'Chine', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1160, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(estimé, vpp-ver:pper, estimé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(animale, adj-adj, animale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1161, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(parallèle, nc-nom, parallèle, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tranchées, vpp-ver:pper, tranchées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1162, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('SARS-CoV-2', nc-abr, 'SARS-CoV-2', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(définitivement, adv-adv, définitivement, [dl(1,s,s)-1]), ex_si(tranchée, vpp-ver:pper, tranchée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1163, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(spike, et-nom, spike, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souche, nc-nom, souche, [n-1]), ex_si(originelle, adj-adj, originelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sars-CoV-2', npp-abr, 'Sars-CoV-2', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('WT', npp-abr, 'WT', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1164, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réplication, nc-nom, réplication, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dangereuse, adj-adj, dangereuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1165, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(élaboré, vpp-ver:pper, élaboré, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(menées, vpp-ver:pper, menées, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vulnérables, adj-adj, vulnérables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souche, nc-nom, souche, [n-1]), ex_si(originelle, adj-adj, originelle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1166, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(bostoniens, adj-adj, bostoniens, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(considéré, vpp-ver:pper, considéré, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souche, nc-nom, souche, [n-1]), ex_si(originelle, adj-adj, originelle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(préliminaires, adj-adj, préliminaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1167, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(gain, nc-nom, gain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si(suscite, v-ver:pres, suscite, [dr(0,dl(0,np,s),np)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(controverses, nc-nom, controverses, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1168, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(débat, nc-nom, débat, [n-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(expériences, nc-nom, expériences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gain, nc-nom, gain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1169, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(épidémiologistes, nc-nom, épidémiologistes, [n-1]), ex_si(considèrent, v-ver:pres, considèrent, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(menées, vpp-ver:pper, menées, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(gain, nc-nom, gain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1170, Result) :-
      prob_parse([ ex_si('L\'université', nc-nom, 'L\'université', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Boston', npp-nam, 'Boston', [dr(0,dl(0,n,n),np)-1]), ex_si(a, v-ver:pres, a, [np-1]), ex_si(démenti, vpp-ver:pper, démenti, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(les, det-det:art, les, [dr(0,s_q,s)-1]), ex_si(recherches, nc-nom, recherches, [dr(0,np,n)-1]), ex_si(réalisées, vpp-ver:pper, réalisées, [n-1]), ex_si(dans, p-prp, dans, [dl(0,n,n)-1]), ex_si(son, det-det:pos, son, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(laboratoire, nc-nom, laboratoire, [dr(0,np,n)-1]), ex_si(puissent, vs-ver:subp, puissent, [n-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(considérées, vpp-ver:pper, considérées, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(gains, nc-nom, gains, [let-1]), ex_si(de, p-prp, de, [n-1]), ex_si(fonction, nc-nom, fonction, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(1171, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), ex_si(ivermectine, et-nom, ivermectine, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(92, det-num, 92, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1172, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prouvée, vpp-ver:pper, prouvée, [dl(0,np,s_pass)-1]), ex_si(scientifiquement, adv-adv, scientifiquement, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1173, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prouvée, vpp-ver:pper, prouvée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1174, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(demontrée, vpp-ver:pper, demontrée, [dl(0,np,s_pass)-1]), ex_si(scientifiquement, adv-adv, scientifiquement, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1175, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), ex_si(ivermectine, et-nom, ivermectine, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(92, det-num, 92, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1176, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(usage, nc-nom, usage, [n-1]), ex_si(vétérinaire, adj-adj, vétérinaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(humain, adj-adj, humain, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parasites, nc-nom, parasites, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1177, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('92%.', nc-num, '92%.', [dr(0,np,n)-1])], Result).
sent(1178, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(92, det-num, 92, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1179, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('AEM', npp-abr, 'AEM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déconseillé, vpp-ver:pper, déconseillé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), ex_si(ivermectine, npp-nom, ivermectine, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1180, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AEM', npp-abr, 'AEM', [n-1]), ex_si(recommandent, v-ver:pres, recommandent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1181, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(insuffisante, adj-adj, insuffisante, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1182, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(elle, pro-pro:per, elle, [np-1]), ex_si(seule, adj-adj, seule, [dl(0,np,np)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1183, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Haut', adj-adj, 'Haut', [dr(0,n,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si('Publique', adj-adj, 'Publique', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(recommande, v-ver:pres, recommande, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('COVID-19', npp-nam, 'COVID-19', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1184, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Haut', adj-adj, 'Haut', [dr(0,n,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si('Publique', adj-adj, 'Publique', [dl(0,n,n)-1]), ex_si(recommande, v-ver:pres, recommande, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(traiter, vinf-ver:infi, traiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1185, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1186, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(recommandent, v-ver:pres, recommandent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(compétents, adj-adj, compétents, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1187, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('CDC', nc-abr, 'CDC', [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(recommandent, v-ver:pres, recommandent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1188, Result) :-
      prob_parse([ ex_si('Rendre', vinf-ver:infi, 'Rendre', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(compétence, nc-nom, compétence, [n-1]), ex_si(relative, adj-adj, relative, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1189, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1190, Result) :-
      prob_parse([ ex_si('Rendre', vinf-ver:infi, 'Rendre', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(compétence, nc-nom, compétence, [n-1]), ex_si(relative, adj-adj, relative, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1191, Result) :-
      prob_parse([ ex_si('Rendre', vinf-ver:infi, 'Rendre', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(compétence, nc-nom, compétence, [n-1]), ex_si(relative, adj-adj, relative, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1192, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(établissent, v-ver:pres, établissent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(exigences, nc-nom, exigences, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ACIP', npp-abr, 'ACIP', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1193, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ACIP', npp-abr, 'ACIP', [n-1]), ex_si(vote, v-ver:pres, vote, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ajout, nc-nom, ajout, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(calendrier, nc-nom, calendrier, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(devront, v-ver:futu, devront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [cl_r-1]), ex_si(vacciner, vinf-ver:infi, vacciner, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(scolarisés, vpp-ver:pper, scolarisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1194, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ACIP', npp-abr, 'ACIP', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(unanimité, nc-nom, unanimité, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ajout, nc-nom, ajout, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(calendrier, nc-nom, calendrier, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccinations, nc-nom, vaccinations, [n-1]), ex_si(recommandées, vpp-ver:pper, recommandées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1195, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(devront, v-ver:futu, devront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(scolarisés, vpp-ver:pper, scolarisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1196, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ACIP', npp-abr, 'ACIP', [n-1]), ex_si(vote, v-ver:pres, vote, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ajout, nc-nom, ajout, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(calendrier, nc-nom, calendrier, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(devront, v-ver:futu, devront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [cl_r-1]), ex_si(vacciner, vinf-ver:infi, vacciner, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(scolarisés, vpp-ver:pper, scolarisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1197, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ACIP', npp-abr, 'ACIP', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(unanimité, nc-nom, unanimité, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ajout, nc-nom, ajout, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(calendrier, nc-nom, calendrier, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccinations, nc-nom, vaccinations, [n-1]), ex_si(recommandées, vpp-ver:pper, recommandées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1198, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(pourront, v-ver:futu, pourront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(scolarisés, vpp-ver:pper, scolarisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1199, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(composées, vpp-ver:pper, composées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(recommandations, nc-nom, recommandations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1200, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ACIP', npp-abr, 'ACIP', [n-1]), ex_si(contribue, v-ver:pres, contribue, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élaboration, nc-nom, élaboration, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(recommandations, nc-nom, recommandations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinations, nc-nom, vaccinations, [n-1]), ex_si(infantiles, adj-adj, infantiles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1201, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(recommandations, nc-nom, recommandations, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(exigences, nc-nom, exigences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(fréquenter, vinf-ver:infi, fréquenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(déterminées, vpp-ver:pper, déterminées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(juridictions, nc-nom, juridictions, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats', nc-nam, 'Etats', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(localement, adv-adv, localement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1202, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(fixent, v-ver:pres, fixent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(exigences, nc-nom, exigences, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1203, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(recommandations, nc-nom, recommandations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1204, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(fixent, v-ver:pres, fixent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(exigences, nc-nom, exigences, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1205, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(recommandations, nc-nom, recommandations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1206, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(établissent, v-ver:pres, établissent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(exigences, nc-nom, exigences, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoliers, nc-nom, écoliers, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ACIP', npp-abr, 'ACIP', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1207, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(bavarois, adj-adj, bavarois, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déclenché, vpp-ver:pper, déclenché, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1208, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(bavarois, adj-adj, bavarois, [dl(0,n,n)-1]), ex_si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(activé, vpp-ver:pper, activé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1209, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Bavière', npp-nam, 'Bavière', [n-1]), ex_si('Markus', npp-nam, 'Markus', [dl(0,n,n)-1]), ex_si('Söder', npp-nam, 'Söder', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclenché, vpp-ver:pper, déclenché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mobiliser, vinf-ver:infi, mobiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(soignant, vpr-ver:ppre, soignant, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(face, nc-nom, face, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vague, nc-nom, vague, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1210, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(bavarois, adj-adj, bavarois, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déclenché, vpp-ver:pper, déclenché, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Markus', npp-nam, 'Markus', [dr(0,np,np)-1]), ex_si('Söder', npp-nam, 'Söder', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(face, nc-nom, face, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1211, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(activé, vpp-ver:pper, activé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mobilisation, nc-nom, mobilisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(soignant, vpr-ver:ppre, soignant, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(soignés, vpp-ver:pper, soignés, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(pouvant, vpr-ver:ppre, pouvant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(accueillir, vinf-ver:infi, accueillir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,s),pp)-1]), ex_si(souffrent, v-ver:pres, souffrent, [dr(0,pp_de,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(cardiaques, adj-adj, cardiaques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(lit, nc-nom, lit, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1212, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(activé, vpp-ver:pper, activé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accueillir, vinf-ver:infi, accueillir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(cardiaques, adj-adj, cardiaques, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1213, Result) :-
      prob_parse([ ex_si('Markus', npp-nam, 'Markus', [dr(0,np,np)-1]), ex_si('Söder', npp-nam, 'Söder', [np-1]), ex_si(parle, v-ver:pres, parle, [dr(0,dl(0,np,s),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(accueillir, vinf-ver:infi, accueillir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(atteintes, vpp-ver:pper, atteintes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1214, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Markus', npp-nam, 'Markus', [dr(0,np,np)-1]), ex_si('Söder', npp-nam, 'Söder', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(nulle, det-pro:ind, nulle, [dr(0,dl(1,s,s),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(mention, nc-nom, mention, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(devant, vpr-ver:ppre, devant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(accueillies, vpp-ver:pper, accueillies, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1215, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Land', npp-nam, 'Land', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Bavière', npp-nam, 'Bavière', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déclenché, vpp-ver:pper, déclenché, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(dynamique, adj-adj, dynamique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1216, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contexte, nc-nom, contexte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(développent, v-ver:pres, développent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dynamique, adj-adj, dynamique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Bavière', npp-nam, 'Bavière', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1217, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si('III', adj-num, 'III', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menés, vpp-ver:pper, menés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('Moderna', npp-nam, 'Moderna', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(innocuité, nc-nom, innocuité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(protectrice, adj-adj, protectrice, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1218, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(avérait, v-ver:impf, avérait, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mieux, adv-adv, mieux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ça, pro-pro:dem, ça, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1219, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mesurer, vinf-ver:infi, mesurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(symptomatiques, adj-adj, symptomatiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmissibilité, nc-nom, transmissibilité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1220, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si('III', adj-num, 'III', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menés, vpp-ver:pper, menés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('Moderna', npp-nam, 'Moderna', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(innocuité, nc-nom, innocuité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(protectrice, adj-adj, protectrice, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1221, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(avérait, v-ver:impf, avérait, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mieux, adv-adv, mieux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ça, pro-pro:dem, ça, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1222, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mesurer, vinf-ver:infi, mesurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmissibilité, nc-nom, transmissibilité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1223, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(facteur, nc-nom, facteur, [n-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(complexe, adj-adj, complexe, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mesurer, vinf-ver:infi, mesurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contribué, vpp-ver:pper, contribué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(alimenter, vinf-ver:infi, alimenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(controverses, nc-nom, controverses, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1224, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(clinique, adj-adj, clinique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mesurer, vinf-ver:infi, mesurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(complexe, adj-adj, complexe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1225, Result) :-
      prob_parse([ ex_si('Limiter', vinf-ver:infi, 'Limiter', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(dépend, v-ver:pres, dépend, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(multiples, adj-adj, multiples, [dr(0,n,n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1226, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(dépend, v-ver:pres, dépend, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1227, Result) :-
      prob_parse([ ex_si('Interrogée', vpp-ver:pper, 'Interrogée', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élu, nc-nom, élu, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Roos', npp-nam, 'Roos', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(testé, vpp-ver:pper, testé, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1228, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avouer, vinf-ver:infi, avouer, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(introduction, nc-nom, introduction, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(testé, vpp-ver:pper, testé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(stopper, vinf-ver:infi, stopper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1229, Result) :-
      prob_parse([ ex_si('L\'eurodéputé', nc-nom, 'L\'eurodéputé', [dr(0,np,n)-1]), ex_si(néerlandais, adj-adj, néerlandais, [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Roos', npp-nam, 'Roos', [dl(0,n,n)-1]), ex_si(affirme, v-ver:pres, affirme, [dl(0,n,n)-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(révélations, nc-nom, révélations, [let-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(de, p-prp, de, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(part, nc-nom, part, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,n,n),np)-1]), ex_si(représentante, nc-nom, représentante, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dr(0,dl(0,n,n),np)-1]), ex_si(sur, p-prp, sur, [np-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),np)-1]), ex_si(essais, nc-nom, essais, [dr(0,np,n)-1]), ex_si(cliniques, adj-adj, cliniques, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(son, det-det:pos, son, [dr(0,dl(0,n,n),np)-1]), ex_si(vaccin, nc-nom, vaccin, [dr(0,np,n)-1]), ex_si(contre, p-prp, contre, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1230, Result) :-
      prob_parse([ ex_si('Contrairement', adv-adv, 'Contrairement', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dr(0,s,np),np)-1]), ex_si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), ex_si('Roos', npp-nam, 'Roos', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(voit, v-ver:pres, voit, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(propos, nc-nom, propos, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(représentante, nc-nom, représentante, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(alerte, nc-nom, alerte, [n-1]), ex_si(info, nc-nom, info, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(airs, nc-nom, airs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(scandale, nc-nom, scandale, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(révélations, nc-nom, révélations, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(représentante, nc-nom, représentante, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1231, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(audience, nc-nom, audience, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(savait, v-ver:impf, savait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(circulation, nc-nom, circulation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(permettait, v-ver:impf, permettait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(empêcher, vinf-ver:infi, empêcher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1232, Result) :-
      prob_parse([ ex_si('Savions', vimp-nom, 'Savions', [dr(0,dr(0,s,s_q),np)-1]), ex_si('-nous', cls-pro:per, '-nous', [np-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(permettait, v-ver:impf, permettait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(stopper, vinf-ver:infi, stopper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(commercialisation, nc-nom, commercialisation, [n-1]), ex_si('?', ponct-pun, '?', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1233, Result) :-
      prob_parse([ ex_si('Non', adv-adv, 'Non', [s-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(répondu, vpp-ver:pper, répondu, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(audience, nc-nom, audience, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1234, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(audience, nc-nom, audience, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prouvé, vpp-ver:pper, prouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(empêcher, vinf-ver:infi, empêcher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(commercialisé, vpp-ver:pper, commercialisé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1235, Result) :-
      prob_parse([ ex_si('Savions', vimp-ver:impe, 'Savions', [dr(0,dr(0,s,s_q),np)-1]), ex_si('-nous', cls-pro:per, '-nous', [np-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(stopper, vinf-ver:infi, stopper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(commercialisation, nc-nom, commercialisation, [n-1]), ex_si('?', ponct-pun, '?', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1236, Result) :-
      prob_parse([ ex_si('Non', adv-adv, 'Non', [s-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(répondu, vpp-ver:pper, répondu, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(audience, nc-nom, audience, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1237, Result) :-
      prob_parse([ ex_si('L\'emploi', nc-nom, 'L\'emploi', [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(mot, nc-nom, mot, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(immunisation, nc-nom, immunisation, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(erreur, nc-nom, erreur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(place, nc-nom, place, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(terme, nc-nom, terme, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(transmission, nc-nom, transmission, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [let-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), ex_si(lapsus, nc-nom, lapsus, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Janine', npp-nam, 'Janine', [dr(0,dl(0,n,n),np)-1]), ex_si('Small', npp-nam, 'Small', [dr(0,np,np)-1]), ex_si(dans, p-prp, dans, [np-1]), ex_si(son, det-det:pos, son, [dr(0,dl(1,s,s),np)-1]), ex_si(propos, nc-nom, propos, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1238, Result) :-
      prob_parse([ ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Small', npp-nam, 'Small', [np-1]), ex_si(voulait, v-ver:impf, voulait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('\'', ponct-pun:cit, '\'', [let-1]), ex_si('transmission\'', nc-nom, 'transmission\'', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(non, adv-adv, non, [dr(0,n,n)-1]), ex_si('‘immunisation\'', nc-nom, '‘immunisation\'', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [let-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(propos, nc-nom, propos, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1239, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dossier, nc-nom, dossier, [n-1]), ex_si(déposé, vpp-ver:pper, déposé, [dr(0,dr(0,dl(0,n,n),pp_par),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(pointait, v-ver:impf, pointait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(évaluée, vpp-ver:pper, évaluée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(absolument, adv-adv, absolument, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(choqué, vpp-ver:pper, choqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(françaises, adj-adj, françaises, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1240, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(françaises, adj-adj, françaises, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choquées, vpp-ver:pper, choquées, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dossier, nc-nom, dossier, [n-1]), ex_si(déposé, vpp-ver:pper, déposé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(pointe, v-ver:pres, pointe, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(évaluée, vpp-ver:pper, évaluée, [dl(0,np,s_pass)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(tout, nc-nom, tout, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1241, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Haute', adj-adj, 'Haute', [dr(0,n,n)-1]), ex_si('Autorité', nc-nam, 'Autorité', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('HAS', npp-abr, 'HAS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(objectifs, nc-nom, objectifs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(définir, vinf-ver:infi, définir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(compte, nc-nom, compte, [np-1]), ex_si(tenu, vpp-ver:pper, tenu, [dr(0,dl(0,np,dl(1,s,s)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(épidémiologique, adj-adj, épidémiologique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appuyant, vpr-ver:ppre, appuyant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(circulation, nc-nom, circulation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('SARS-CoV-2', npp-abr, 'SARS-CoV-2', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(connaissances, nc-nom, connaissances, [n-1]), ex_si(épidémiologiques, adj-adj, épidémiologiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('SARS-CoV-2', npp-abr, 'SARS-CoV-2', [n-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sa, det-det:pos, sa, [dr(0,dl(0,n,n),np)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(spécificités, nc-nom, spécificités, [n-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(ainsi, adv-kon, ainsi, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s_q)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),s_q)-1]), ex_si(les, det-det:art, les, [dr(0,s_q,pp)-1]), ex_si(caractéristiques, nc-nom, caractéristiques, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(candidats, nc-nom, candidats, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(développés, vpp-ver:pper, développés, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(leur, det-det:pos, leur, [dl(0,n,n)-1]), ex_si(capacité, nc-nom, capacité, [dr(0,np,n)-1]), ex_si(soit, cc-kon, soit, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(protéger, vinf-ver:infi, protéger, [n-1]), ex_si(contre, p-prp, contre, [n-1]), ex_si('l\'', det-det:art, 'l\'', [np-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(soit, cc-kon, soit, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(diminuer, vinf-ver:infi, diminuer, [n-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(sévérité, nc-nom, sévérité, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(la, det-det:art, la, [dr(0,pp,np)-1]), ex_si(maladie, nc-nom, maladie, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(leur, det-det:pos, leur, [n-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,dl(0,np,np),np)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,n,n),n)-1])], Result).
sent(1242, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Haute', adj-adj, 'Haute', [dr(0,n,n)-1]), ex_si('Autorité', nc-nam, 'Autorité', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('HAS', npp-abr, 'HAS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(prioriser, vinf-ver:infi, prioriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1243, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(protocoles, nc-nom, protocoles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(enregistrées, vpp-ver:pper, enregistrées, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si('III', adj-num, 'III', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(conçus, vpp-ver:pper, conçus, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('vis-à-vis', p-prp, 'vis-à-vis', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1244, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(clinique, adj-adj, clinique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si('III', adj-num, 'III', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(conçu, vpp-ver:pper, conçu, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('SARS-CoV-2', nc-abr, 'SARS-CoV-2', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1245, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(conclusions, nc-nom, conclusions, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(menés, vpp-ver:pper, menés, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permettent, v-ver:pres, permettent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si('[...]', ponct-pun, '[...]', [let-1]), ex_si(si, cs-kon, si, [let-1]), ex_si(le, det-det:art, le, [let-1]), ex_si(vaccin, nc-nom, vaccin, [dr(0,s_whq,s)-1]), ex_si(protège, v-ver:pres, protège, [dr(0,np,n)-1]), ex_si(contre, p-prp, contre, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,s),pp)-1]), ex_si(formes, nc-nom, formes, [dr(0,pp,np)-1]), ex_si(asymptomatiques, adj-adj, asymptomatiques, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dl(0,n,n)-1]), ex_si(maladie, nc-nom, maladie, [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,np,n)-1]), ex_si(ni, cc-kon, ni, [n-1]), ex_si('s\'', cs-kon, 's\'', [let-1]), ex_si(il, cls-pro:per, il, [dr(0,dl(0,s,s),s)-1]), ex_si(agit, v-ver:pres, agit, [dr(0,s_whq,s)-1]), ex_si(sur, p-prp, sur, [np-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s),pp)-1]), ex_si(transmission, nc-nom, transmission, [dr(0,pp,np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1246, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conclusions, nc-nom, conclusions, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(protège, v-ver:pres, protège, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(asymptomatique, adj-adj, asymptomatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1247, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vaccinologie, nc-nom, vaccinologie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(placé, vpp-ver:pper, placé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si(normal, adj-adj, normal, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(fait, vpp-ver:pper, fait, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fait, vpp-ver:pper, fait, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1248, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vaccinologie, nc-nom, vaccinologie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si(normal, adj-adj, normal, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(fait, vpp-ver:pper, fait, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(placer, vinf-ver:infi, placer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(tout, pro-pro:ind, tout, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1249, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(suggèrent, v-ver:pres, suggèrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(fortement, adv-adv, fortement, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(limitation, nc-nom, limitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(chiffrer, vinf-ver:infi, chiffrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(quasi, adv-adv, quasi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1250, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1251, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contribuent, v-ver:pres, contribuent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(empêchent, v-ver:pres, empêchent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1252, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contribuent, v-ver:pres, contribuent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(calculer, vinf-ver:infi, calculer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chiffre, nc-nom, chiffre, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(compliqué, adj-adj, compliqué, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1253, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(connu, vpp-ver:pper, connu, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empêchaient, v-ver:impf, empêchaient, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(personnalités, nc-nom, personnalités, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(déclarations, nc-nom, déclarations, [n-1]), ex_si(hasardeuses, adj-adj, hasardeuses, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contribué, vpp-ver:pper, contribué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(semer, vinf-ver:infi, semer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(confusion, nc-nom, confusion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1254, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connu, vpp-ver:pper, connu, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(public, adj-adj, public, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(personnalités, nc-nom, personnalités, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(raccourcis, nc-nom, raccourcis, [n-1]), ex_si(hasardeux, adj-adj, hasardeux, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1255, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(pleinement, adv-adv, pleinement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(tout, pro-pro:ind, tout, [np-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(infectées, vpp-ver:pper, infectées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1256, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(chance, nc-nom, chance, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1257, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('non-vaccinées', vpp-ver:pper, 'non-vaccinées', [dl(0,n,n)-1]), ex_si(contribuent, v-ver:pres, contribuent, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(disproportionnée, adj-adj, disproportionnée, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('non-vaccinée', vpp-ver:pper, 'non-vaccinée', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(12, det-num, 12, [dr(0,dr(0,np,np),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('SARS-CoV-2', npp-abr, 'SARS-CoV-2', [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(vaccinée, vpp-ver:pper, vaccinée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1258, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(réduit, v-ver:pres, réduit, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(douze, pro-num, douze, [np-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contamination, nc-nom, contamination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1259, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(présentent, v-ver:pres, présentent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(symptomatiques, adj-adj, symptomatiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1260, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réduction, nc-nom, réduction, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(grave, adj-adj, grave, [dl(0,np,np)-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1261, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,dl(1,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(amenuisée, vpp-ver:pper, amenuisée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(variants, nc-nom, variants, [n-1]), ex_si(successifs, adj-adj, successifs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(confirmée, vpp-ver:pper, confirmée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(campagnes, nc-nom, campagnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1262, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(globale, adj-adj, globale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('-sur', p-prp, '-sur', [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(contagion, nc-nom, contagion, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(amoindrie, vpp-ver:pper, amoindrie, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(variants, nc-nom, variants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1263, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(avéré, vpp-ver:pper, avéré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(efficace, adj-adj, efficace, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(variants, nc-nom, variants, [n-1]), ex_si(apparaissaient, v-ver:impf, apparaissaient, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1264, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(globale, adj-adj, globale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('-sur', p-prp, '-sur', [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(contagion, nc-nom, contagion, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(amoindrie, vpp-ver:pper, amoindrie, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(variants, nc-nom, variants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1265, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(globale, adj-adj, globale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('-sur', p-prp, '-sur', [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(contagion, nc-nom, contagion, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(amoindrie, vpp-ver:pper, amoindrie, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(variants, nc-nom, variants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1266, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(avéré, vpp-ver:pper, avéré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(efficace, adj-adj, efficace, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(variants, nc-nom, variants, [n-1]), ex_si(apparaissaient, v-ver:impf, apparaissaient, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1267, Result) :-
      prob_parse([ ex_si('L\'immunité', nc-nom, 'L\'immunité', [dr(0,np,n)-1]), ex_si(dite, vpp-ver:pper, dite, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(effective, adj-adj, effective, [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [let-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dl(1,s,s)-1]), ex_si(contamination, nc-nom, contamination, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(organisme, nc-nom, organisme, [dr(0,np,n)-1]), ex_si(par, p-prp, par, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), ex_si(virus, nc-nom, virus, [dr(0,np,n)-1]), ex_si(ni, cc-kon, ni, [n-1]), ex_si(sa, det-det:pos, sa, [dr(0,dl(0,np,np),np)-1]), ex_si(multiplication, nc-nom, multiplication, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(mais, cc-kon, mais, [let-1]), ex_si(elle, cls-pro:per, elle, [dr(0,dl(0,s,s),s)-1]), ex_si(préviendra, v-ver:futu, préviendra, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), ex_si(développement, nc-nom, développement, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(principaux, adj-adj, principaux, [dr(0,dl(0,n,n),n)-1]), ex_si(symptômes, nc-nom, symptômes, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(maladie, nc-nom, maladie, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1268, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(effective, adj-adj, effective, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévient, v-ver:pres, prévient, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(symptômes, nc-nom, symptômes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1269, Result) :-
      prob_parse([ ex_si('L\'immunité', nc-nom, 'L\'immunité', [dr(0,np,n)-1]), ex_si(dite, vpp-ver:pper, dite, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(effective, adj-adj, effective, [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [let-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dl(1,s,s)-1]), ex_si(contamination, nc-nom, contamination, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(organisme, nc-nom, organisme, [dr(0,np,n)-1]), ex_si(par, p-prp, par, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), ex_si(virus, nc-nom, virus, [dr(0,np,n)-1]), ex_si(ni, cc-kon, ni, [n-1]), ex_si(sa, det-det:pos, sa, [dr(0,dl(0,np,np),np)-1]), ex_si(multiplication, nc-nom, multiplication, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(mais, cc-kon, mais, [let-1]), ex_si(elle, cls-pro:per, elle, [dr(0,dl(0,s,s),s)-1]), ex_si(préviendra, v-ver:futu, préviendra, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), ex_si(développement, nc-nom, développement, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(principaux, adj-adj, principaux, [dr(0,dl(0,n,n),n)-1]), ex_si(symptômes, nc-nom, symptômes, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(maladie, nc-nom, maladie, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1270, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(effective, adj-adj, effective, [dl(0,n,n)-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévient, v-ver:pres, prévient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(symptômes, nc-nom, symptômes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(contamination, nc-nom, contamination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(organisme, nc-nom, organisme, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1271, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(dite, vpp-ver:pper, dite, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(stérilisante, adj-adj, stérilisante, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réponse, nc-nom, réponse, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(engendrée, vpp-ver:pper, engendrée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(éliminer, vinf-ver:infi, éliminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(entièrement, adv-adv, entièrement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(organisme, nc-nom, organisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1272, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1273, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(dite, vpp-ver:pper, dite, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(effective, adj-adj, effective, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1274, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,n,n)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(induisent, v-ver:pres, induisent, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(effective, adj-adj, effective, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1275, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(induisent, v-ver:pres, induisent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(effective, adj-adj, effective, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1276, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,n,n)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(induisent, v-ver:pres, induisent, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(effective, adj-adj, effective, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1277, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quant, adv-adv, quant, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(dite, vpp-ver:pper, dite, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(stérilisante, adj-adj, stérilisante, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1278, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(stérilisante, adj-adj, stérilisante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1279, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(exposé, vpp-ver:pper, exposé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(contagiosité, nc-nom, contagiosité, [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,dl(1,s,s))-1]), ex_si(diminuée, vpp-ver:pper, diminuée, [dl(0,np,dl(1,s,s))-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1280, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vacciné, adj-ver:pper, vacciné, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1281, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(exposé, vpp-ver:pper, exposé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(contagiosité, nc-nom, contagiosité, [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,dl(1,s,s))-1]), ex_si(diminuée, vpp-ver:pper, diminuée, [dl(0,np,dl(1,s,s))-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1282, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vacciné, adj-ver:pper, vacciné, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1283, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(transfuser, vinf-ver:infi, transfuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(vaccinée, vpp-ver:pper, vaccinée, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(receveur, nc-nom, receveur, [n-1]), ex_si('non-vacciné', adj-adj, 'non-vacciné', [dl(0,n,n)-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, nc-nom, dernier, [n-1]), ex_si(recevrait, v-ver:impf, recevrait, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(dangereuses, adj-adj, dangereuses, [dr(0,n,n)-1]), ex_si(protéines, nc-nom, protéines, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appui, nc-nom, appui, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1284, Result) :-
      prob_parse([ ex_si('Interrogée', vpp-ver:pper, 'Interrogée', [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Croix', nc-nam, 'Croix', [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réaffirmé, vpp-ver:pper, réaffirmé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(distinction, nc-nom, distinction, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transfusion, nc-nom, transfusion, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(receveurs, nc-nom, receveurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si(donneurs, nc-nom, donneurs, [n-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(précisant, vpr-ver:ppre, précisant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [let-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(requiert, v-ver:pres, requiert, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1285, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Croix', nc-nam, 'Croix', [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(précise, v-ver:pres, précise, [dr(0,dl(0,np,s),s_q)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1286, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(transfuser, vinf-ver:infi, transfuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(vaccinée, vpp-ver:pper, vaccinée, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(receveur, nc-nom, receveur, [n-1]), ex_si('non-vacciné', adj-adj, 'non-vacciné', [dl(0,n,n)-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, nc-nom, dernier, [n-1]), ex_si(recevrait, v-ver:impf, recevrait, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(dangereuses, adj-adj, dangereuses, [dr(0,n,n)-1]), ex_si(protéines, nc-nom, protéines, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appui, nc-nom, appui, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1287, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(que, adv-adv, que, [dr(0,pp,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(faudra, v-ver:futu, faudra, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(délai, nc-nom, délai, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(28, det-num, 28, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(précisait, v-ver:impf, précisait, [dr(0,dl(1,s,s),np)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etablissement', nc-nam, 'Etablissement', [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('EFS', npp-abr, 'EFS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1288, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(transfuser, vinf-ver:infi, transfuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(vaccinée, vpp-ver:pper, vaccinée, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(receveur, nc-nom, receveur, [n-1]), ex_si('non-vacciné', adj-adj, 'non-vacciné', [dl(0,n,n)-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, nc-nom, dernier, [n-1]), ex_si(recevrait, v-ver:impf, recevrait, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(dangereuses, adj-adj, dangereuses, [dr(0,n,n)-1]), ex_si(protéines, nc-nom, protéines, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(appui, nc-nom, appui, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1289, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(principe, nc-nom, principe, [n-1]), ex_si(même, adj-adj, même, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(exprimer, vinf-ver:infi, exprimer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(immuniser, vinf-ver:infi, immuniser, [dl(0,np,s_inf)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si(virale, adj-adj, virale, [dl(0,n,n)-1]), ex_si('post-vaccination', nc-nom, 'post-vaccination', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(transfusion, nc-nom, transfusion, [n-1]), ex_si(sanguine, adj-adj, sanguine, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hématologie, nc-nom, hématologie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('Georges', npp-nam, 'Georges', [dl(0,n,n)-1]), ex_si('Pompidou', npp-nam, 'Pompidou', [dl(0,n,n)-1]), ex_si('David', npp-nam, 'David', [dl(0,n,n)-1]), ex_si('Smadja', npp-nam, 'Smadja', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1290, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(94, det-num, 94, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(présentaient, v-ver:pres, présentaient, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(agrégation, nc-nom, agrégation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(globules, nc-nom, globules, [n-1]), ex_si(rouges, adj-adj, rouges, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(tailles, nc-nom, tailles, [n-1]), ex_si(diverses, adj-adj, diverses, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1291, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnue, vpp-ver:pper, reconnue, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1292, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(94, det-num, 94, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(présentaient, v-ver:pres, présentaient, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(agrégation, nc-nom, agrégation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(globules, nc-nom, globules, [n-1]), ex_si(rouges, adj-adj, rouges, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(tailles, nc-nom, tailles, [n-1]), ex_si(diverses, adj-adj, diverses, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1293, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(révèle, v-ver:pres, révèle, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(94, det-num, 94, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(présentent, v-ver:pres, présentent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(formations, nc-nom, formations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(caillots, nc-nom, caillots, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1294, Result) :-
      prob_parse([ ex_si('L\'AEM', npp-abr, 'L\'AEM', [dr(0,np,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [let-1]), ex_si(lien, nc-nom, lien, [dr(0,np,n)-1]), ex_si(possible, adj-adj, possible, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [let-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),np)-1]), ex_si(vaccins, nc-nom, vaccins, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si('Johnson', npp-nam, 'Johnson', [dr(0,dl(0,np,np),np)-1]), ex_si('&', ponct-kon, '&', [np-1]), ex_si('Johnson', npp-nam, 'Johnson', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [let-1]), ex_si(très, adv-adv, très, [dr(0,np,n)-1]), ex_si(rares, adj-adj, rares, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(cas, nc-nom, cas, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(caillots, nc-nom, caillots, [dr(0,dl(0,n,n),n)-1]), ex_si(sanguins, adj-adj, sanguins, [n-1]), ex_si(inhabituels, adj-adj, inhabituels, [dl(0,n,n)-1]), ex_si(associés, vpp-ver:pper, associés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(des, det-prp:det, des, [dr(0,pp_a,np)-1]), ex_si(plaquettes, nc-nom, plaquettes, [dr(0,np,n)-1]), ex_si(sanguines, adj-adj, sanguines, [n-1]), ex_si(basses, adj-adj, basses, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(1295, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(rares, adj-adj, rares, [dr(0,n,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(caillots, nc-nom, caillots, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1296, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(94, det-num, 94, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(présentaient, v-ver:pres, présentaient, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(agrégation, nc-nom, agrégation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(globules, nc-nom, globules, [n-1]), ex_si(rouges, adj-adj, rouges, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(tailles, nc-nom, tailles, [n-1]), ex_si(diverses, adj-adj, diverses, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1297, Result) :-
      prob_parse([ ex_si('L\'étude', nc-nam, 'L\'étude', [dr(0,np,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), ex_si(après, p-prp, après, [let-1]), ex_si(la, det-det:art, la, [dr(0,dr(0,s,s),np)-1]), ex_si(vaccination, nc-nom, vaccination, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si('ARNm', nc-abr, 'ARNm', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(il, cls-pro:per, il, [let-1]), ex_si(y, clo-pro:per, y, [np-1]), ex_si(avait, v-ver:impf, avait, [cl_y-1]), ex_si(948, det-num, 948, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(sujets, nc-nom, sujets, [dr(0,np,n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si(94, det-num, 94, [dr(0,dl(0,np,np),np)-1]), ex_si('%', nc-sym, '%', [dr(0,np,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(dont, prorel-pro:rel, dont, [let-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(sang, nc-nom, sang, [dr(0,np,n)-1]), ex_si(présentait, v-ver:impf, présentait, [n-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,np,s),np)-1]), ex_si(agrégation, nc-nom, agrégation, [dr(0,np,n)-1]), ex_si(inhabituelle, adj-adj, inhabituelle, [n-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si(érythrocytes, nc-nom, érythrocytes, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ou, cc-kon, ou, [let-1]), ex_si(globules, nc-nom, globules, [dr(0,dl(0,n,n),n)-1]), ex_si(rouges, adj-adj, rouges, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), ex_si(sang, nc-nom, sang, [dr(0,np,n)-1]), ex_si(on, cls-pro:per, on, [n-1]), ex_si(observait, v-ver:impf, observait, [np-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s),np)-1]), ex_si(particules, nc-nom, particules, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(différentes, adj-adj, différentes, [dr(0,dl(0,n,n),n)-1]), ex_si(formes, nc-nom, formes, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(tailles, nc-nom, tailles, [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1298, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('International', npp-nam, 'International', [dr(0,n,n)-1]), ex_si('Journal', npp-nam, 'Journal', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('Vaccine', npp-nam, 'Vaccine', [dr(0,n,n)-1]), ex_si('Theory', npp-nam, 'Theory', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Practice', npp-nam, 'Practice', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(and, et-kon, and, [dr(0,dl(0,n,n),n)-1]), ex_si('Research', npp-nam, 'Research', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(respecte, v-ver:pres, respecte, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1299, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(figurent, v-ver:pres, figurent, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('International', npp-nam, 'International', [dr(0,n,n)-1]), ex_si('Journal', npp-nam, 'Journal', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('Vaccine', npp-nam, 'Vaccine', [dr(0,n,n)-1]), ex_si('Theory', npp-nam, 'Theory', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Practice', npp-nam, 'Practice', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(and, et-kon, and, [dl(0,n,n)-1]), ex_si('Research', npp-nam, 'Research', [let-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s),np)-1]), ex_si(respectent, v-ver:pres, respectent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1300, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(contrôle, v-ver:pres, contrôle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,n,n),np)-1]), ex_si(groupe, nc-nom, groupe, [np-1]), ex_si(témoin, nc-nom, témoin, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçoivent, v-ver:pres, reçoivent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(testé, vpp-ver:pper, testé, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(expérience, nc-nom, expérience, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1301, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(contrôle, v-ver:pres, contrôle, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(témoin, nc-nom, témoin, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1302, Result) :-
      prob_parse([ ex_si('L\'étude', nc-nam, 'L\'étude', [dr(0,np,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [let-1]), ex_si(mois, nc-nom, mois, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(après, p-prp, après, [n-1]), ex_si(la, det-det:art, la, [dr(0,dr(0,s,s),np)-1]), ex_si(vaccination, nc-nom, vaccination, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si('ARNm', nc-nom, 'ARNm', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(il, cls-pro:per, il, [let-1]), ex_si(y, clo-pro:per, y, [np-1]), ex_si(avait, v-ver:impf, avait, [cl_y-1]), ex_si(948, det-num, 948, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(sujets, nc-nom, sujets, [dr(0,np,n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si(94, det-num, 94, [dr(0,dl(0,np,np),np)-1]), ex_si('%', nc-sym, '%', [dr(0,np,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(dont, prorel-pro:rel, dont, [let-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(sang, nc-nom, sang, [dr(0,np,n)-1]), ex_si(présentait, v-ver:impf, présentait, [n-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,np,s),np)-1]), ex_si(agrégation, nc-nom, agrégation, [dr(0,np,n)-1]), ex_si(inhabituelle, adj-adj, inhabituelle, [n-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si(érythrocytes, nc-nom, érythrocytes, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ou, cc-kon, ou, [let-1]), ex_si(globules, nc-nom, globules, [dr(0,dl(0,n,n),n)-1]), ex_si(rouges, adj-adj, rouges, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), ex_si(sang, nc-nom, sang, [dr(0,np,n)-1]), ex_si(on, cls-pro:per, on, [n-1]), ex_si(observait, v-ver:impf, observait, [np-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s),np)-1]), ex_si(particules, nc-nom, particules, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(différentes, adj-adj, différentes, [dr(0,dl(0,n,n),n)-1]), ex_si(formes, nc-nom, formes, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(tailles, nc-nom, tailles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1303, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(agrégation, nc-nom, agrégation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(globules, nc-nom, globules, [n-1]), ex_si(rouges, adj-adj, rouges, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(94, det-num, 94, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(sujets, nc-nom, sujets, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1304, Result) :-
      prob_parse([ ex_si('L\'étude', nc-nam, 'L\'étude', [dr(0,np,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [let-1]), ex_si(mois, nc-nom, mois, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(après, p-prp, après, [n-1]), ex_si(la, det-det:art, la, [dr(0,dr(0,s,s),np)-1]), ex_si(vaccination, nc-nom, vaccination, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si('ARNm', nc-nom, 'ARNm', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(il, cls-pro:per, il, [let-1]), ex_si(y, clo-pro:per, y, [np-1]), ex_si(avait, v-ver:impf, avait, [cl_y-1]), ex_si(948, det-num, 948, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(sujets, nc-nom, sujets, [dr(0,np,n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si(94, det-num, 94, [dr(0,dl(0,np,np),np)-1]), ex_si('%', nc-sym, '%', [dr(0,np,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(dont, prorel-pro:rel, dont, [let-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(sang, nc-nom, sang, [dr(0,np,n)-1]), ex_si(présentait, v-ver:impf, présentait, [n-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,np,s),np)-1]), ex_si(agrégation, nc-nom, agrégation, [dr(0,np,n)-1]), ex_si(inhabituelle, adj-adj, inhabituelle, [n-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si(érythrocytes, nc-nom, érythrocytes, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ou, cc-kon, ou, [let-1]), ex_si(globules, nc-nom, globules, [dr(0,dl(0,n,n),n)-1]), ex_si(rouges, adj-adj, rouges, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), ex_si(sang, nc-nom, sang, [dr(0,np,n)-1]), ex_si(on, cls-pro:per, on, [n-1]), ex_si(observait, v-ver:impf, observait, [np-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s),np)-1]), ex_si(particules, nc-nom, particules, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(différentes, adj-adj, différentes, [dr(0,dl(0,n,n),n)-1]), ex_si(formes, nc-nom, formes, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(tailles, nc-nom, tailles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1305, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(agrégation, nc-nom, agrégation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(globules, nc-nom, globules, [n-1]), ex_si(rouges, adj-adj, rouges, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(94, det-num, 94, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(sujets, nc-nom, sujets, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1306, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fiabilité, nc-nom, fiabilité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(microscope, nc-nom, microscope, [n-1]), ex_si(incluses, vpp-ver:pper, incluses, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Vähä-Koskela', npp-nam, 'Vähä-Koskela', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1307, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Vähä-Koskela', npp-nam, 'Vähä-Koskela', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émis, vpp-ver:pper, émis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(doutes, nc-nom, doutes, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fiabilité, nc-nom, fiabilité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1308, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(auteurs, nc-nom, auteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(technique, nc-nom, technique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(microscopie, nc-nom, microscopie, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(champ, nc-nom, champ, [n-1]), ex_si(sombre, adj-adj, sombre, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(échantillons, nc-nom, échantillons, [n-1]), ex_si(prélevés, vpp-ver:pper, prélevés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1309, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(auteurs, nc-nom, auteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(technique, nc-nom, technique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(microscopie, nc-nom, microscopie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(fond, nc-nom, fond, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,n,n),np)-1]), ex_si(microscope, nc-nom, microscope, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si(champ, nc-nom, champ, [n-1]), ex_si(sombre, adj-adj, sombre, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(échantillons, nc-nom, échantillons, [n-1]), ex_si(prélevés, vpp-ver:pper, prélevés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1310, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(caillots, nc-nom, caillots, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(figurent, v-ver:pres, figurent, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rares, adj-adj, rares, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('&', ponct-kon, '&', [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Janssen', npp-nam, 'Janssen', [dr(0,dl(0,np,np),np)-1]), ex_si(en, p-prp, en, [np-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1311, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(caillots, nc-nom, caillots, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rare, adj-adj, rare, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Janssen', npp-nam, 'Janssen', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1312, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(caillots, nc-nom, caillots, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(figurent, v-ver:pres, figurent, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rares, adj-adj, rares, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('&', ponct-kon, '&', [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Janssen', npp-nam, 'Janssen', [dr(0,dl(0,np,np),np)-1]), ex_si(en, p-prp, en, [np-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1313, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(caillots, nc-nom, caillots, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), ex_si(fréquent, adj-adj, fréquent, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('&', ponct-kon, '&', [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1314, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('AEM', npp-abr, 'AEM', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', npp-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(recommandent, v-ver:pres, recommandent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(néanmoins, adv-adv, néanmoins, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Johnson', npp-nam, 'Johnson', [dl(0,n,n)-1]), ex_si('&', ponct-sym, '&', [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(jugeant, vpr-ver:ppre, jugeant, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si(supérieurs, adj-adj, supérieurs, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(risques, nc-nom, risques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1315, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si('AEM', npp-abr, 'AEM', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conclu, vpp-ver:pper, conclu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(continuaient, v-ver:pres, continuaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(emporter, vinf-ver:infi, emporter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(risques, nc-nom, risques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1316, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(indication, nc-nom, indication, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(suspecter, vinf-ver:infi, suspecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(thromboses, nc-nom, thromboses, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1317, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(donnée, nc-nom, donnée, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(constate, v-ver:pres, constate, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(thrombose, nc-nom, thrombose, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1318, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(indication, nc-nom, indication, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moderna', npp-nam, 'Moderna', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(thromboses, nc-nom, thromboses, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1319, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(thromboses, nc-nom, thromboses, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rares, adj-adj, rares, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('&', ponct-sym, '&', [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1320, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(adénovirus, nc-nom, adénovirus, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si('&', ponct-sym, '&', [dr(0,dl(0,np,np),np)-1]), ex_si('Johnson', npp-nam, 'Johnson', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(indésirables, adj-adj, indésirables, [dl(0,n,n)-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(caillots, nc-nom, caillots, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(restaient, v-ver:impf, restaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rares, adj-adj, rares, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1321, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(caillots, nc-nom, caillots, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rare, adj-adj, rare, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Janssen', npp-nam, 'Janssen', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1322, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(testés, vpp-ver:pper, testés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(que, cs-kon, que, [dr(0,pp,pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(8, det-num, 8, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(précédent, nc-nom, précédent, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(françaises, adj-adj, françaises, [dl(0,n,n)-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvés, vpp-ver:pper, approuvés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1323, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(approuvés, vpp-ver:pper, approuvés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sanitaires, nc-nom, sanitaires, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(françaises, adj-adj, françaises, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1324, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(variant, vpr-ver:ppre, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(testés, vpp-ver:pper, testés, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(approuvés, vpp-ver:pper, approuvés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1325, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menés, vpp-ver:pper, menés, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1326, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('sous-variant', nc-nom, 'sous-variant', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(recommandés, vpp-ver:pper, recommandés, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(testés, vpp-ver:pper, testés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1327, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menés, vpp-ver:pper, menés, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('sous-variant', nc-nom, 'sous-variant', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1328, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('sous-variant', nc-nom, 'sous-variant', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(indiquent, v-ver:pres, indiquent, [dr(0,dr(0,s,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(agences, nc-nom, agences, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1329, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('sous-variant', nc-nom, 'sous-variant', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(testés, vpp-ver:pper, testés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1330, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(proposé, vpp-ver:pper, proposé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(testé, vpp-ver:pper, testé, [dl(0,np,s_pass)-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('pré-clinique', adj-adj, 'pré-clinique', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rongeurs, nc-nom, rongeurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(similaire, adj-adj, similaire, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(précédents, adj-adj, précédents, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(autres, adj-adj, autres, [dr(0,dl(0,n,n),np)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1331, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(version, nc-nom, version, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(quasiment, adv-adv, quasiment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(semblable, adj-adj, semblable, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émergé, vpp-ver:pper, émergé, [dl(0,np,s_ppart)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(testée, vpp-ver:pper, testée, [dl(0,np,s_pass)-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si('pré-cliniques', adj-adj, 'pré-cliniques', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rongeurs, nc-nom, rongeurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1332, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(inédit, adj-adj, inédit, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1333, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(rappels, nc-nom, rappels, [n-1]), ex_si(annuels, adj-adj, annuels, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-grippal', adj-adj, 'anti-grippal', [dl(0,n,n)-1]), ex_si(suivent, v-ver:pres, suivent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1334, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(développés, vpp-ver:pper, développés, [dl(0,np,s_pass)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(semblable, adj-adj, semblable, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-grippaux', adj-adj, 'anti-grippaux', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1335, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(rappels, nc-nom, rappels, [n-1]), ex_si(annuels, adj-adj, annuels, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-grippal', adj-adj, 'anti-grippal', [dl(0,n,n)-1]), ex_si(suivent, v-ver:pres, suivent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1336, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(pharmaceutiques, adj-adj, pharmaceutiques, [dl(0,n,n)-1]), ex_si(adaptent, v-ver:pres, adaptent, [dr(0,dl(0,np,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(mieux, adv-adv, mieux, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(mutations, nc-nom, mutations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sars-CoV-2', nc-abr, 'Sars-CoV-2', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(emergé, vpp-ver:pper, emergé, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1337, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(pharmaceutiques, adj-adj, pharmaceutiques, [dl(0,n,n)-1]), ex_si(adaptent, v-ver:pres, adaptent, [dr(0,dl(0,np,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d‘argent', adv-adj, 'd‘argent', [dr(0,pp_de,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1338, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(quadrivalents, adj-adj, quadrivalents, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1339, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(dits, vpp-ver:pper, dits, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(bivalents, adj-adj, bivalents, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(conçus, vpp-ver:pper, conçus, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1340, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bivalents, adj-adj, bivalents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1341, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Haute', adj-adj, 'Haute', [dr(0,n,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('HAS', npp-abr, 'HAS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Moderna', npp-nam, 'Moderna', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ciblant, vpr-ver:ppre, ciblant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souche, nc-nom, souche, [n-1]), ex_si(originale, adj-adj, originale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('BA.1', npp-nam, 'BA.1', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dr(0,dl(0,n,n),np)-1]), ex_si('/', ponct-sym, '/', [np-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [dr(0,dl(0,np,np),np)-1]), ex_si(ciblant, vpr-ver:ppre, ciblant, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(souche, nc-nom, souche, [n-1]), ex_si(originale, adj-adj, originale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,np),np)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [dr(0,dl(0,np,np),np)-1]), ex_si('BA.4', npp-nam, 'BA.4', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('BA.5', npp-nam, 'BA.5', [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', p-prp, 'd\'', [np-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1342, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Haute', adj-adj, 'Haute', [dr(0,n,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('HAS', npp-abr, 'HAS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moderna', npp-nam, 'Moderna', [np-1]), ex_si(ciblant, vpr-ver:ppre, ciblant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souche, nc-nom, souche, [n-1]), ex_si(originale, adj-adj, originale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('sous-variants', nc-nom, 'sous-variants', [n-1]), ex_si('BA.4', npp-nam, 'BA.4', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('BA.5', npp-nam, 'BA.5', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1343, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(adultes, nc-nom, adultes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(55, det-num, 55, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(précédemment, adv-adv, précédemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Comirnaty', npp-nam, 'Comirnaty', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inclus, vpp-ver:pper, inclus, [dr(0,np,pp_de)-1]), ex_si(plus, adv-adv, plus, [dr(0,pp_de,np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('1.800', det-num, '1.800', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [np-1]), ex_si(300, pro-num, 300, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Comirnaty', npp-nam, 'Comirnaty', [dr(0,np,np)-1]), ex_si('Original', npp-nam, 'Original', [dl(0,np,np)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si('BA.1', npp-abr, 'BA.1', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(bivalent, adj-adj, bivalent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1344, Result) :-
      prob_parse([ ex_si('1.800', det-num, '1.800', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(bivalent, adj-adj, bivalent, [dl(0,n,n)-1]), ex_si('Comirnaty', npp-nam, 'Comirnaty', [dl(0,n,n)-1]), ex_si('Original', npp-nam, 'Original', [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si('BA.1', npp-nam, 'BA.1', [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1345, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(600, det-num, 600, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(âgés, adj-adj, âgés, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(18, det-num, 18, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1346, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inclus, vpp-ver:pper, inclus, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(mineurs, adj-adj, mineurs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1347, Result) :-
      prob_parse([ ex_si('\'Comirnaty', npp-nam, '\'Comirnaty', [let-1]), ex_si('Original', npp-nam, 'Original', [dr(0,np,np)-1]), ex_si('/', ponct-sym, '/', [np-1]), ex_si('Omicron', npp-nam, 'Omicron', [dr(0,dl(0,np,np),np)-1]), ex_si('BA.4-5\'', npp-nam, 'BA.4-5\'', [dr(0,np,np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Comirnaty', npp-nam, 'Comirnaty', [dr(0,np,np)-1]), ex_si('Original', npp-nam, 'Original', [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [dr(0,dl(0,np,np),np)-1]), ex_si('BA.1\'', npp-abr, 'BA.1\'', [dr(0,np,np)-1]), ex_si(ont, v-ver:pres, ont, [np-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,np),np)-1]), ex_si(même, adj-adj, même, [dr(0,np,n)-1]), ex_si(composition, nc-nom, composition, [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1348, Result) :-
      prob_parse([ ex_si('\'Comirnaty', npp-nam, '\'Comirnaty', [let-1]), ex_si('Original', npp-nam, 'Original', [dr(0,np,np)-1]), ex_si('/', ponct-sym, '/', [np-1]), ex_si('Omicron', npp-nam, 'Omicron', [dr(0,dl(0,np,np),np)-1]), ex_si('BA.4-5\'', npp-nam, 'BA.4-5\'', [dr(0,np,np)-1]), ex_si(a, v-ver:pres, a, [np-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s),np)-1]), ex_si(même, adj-adj, même, [dr(0,np,n)-1]), ex_si(composition, nc-nom, composition, [dr(0,dr(0,n,s_q),n)-1]), ex_si(que, cs-kon, que, [n-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,s_q,np)-1]), ex_si('Comirnaty', npp-nam, 'Comirnaty', [dr(0,np,np)-1]), ex_si('Original', npp-nam, 'Original', [np-1]), ex_si('/', ponct-sym, '/', [np-1]), ex_si('Omicron', npp-nam, 'Omicron', [dr(0,dl(0,np,np),np)-1]), ex_si('BA.1\'.', npp-abr, 'BA.1\'.', [np-1])], Result).
sent(1349, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(françaises, adj-adj, françaises, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(recommandé, vpp-ver:pper, recommandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(internautes, nc-nom, internautes, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(inquiètent, v-ver:pres, inquiètent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(assurant, vpr-ver:ppre, assurant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(testés, vpp-ver:pper, testés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,pp,pp)-1]), ex_si(que, cs-kon, que, [dr(0,pp,pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(8, det-num, 8, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(précédent, nc-nom, précédent, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1350, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menés, vpp-ver:pper, menés, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(adapté, vpp-ver:pper, adapté, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('sous-variant', nc-nom, 'sous-variant', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1351, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(essentiellement, adv-adv, essentiellement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('sous-variant', nc-nom, 'sous-variant', [n-1]), ex_si('BA.5', npp-nam, 'BA.5', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(domine, v-ver:pres, domine, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1352, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('BA.5', npp-abr, 'BA.5', [np-1]), ex_si(représentait, v-ver:impf, représentait, [dr(0,dl(0,np,s),np)-1]), ex_si(93, det-num, 93, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('sous-lignages', nc-nom, 'sous-lignages', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(variant, vpr-ver:ppre, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(variant, vpr-ver:ppre, variant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(circulant, vpr-ver:ppre, circulant, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(métropole, nc-nom, métropole, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(détectés, vpp-ver:pper, détectés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Santé', nc-nam, 'Santé', [dr(0,np,np)-1]), ex_si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1353, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(conclusions, nc-nom, conclusions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Spikevax', npp-nam, 'Spikevax', [dr(0,np,np)-1]), ex_si(bivalent, v-ver:pres, bivalent, [np-1]), ex_si('Original', npp-nam, 'Original', [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si('BA.1', npp-abr, 'BA.1', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(induit, vpp-ver:pper, induit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réponse, nc-nom, réponse, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Sars-CoV-2', npp-abr, 'Sars-CoV-2', [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('sous-variant', nc-nom, 'sous-variant', [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [np-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si('BA.1', npp-nam, 'BA.1', [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(comparaison, nc-nom, comparaison, [dr(0,dl(0,n,n),n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Spikevax', npp-nam, 'Spikevax', [dr(0,dl(0,n,n),np)-1]), ex_si(original, adj-adj, original, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(indique, v-ver:pres, indique, [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avis, nc-nom, avis, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [let-1]), ex_si('EMA', npp-abr, 'EMA', [n-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1354, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menés, vpp-ver:pper, menés, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dl(0,n,n)-1]), ex_si('[au', p+d-prp:det, '[au', [let-1]), ex_si('sous-variant', nc-nom, 'sous-variant', [dr(0,dl(0,n,n),n)-1]), ex_si('BA', npp-abr, 'BA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1355, Result) :-
      prob_parse([ ex_si(1, pro-num, 1, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('NDLR]', ponct-pun, 'NDLR]', [dl(0,np,np)-1]), ex_si(permettent, v-ver:pres, permettent, [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(quantité, nc-nom, quantité, [dr(0,np,n)-1]), ex_si(supérieure, adj-adj, supérieure, [n-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si(anticorps, nc-nom, anticorps, [dr(0,dl(0,n,n),n)-1]), ex_si(capables, adj-adj, capables, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(neutraliser, vinf-ver:infi, neutraliser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(variant, nc-nom, variant, [dr(0,np,n)-1]), ex_si('Omicron', npp-nam, 'Omicron', [n-1]), ex_si('BA.1', npp-nam, 'BA.1', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [let-1]), ex_si(rapport, nc-nom, rapport, [dr(0,dl(1,s,s),n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,n,pp_a)-1]), ex_si(actuels, adj-adj, actuels, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [dr(0,n,n)-1]), ex_si(monovalents, adj-adj, monovalents, [n-1]), ex_si(actuels, adj-adj, actuels, [dl(0,n,n)-1]), ex_si(basés, vpp-ver:pper, basés, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),pp)-1]), ex_si(la, det-det:art, la, [dr(0,pp,np)-1]), ex_si(souche, nc-nom, souche, [dr(0,np,n)-1]), ex_si(originale, adj-adj, originale, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(résume, v-ver:pres, résume, [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), ex_si('EMA', npp-abr, 'EMA', [dr(0,np,n)-1]), ex_si(dans, p-prp, dans, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), ex_si(communiqué, nc-nom, communiqué, [dr(0,np,n)-1]), ex_si(publié, vpp-ver:pper, publié, [n-1]), ex_si(le, det-det:art, le, [dl(0,n,n)-1]), ex_si(8, adj-num, 8, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(septembre, nc-nom, septembre, [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1356, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARNm', nc-nom, 'ARNm', [n-1]), ex_si(bivalents, adj-adj, bivalents, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(adaptés, vpp-ver:pper, adaptés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(souches, nc-nom, souches, [n-1]), ex_si(circulantes, adj-adj, circulantes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instar, nc-nom, instar, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si(saisonnière, adj-adj, saisonnière, [dl(0,n,n)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(actualisation, nc-nom, actualisation, [n-1]), ex_si(annuelle, adj-adj, annuelle, [dl(0,n,n)-1]), ex_si(tient, v-ver:pres, tient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(compte, nc-nom, compte, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(susceptibles, adj-adj, susceptibles, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(préconisations, nc-nom, préconisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(note, v-ver:pres, note, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('HAS', npp-abr, 'HAS', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(avis, nc-nom, avis, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1357, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(bivalents, adj-adj, bivalents, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dl(0,np,s_pass)-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(courant, adj-adj, courant, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(saisonniers, adj-adj, saisonniers, [dl(0,n,n)-1]), ex_si(quadrivalents, adj-adj, quadrivalents, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(détaille, v-ver:pres, détaille, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Genève', npp-nam, 'Genève', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(spécialiste, nc-nom, spécialiste, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(épidémiologie, nc-nom, épidémiologie, [n-1]), ex_si('Antoine', npp-nam, 'Antoine', [dl(0,n,n)-1]), ex_si('Flahault', npp-nam, 'Flahault', [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1358, Result) :-
      prob_parse([ ex_si('Ursula', npp-nam, 'Ursula', [np-1]), ex_si(von, npp-nam, von, [dr(0,dl(0,np,np),np)-1]), ex_si(der, et-nam, der, [dr(0,np,np)-1]), ex_si('Leyen', npp-nam, 'Leyen', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partagé, vpp-ver:pper, partagé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(comment, advwh-adv, comment, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(économiser, vinf-ver:infi, économiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(lavant, vpr-ver:ppre, lavant, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1359, Result) :-
      prob_parse([ ex_si('Ursula', npp-nam, 'Ursula', [np-1]), ex_si(von, npp-nam, von, [dr(0,dl(0,np,np),np)-1]), ex_si(der, et-nam, der, [dr(0,np,np)-1]), ex_si('Leyen', npp-nam, 'Leyen', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(diffusé, vpp-ver:pper, diffusé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(message, nc-nom, message, [n-1]), ex_si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(attirer, vinf-ver:infi, attirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attention, nc-nom, attention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(importance, nc-nom, importance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lavage, nc-nom, lavage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hugiène, nc-nom, hugiène, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(milieu, nc-nom, milieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1360, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(généralement, adv-adv, généralement, [dl(1,s,s)-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coagulation, nc-nom, coagulation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(regardant, vpr-ver:ppre, regardant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(caillot, nc-nom, caillot, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1361, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(caillot, nc-nom, caillot, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1362, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(embaumeurs, nc-nom, embaumeurs, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(effectuent, v-ver:pres, effectuent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(prélèvements, nc-nom, prélèvements, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(défunts, nc-nom, défunts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1363, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attributions, nc-nom, attributions, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(embaumeurs, nc-nom, embaumeurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prélèvements, nc-nom, prélèvements, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1364, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(embaumeurs, nc-nom, embaumeurs, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(effectuent, v-ver:pres, effectuent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(prélèvements, nc-nom, prélèvements, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(défunts, nc-nom, défunts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1365, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(embaumeurs, nc-nom, embaumeurs, [n-1]), ex_si(prélèvent, v-ver:pres, prélèvent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1366, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(autopsie, nc-nom, autopsie, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cadavre, nc-nom, cadavre, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pratiquée, vpp-ver:pper, pratiquée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,pp,pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médecin, nc-nom, médecin, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(servir, vinf-ver:infi, servir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(causes, nc-nom, causes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1367, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(distinguer, vinf-ver:infi, distinguer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(défunts, nc-nom, défunts, [n-1]), ex_si(pratiqués, vpp-ver:pper, pratiqués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(thanatopracteurs, nc-nom, thanatopracteurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1368, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autopsies, nc-nom, autopsies, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cadavres, nc-nom, cadavres, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pratiqués, vpp-ver:pper, pratiqués, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(thanatopracteurs, nc-nom, thanatopracteurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1369, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(présentées, vpp-ver:pper, présentées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AEMPS', npp-abr, 'AEMPS', [n-1]), ex_si(incluent, v-ver:pres, incluent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(notifications, nc-nom, notifications, [n-1]), ex_si(reçues, vpp-ver:pper, reçues, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(événements, nc-nom, événements, [n-1]), ex_si(indésirables, adj-adj, indésirables, [dl(0,n,n)-1]), ex_si(survenus, vpp-ver:pper, survenus, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('COVID-19', npp-abr, 'COVID-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(452, pro-num, 452, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(issue, nc-nom, issue, [n-1]), ex_si(fatale, adj-adj, fatale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(considérées, vpp-ver:pper, considérées, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(indésirables, adj-adj, indésirables, [dl(0,n,n)-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(tant, adv-adv, tant, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(relation, nc-nom, relation, [n-1]), ex_si(causale, adj-adj, causale, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(confirmée, vpp-ver:pper, confirmée, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), ex_si(ajoute, v-ver:pres, ajoute, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1370, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avoué, vpp-ver:pper, avoué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(452, det-num, 452, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(tuées, vpp-ver:pper, tuées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(relayée, vpp-ver:pper, relayée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1371, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(usage, nc-nom, usage, [n-1]), ex_si(vétérinaire, adj-adj, vétérinaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(humain, adj-adj, humain, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parasites, nc-nom, parasites, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gale, nc-nom, gale, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cécité, nc-nom, cécité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(rivières, nc-nom, rivières, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(onchocercose, nc-nom, onchocercose, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(poux, nc-nom, poux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1372, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(coûteuse, adj-adj, coûteuse, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avantage, nc-nom, avantage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(indésirables, adj-adj, indésirables, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(touchées, vpp-ver:pper, touchées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(infestations, nc-nom, infestations, [n-1]), ex_si(parasitaires, adj-adj, parasitaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1373, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(messages, nc-nom, messages, [n-1]), ex_si(partagés, vpp-ver:pper, partagés, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(début, nc-nom, début, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('NIH', npp-abr, 'NIH', [n-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ajouté, vpp-ver:pper, ajouté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(traitements, nc-nom, traitements, [n-1]), ex_si(possibles, adj-adj, possibles, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1374, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('plate-forme', nc-nom, 'plate-forme', [n-1]), ex_si('WayBack', npp-nam, 'WayBack', [dl(0,n,n)-1]), ex_si('Machine', npp-nam, 'Machine', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(conserve, v-ver:pres, conserve, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(historiques, nc-nom, historiques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contenu, nc-nom, contenu, [n-1]), ex_si('Web', npp-nam, 'Web', [dl(0,n,n)-1]), ex_si(archivés, vpp-ver:pper, archivés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,s,s),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(sauvegarde, nc-nom, sauvegarde, [n-1]), ex_si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(thérapies, nc-nom, thérapies, [n-1]), ex_si(antivirales, adj-adj, antivirales, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('NIH', npp-abr, 'NIH', [n-1]), ex_si(comportait, v-ver:impf, comportait, [dr(0,dl(0,np,s),np)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(onglet, nc-nom, onglet, [n-1]), ex_si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), ex_si(dédié, vpp-ver:pper, dédié, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(précisait, v-ver:impf, précisait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(est, v-ver:pres, est, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), ex_si(médicament, nc-nom, médicament, [dr(0,np,n)-1]), ex_si(antiparasitaire, adj-adj, antiparasitaire, [n-1]), ex_si(en, p-prp, en, [dl(0,n,n)-1]), ex_si(cours, nc-nom, cours, [dr(0,dl(0,n,n),n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(évaluation, nc-nom, évaluation, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(traiter, vinf-ver:infi, traiter, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('COVID-19', nc-abr, 'COVID-19', [n-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1375, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(messages, nc-nom, messages, [n-1]), ex_si(partagés, vpp-ver:pper, partagés, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(début, nc-nom, début, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('NIH', npp-abr, 'NIH', [n-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ajouté, vpp-ver:pper, ajouté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(traitements, nc-nom, traitements, [n-1]), ex_si(possibles, adj-adj, possibles, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1376, Result) :-
      prob_parse([ ex_si('L\'ivermectine', nc-nam, 'L\'ivermectine', [dr(0,np,n)-1]), ex_si('n\'', adv-adv, 'n\'', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(approuvée, vpp-ver:pper, approuvée, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(la, det-det:art, la, [dr(0,pp_par,np)-1]), ex_si('FDA', npp-abr, 'FDA', [dr(0,np,n)-1]), ex_si('[agence', ponct-nam, '[agence', [n-1]), ex_si(américaine, adj-adj, américaine, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(réglementation, nc-nom, réglementation, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('NDLR]', ponct-pun, 'NDLR]', [n-1]), ex_si(pour, p-prp, pour, [let-1]), ex_si(le, det-det:art, le, [np-1]), ex_si(traitement, nc-nom, traitement, [let-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(virale, adj-adj, virale, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(indique, v-ver:pres, indique, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(page, nc-nom, page, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(dernière, adj-adj, dernière, [let-1]), ex_si(mise, nc-nom, mise, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(à, p-prp, à, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [dr(0,n,n)-1]), ex_si(date, v-ver:pres, date, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(29, adj-num, 29, [n-1]), ex_si(avril, nc-nom, avril, [dr(0,dl(0,np,s),pp)-1]), ex_si(2022, adj-num, 2022, [dr(0,pp_de,n)-1]), ex_si('.', ponct-pun, '.', [dr(0,n,n)-1])], Result).
sent(1377, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(messages, nc-nom, messages, [n-1]), ex_si(partagés, vpp-ver:pper, partagés, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(début, nc-nom, début, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('NIH', npp-abr, 'NIH', [n-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ajouté, vpp-ver:pper, ajouté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(traitements, nc-nom, traitements, [n-1]), ex_si(possibles, adj-adj, possibles, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1378, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('NIH', npp-abr, 'NIH', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contactés, vpp-ver:pper, contactés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(précisent, v-ver:pres, précisent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inclusion, nc-nom, inclusion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(directives, nc-nom, directives, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si('n\'', adv-adv, 'n\'', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rajoutant, vpr-ver:ppre, rajoutant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s),s_q)-1]), ex_si(il, cls-pro:per, il, [dr(0,s_q,s)-1]), ex_si(est, v-ver:pres, est, [let-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(important, adj-adj, important, [let-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(noter, vinf-ver:infi, noter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,s_q,s)-1]), ex_si(comité, nc-nom, comité, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(directives, nc-nom, directives, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(traitement, nc-nom, traitement, [dr(0,dl(0,n,n),n)-1]), ex_si('COVID-19', npp-abr, 'COVID-19', [n-1]), ex_si(recommande, v-ver:pres, recommande, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('l\'', det-det:art, 'l\'', [dl(1,s,s)-1]), ex_si(ivermectine, nc-nom, ivermectine, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(traitement, nc-nom, traitement, [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si('COVID-19', npp-abr, 'COVID-19', [n-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(se, clr-pro:per, se, [n-1]), ex_si(référant, vpr-ver:ppre, référant, [cl_r-1]), ex_si(à, p-prp, à, [cl_r-1]), ex_si(ce, det-pro:dem, ce, [cl_r-1]), ex_si(lien, nc-nom, lien, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si('.', ponct-pun, '.', [dr(0,pp_a,np)-1])], Result).
sent(1379, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(circule, v-ver:pres, circule, [dl(0,np,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), ex_si(internet, nc-nom, internet, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(chirurgicale, adj-adj, chirurgicale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(extraire, vinf-ver:infi, extraire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(caillot, nc-nom, caillot, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1380, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(chirurgicale, adj-adj, chirurgicale, [dl(0,n,n)-1]), ex_si(filmée, vpp-ver:pper, filmée, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1381, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(exiger, vinf-ver:infi, exiger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(covid, adj-adj, covid, [dl(0,n,n)-1]), ex_si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1382, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(illégal, adj-adj, illégal, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(hospitaliers, adj-adj, hospitaliers, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(covid, et-adj, covid, [dl(0,n,n)-1]), ex_si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1383, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médecins, nc-nom, médecins, [n-1]), ex_si(interrogés, vpp-ver:pper, interrogés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(connaissances, nc-nom, connaissances, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(change, v-ver:pres, change, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(greffe, nc-nom, greffe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(moelle, nc-nom, moelle, [n-1]), ex_si(osseuse, adj-adj, osseuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1384, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(note, nc-nom, note, [n-1]), ex_si(vocale, adj-adj, vocale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(minute, nc-nom, minute, [n-1]), ex_si(trente, adj-num, trente, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(partagée, vpp-ver:pper, partagée, [dr(0,dl(0,n,n),pp)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(180, det-num, 180, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(3, det-num, 3, [dr(0,np,n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(apparemment, adv-adv, apparemment, [dr(0,s,s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(rhésus, nc-nom, rhésus, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(changé, vpp-ver:pper, changé, [dl(0,np,s_ppart)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1385, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médecins, nc-nom, médecins, [n-1]), ex_si(interrogés, vpp-ver:pper, interrogés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(connaissances, nc-nom, connaissances, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(change, v-ver:pres, change, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(greffe, nc-nom, greffe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(moelle, nc-nom, moelle, [n-1]), ex_si(osseuse, adj-adj, osseuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1386, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prélevé, vpp-ver:pper, prélevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('20.000', det-num, '20.000', [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ai, v-ver:pres, ai, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(modification, nc-nom, modification, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rhésus, nc-nom, rhésus, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(vaccinée, vpp-ver:pper, vaccinée, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(ajouté, vpp-ver:pper, ajouté, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Véronique', npp-nam, 'Véronique', [dr(0,np,np)-1]), ex_si('Deneys', npp-nam, 'Deneys', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(hématologue, nc-nom, hématologue, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cliniques, nc-nom, cliniques, [n-1]), ex_si(universitaires, adj-adj, universitaires, [dl(0,n,n)-1]), ex_si('Saint-Luc', npp-nam, 'Saint-Luc', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(interrogée, vpp-ver:pper, interrogée, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1387, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médecins, nc-nom, médecins, [n-1]), ex_si(interrogés, vpp-ver:pper, interrogés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(connaissances, nc-nom, connaissances, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(change, v-ver:pres, change, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(greffe, nc-nom, greffe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(moelle, nc-nom, moelle, [n-1]), ex_si(osseuse, adj-adj, osseuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1388, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(constat, nc-nom, constat, [n-1]), ex_si(partagé, vpp-ver:pper, partagé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Nicolas', npp-nam, 'Nicolas', [dr(0,np,np)-1]), ex_si('Gendron', npp-nam, 'Gendron', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(hématologue, nc-nom, hématologue, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('Georges-Pompidou', adj-nam, 'Georges-Pompidou', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(interrogé, vpp-ver:pper, interrogé, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(plaquettes, nc-nom, plaquettes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(globules, nc-nom, globules, [n-1]), ex_si(rouges, adj-adj, rouges, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(globules, nc-nom, globules, [n-1]), ex_si(blancs, adj-adj, blancs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(activation, nc-nom, activation, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1389, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médecins, nc-nom, médecins, [n-1]), ex_si(interrogés, vpp-ver:pper, interrogés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(connaissances, nc-nom, connaissances, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(change, v-ver:pres, change, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(greffe, nc-nom, greffe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(moelle, nc-nom, moelle, [n-1]), ex_si(osseuse, adj-adj, osseuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1390, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rhésus, nc-nom, rhésus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(congénital, adj-adj, congénital, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(changer, vinf-ver:infi, changer, [dl(0,np,s_inf)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('Marie-Agnès', npp-nam, 'Marie-Agnès', [dr(0,np,np)-1]), ex_si('Azerad', npp-nam, 'Azerad', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(cheffe, nc-nom, cheffe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hématologie, nc-nom, hématologie, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('CHU', npp-abr, 'CHU', [n-1]), ex_si('Saint-Pierre', npp-nam, 'Saint-Pierre', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1391, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', npp-nam, 'Organisation', [n-1]), ex_si('Mondiale', adj-adj, 'Mondiale', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Tedros', npp-nam, 'Tedros', [dr(0,np,np)-1]), ex_si('Adhanom', npp-nam, 'Adhanom', [dr(0,np,np)-1]), ex_si('Ghebreyesus', npp-nam, 'Ghebreyesus', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(détenu, vpp-ver:pper, détenu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,pp_par,n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Interpol', npp-nam, 'Interpol', [dr(0,pp_par,np)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(contre, p-prp, contre, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1392, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Interpol', npp-nam, 'Interpol', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1393, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si(chiffres, nc-nom, chiffres, [n-1]), ex_si(absolus, adj-adj, absolus, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(majoritaires, adj-adj, majoritaires, [dl(0,n,n)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(proportion, nc-nom, proportion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(supérieure, adj-adj, supérieure, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1394, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', nc-nam, 'Covid', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(majoritairement, adv-adv, majoritairement, [dl(1,s,s)-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1395, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(chiffres, nc-nom, chiffres, [n-1]), ex_si(officiels, adj-adj, officiels, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inefficacité, nc-nom, inefficacité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1396, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chiffres, nc-nom, chiffres, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prouvent, v-ver:pres, prouvent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inefficaces, adj-adj, inefficaces, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1397, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(naissances, nc-nom, naissances, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bébés, nc-nom, bébés, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(survenues, vpp-ver:pper, survenues, [dl(0,np,s_ppart)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(parents, nc-nom, parents, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1398, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(bébé, nc-nom, bébé, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(parents, nc-nom, parents, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1399, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(uruguayen, adj-adj, uruguayen, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(suspension, nc-nom, suspension, [n-1]), ex_si(immédiate, adj-adj, immédiate, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(auteurs, nc-nom, auteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Twitter', npp-nam, 'Twitter', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(préféré, vpp-ver:pper, préféré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [cl_r-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(soustraire, vinf-ver:infi, soustraire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(composition, nc-nom, composition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1400, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(retiré, vpp-ver:pper, retiré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Uruguay', npp-nam, 'Uruguay', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(poursuivent, v-ver:pres, poursuivent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(antenne, nc-nom, antenne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Uruguay', npp-nam, 'Uruguay', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1401, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(uruguayen, adj-adj, uruguayen, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(suspension, nc-nom, suspension, [n-1]), ex_si(immédiate, adj-adj, immédiate, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(13, det-num, 13, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attente, nc-nom, attente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(passés, vpp-ver:pper, passés, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(composition, nc-nom, composition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(substances, nc-nom, substances, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(contenue, vpp-ver:pper, contenue, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(produit, nc-nom, produit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1402, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(uruguayen, adj-adj, uruguayen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si('Luis', npp-nam, 'Luis', [dl(0,n,n)-1]), ex_si('Lacalle', npp-nam, 'Lacalle', [dl(0,n,n)-1]), ex_si('Pou', npp-nam, 'Pou', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(conformé, vpp-ver:pper, conformé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(judiciaire, adj-adj, judiciaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suspendu, vpp-ver:pper, suspendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(13, det-num, 13, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(appel, nc-nom, appel, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1403, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(uruguayen, adj-adj, uruguayen, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(suspension, nc-nom, suspension, [n-1]), ex_si(immédiate, adj-adj, immédiate, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(13, det-num, 13, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attente, nc-nom, attente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(passés, vpp-ver:pper, passés, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(composition, nc-nom, composition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(substances, nc-nom, substances, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(contenue, vpp-ver:pper, contenue, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(produit, nc-nom, produit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1404, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si('Recaraya', npp-nam, 'Recaraya', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déformée, vpp-ver:pper, déformée, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(atteinte, nc-nom, atteinte, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liberté, nc-nom, liberté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(lendemain, nc-nom, lendemain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(magistrat, nc-nom, magistrat, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(valoir, vinf-ver:infi, valoir, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sentence, nc-nom, sentence, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remettait, v-ver:impf, remettait, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(validité, nc-nom, validité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1405, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('SADS', npp-abr, 'SADS', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(syndrome, nc-nom, syndrome, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(subite, adj-adj, subite, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adulte, nc-nom, adulte, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(justifier, vinf-ver:infi, justifier, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blogs, nc-nom, blogs, [n-1]), ex_si(relayés, vpp-ver:pper, relayés, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('mi-juin', nc-nom, 'mi-juin', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1406, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('SADS', npp-abr, 'SADS', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(étudié, vpp-ver:pper, étudié, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(justifier, vinf-ver:infi, justifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1407, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(pilotes, nc-nom, pilotes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Delta', npp-nam, 'Delta', [dl(0,n,n)-1]), ex_si('Airlines', npp-nam, 'Airlines', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(manifesté, vpp-ver:pper, manifesté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Atlanta', npp-nam, 'Atlanta', [np-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1408, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(salariés, nc-nom, salariés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Delta', npp-nam, 'Delta', [dr(0,np,np)-1]), ex_si('Airlines', npp-nam, 'Airlines', [np-1]), ex_si(protestaient, v-ver:impf, protestaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid-19', adj-adj, 'anti-Covid-19', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1409, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(visionnée, vpp-ver:pper, visionnée, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Telegram', npp-nam, 'Telegram', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Twitter', npp-nam, 'Twitter', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pilotes, nc-nom, pilotes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Southwest', npp-nam, 'Southwest', [dl(0,n,n)-1]), ex_si('Airlines', npp-nam, 'Airlines', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(manifesté, vpp-ver:pper, manifesté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Dallas', npp-nam, 'Dallas', [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(manque, nc-nom, manque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1410, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pilotes, nc-nom, pilotes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(protestaient, v-ver:impf, protestaient, [dl(0,np,s)-1]), ex_si(uniquement, adv-adv, uniquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid-19', adj-adj, 'anti-Covid-19', [dl(0,n,n)-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(confirment, v-ver:pres, confirment, [dr(0,dr(0,s,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(syndicat, nc-nom, syndicat, [dr(0,n,n)-1]), ex_si('Southwest', npp-nam, 'Southwest', [dr(0,n,n)-1]), ex_si('Airlines', npp-nam, 'Airlines', [dr(0,n,n)-1]), ex_si('Pilots', npp-nam, 'Pilots', [dr(0,n,n)-1]), ex_si('Association', npp-nam, 'Association', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('SWAPA', npp-abr, 'SWAPA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1411, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Lancet', npp-nam, 'Lancet', [n-1]), ex_si(confirmerait, v-ver:impf, confirmerait, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si(survenant, vpr-ver:ppre, survenant, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(touchant, vpr-ver:ppre, touchant, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prétendent, v-ver:pres, prétendent, [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [dr(0,np,n)-1]), ex_si(virales, adj-adj, virales, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('mi-juin', nc-nom, 'mi-juin', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1412, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(inflammations, nc-nom, inflammations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(muscle, nc-nom, muscle, [n-1]), ex_si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(péricardites, nc-nom, péricardites, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(inflammations, nc-nom, inflammations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(membrane, nc-nom, membrane, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(entoure, v-ver:pres, entoure, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(causées, vpp-ver:pper, causées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,dr(0,pp,pp),n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(virale, adj-adj, virale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(surviennent, v-ver:pres, surviennent, [dl(0,np,s)-1]), ex_si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(jeunes, adj-adj, jeunes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1413, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Lancet', npp-nam, 'Lancet', [n-1]), ex_si(confirmerait, v-ver:impf, confirmerait, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si(survenant, vpr-ver:ppre, survenant, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(touchant, vpr-ver:ppre, touchant, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prétendent, v-ver:pres, prétendent, [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [dr(0,np,n)-1]), ex_si(virales, adj-adj, virales, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('mi-juin', nc-nom, 'mi-juin', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1414, Result) :-
      prob_parse([ ex_si(411, det-num, 411, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(péricardites, nc-nom, péricardites, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrés, vpp-ver:pper, enregistrés, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('15.148.369', det-num, '15.148.369', [dr(0,np,n)-1]), ex_si(adultes, nc-nom, adultes, [n-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('27.544.270', det-num, '27.544.270', [dr(0,np,n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(administrées, vpp-ver:pper, administrées, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(ce, pro-pro:dem, ce, [dr(0,dl(0,np,np),np)-1]), ex_si(qui, prorel-pro:rel, qui, [np-1]), ex_si(correspond, v-ver:pres, correspond, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), ex_si(un, det-det:art, un, [dr(0,pp_a,np)-1]), ex_si(signalement, nc-nom, signalement, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(myocardite, nc-nom, myocardite, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(péricardite, nc-nom, péricardite, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si(environ, adv-adv, environ, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [np-1]), ex_si('67.000', det-num, '67.000', [dr(0,dl(0,n,n),np)-1]), ex_si(doses, nc-nom, doses, [dr(0,np,np)-1]), ex_si(injectées, vpp-ver:pper, injectées, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(un, det-det:art, un, [let-1]), ex_si(cas, nc-nom, cas, [dr(0,dl(0,np,np),np)-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si('36.857', det-num, '36.857', [dr(0,dl(0,np,np),np)-1]), ex_si(personnes, nc-nom, personnes, [dr(0,np,n)-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [n-1]), ex_si('-loin', p+d-prp:det, '-loin', [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(donc, adv-adv, donc, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(10, adj-num, 10, [dl(0,n,n)-1]), ex_si('%', nc-sym, '%', [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [let-1]), ex_si(inflammations, nc-nom, inflammations, [dr(0,np,n)-1]), ex_si(cardiaques, adj-adj, cardiaques, [n-1]), ex_si(recensées, vpp-ver:pper, recensées, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [n-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(mises, vpp-ver:pper, mises, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dl(0,n,n)-1]), ex_si(avant, nc-nom, avant, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dl(0,n,n)-1]), ex_si(réseaux, nc-nom, réseaux, [dr(0,dl(0,n,n),pp)-1]), ex_si(sociaux, adj-adj, sociaux, [dr(0,dl(0,n,n),pp)-1]), ex_si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(1415, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Lancet', npp-nam, 'Lancet', [n-1]), ex_si(confirmerait, v-ver:impf, confirmerait, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si(survenant, vpr-ver:ppre, survenant, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(touchant, vpr-ver:ppre, touchant, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prétendent, v-ver:pres, prétendent, [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [dr(0,np,n)-1]), ex_si(virales, adj-adj, virales, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('mi-juin', nc-nom, 'mi-juin', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1416, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(900, nc-num, 900, [dr(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('9.000', det-num, '9.000', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(avant, nc-nom, avant, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(correspondraient, v-ver:cond, correspondraient, [dr(0,dl(0,np,s),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(10, det-num, 10, [dr(0,n,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si(enregistrées, vpp-ver:pper, enregistrées, [dl(0,n,n)-1]), ex_si('post-vaccination', nc-nom, 'post-vaccination', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(figurent, v-ver:pres, figurent, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Lancet', npp-nam, 'Lancet', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupement, nc-nom, groupement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('EPI-PHARE', npp-abr, 'EPI-PHARE', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(méthodologie, nc-nom, méthodologie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(différente, adj-adj, différente, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1417, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(sauvé, vpp-ver:pper, sauvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ma, det-det:pos, ma, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(assuré, vpp-ver:pper, assuré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(star, nc-nom, star, [n-1]), ex_si('Justin', npp-nam, 'Justin', [dl(0,n,n)-1]), ex_si('Bieber', npp-nam, 'Bieber', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(paralysie, nc-nom, paralysie, [n-1]), ex_si(faciale, adj-adj, faciale, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contraint, vpp-ver:pper, contraint, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(concerts, nc-nom, concerts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1418, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ruiné, vpp-ver:pper, ruiné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ma, det-det:pos, ma, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(assuré, vpp-ver:pper, assuré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(star, nc-nom, star, [n-1]), ex_si('Justin', npp-nam, 'Justin', [dl(0,n,n)-1]), ex_si('Bieber', npp-nam, 'Bieber', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(accusant, vpr-ver:ppre, accusant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paralysie, nc-nom, paralysie, [n-1]), ex_si(faciale, adj-adj, faciale, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contraint, vpp-ver:pper, contraint, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(concerts, nc-nom, concerts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1419, Result) :-
      prob_parse([ ex_si('Justin', npp-nam, 'Justin', [dr(0,np,np)-1]), ex_si('Bieber', npp-nam, 'Bieber', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(souffert, vpp-ver:pper, souffert, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paralysie, nc-nom, paralysie, [n-1]), ex_si(faciale, adj-adj, faciale, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(0,n,n)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(causée, vpp-ver:pper, causée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(syndrome, nc-nom, syndrome, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ramsay', npp-nam, 'Ramsay', [dr(0,np,np)-1]), ex_si('Hunt', npp-nam, 'Hunt', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1420, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(syndrome, nc-nom, syndrome, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ramsay', npp-nam, 'Ramsay', [dr(0,np,np)-1]), ex_si('Hunt', npp-nam, 'Hunt', [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(paralysie, nc-nom, paralysie, [n-1]), ex_si(faciale, adj-adj, faciale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1421, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(singe, nc-nom, singe, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(confondus, vpp-ver:pper, confondus, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(zona, nc-nom, zona, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(herpès, nc-nom, herpès, [n-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(nécessitent, v-ver:pres, nécessitent, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(confirmés, vpp-ver:pper, confirmés, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(biologique, adj-adj, biologique, [dl(0,n,n)-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(identifier, vinf-ver:infi, identifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(différente, adj-adj, différente, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(zona, nc-nom, zona, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(herpès, nc-nom, herpès, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Direction', nc-nam, 'Direction', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1422, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(éruptions, nc-nom, éruptions, [n-1]), ex_si(cutanées, adj-adj, cutanées, [dl(0,n,n)-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(associées, vpp-ver:pper, associées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(singe, nc-nom, singe, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(réalité, nc-nom, réalité, [n-1]), ex_si(dues, vpp-ver:pper, dues, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(zona, nc-nom, zona, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(herpès, nc-nom, herpès, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1423, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(récente, adj-adj, récente, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(singe, nc-nom, singe, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(incapable, adj-adj, incapable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(déclencher, vinf-ver:infi, déclencher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1424, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(multiplication, nc-nom, multiplication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(singe, nc-nom, singe, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1425, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(avéré, vpp-ver:pper, avéré, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1426, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(fonctionne, v-ver:pres, fonctionne, [dl(0,np,s)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('SARS-Cov-2', nc-abr, 'SARS-Cov-2', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1427, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(avéré, vpp-ver:pper, avéré, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1428, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(arguments, nc-nom, arguments, [n-1]), ex_si(souvent, adv-adv, souvent, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mentionnés, vpp-ver:pper, mentionnés, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permettent, v-ver:pres, permettent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prouver, vinf-ver:infi, prouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1429, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(plainte, nc-nom, plainte, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(portée, vpp-ver:pper, portée, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avocat, nc-nom, avocat, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Reiner', npp-nam, 'Reiner', [dl(0,n,n)-1]), ex_si('Fuellmich', npp-nam, 'Fuellmich', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(acceptée, vpp-ver:pper, acceptée, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(cour, nc-nom, cour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(canadienne, nc-nom, canadienne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1430, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(plainte, nc-nom, plainte, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Reiner', npp-nam, 'Reiner', [dr(0,np,np)-1]), ex_si('Fuellmich', npp-nam, 'Fuellmich', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1431, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(plainte, nc-nom, plainte, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(portée, vpp-ver:pper, portée, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avocat, nc-nom, avocat, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Reiner', npp-nam, 'Reiner', [dl(0,n,n)-1]), ex_si('Fuellmich', npp-nam, 'Fuellmich', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(acceptée, vpp-ver:pper, acceptée, [dl(0,np,s_pass)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(cour, nc-nom, cour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(canadienne, nc-nom, canadienne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1432, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(plainte, nc-nom, plainte, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(portée, vpp-ver:pper, portée, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(figure, v-ver:pres, figure, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(traitées, vpp-ver:pper, traitées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1433, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(plainte, nc-nom, plainte, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(portée, vpp-ver:pper, portée, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avocat, nc-nom, avocat, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Reiner', npp-nam, 'Reiner', [dl(0,n,n)-1]), ex_si('Fuellmich', npp-nam, 'Fuellmich', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(acceptée, vpp-ver:pper, acceptée, [dl(0,np,s_pass)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(cour, nc-nom, cour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(canadienne, nc-nom, canadienne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1434, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plainte, nc-nom, plainte, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Reiner', npp-nam, 'Reiner', [dr(0,np,np)-1]), ex_si('Fuellmich', npp-nam, 'Fuellmich', [np-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(déposée, vpp-ver:pper, déposée, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(0,np,np),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(organisme, nc-nom, organisme, [n-1]), ex_si(judiciaire, adj-adj, judiciaire, [dl(0,n,n)-1]), ex_si(provincial, adj-adj, provincial, [dl(0,n,n)-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rejetée, vpp-ver:pper, rejetée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1435, Result) :-
      prob_parse([ ex_si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), ex_si('Schwab', npp-nam, 'Schwab', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Forum', nc-nam, 'Forum', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Davos', npp-nam, 'Davos', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si(élimineraient, v-ver:cond, élimineraient, [dr(0,dl(0,np,s),np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(mangeurs, nc-nom, mangeurs, [n-1]), ex_si(inutiles, adj-adj, inutiles, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1436, Result) :-
      prob_parse([ ex_si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), ex_si('Schwab', npp-nam, 'Schwab', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(allaient, v-ver:impf, allaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(périr, vinf-ver:infi, périr, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si(organisées, vpp-ver:pper, organisées, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1437, Result) :-
      prob_parse([ ex_si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), ex_si('Schwab', npp-nam, 'Schwab', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Forum', nc-nam, 'Forum', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Davos', npp-nam, 'Davos', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si(organisées, vpp-ver:pper, organisées, [dl(0,n,n)-1]), ex_si(élimineraient, v-ver:cond, élimineraient, [dr(0,dl(0,np,s),np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(mangeurs, nc-nom, mangeurs, [n-1]), ex_si(inutiles, adj-adj, inutiles, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1438, Result) :-
      prob_parse([ ex_si('\\', ponct-sym, '\\', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Au', p+d-prp:det, 'Au', [let-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,np,np),n)-1]), ex_si(4, det-num, 4, [n-1]), ex_si(milliards, nc-nom, milliards, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),n)-1]), ex_si(mangeurs, nc-nom, mangeurs, [let-1]), ex_si(inutiles, adj-adj, inutiles, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(seront, v-ver:futu, seront, [let-1]), ex_si(éliminés, vpp-ver:pper, éliminés, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(ici, adv-adv, ici, [dr(0,dl(1,s,s),n)-1]), ex_si(2050, adj-num, 2050, [n-1]), ex_si(par, p-prp, par, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,pp_par,np)-1]), ex_si(guerres, nc-nom, guerres, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(épidémies, nc-nom, épidémies, [dr(0,dl(0,n,n),n)-1]), ex_si(organisées, vpp-ver:pper, organisées, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(maladies, nc-nom, maladies, [dr(0,dl(0,n,n),n)-1]), ex_si(mortelles, adj-adj, mortelles, [n-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si(action, nc-nom, action, [dr(0,dl(0,n,n),n)-1]), ex_si(rapide, adj-adj, rapide, [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(famine, nc-nom, famine, [dr(0,dl(0,n,n),n)-1]), ex_si('\\', p+d-prp:det, '\\', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(écrit, vpp-ver:pper, écrit, [let-1]), ex_si('Klaus', npp-nam, 'Klaus', [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si('Schwab', npp-nam, 'Schwab', [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(dans, p-prp, dans, [dr(0,np,np)-1]), ex_si(son, det-det:pos, son, [np-1]), ex_si(livre, nc-nom, livre, [dr(0,dl(1,s,s),np)-1]), ex_si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(1439, Result) :-
      prob_parse([ ex_si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), ex_si('Schwab', npp-nam, 'Schwab', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(allaient, v-ver:impf, allaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(périr, vinf-ver:infi, périr, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si(organisées, vpp-ver:pper, organisées, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1440, Result) :-
      prob_parse([ ex_si('\\', ponct-sym, '\\', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Au', p+d-prp:det, 'Au', [let-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,np,np),n)-1]), ex_si(4, det-num, 4, [n-1]), ex_si(milliards, nc-nom, milliards, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),n)-1]), ex_si(mangeurs, nc-nom, mangeurs, [let-1]), ex_si(inutiles, adj-adj, inutiles, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(seront, v-ver:futu, seront, [let-1]), ex_si(éliminés, vpp-ver:pper, éliminés, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(ici, adv-adv, ici, [dr(0,dl(1,s,s),n)-1]), ex_si(2050, adj-num, 2050, [n-1]), ex_si(par, p-prp, par, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,pp_par,np)-1]), ex_si(guerres, nc-nom, guerres, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(épidémies, nc-nom, épidémies, [dr(0,dl(0,n,n),n)-1]), ex_si(organisées, vpp-ver:pper, organisées, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(maladies, nc-nom, maladies, [dr(0,dl(0,n,n),n)-1]), ex_si(mortelles, adj-adj, mortelles, [n-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si(action, nc-nom, action, [dr(0,dl(0,n,n),n)-1]), ex_si(rapide, adj-adj, rapide, [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(famine, nc-nom, famine, [dr(0,dl(0,n,n),n)-1]), ex_si('\\', p+d-prp:det, '\\', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(écrit, vpp-ver:pper, écrit, [let-1]), ex_si('Klaus', npp-nam, 'Klaus', [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si('Schwab', npp-nam, 'Schwab', [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(dans, p-prp, dans, [dr(0,np,np)-1]), ex_si(son, det-det:pos, son, [np-1]), ex_si(livre, nc-nom, livre, [dr(0,dl(1,s,s),np)-1]), ex_si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(1441, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(apparition, nc-nom, apparition, [n-1]), ex_si(récente, adj-adj, récente, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(singe, nc-nom, singe, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(conséquence, nc-nom, conséquence, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1442, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Astrazeneca', npp-nam, 'Astrazeneca', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1443, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PDG', nc-abr, 'PDG', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Albert', npp-nam, 'Albert', [dr(0,np,np)-1]), ex_si('Bourla', npp-nam, 'Bourla', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(félicité, vpp-ver:pper, félicité, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(2023, adj-num, 2023, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(offrir, vinf-ver:infi, offrir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1444, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PDG', nc-abr, 'PDG', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(publiquement, adv-adv, publiquement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(réjoui, vpp-ver:pper, réjoui, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(2023, adj-num, 2023, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1445, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('AVC', nc-abr, 'AVC', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(732, det-num, 732, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troubles, nc-nom, troubles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si(menstruel, adj-adj, menstruel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1788, det-num, 1788, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1446, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(causalité, nc-nom, causalité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troubles, nc-nom, troubles, [n-1]), ex_si(menstruels, adj-adj, menstruels, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('AVC', nc-abr, 'AVC', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(établi, vpp-ver:pper, établi, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1447, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('AVC', nc-abr, 'AVC', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(732, det-num, 732, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troubles, nc-nom, troubles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si(menstruel, adj-adj, menstruel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1788, det-num, 1788, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1448, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troubles, nc-nom, troubles, [n-1]), ex_si(menstruels, adj-adj, menstruels, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('AVC', nc-abr, 'AVC', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1449, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(entraînent, v-ver:pres, entraînent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(stérilité, nc-nom, stérilité, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1450, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(rendent, v-ver:pres, rendent, [dr(0,dr(0,dl(0,np,s),np),dl(0,n,n))-1]), ex_si(stériles, adj-adj, stériles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1451, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médecins, nc-nom, médecins, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dénoncé, vpp-ver:pper, dénoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stérilité, nc-nom, stérilité, [n-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(chez, p-prp, chez, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),np)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1452, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stérilité, nc-nom, stérilité, [n-1]), ex_si(imminente, adj-adj, imminente, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(due, vpp-ver:pper, due, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1453, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(affaiblissent, v-ver:pres, affaiblissent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(stimulent, v-ver:pres, stimulent, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inverse, nc-nom, inverse, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(induire, vinf-ver:infi, induire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1454, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(endommagerent, v-ver:pres, endommagerent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1455, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(existantes, adj-adj, existantes, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(démontrent, v-ver:pres, démontrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('SARS-CoV-2', npp-abr, 'SARS-CoV-2', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(facilitées, vpp-ver:pper, facilitées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1456, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(favorisent, v-ver:pres, favorisent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('SARS-CoV-2', nc-abr, 'SARS-CoV-2', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1457, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(différence, nc-nom, différence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coagulation, nc-nom, coagulation, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1458, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(davantage, adv-adv, davantage, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(troubles, nc-nom, troubles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coagulation, nc-nom, coagulation, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1459, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(toujours, adv-adv, toujours, [dr(0,np,np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(coagulation, nc-nom, coagulation, [n-1]), ex_si(empêchant, vpr-ver:ppre, empêchant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1460, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dons, nc-nom, dons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acceptés, vpp-ver:pper, acceptés, [dl(0,np,s_pass)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coagulations, nc-nom, coagulations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1461, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dons, nc-nom, dons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acceptés, vpp-ver:pper, acceptés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etablissement', nc-nam, 'Etablissement', [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1462, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dons, nc-nom, dons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acceptés, vpp-ver:pper, acceptés, [dl(0,np,s_pass)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coagulations, nc-nom, coagulations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1463, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dons, nc-nom, dons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acceptés, vpp-ver:pper, acceptés, [dl(0,np,s_pass)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pollution, nc-nom, pollution, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coagulations, nc-nom, coagulations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1464, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('anti-Covid', nc-nom, 'anti-Covid', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(souffrent, v-ver:pres, souffrent, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pollution, nc-nom, pollution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(provoquant, vpr-ver:ppre, provoquant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coagulations, nc-nom, coagulations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1465, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(confidentiels, adj-adj, confidentiels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(neuf, det-num, neuf, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(enceintes, adj-adj, enceintes, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(dix, pro-num, dix, [np-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,np,np),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(bébé, nc-nom, bébé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1466, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(confidentiels, adj-adj, confidentiels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(mention, nc-nom, mention, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(enceintes, adj-adj, enceintes, [dl(0,n,n)-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1467, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(démontrer, vinf-ver:infi, démontrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(innocuité, nc-nom, innocuité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(produit, nc-nom, produit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1468, Result) :-
      prob_parse([ ex_si('BioNTech', npp-nam, 'BioNTech', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(démontrer, vinf-ver:infi, démontrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(innocuité, nc-nom, innocuité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1469, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(enceintes, adj-adj, enceintes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(allaitantes, adj-adj, allaitantes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1470, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(alerte, v-ver:pres, alerte, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dangerosité, nc-nom, dangerosité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(enceintes, adj-adj, enceintes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1471, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(alerte, v-ver:pres, alerte, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dangerosité, nc-nom, dangerosité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(enceintes, adj-adj, enceintes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1472, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(avant, nc-nom, avant, [n-1]), ex_si(provient, v-ver:pres, provient, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(régulation, nc-nom, régulation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1473, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(enceintes, adj-adj, enceintes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(allaitantes, adj-adj, allaitantes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1474, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(attestent, v-ver:pres, attestent, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dangers, nc-nom, dangers, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(enceintes, vpp-ver:pper, enceintes, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(allaitantes, adj-adj, allaitantes, [dl(0,n,n)-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1475, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(confirme, v-ver:pres, confirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(hépatite, nc-nom, hépatite, [n-1]), ex_si('auto-immune', adj-adj, 'auto-immune', [dl(0,n,n)-1]), ex_si(sévère, adj-adj, sévère, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1476, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étaye, v-ver:pres, étaye, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hépatites, nc-nom, hépatites, [n-1]), ex_si(recensés, vpp-ver:pper, recensés, [dr(0,dl(0,n,n),pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1477, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(confidentiels, adj-adj, confidentiels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(révèlent, v-ver:pres, révèlent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1478, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(tort, nc-nom, tort, [n-1]), ex_si(présentés, vpp-ver:pper, présentés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(confidentiels, adj-adj, confidentiels, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1479, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(révèlent, v-ver:pres, révèlent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1480, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(disent, v-ver:pres, disent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(inutiles, adj-adj, inutiles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1481, Result) :-
      prob_parse([ ex_si('Madagascar', npp-nam, 'Madagascar', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(scandale, nc-nom, scandale, [n-1]), ex_si(lié, vpp-ver:pper, lié, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1482, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Madagascar', npp-nam, 'Madagascar', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Andry', npp-nam, 'Andry', [dr(0,np,np)-1]), ex_si('Ranoelina', npp-nam, 'Ranoelina', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exclu, vpp-ver:pper, exclu, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(scandale, nc-nom, scandale, [n-1]), ex_si(lié, vpp-ver:pper, lié, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1483, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(malgache, adj-adj, malgache, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(exclure, vinf-ver:infi, exclure, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(scandale, nc-nom, scandale, [n-1]), ex_si(lié, vpp-ver:pper, lié, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1484, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(malgache, adj-adj, malgache, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), ex_si(critique, adj-adj, critique, [dr(0,dl(0,n,n),pp)-1]), ex_si(envers, p-prp, envers, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-Organics', npp-nam, 'Covid-Organics', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(boisson, nc-nom, boisson, [n-1]), ex_si(présentée, vpp-ver:pper, présentée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(puissant, adj-adj, puissant, [dr(0,n,n)-1]), ex_si(remède, nc-nom, remède, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Madagascar', npp-nam, 'Madagascar', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1485, Result) :-
      prob_parse([ ex_si('Madagascar', npp-nam, 'Madagascar', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(membre, nc-nom, membre, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Andry', npp-nam, 'Andry', [dl(0,n,n)-1]), ex_si('Ranoelina', npp-nam, 'Ranoelina', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1486, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(certifié, vpp-ver:pper, certifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Madagascar', npp-nam, 'Madagascar', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1487, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(prévenant, vpr-ver:ppre, prévenant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(poursuivis, vpp-ver:pper, poursuivis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(tentative, nc-nom, tentative, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(votaient, v-ver:impf, votaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1488, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Justice', nc-nam, 'Justice', [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(menacé, vpp-ver:pper, menacé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(tentative, nc-nom, tentative, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(votaient, v-ver:impf, votaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1489, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(allemands, adj-adj, allemands, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(les, clo-det:art, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(prévenant, vpr-ver:ppre, prévenant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(poursuivis, vpp-ver:pper, poursuivis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(tentative, nc-nom, tentative, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(votaient, v-ver:impf, votaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1490, Result) :-
      prob_parse([ ex_si('Cinq', det-num, 'Cinq', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Bundestag', npp-nam, 'Bundestag', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1491, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avertir, vinf-ver:infi, avertir, [dr(0,dr(0,dl(0,np,s_inf),s_q),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(votaient, v-ver:impf, votaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(poursuivis, vpp-ver:pper, poursuivis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(tentative, nc-nom, tentative, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1492, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Justice', nc-nom, 'Justice', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démenti, vpp-ver:pper, démenti, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(courrier, nc-nom, courrier, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(voter, vinf-ver:infi, voter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1493, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avertir, vinf-ver:infi, avertir, [dr(0,dr(0,dl(0,np,s_inf),s_q),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(votaient, v-ver:impf, votaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(poursuivis, vpp-ver:pper, poursuivis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(tentative, nc-nom, tentative, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1494, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(prévenant, vpr-ver:ppre, prévenant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(poursuivis, vpp-ver:pper, poursuivis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(tentative, nc-nom, tentative, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(votaient, v-ver:impf, votaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1495, Result) :-
      prob_parse([ ex_si('Anthony', npp-nam, 'Anthony', [dr(0,np,np)-1]), ex_si('Fauci', npp-nam, 'Fauci', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, pro-num, une, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(agences, nc-nom, agences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(conseiller, nc-nom, conseiller, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(emprisonné, vpp-ver:pper, emprisonné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(spéciales, adj-adj, spéciales, [dl(0,n,n)-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1496, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(immunologue, nc-nom, immunologue, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Anthony', npp-nam, 'Anthony', [dl(0,n,n)-1]), ex_si('Fauci', npp-nam, 'Fauci', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(spéciales, adj-adj, spéciales, [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1497, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(immunologue, nc-nom, immunologue, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Anthony', npp-nam, 'Anthony', [dl(0,n,n)-1]), ex_si('Fauci', npp-nam, 'Fauci', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(spéciales, adj-adj, spéciales, [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(prétendent, v-ver:pres, prétendent, [dr(0,s,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blogs, nc-nom, blogs, [n-1]), ex_si(partagés, vpp-ver:pper, partagés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1498, Result) :-
      prob_parse([ ex_si('Anthony', npp-nam, 'Anthony', [dr(0,np,np)-1]), ex_si('Fauci', npp-nam, 'Fauci', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(incarcéré, vpp-ver:pper, incarcéré, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(spéciales, adj-adj, spéciales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1499, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(immunologue, nc-nom, immunologue, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Anthony', npp-nam, 'Anthony', [dl(0,n,n)-1]), ex_si('Fauci', npp-nam, 'Fauci', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(emprisonné, vpp-ver:pper, emprisonné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(spéciales, adj-adj, spéciales, [dl(0,n,n)-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1500, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(spéciales, adj-adj, spéciales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Anthony', npp-nam, 'Anthony', [dr(0,np,np)-1]), ex_si('Fauci', npp-nam, 'Fauci', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(finalement, adv-adv, finalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(libéré, vpp-ver:pper, libéré, [dl(0,np,s_pass)-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(après, adv-adv, après, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1501, Result) :-
      prob_parse([ ex_si('Présenter', vinf-ver:infi, 'Présenter', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(schéma, nc-nom, schéma, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(critère, nc-nom, critère, [n-1]), ex_si(nécessaire, adj-adj, nécessaire, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(versement, nc-nom, versement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indemnité, nc-nom, indemnité, [n-1]), ex_si(instaurée, vpp-ver:pper, instaurée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(réponse, nc-nom, réponse, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1502, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(faut, v-ver:pres, faut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(bénéficier, vinf-ver:infi, bénéficier, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(financière, adj-adj, financière, [dl(0,n,n)-1]), ex_si(instaurée, vpp-ver:pper, instaurée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1503, Result) :-
      prob_parse([ ex_si('L\'aide', nc-nam, 'L\'aide', [dr(0,np,n)-1]), ex_si(instaurée, vpp-ver:pper, instaurée, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(le, det-det:art, le, [dr(0,pp_par,np)-1]), ex_si(gouvernement, nc-nom, gouvernement, [dr(0,np,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [n-1]), ex_si(est, v-ver:pres, est, [dl(0,n,n)-1]), ex_si(versée, vpp-ver:pper, versée, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(sans, p-prp, sans, [let-1]), ex_si(condition, nc-nom, condition, [dr(0,dl(1,s,s),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(aux, p+d-prp:det, aux, [let-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [dr(0,pp_a,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(zones, nc-nom, zones, [dr(0,dl(0,n,n),n)-1]), ex_si(touchées, vpp-ver:pper, touchées, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(les, det-det:art, les, [dr(0,pp_par,np)-1]), ex_si(combats, nc-nom, combats, [dr(0,np,n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(leur, det-det:pos, leur, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(emploi, nc-nom, emploi, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(cause, nc-nom, cause, [dr(0,dl(1,s,s),n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,n,pp_de)-1]), ex_si(conflit, nc-nom, conflit, [dr(0,pp_de,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1504, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(instaurée, vpp-ver:pper, instaurée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(versée, vpp-ver:pper, versée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(touchées, vpp-ver:pper, touchées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(condition, nc-nom, condition, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1505, Result) :-
      prob_parse([ ex_si('L\'aide', nc-nom, 'L\'aide', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(guerre, nc-nom, guerre, [dr(0,dl(0,n,n),n)-1]), ex_si(instaurée, vpp-ver:pper, instaurée, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(le, det-det:art, le, [dr(0,pp_par,np)-1]), ex_si(gouvernement, nc-nom, gouvernement, [dr(0,np,n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [n-1]), ex_si(est, v-ver:pres, est, [dl(0,n,n)-1]), ex_si(versée, vpp-ver:pper, versée, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(sans, p-prp, sans, [let-1]), ex_si(condition, nc-nom, condition, [dr(0,dl(1,s,s),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(aux, p+d-prp:det, aux, [let-1]), ex_si('Ukrainiens', nc-nam, 'Ukrainiens', [dr(0,pp_a,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si(zones, nc-nom, zones, [dr(0,dl(0,n,n),n)-1]), ex_si(touchées, vpp-ver:pper, touchées, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(les, det-det:art, les, [dr(0,pp_par,np)-1]), ex_si(combats, nc-nom, combats, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1506, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(conditionné, vpp-ver:pper, conditionné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(versement, nc-nom, versement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1507, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(économies, nc-nom, économies, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pourront, v-ver:futu, pourront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(bénéficier, vinf-ver:infi, bénéficier, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(gouvernementale, adj-adj, gouvernementale, [dl(0,n,n)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sommes, nc-nom, sommes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1508, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(faut, v-ver:pres, faut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(bénéficier, vinf-ver:infi, bénéficier, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(financière, adj-adj, financière, [dl(0,n,n)-1]), ex_si(instaurée, vpp-ver:pper, instaurée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(réponse, nc-nom, réponse, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1509, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(indiquerait, v-ver:impf, indiquerait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(cause, v-ver:pres, cause, [dr(0,dl(0,np,s),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(parodique, adj-adj, parodique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1510, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(capture, nc-nom, capture, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(écran, nc-nom, écran, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prétendu, adj-adj, prétendu, [dr(0,n,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CNN', npp-abr, 'CNN', [np-1]), ex_si(assurant, vpr-ver:ppre, assurant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(cause, v-ver:pres, cause, [dr(0,dl(0,np,s),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(montage, nc-nom, montage, [n-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(à, p-prp, à, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(parodique, adj-adj, parodique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1511, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sida, nc-nom, sida, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1512, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(entraîner, vinf-ver:infi, entraîner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sida, nc-abr, sida, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1513, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(révélant, vpr-ver:ppre, révélant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(biochimiques, adj-adj, biochimiques, [dl(0,n,n)-1]), ex_si(atteste, v-ver:pres, atteste, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [n-1]), ex_si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), ex_si('Moderna', npp-nam, 'Moderna', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1514, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(implique, v-ver:pres, implique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Moderna', npp-nam, 'Moderna', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(responsable, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1515, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(évoqué, vpp-ver:pper, évoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(myocardites, nc-nom, myocardites, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(provoquées, vpp-ver:pper, provoquées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1516, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédées, vpp-ver:pper, décédées, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(suites, nc-nom, suites, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(myocardite, nc-nom, myocardite, [n-1]), ex_si(induite, vpp-ver:pper, induite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1517, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(altération, nc-nom, altération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ADN', nc-nom, 'ADN', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('-devenue', vpp-ver:pper, '-devenue', [dl(0,n,n)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(classique, nc-nom, classique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(désinformation, nc-nom, désinformation, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(infondée, adj-adj, infondée, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(fausse, adj-adj, fausse, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1518, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(intégrer, vinf-ver:infi, intégrer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si('ADN', nc-nom, 'ADN', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(altérer, vinf-ver:infi, altérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1519, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(certificat, nc-nom, certificat, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('-qui', p+pro-pro:rel, '-qui', [dl(0,n,n)-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(prolongé, vpp-ver:pper, prolongé, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(assorti, vpp-ver:pper, assorti, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(libertés, nc-nom, libertés, [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(dépendent, v-ver:pres, dépendent, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(législations, nc-nom, législations, [n-1]), ex_si(nationales, adj-adj, nationales, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1520, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(libertés, nc-nom, libertés, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(dépendent, v-ver:pres, dépendent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(législations, nc-nom, législations, [n-1]), ex_si(nationales, adj-adj, nationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1521, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(prolongation, nc-nom, prolongation, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(certificat, nc-nom, certificat, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('au-delà', p-prp, 'au-delà', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(supprimer, vinf-ver:infi, supprimer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(libertés, nc-nom, libertés, [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(forcée, vpp-ver:pper, forcée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1522, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(prépare, v-ver:pres, prépare, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(prolongation, nc-nom, prolongation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(certificat, nc-nom, certificat, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(supprimera, v-ver:futu, supprimera, [dr(0,dl(0,np,s),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(libertés, nc-nom, libertés, [n-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avez, v-ver:pres, avez, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(certificat, nc-nom, certificat, [n-1]), ex_si(covid, nc-nom, covid, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ouvrant, vpr-ver:ppre, ouvrant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(forcée, vpp-ver:pper, forcée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1523, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(prolongation, nc-nom, prolongation, [n-1]), ex_si(annoncée, vpp-ver:pper, annoncée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(certificat, nc-nom, certificat, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('au-delà', p-prp, 'au-delà', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(supprimer, vinf-ver:infi, supprimer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(libertés, nc-nom, libertés, [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(forcée, vpp-ver:pper, forcée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1524, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(prépare, v-ver:pres, prépare, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(prolongation, nc-nom, prolongation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(certificat, nc-nom, certificat, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1525, Result) :-
      prob_parse([ ex_si('Profitant', vpr-ver:ppre, 'Profitant', [dr(0,dl(0,np,s_ppres),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(apprête, v-ver:pres, apprête, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1526, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(profite, v-ver:pres, profite, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1527, Result) :-
      prob_parse([ ex_si('Profitant', vpr-ver:ppre, 'Profitant', [dr(0,dl(0,np,s_ppres),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(apprête, v-ver:pres, apprête, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(états, nc-nom, états, [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1528, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Gates', npp-nam, 'Gates', [np-1]), ex_si(profitent, v-ver:pres, profitent, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(distrait, vpp-ver:pper, distrait, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(constitution, nc-nom, constitution, [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-membres', nc-nom, 'États-membres', [n-1]), ex_si(perdront, v-ver:futu, perdront, [dr(0,dl(0,np,s),np)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1529, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(profite, v-ver:pres, profite, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1530, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Gates', npp-nam, 'Gates', [np-1]), ex_si(profitent, v-ver:pres, profitent, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(distrait, vpp-ver:pper, distrait, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(constitution, nc-nom, constitution, [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(perdront, v-ver:futu, perdront, [dr(0,dl(0,np,s),np)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1531, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(divulgué, vpp-ver:pper, divulgué, [dl(0,np,np)-1]), ex_si(répertorie, v-ver:pres, répertorie, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1532, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(liste, v-ver:pres, liste, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1533, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(compile, v-ver:pres, compile, [dr(0,dl(0,np,s),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(médicaux, adj-adj, médicaux, [dl(0,n,n)-1]), ex_si(théoriquement, adv-adv, théoriquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(attribuables, adj-adj, attribuables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), ex_si(a, et-prp, a, [dr(0,dl(0,n,n),n)-1]), ex_si(priori, et-adv, priori, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1534, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(liste, v-ver:pres, liste, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1535, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(compile, v-ver:pres, compile, [dr(0,dl(0,np,s),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(médicaux, adj-adj, médicaux, [dl(0,n,n)-1]), ex_si(théoriquement, adv-adv, théoriquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(attribuables, adj-adj, attribuables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), ex_si(a, et-prp, a, [dr(0,dl(0,n,n),n)-1]), ex_si(priori, et-adv, priori, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1536, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(répertorie, v-ver:pres, répertorie, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1537, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(compile, v-ver:pres, compile, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(médicaux, adj-adj, médicaux, [dl(0,n,n)-1]), ex_si(théoriquement, adv-adv, théoriquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(attribuables, adj-adj, attribuables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(indésirables, adj-adj, indésirables, [dl(0,n,n)-1]), ex_si(son, det-det:pos, son, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1538, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(répertorie, v-ver:pres, répertorie, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1539, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1540, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1541, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dl(0,n,n)-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1542, Result) :-
      prob_parse([ ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dl(0,n,n)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rappelés, vpp-ver:pper, rappelés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(variole, nc-nom, variole, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(singe, nc-nom, singe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1543, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dl(0,n,n)-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1544, Result) :-
      prob_parse([ ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dl(0,n,n)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rappelés, vpp-ver:pper, rappelés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1545, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dl(0,n,n)-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1546, Result) :-
      prob_parse([ ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dl(0,n,n)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rappelés, vpp-ver:pper, rappelés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(négatifs, nc-nom, négatifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1547, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dl(0,n,n)-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1548, Result) :-
      prob_parse([ ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dl(0,n,n)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rappelés, vpp-ver:pper, rappelés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vrais, adj-adj, vrais, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1549, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dl(0,n,n)-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(positifs, nc-nom, positifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1550, Result) :-
      prob_parse([ ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dl(0,n,n)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rappelés, vpp-ver:pper, rappelés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vrais, adj-adj, vrais, [dr(0,n,n)-1]), ex_si(négatifs, nc-nom, négatifs, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1551, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suspendu, vpp-ver:pper, suspendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(distribution, nc-nom, distribution, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(administré, vpp-ver:pper, administré, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1552, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(administré, vpp-ver:pper, administré, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1553, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(calendrier, nc-nom, calendrier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Direction', nc-nam, 'Direction', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(prouve, v-ver:pres, prouve, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(livraison, nc-nom, livraison, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(suspendue, vpp-ver:pper, suspendue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1554, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(livraison, nc-nom, livraison, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(interrompue, vpp-ver:pper, interrompue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1555, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Aztèques', nc-nam, 'Aztèques', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produites, vpp-ver:pper, produites, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1556, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Aztèques', nc-nam, 'Aztèques', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(frappés, vpp-ver:pper, frappés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pandémies, nc-nom, pandémies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(arrivait, v-ver:impf, arrivait, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sacrifiaient, v-ver:impf, sacrifiaient, [dr(0,dl(0,np,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1557, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tribus, nc-nom, tribus, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(anciens, adj-adj, anciens, [dr(0,n,n)-1]), ex_si('Aztèques', nc-nam, 'Aztèques', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(sacrifié, vpp-ver:pper, sacrifié, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(dieux, nc-nom, dieux, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(famine, nc-nom, famine, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1558, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Aztèques', nc-nam, 'Aztèques', [n-1]), ex_si(sacrifiaient, v-ver:impf, sacrifiaient, [dr(0,dl(0,np,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1559, Result) :-
      prob_parse([ ex_si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(hospitalisés, vpp-ver:pper, hospitalisés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(grave, adj-adj, grave, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1560, Result) :-
      prob_parse([ ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1561, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(faits, nc-nom, faits, [n-1]), ex_si(inférieur, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1562, Result) :-
      prob_parse([ ex_si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(hospitalisés, vpp-ver:pper, hospitalisés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(grave, adj-adj, grave, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1563, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(faits, nc-nom, faits, [n-1]), ex_si(inférieur, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1564, Result) :-
      prob_parse([ ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1565, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(hospitalisées, vpp-ver:pper, hospitalisées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(grave, adj-adj, grave, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inférieur, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1566, Result) :-
      prob_parse([ ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tel', npp-nam, 'Tel', [dr(0,np,np)-1]), ex_si('Aviv', npp-nam, 'Aviv', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1567, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(reine, nc-nom, reine, [n-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(malade, nc-nom, malade, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(soigne, v-ver:pres, soigne, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1568, Result) :-
      prob_parse([ ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [np-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(soigner, vinf-ver:infi, soigner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1569, Result) :-
      prob_parse([ ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [np-1]), ex_si(habite, v-ver:pres, habite, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(forcément, adv-adv, forcément, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1570, Result) :-
      prob_parse([ ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [np-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(traiter, vinf-ver:infi, traiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1571, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(spike, et-nom, spike, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(produite, vpp-ver:pper, produite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(organisme, nc-nom, organisme, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(sexuellement, adv-adv, sexuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(transmissible, adj-adj, transmissible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1572, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(spike, et-nom, spike, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(induite, vpp-ver:pper, induite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(transmis, vpp-ver:pper, transmis, [dl(0,np,s_pass)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contact, nc-nom, contact, [n-1]), ex_si(sexuel, adj-adj, sexuel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1573, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(spermatozoïde, nc-nom, spermatozoïde, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(interagir, vinf-ver:infi, interagir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ARN', npp-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(injecté, vpp-ver:pper, injecté, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(muscle, nc-nom, muscle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épaule, nc-nom, épaule, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(porteur, nc-nom, porteur, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si(spike, nc-nom, spike, [dl(0,n,n)-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1574, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(spermatozoïde, nc-nom, spermatozoïde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(muscle, nc-nom, muscle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épaule, nc-nom, épaule, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(porteur, nc-nom, porteur, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si(spike, nc-nom, spike, [dl(0,n,n)-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1575, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('Mario', npp-nam, 'Mario', [dr(0,np,np)-1]), ex_si('Draghi', npp-nam, 'Draghi', [np-1]), ex_si(reconnaît, v-ver:pres, reconnaît, [dr(0,dl(0,np,s),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(0,np,s),s_q)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(normale, adj-adj, normale, [dl(0,n,n)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(améliorera, v-ver:futu, améliorera, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1576, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('MariDraghi', npp-nam, 'MariDraghi', [np-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(normale, adj-adj, normale, [dl(0,n,n)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(améliorera, v-ver:futu, améliorera, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnaît, v-ver:pres, reconnaît, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1577, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moderna', npp-nam, 'Moderna', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(400, det-num, 400, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(actions, nc-nom, actions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1578, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(montant, nc-nom, montant, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(actions, nc-nom, actions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moderna', npp-nam, 'Moderna', [np-1]), ex_si(cédées, vpp-ver:pper, cédées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(prévues, vpp-ver:pper, prévues, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(fixé, vpp-ver:pper, fixé, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(élevait, v-ver:impf, élevait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(6, det-num, 6, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1579, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(traitements, nc-nom, traitements, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(anticorps, nc-nom, anticorps, [n-1]), ex_si(monoclonaux, adj-adj, monoclonaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(première, adj-num, première, [dr(0,np,n)-1]), ex_si(génération, nc-nom, génération, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fonctionnent, v-ver:pres, fonctionnent, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(variant, vpr-ver:ppre, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(logique, nc-nom, logique, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-nom, 'ARN', [n-1]), ex_si(message, nc-nom, message, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1580, Result) :-
      prob_parse([ ex_si('Ni', cc-kon, 'Ni', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(traitements, nc-nom, traitements, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(anticorps, nc-nom, anticorps, [n-1]), ex_si(monoclonaux, adj-adj, monoclonaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(première, det-num, première, [dr(0,np,n)-1]), ex_si(génération, nc-nom, génération, [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(marchent, v-ver:pres, marchent, [dl(0,np,s)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1581, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(privées, adj-adj, privées, [dl(0,n,n)-1]), ex_si(impliquées, vpp-ver:pper, impliquées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('TGV', nc-abr, 'TGV', [n-1]), ex_si(médicalisés, vpp-ver:pper, médicalisés, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(évacuer, vinf-ver:infi, évacuer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si('Grand-Est', npp-nam, 'Grand-Est', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(printemps, nc-nom, printemps, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1582, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secteur, nc-nom, secteur, [n-1]), ex_si(privé, adj-adj, privé, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(part, nc-nom, part, [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('TGV', nc-abr, 'TGV', [n-1]), ex_si(médicalisés, vpp-ver:pper, médicalisés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1583, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si('Sénat', npp-nam, 'Sénat', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(intéresse, v-ver:pres, intéresse, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(recours, nc-nom, recours, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Olivier', npp-nam, 'Olivier', [dr(0,np,np)-1]), ex_si('Véran', npp-nam, 'Véran', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cabinets, nc-nom, cabinets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1584, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(accordée, vpp-ver:pper, accordée, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Olivier', npp-nam, 'Olivier', [dr(0,np,np)-1]), ex_si('Véran', npp-nam, 'Véran', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(cabinets, nc-nom, cabinets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(pose, v-ver:pres, pose, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Sénat', npp-nam, 'Sénat', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1585, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-covid', adj-adj, 'anti-covid', [dl(0,n,n)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1586, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concernés, vpp-ver:pper, concernés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1587, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entré, vpp-ver:pper, entré, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-covid', adj-adj, 'anti-covid', [dl(0,n,n)-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(distribués, vpp-ver:pper, distribués, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1588, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concernés, vpp-ver:pper, concernés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1589, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entré, vpp-ver:pper, entré, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-covid', adj-adj, 'anti-covid', [dl(0,n,n)-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1590, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-covid', adj-adj, 'anti-covid', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(distribués, vpp-ver:pper, distribués, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1591, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entré, vpp-ver:pper, entré, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-covid', adj-adj, 'anti-covid', [dl(0,n,n)-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1592, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entré, vpp-ver:pper, entré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1593, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gendarmerie, nc-nom, gendarmerie, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(intervenue, vpp-ver:pper, intervenue, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Champs-Elysées', npp-nam, 'Champs-Elysées', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si('anti-pass', adj-adj, 'anti-pass', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1594, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(opposants, nc-nom, opposants, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Champs-Élysées', npp-nam, 'Champs-Élysées', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(déclenchant, vpr-ver:ppre, déclenchant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1595, Result) :-
      prob_parse([ ex_si('L\'avocat', nc-nom, 'L\'avocat', [dr(0,np,n)-1]), ex_si(allemand, adj-adj, allemand, [n-1]), ex_si('Reiner', npp-nam, 'Reiner', [dl(0,n,n)-1]), ex_si('Fuellmich', npp-nam, 'Fuellmich', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dispose, v-ver:pres, dispose, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s),pp)-1]), ex_si(un, det-det:art, un, [dr(0,pp_de,np)-1]), ex_si(cabinet, nc-nom, cabinet, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(avocats, nc-nom, avocats, [dr(0,dl(0,n,n),n)-1]), ex_si(dans, p-prp, dans, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),np)-1]), ex_si(ville, nc-nom, ville, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Göttingen', npp-nam, 'Göttingen', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,s_q,s)-1]), ex_si('Forum', nc-nam, 'Forum', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Davos', npp-nam, 'Davos', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),np)-1]), ex_si(scientifiques, nc-nom, scientifiques, [dr(0,np,n)-1]), ex_si(avaient, v-ver:impf, avaient, [n-1]), ex_si(planifié, vpp-ver:pper, planifié, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,pp_a,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(monde, nc-nom, monde, [dr(0,pp_a,n)-1]), ex_si(une, det-det:art, une, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(fausse, adj-adj, fausse, [let-1]), ex_si(pandémie, nc-nom, pandémie, [dr(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(1596, Result) :-
      prob_parse([ ex_si('Reiner', npp-nam, 'Reiner', [dr(0,np,np)-1]), ex_si('Fuellmich', npp-nam, 'Fuellmich', [np-1]), ex_si(dispose, v-ver:pres, dispose, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cabinet, nc-nom, cabinet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avocats, nc-nom, avocats, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Davos', npp-nam, 'Davos', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1597, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(invités, vpp-ver:pper, invités, [dr(0,dr(0,dl(0,np,s_pass),dl(0,np,s_inf)),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('EFS', npp-abr, 'EFS', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1598, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('EFS', npp-abr, 'EFS', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1599, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(convois, nc-nom, convois, [n-1]), ex_si(dits, vpp-ver:pper, dits, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liberté, nc-nom, liberté, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débuté, vpp-ver:pper, débuté, [dl(0,np,s_ppart)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,s,s),n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Ottawa', npp-nam, 'Ottawa', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inspiré, vpp-ver:pper, inspiré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mouvements, nc-nom, mouvements, [n-1]), ex_si(similaires, adj-adj, similaires, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1600, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(convois, nc-nom, convois, [n-1]), ex_si(dits, vpp-ver:pper, dits, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liberté, nc-nom, liberté, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(initié, vpp-ver:pper, initié, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étendre, vinf-ver:infi, étendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1601, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),np)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(suicide, nc-nom, suicide, [n-1]), ex_si(assisté, vpp-ver:pper, assisté, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(précis, adj-adj, précis, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(terminale, adj-adj, terminale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1602, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mentionne, v-ver:pres, mentionne, [dr(0,dl(0,np,s),np)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vise, v-ver:pres, vise, [dr(0,dl(0,np,s),np)-1]), ex_si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1603, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), ex_si(approuvée, vpp-ver:pper, approuvée, [dl(0,n,n)-1]), ex_si(autorise, v-ver:pres, autorise, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(euthanasie, nc-nom, euthanasie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(précis, adj-adj, précis, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(terminale, adj-adj, terminale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1604, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),np)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(suicide, nc-nom, suicide, [n-1]), ex_si(assisté, vpp-ver:pper, assisté, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(précis, adj-adj, précis, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(terminale, adj-adj, terminale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1605, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mentionne, v-ver:pres, mentionne, [dr(0,dl(0,np,s),np)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vise, v-ver:pres, vise, [dr(0,dl(0,np,s),np)-1]), ex_si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1606, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), ex_si(approuvée, vpp-ver:pper, approuvée, [dl(0,n,n)-1]), ex_si(autorise, v-ver:pres, autorise, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(euthanasie, nc-nom, euthanasie, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(référence, nc-nom, référence, [np-1]), ex_si(spécifiquement, adv-adv, spécifiquement, [dl(1,s,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1607, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(australienne, adj-adj, australienne, [dl(0,n,n)-1]), ex_si('Qantas', npp-nam, 'Qantas', [dl(0,n,n)-1]), ex_si('Alan', npp-nam, 'Alan', [dl(0,n,n)-1]), ex_si('Joyce', npp-nam, 'Joyce', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(faite, vpp-ver:pper, faite, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(entarter, vinf-ver:infi, entarter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2017, adj-num, 2017, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(position, nc-nom, position, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouverture, nc-nom, ouverture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mariage, nc-nom, mariage, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(couples, nc-nom, couples, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(sexe, nc-nom, sexe, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1608, Result) :-
      prob_parse([ ex_si('Alan', npp-nam, 'Alan', [dr(0,np,np)-1]), ex_si('Joyce', npp-nam, 'Joyce', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(faite, vpp-ver:pper, faite, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(entarter, vinf-ver:infi, entarter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2017, adj-num, 2017, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(imposer, vinf-ver:infi, imposer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1609, Result) :-
      prob_parse([ ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Kanalec', npp-nam, 'Kanalec', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(infirmière, nc-nom, infirmière, [n-1]), ex_si(slovène, adj-adj, slovène, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ljubljana', npp-nam, 'Ljubljana', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démissionné, vpp-ver:pper, démissionné, [dl(0,np,s_ppart)-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(révélé, vpp-ver:pper, révélé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(caméras, nc-nom, caméras, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(chacun, pro-pro:ind, chacun, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(déterminant, vpr-ver:ppre, déterminant, [dl(0,n,n)-1]), ex_si(si, cs-kon, si, [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(placebo, nc-nom, placebo, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1610, Result) :-
      prob_parse([ ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Kanalec', npp-nam, 'Kanalec', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ljubljana', npp-nam, 'Ljubljana', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('UKCL', npp-abr, 'UKCL', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1611, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(infirmière, nc-nom, infirmière, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ljubljana', npp-nam, 'Ljubljana', [dr(0,np,np)-1]), ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Kanalec', npp-nam, 'Kanalec', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(révélé, vpp-ver:pper, révélé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(caméras, nc-nom, caméras, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-cCovid', npp-nam, 'anti-cCovid', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(chacun, pro-pro:ind, chacun, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(déterminant, vpr-ver:ppre, déterminant, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(si, cs-kon, si, [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(placebo, nc-nom, placebo, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,s),np)-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,np,n)-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1612, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ljubljana', npp-nam, 'Ljubljana', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(infirmière, nc-nom, infirmière, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si('Zdenka', npp-nam, 'Zdenka', [dl(0,n,n)-1]), ex_si('Mrak', npp-nam, 'Mrak', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conformé, vpp-ver:pper, conformé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('que\'ils', p+pro-pro:rel, 'que\'ils', [dr(0,s_q,s)-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [np-1]), ex_si(fermement, adv-adv, fermement, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dl(1,s,s)-1]), ex_si(vaccination, nc-nom, vaccination, [dr(0,np,n)-1]), ex_si(contre, p-prp, contre, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(maladie, nc-nom, maladie, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1613, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(provoqueraient, v-ver:impf, provoqueraient, [dr(0,dl(0,np,s),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1614, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(chacun, pro-pro:ind, chacun, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(déterminant, vpr-ver:ppre, déterminant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(placebo, nc-nom, placebo, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1615, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(figurants, nc-nom, figurants, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sacs, nc-nom, sacs, [n-1]), ex_si(mortuaires, adj-adj, mortuaires, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(organisée, vpp-ver:pper, organisée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Fridays', npp-nam, 'Fridays', [dl(0,n,n)-1]), ex_si(for, et-prp, for, [dr(0,dl(0,n,n),n)-1]), ex_si(future, adj-adj, future, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(symbolisent, v-ver:pres, symbolisent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(causés, vpp-ver:pper, causés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pollution, nc-nom, pollution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1616, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(figurants, nc-nom, figurants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(organisée, vpp-ver:pper, organisée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Fridays', npp-nam, 'Fridays', [dl(0,n,n)-1]), ex_si(for, et-prp, for, [dr(0,dl(0,n,n),n)-1]), ex_si(future, adj-adj, future, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(font, v-ver:pres, font, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1617, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', nc-nam, 'Covid', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('20-59', adj-num, '20-59', [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(nul, adj-adj, nul, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1618, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(moins, adv-adv, moins, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(0, det-num, 0, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(mourir, vinf-ver:infi, mourir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1619, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si('Jan', npp-nam, 'Jan', [dl(0,n,n)-1]), ex_si('Palach', npp-nam, 'Palach', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(immolé, vpp-ver:pper, immolé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Prague', npp-nam, 'Prague', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(occupation, nc-nom, occupation, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1620, Result) :-
      prob_parse([ ex_si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), ex_si('Palach', npp-nam, 'Palach', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(immolé, vpp-ver:pper, immolé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1621, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si('Jan', npp-nam, 'Jan', [dl(0,n,n)-1]), ex_si('Palach', npp-nam, 'Palach', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(immolé, vpp-ver:pper, immolé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Prague', npp-nam, 'Prague', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(occupation, nc-nom, occupation, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1622, Result) :-
      prob_parse([ ex_si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), ex_si('Palach', npp-nam, 'Palach', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(immolé, vpp-ver:pper, immolé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Prague', npp-nam, 'Prague', [np-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1623, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si('Jan', npp-nam, 'Jan', [dl(0,n,n)-1]), ex_si('Palach', npp-nam, 'Palach', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(immolé, vpp-ver:pper, immolé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Prague', npp-nam, 'Prague', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(occupation, nc-nom, occupation, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1624, Result) :-
      prob_parse([ ex_si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), ex_si('Palach', npp-nam, 'Palach', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(immolé, vpp-ver:pper, immolé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Prague', npp-nam, 'Prague', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(amende, nc-nom, amende, [n-1]), ex_si(reçue, vpp-ver:pper, reçue, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(défaut, nc-nom, défaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1625, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(37, det-num, 37, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,n,n),np)-1]), ex_si('Nadir', npp-nam, 'Nadir', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(immolé, vpp-ver:pper, immolé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(amende, nc-nom, amende, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(défaut, nc-nom, défaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1626, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(amende, nc-nom, amende, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(défaut, nc-nom, défaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(infligée, vpp-ver:pper, infligée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Nadir', npp-nam, 'Nadir', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1627, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(recette, nc-nom, recette, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(fabriquer, vinf-ver:infi, fabriquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si('soi-même', pro-adv, 'soi-même', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(citrons, nc-nom, citrons, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(citrons, nc-nom, citrons, [n-1]), ex_si(verts, adj-adj, verts, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(pamplemousses, nc-nom, pamplemousses, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1628, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(fabriquée, vpp-ver:pper, fabriquée, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(agrumes, nc-nom, agrumes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1629, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(obtenue, vpp-ver:pper, obtenue, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fruits, nc-nom, fruits, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1630, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(fabriquée, vpp-ver:pper, fabriquée, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(agrumes, nc-nom, agrumes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1631, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(recette, nc-nom, recette, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(fabriquer, vinf-ver:infi, fabriquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si('soi-même', pro-adv, 'soi-même', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(citrons, nc-nom, citrons, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(citrons, nc-nom, citrons, [n-1]), ex_si(verts, adj-adj, verts, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(pamplemousses, nc-nom, pamplemousses, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1632, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(fabriquée, vpp-ver:pper, fabriquée, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(viande, nc-nom, viande, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1633, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(métropolitaine, adj-adj, métropolitaine, [dl(0,n,n)-1]), ex_si(londonienne, adj-adj, londonienne, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enquête, v-ver:pres, enquête, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1634, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(ouverte, vpp-ver:pper, ouverte, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(métropolitaine, adj-adj, métropolitaine, [dl(0,n,n)-1]), ex_si(londonienne, adj-adj, londonienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1635, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(pénale, adj-adj, pénale, [dl(0,n,n)-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CPI', npp-abr, 'CPI', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1636, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CPI', npp-abr, 'CPI', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1637, Result) :-
      prob_parse([ ex_si('Soixante', det-num, 'Soixante', [dr(0,np,n)-1]), ex_si(mille, adj-num, mille, [dr(0,n,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Déclaration', nc-nam, 'Déclaration', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Great', npp-nam, 'Great', [dr(0,np,np)-1]), ex_si('Barrington', npp-nam, 'Barrington', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1638, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Déclaration', nc-nom, 'Déclaration', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Great', npp-nam, 'Great', [dr(0,np,np)-1]), ex_si('Barrington', npp-nam, 'Barrington', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(demande, v-ver:pres, demande, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1639, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Déclaration', nc-nom, 'Déclaration', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Great', npp-nam, 'Great', [dr(0,np,np)-1]), ex_si('Barrington', npp-nam, 'Barrington', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(met, v-ver:pres, met, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(garde, nc-nom, garde, [n-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(néfastes, adj-adj, néfastes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(mises, vpp-ver:pper, mises, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(aucunement, adv-adv, aucunement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(contraire, nc-nom, contraire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1640, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Déclaration', nc-nom, 'Déclaration', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Great', npp-nam, 'Great', [dr(0,np,np)-1]), ex_si('Barrington', npp-nam, 'Barrington', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(demande, v-ver:pres, demande, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1641, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si('PCR', nc-abr, 'PCR', [dl(0,n,n)-1]), ex_si(pratiqués, vpp-ver:pper, pratiqués, [dl(0,n,n)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(détectent, v-ver:pres, détectent, [dr(0,dl(0,np,s),np)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(spécifiquement, adv-adv, spécifiquement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Sars-Cov-2', nc-abr, 'Sars-Cov-2', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1642, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Sars-Cov-2', npp-nam, 'Sars-Cov-2', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(spécifiques, adj-adj, spécifiques, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1643, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Sars-Cov-2', npp-nam, 'Sars-Cov-2', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(spécifiques, adj-adj, spécifiques, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1644, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Sars-Cov-2', nc-abr, 'Sars-Cov-2', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1645, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Gendarmerie', nc-nam, 'Gendarmerie', [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('GRC', npp-abr, 'GRC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dénombré, vpp-ver:pper, dénombré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('2,3', det-num, '2,3', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(participants, nc-nom, participants, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Ottawa', npp-nam, 'Ottawa', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1646, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('GRC', npp-abr, 'GRC', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dénombré, vpp-ver:pper, dénombré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('2,3', det-num, '2,3', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Ottawa', npp-nam, 'Ottawa', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1647, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Gendarmerie', nc-nam, 'Gendarmerie', [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('GRC', npp-abr, 'GRC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dénombré, vpp-ver:pper, dénombré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('2,3', det-num, '2,3', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(participants, nc-nom, participants, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Ottawa', npp-nam, 'Ottawa', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1648, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('GRC', npp-abr, 'GRC', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dénombré, vpp-ver:pper, dénombré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Ottawa', npp-nam, 'Ottawa', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1649, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('Kowa', npp-nam, 'Kowa', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prouvé, vpp-ver:pper, prouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [dr(0,dl(0,n,n),n)-1]), ex_si(dans, p-prp, dans, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si('III', adj-num, 'III', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1650, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(clinique, adj-adj, clinique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kowa', npp-nam, 'Kowa', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(démontrée, vpp-ver:pper, démontrée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1651, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('Kowa', npp-nam, 'Kowa', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prouvé, vpp-ver:pper, prouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [dr(0,dl(0,n,n),n)-1]), ex_si(dans, p-prp, dans, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si('III', adj-num, 'III', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1652, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(clinique, adj-adj, clinique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kowa', npp-nam, 'Kowa', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démontré, vpp-ver:pper, démontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1653, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kowa', npp-nam, 'Kowa', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(antiviral, adj-adj, antiviral, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tubes, nc-nom, tubes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1654, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('Kowa', npp-nam, 'Kowa', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prouvé, vpp-ver:pper, prouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1655, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empêchent, v-ver:pres, empêchent, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),dia(0,box(0,np))),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),dia(0,box(0,np))))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(propager, vinf-ver:infi, propager, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1656, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empêchent, v-ver:pres, empêchent, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),dia(0,box(0,np))),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),dia(0,box(0,np))))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(propager, vinf-ver:infi, propager, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1657, Result) :-
      prob_parse([ ex_si('L\'annonce', nc-nom, 'L\'annonce', [dr(0,np,n)-1]), ex_si(par, p-prp, par, [n-1]), ex_si('Florent', npp-nam, 'Florent', [dr(0,dl(0,n,n),np)-1]), ex_si('Pagny', npp-nam, 'Pagny', [dr(0,np,np)-1]), ex_si(de, p-prp, de, [np-1]), ex_si(son, det-det:pos, son, [dr(0,dl(0,n,n),np)-1]), ex_si(cancer, nc-nom, cancer, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(poumon, nc-nom, poumon, [dr(0,dl(0,n,n),n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(semaine, nc-nom, semaine, [dr(0,dl(0,n,n),n)-1]), ex_si(dernière, adj-adj, dernière, [n-1]), ex_si(a, v-ver:pres, a, [dl(0,n,n)-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ressurgir, vinf-ver:infi, ressurgir, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(des, det-prp:det, des, [dl(0,np,s_inf)-1]), ex_si(rumeurs, nc-nom, rumeurs, [dr(0,np,n)-1]), ex_si(sur, p-prp, sur, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),np)-1]), ex_si(réseaux, nc-nom, réseaux, [dr(0,np,n)-1]), ex_si(sociaux, adj-adj, sociaux, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(liens, nc-nom, liens, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(causalité, nc-nom, causalité, [dr(0,dl(0,n,n),n)-1]), ex_si(entre, p-prp, entre, [n-1]), ex_si(vaccination, nc-nom, vaccination, [dr(0,dl(0,n,n),n)-1]), ex_si('anti-Covid-19', adj-adj, 'anti-Covid-19', [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si(cellules, nc-nom, cellules, [let-1]), ex_si(cancéreuses, adj-adj, cancéreuses, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(1658, Result) :-
      prob_parse([ ex_si('Florent', npp-nam, 'Florent', [dr(0,np,np)-1]), ex_si('Pagny', npp-nam, 'Pagny', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tumeur, nc-nom, tumeur, [n-1]), ex_si(cancéreuse, adj-adj, cancéreuse, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(poumon, nc-nom, poumon, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1659, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(larges, adj-adj, larges, [dr(0,n,n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effectivement, adv-adv, effectivement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(tenues, vpp-ver:pper, tenues, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(récente, adj-adj, récente, [dr(0,n,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si('5.000', det-num, '5.000', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prise, vpp-ver:pper, prise, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1660, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si('5.000', det-num, '5.000', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1661, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(convoi, nc-nom, convoi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(camionneurs, nc-nom, camionneurs, [n-1]), ex_si(albertains, adj-adj, albertains, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(venu, vpp-ver:pper, venu, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(manifester, vinf-ver:infi, manifester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instauration, nc-nom, instauration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(taxe, nc-nom, taxe, [n-1]), ex_si(carbone, nc-nom, carbone, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réclamer, vinf-ver:infi, réclamer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oléoducs, nc-nom, oléoducs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1662, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(convoi, nc-nom, convoi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(camionneurs, nc-nom, camionneurs, [n-1]), ex_si(albertains, adj-adj, albertains, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(venu, vpp-ver:pper, venu, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dénoncer, vinf-ver:infi, dénoncer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(franchir, vinf-ver:infi, franchir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si('canado-américaine', adj-adj, 'canado-américaine', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1663, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(endommagent, v-ver:pres, endommagent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(doublement, adv-adv, doublement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1664, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(endommagé, vpp-ver:pper, endommagé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(double, adj-adj, double, [dr(0,n,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1665, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(routiers, nc-nom, routiers, [n-1]), ex_si(défilant, vpr-ver:ppre, défilant, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(dénoncer, vinf-ver:infi, dénoncer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(franchir, vinf-ver:infi, franchir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si('canado-américaine', adj-adj, 'canado-américaine', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(convoi, nc-nom, convoi, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si('Guinness', npp-nam, 'Guinness', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(records, nc-nom, records, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1666, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(convoi, nc-nom, convoi, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Guinness', npp-nam, 'Guinness', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(détenu, vpp-ver:pper, détenu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(convoi, nc-nom, convoi, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(défilé, vpp-ver:pper, défilé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1667, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(prise, nc-nom, prise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(parole, nc-nom, parole, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si('Christian', npp-nam, 'Christian', [dl(0,n,n)-1]), ex_si('Perronne', npp-nam, 'Perronne', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(invité, vpp-ver:pper, invité, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(auteurs, nc-nom, auteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétitions, nc-nom, pétitions, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenu, vpp-ver:pper, tenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affirmations, nc-nom, affirmations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(injections, nc-nom, injections, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,s),pp)-1]), ex_si(consistent, v-ver:pres, consistent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1668, Result) :-
      prob_parse([ ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Perronne', npp-nam, 'Perronne', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(parole, nc-nom, parole, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(invité, vpp-ver:pper, invité, [dr(0,dr(0,dl(0,np,s_pass),dl(0,np,s_inf)),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(personne, nc-nom, personne, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1669, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(prise, nc-nom, prise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(parole, nc-nom, parole, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si('Christian', npp-nam, 'Christian', [dl(0,n,n)-1]), ex_si('Perronne', npp-nam, 'Perronne', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(invité, vpp-ver:pper, invité, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(auteurs, nc-nom, auteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétitions, nc-nom, pétitions, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenu, vpp-ver:pper, tenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affirmations, nc-nom, affirmations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(injections, nc-nom, injections, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,s),pp)-1]), ex_si(consistent, v-ver:pres, consistent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1670, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Perronne', npp-nam, 'Perronne', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(injections, nc-nom, injections, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1671, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tennis, nc-nom, tennis, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abandonné, vpp-ver:pper, abandonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tournoi, nc-nom, tournoi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Open', nc-nam, 'Open', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1672, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abandonné, vpp-ver:pper, abandonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tournoi, nc-nom, tournoi, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tient, v-ver:pres, tient, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Melbourne', npp-nam, 'Melbourne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1673, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tennis, nc-nom, tennis, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(abandonné, vpp-ver:pper, abandonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Open', npp-nam, 'Open', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(respiratoires, adj-adj, respiratoires, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1674, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abandonné, vpp-ver:pper, abandonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tournoi, nc-nom, tournoi, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tient, v-ver:pres, tient, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Melbourne', npp-nam, 'Melbourne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1675, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(slovène, nc-nom, slovène, [n-1]), ex_si('Dalila', npp-nam, 'Dalila', [dl(0,n,n)-1]), ex_si('Jakupovic', npp-nam, 'Jakupovic', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abandonné, vpp-ver:pper, abandonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tournoi, nc-nom, tournoi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Open', nc-nam, 'Open', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1676, Result) :-
      prob_parse([ ex_si('Dalila', npp-nam, 'Dalila', [dr(0,np,np)-1]), ex_si('Jakupovic', npp-nam, 'Jakupovic', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(tournoi, nc-nom, tournoi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Open', nc-nam, 'Open', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(bout, nc-nom, bout, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1677, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(constituée, vpp-ver:pper, constituée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(engager, vinf-ver:infi, engager, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(poursuites, nc-nom, poursuites, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si('2.0', npp-nam, '2.0', [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1678, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(abus, nc-nom, abus, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créée, vpp-ver:pper, créée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1679, Result) :-
      prob_parse([ ex_si('Ingérer', vinf-ver:infi, 'Ingérer', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(dioxyde, nc-nom, dioxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chlore, nc-nom, chlore, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sert, v-ver:pres, sert, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1680, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(dioxyde, nc-nom, dioxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chlore, nc-nom, chlore, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),dr(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(inefficace, adj-adj, inefficace, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(dangereux, adj-adj, dangereux, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1681, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(dioxyde, nc-nom, dioxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chlore, nc-nom, chlore, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(agir, vinf-ver:infi, agir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1682, Result) :-
      prob_parse([ ex_si('Ingérer', vinf-ver:infi, 'Ingérer', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(dioxyde, nc-nom, dioxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chlore, nc-nom, chlore, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sert, v-ver:pres, sert, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1683, Result) :-
      prob_parse([ ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnés, vpp-ver:pper, condamnés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(perpétuité, nc-nom, perpétuité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(commis, vpp-ver:pper, commis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(crime, nc-nom, crime, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(autorisant, vpr-ver:ppre, autorisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1684, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(incriminées, vpp-ver:pper, incriminées, [dl(0,n,n)-1]), ex_si(figurent, v-ver:pres, figurent, [dr(0,s,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('Ministre', nc-nom, 'Ministre', [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si('Justin', npp-nam, 'Justin', [dl(0,n,n)-1]), ex_si('Trudeau', npp-nam, 'Trudeau', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reine, nc-nom, reine, [n-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pape', npp-nam, 'Pape', [n-1]), ex_si('François', npp-nam, 'François', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1685, Result) :-
      prob_parse([ ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si(condamnations, nc-nom, condamnations, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prononcées, vpp-ver:pper, prononcées, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(crime, nc-nom, crime, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si('Justin', npp-nam, 'Justin', [dr(0,np,np)-1]), ex_si('Trudeau', npp-nam, 'Trudeau', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si('Ministre', nc-nom, 'Ministre', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1686, Result) :-
      prob_parse([ ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnés, vpp-ver:pper, condamnés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(perpétuité, nc-nom, perpétuité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(commis, vpp-ver:pper, commis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(crime, nc-nom, crime, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(autorisant, vpr-ver:ppre, autorisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1687, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(dirigeant, nc-nom, dirigeant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si('anti-Covid-19', adj-adj, 'anti-Covid-19', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1688, Result) :-
      prob_parse([ ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnés, vpp-ver:pper, condamnés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(perpétuité, nc-nom, perpétuité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(commis, vpp-ver:pper, commis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(crime, nc-nom, crime, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(autorisant, vpr-ver:ppre, autorisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1689, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(incriminées, vpp-ver:pper, incriminées, [dl(0,n,n)-1]), ex_si(figurent, v-ver:pres, figurent, [dr(0,s,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('Ministre', nc-nom, 'Ministre', [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si('Justin', npp-nam, 'Justin', [dl(0,n,n)-1]), ex_si('Trudeau', npp-nam, 'Trudeau', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reine, nc-nom, reine, [n-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pape', npp-nam, 'Pape', [n-1]), ex_si('François', npp-nam, 'François', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1690, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Pape', npp-nam, 'Pape', [n-1]), ex_si('François', npp-nam, 'François', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(perpétuité, nc-nom, perpétuité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(crime, nc-nom, crime, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(médical, adj-adj, médical, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1691, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(masque, nc-nom, masque, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(entraîner, vinf-ver:infi, entraîner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intoxication, nc-nom, intoxication, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grave, adj-adj, grave, [dr(0,n,n)-1]), ex_si(manque, nc-nom, manque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lésions, nc-nom, lésions, [n-1]), ex_si(irréversibles, adj-adj, irréversibles, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(cerveau, nc-nom, cerveau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1692, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(masque, nc-nom, masque, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(particulier, adj-adj, particulier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1693, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(masque, nc-nom, masque, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grave, adj-adj, grave, [dr(0,n,n)-1]), ex_si(manque, nc-nom, manque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(pouvant, vpr-ver:ppre, pouvant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(mener, vinf-ver:infi, mener, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1694, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(masque, nc-nom, masque, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grave, adj-adj, grave, [dr(0,n,n)-1]), ex_si(hypoxie, nc-nom, hypoxie, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intoxication, nc-nom, intoxication, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1695, Result) :-
      prob_parse([ ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Cabrol', npp-nam, 'Cabrol', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(pionnier, nc-nom, pionnier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(greffe, nc-nom, greffe, [n-1]), ex_si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2017, adj-num, 2017, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1696, Result) :-
      prob_parse([ ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Cabrol', npp-nam, 'Cabrol', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,np,s_ppart)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prétend, v-ver:pres, prétend, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si('Facebook', npp-nam, 'Facebook', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1697, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transfusion, nc-nom, transfusion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CHU', npp-abr, 'CHU', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lille', npp-nam, 'Lille', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(refuse, v-ver:pres, refuse, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dons, nc-nom, dons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('COVID-19', npp-abr, 'COVID-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1698, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('CHU', npp-abr, 'CHU', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lille', npp-nam, 'Lille', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prélever, vinf-ver:infi, prélever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1699, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('CHU', npp-abr, 'CHU', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lille', npp-nam, 'Lille', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(consignes, nc-nom, consignes, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(don, nc-nom, don, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1700, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('CHU', npp-abr, 'CHU', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lille', npp-nam, 'Lille', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prélever, vinf-ver:infi, prélever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1701, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(virale, adj-adj, virale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Côte', nc-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Suisse', npp-nam, 'Suisse', [n-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(admis, vpp-ver:pper, admis, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1702, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('non-vaccinées', adj-adj, 'non-vaccinées', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(admises, vpp-ver:pper, admises, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(ivoiriens, adj-adj, ivoiriens, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(belges, adj-adj, belges, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(suisses, adj-adj, suisses, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(virale, adj-adj, virale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1703, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(virale, adj-adj, virale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Côte', nc-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Suisse', npp-nam, 'Suisse', [n-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(admis, vpp-ver:pper, admis, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1704, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('non-vaccinées', adj-adj, 'non-vaccinées', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(admises, vpp-ver:pper, admises, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(grecs, adj-adj, grecs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1705, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permettent, v-ver:pres, permettent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(affirmer, vinf-ver:infi, affirmer, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(multiplication, nc-nom, multiplication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rappels, nc-nom, rappels, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(même, adv-adv, même, [dl(1,s,s)-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inverse, nc-nom, inverse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1706, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(multiplication, nc-nom, multiplication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rappels, nc-nom, rappels, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1707, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(augmente, v-ver:pres, augmente, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1708, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(davantage, adv-adv, davantage, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1709, Result) :-
      prob_parse([ ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(difficultés, nc-nom, difficultés, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1710, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(difficultés, nc-nom, difficultés, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(représentent, v-ver:pres, représentent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(réel, adj-adj, réel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1711, Result) :-
      prob_parse([ ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(difficultés, nc-nom, difficultés, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1712, Result) :-
      prob_parse([ ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si(faute, nc-nom, faute, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1713, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(atteintes, vpp-ver:pper, atteintes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(comorbidités, nc-nom, comorbidités, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inutile, adj-adj, inutile, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1714, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(confirme, v-ver:pres, confirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(comorbidités, nc-nom, comorbidités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1715, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(atteintes, vpp-ver:pper, atteintes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(comorbidités, nc-nom, comorbidités, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inutile, adj-adj, inutile, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1716, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(confirme, v-ver:pres, confirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),np)-1]), ex_si(zéro, adj-num, zéro, [dr(0,np,n)-1]), ex_si(comorbidités, nc-nom, comorbidités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1717, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(atteintes, vpp-ver:pper, atteintes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(comorbidités, nc-nom, comorbidités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1718, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(confirme, v-ver:pres, confirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(comorbidités, nc-nom, comorbidités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1719, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('95,58', det-num, '95,58', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(recensés, vpp-ver:pper, recensés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(complètement, adv-adv, complètement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1720, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pourcentage, nc-nom, pourcentage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(complètement, adv-adv, complètement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1721, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('95,58', det-num, '95,58', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(recensés, vpp-ver:pper, recensés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(complètement, adv-adv, complètement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1722, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1723, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(officielles, adj-adj, officielles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si(indiquent, v-ver:pres, indiquent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(entièrement, adv-adv, entièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(développeraient, v-ver:cond, développeraient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('SIDA', npp-abr, 'SIDA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1724, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Omicron', npp-nam, 'Omicron', [np-1]), ex_si(suggèrent, v-ver:pres, suggèrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(complètement, adv-adv, complètement, [n-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(syndrome, nc-nom, syndrome, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(immunodéficience, nc-nom, immunodéficience, [n-1]), ex_si(acquise, vpp-ver:pper, acquise, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('SIDA', npp-abr, 'SIDA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(induit, vpp-ver:pper, induit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1725, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(certificat, nc-nom, certificat, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(numérique, adj-adj, numérique, [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(bientôt, adv-adv, bientôt, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(conditionné, vpp-ver:pper, conditionné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réalisation, nc-nom, réalisation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(six, det-num, six, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(complète, adj-adj, complète, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(délai, nc-nom, délai, [n-1]), ex_si(supplémentaire, adj-adj, supplémentaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1726, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(certificat, nc-nom, certificat, [n-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(numérique, adj-adj, numérique, [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(valable, adj-adj, valable, [dl(0,n,n)-1]), ex_si(neuf, det-num, neuf, [dr(0,dl(1,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(faute, nc-nom, faute, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1727, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(valable, adj-adj, valable, [dl(0,n,n)-1]), ex_si(neuf, det-num, neuf, [dr(0,dl(1,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(faute, nc-nom, faute, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1728, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(valable, adj-adj, valable, [dl(0,n,n)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1729, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(libres, adj-adj, libres, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(désigner, vinf-ver:infi, désigner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(validité, nc-nom, validité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1730, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(décide, v-ver:pres, décide, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(validité, nc-nom, validité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1731, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(cesse, v-ver:pres, cesse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),n)-1]), ex_si(fin, nc-nom, fin, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(prétendent, v-ver:pres, prétendent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(jugés, vpp-ver:pper, jugés, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), ex_si(inefficaces, adj-adj, inefficaces, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1732, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(continue, v-ver:pres, continue, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1733, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(nettement, adv-adv, nettement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(important, adj-adj, important, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1734, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(injections, nc-nom, injections, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(consistent, v-ver:pres, consistent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jumeaux, nc-nom, jumeaux, [n-1]), ex_si('Bogdanoff', npp-nam, 'Bogdanoff', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(gens, nc-nom, gens, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(victimes, vpp-ver:pper, victimes, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,s,s),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(dosées, vpp-ver:pper, dosées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1735, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(obsèques, nc-nom, obsèques, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(frères, nc-nom, frères, [n-1]), ex_si('Bogdanoff', npp-nam, 'Bogdanoff', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(deux, adj-num, deux, [np-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(décédés, vpp-ver:pper, décédés, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chanteur, nc-nom, chanteur, [n-1]), ex_si('Francis', npp-nam, 'Francis', [dl(0,n,n)-1]), ex_si('Lalanne', npp-nam, 'Lalanne', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réaffirmé, vpp-ver:pper, réaffirmé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faire, vinf-ver:infi, faire, [cl_r-1]), ex_si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(assurant, vpr-ver:ppre, assurant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(injections, nc-nom, injections, [n-1]), ex_si(consisteraient, v-ver:impf, consisteraient, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jumeaux, nc-nom, jumeaux, [dr(0,np,n)-1]), ex_si(car, cc-kon, car, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,s,s),s)-1]), ex_si(majorité, nc-nom, majorité, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(gens, nc-nom, gens, [dr(0,dl(0,n,n),n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(victimes, vpp-ver:pper, victimes, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(dosées, vpp-ver:pper, dosées, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1736, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(frères, nc-nom, frères, [n-1]), ex_si('Bogdanoff', npp-nam, 'Bogdanoff', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédés, vpp-ver:pper, décédés, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1737, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('non-vaccinées', adj-adj, 'non-vaccinées', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(admises, vpp-ver:pper, admises, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(critiques, adj-adj, critiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(nombreuses, adj-adj, nombreuses, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinées, nc-nom, vaccinées, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1738, Result) :-
      prob_parse([ ex_si('Sept', det-num, 'Sept', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(huit, nc-num, huit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(réanimation, nc-nom, réanimation, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1739, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('non-vaccinées', adj-adj, 'non-vaccinées', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(admises, vpp-ver:pper, admises, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(critiques, adj-adj, critiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(généralement, adv-adv, généralement, [dl(1,s,s)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(nombreuses, adj-adj, nombreuses, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinées, nc-nom, vaccinées, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1740, Result) :-
      prob_parse([ ex_si('Sept', det-num, 'Sept', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(huit, nc-num, huit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(réanimation, nc-nom, réanimation, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(hospitalier, adj-adj, hospitalier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Haguenau', npp-nam, 'Haguenau', [np-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),n)-1]), ex_si(nuit, nc-nom, nuit, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1741, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Centres', nc-nam, 'Centres', [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prévention, nc-nom, prévention, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(neuf, det-num, neuf, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attribués, vpp-ver:pper, attribués, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('Janssen', npp-nam, 'Janssen', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('non-autorisé', vpp-ver:pper, 'non-autorisé', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mineurs, nc-nom, mineurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1742, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('Janssen', npp-nam, 'Janssen', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mineurs, nc-nom, mineurs, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1743, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pharmacovigilance, nc-nom, pharmacovigilance, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('VAERS', npp-abr, 'VAERS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(gérée, vpp-ver:pper, gérée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Centres', nc-nam, 'Centres', [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prévention, nc-nom, prévention, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(état, nc-nom, état, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(9, det-num, 9, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1744, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si('VAERS', npp-abr, 'VAERS', [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(état, nc-nom, état, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('30.500', det-num, '30.500', [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(234, det-num, 234, [dr(0,np,n)-1]), ex_si(situations, nc-nom, situations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(handicap, nc-nom, handicap, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(54, det-num, 54, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mineurs, nc-nom, mineurs, [n-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1745, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(enceinte, nc-nom, enceinte, [dl(0,n,n)-1]), ex_si(infectée, vpp-ver:pper, infectée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(simultanément, adv-adv, simultanément, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(rapporté, vpp-ver:pper, rapporté, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(israéliens, adj-adj, israéliens, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1746, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(double, adj-adj, double, [dr(0,n,n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(grippe, nc-nom, grippe, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(enceinte, nc-nom, enceinte, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(inédite, adj-adj, inédite, [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1747, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(double, adj-adj, double, [dr(0,n,n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(grippe, nc-nom, grippe, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(surnommée, vpp-ver:pper, surnommée, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(flurona, nc-nom, flurona, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(résultat, nc-nom, résultat, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1748, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(flurona, nc-nom, flurona, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(inédite, adj-adj, inédite, [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1749, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(souhaité, vpp-ver:pper, souhaité, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(distribuer, vinf-ver:infi, distribuer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(bracelets, nc-nom, bracelets, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(large, adj-adj, large, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(consigne, nc-nom, consigne, [n-1]), ex_si(polémique, adj-adj, polémique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(finalement, adv-adv, finalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(annulée, vpp-ver:pper, annulée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vigueur, nc-nom, vigueur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1750, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(consigne, nc-nom, consigne, [n-1]), ex_si(israélienne, adj-adj, israélienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(distribuer, vinf-ver:infi, distribuer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bracelets, nc-nom, bracelets, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccinés, vpp-nom, vaccinés, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(supprimée, vpp-ver:pper, supprimée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vigueur, nc-nom, vigueur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1751, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(équivalent, adj-adj, équivalent, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(commerces, nc-nom, commerces, [n-1]), ex_si('non-essentiels', adj-adj, 'non-essentiels', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(superficie, nc-nom, superficie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(supérieure, adj-adj, supérieure, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1752, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(commerces, nc-nom, commerces, [n-1]), ex_si('non-essentiels', adj-adj, 'non-essentiels', [dl(0,n,n)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(superficie, nc-nom, superficie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(supérieure, adj-adj, supérieure, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1753, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(commerces, nc-nom, commerces, [n-1]), ex_si('non-essentiels', adj-adj, 'non-essentiels', [dl(0,n,n)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(superficie, nc-nom, superficie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(supérieure, adj-adj, supérieure, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1754, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si('non-essentiel', adj-adj, 'non-essentiel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(superficie, nc-nom, superficie, [n-1]), ex_si(200, det-num, 200, [dr(0,dl(0,n,n),n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1755, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(commerces, nc-nom, commerces, [n-1]), ex_si('non-essentiels', adj-adj, 'non-essentiels', [dl(0,n,n)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(superficie, nc-nom, superficie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(supérieure, adj-adj, supérieure, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1756, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(essentiel, adj-adj, essentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(superficie, nc-nom, superficie, [n-1]), ex_si(50, det-num, 50, [dr(0,dl(0,n,n),n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1757, Result) :-
      prob_parse([ ex_si('Tousser', vinf-ver:infi, 'Tousser', [dl(0,np,s_inf)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(éternuer, vinf-ver:infi, éternuer, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(peu, adv-adv, peu, [n-1]), ex_si(interdit, vpp-ver:pper, interdit, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(puni, vpp-ver:pper, puni, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(uniquement, adv-adv, uniquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1758, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(australienne, adj-adj, australienne, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(punit, v-ver:pres, punit, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(éternuent, v-ver:pres, éternuent, [dl(0,np,s)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(toussent, v-ver:pres, toussent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1759, Result) :-
      prob_parse([ ex_si('L\'interdiction', nc-nom, 'L\'interdiction', [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(éternuer, vinf-ver:infi, éternuer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ou, cc-kon, ou, [dl(0,np,s_inf)-1]), ex_si(tousser, vinf-ver:infi, tousser, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,np,s_inf)-1]), ex_si(volontairement, adv-adv, volontairement, [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [let-1]), ex_si(des, det-prp:det, des, [dr(0,dl(1,s,s),np)-1]), ex_si(autres, adj-adj, autres, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [dr(0,n,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(place, nc-nom, place, [dr(0,pp,n)-1]), ex_si(dès, p-prp, dès, [n-1]), ex_si(2020, pro-num, 2020, [dr(0,dl(1,s,s),np)-1]), ex_si(en, p-prp, en, [np-1]), ex_si('Australie', npp-nam, 'Australie', [dr(0,dl(1,s,s),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(elle, cls-pro:per, elle, [dr(0,dl(0,s,s),s)-1]), ex_si('s\'', clr-pro:per, 's\'', [np-1]), ex_si(applique, v-ver:pres, applique, [cl_r-1]), ex_si(à, p-prp, à, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(tous, pro-pro:ind, tous, [dr(0,pp_a,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [let-1]), ex_si(ou, cc-kon, ou, [dl(0,np,s_pass)-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si('.', ponct-pun, '.', [dl(1,s,s)-1])], Result).
sent(1760, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(australienne, adj-adj, australienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(punit, v-ver:pres, punit, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(éternuent, v-ver:pres, éternuent, [dl(0,np,s)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(toussent, v-ver:pres, toussent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1761, Result) :-
      prob_parse([ ex_si('L\'interdiction', nc-nom, 'L\'interdiction', [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(éternuer, vinf-ver:infi, éternuer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ou, cc-kon, ou, [dl(0,np,s_inf)-1]), ex_si(tousser, vinf-ver:infi, tousser, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,np,s_inf)-1]), ex_si(volontairement, adv-adv, volontairement, [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [let-1]), ex_si(des, det-prp:det, des, [dr(0,dl(1,s,s),np)-1]), ex_si(autres, adj-adj, autres, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [dr(0,n,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(place, nc-nom, place, [dr(0,pp,n)-1]), ex_si(dès, p-prp, dès, [n-1]), ex_si(2020, pro-num, 2020, [dr(0,dl(1,s,s),np)-1]), ex_si(en, p-prp, en, [np-1]), ex_si('Australie', npp-nam, 'Australie', [dr(0,dl(1,s,s),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(elle, cls-pro:per, elle, [dr(0,dl(0,s,s),s)-1]), ex_si('s\'', clr-pro:per, 's\'', [np-1]), ex_si(applique, v-ver:pres, applique, [cl_r-1]), ex_si(à, p-prp, à, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(tous, pro-pro:ind, tous, [dr(0,pp_a,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [let-1]), ex_si(ou, cc-kon, ou, [dl(0,np,s_pass)-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si('.', ponct-pun, '.', [dl(1,s,s)-1])], Result).
sent(1762, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tousser, vinf-ver:infi, tousser, [dl(0,np,s_inf)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(éternuer, vinf-ver:infi, éternuer, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(interdit, vpp-ver:pper, interdit, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(puni, vpp-ver:pper, puni, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(uniquement, adv-adv, uniquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1763, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(appel, nc-nom, appel, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(contraire, nc-nom, contraire, [n-1]), ex_si(estimé, vpp-ver:pper, estimé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(vu, nc-nom, vu, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incidence, nc-nom, incidence, [n-1]), ex_si(élevés, vpp-ver:pper, élevés, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si(scolarisés, vpp-ver:pper, scolarisés, [dl(0,n,n)-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(envisagée, vpp-ver:pper, envisagée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(situations, nc-nom, situations, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(nationales, adj-adj, nationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1764, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(jeunes, nc-nom, jeunes, [dr(0,n,n)-1]), ex_si(scolarisés, vpp-ver:pper, scolarisés, [dl(0,n,n)-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(envisagée, vpp-ver:pper, envisagée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(situations, nc-nom, situations, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(nationales, adj-adj, nationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1765, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(confidentiels, adj-adj, confidentiels, [dl(0,n,n)-1]), ex_si(divulgués, vpp-ver:pper, divulgués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(révèlent, v-ver:pres, révèlent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('Pfizer-BioNTech', npp-nam, 'Pfizer-BioNTech', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('1.200', det-num, '1.200', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(3, det-num, 3, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(participants, nc-nom, participants, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1766, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(divulgués, vpp-ver:pper, divulgués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(révèlent, v-ver:pres, révèlent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(3, det-num, 3, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mortalité, nc-nom, mortalité, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1767, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(gonflent, v-ver:pres, gonflent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(artificiellement, adv-adv, artificiellement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(réanimation, nc-nom, réanimation, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1768, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(capture, nc-nom, capture, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(écran, nc-nom, écran, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(récente, adj-adj, récente, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('BFMTV', npp-abr, 'BFMTV', [np-1]), ex_si(constitue, v-ver:pres, constitue, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(gonflent, v-ver:pres, gonflent, [dr(0,dl(0,np,s),np)-1]), ex_si(artificiellement, adv-adv, artificiellement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(réanimation, nc-nom, réanimation, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1769, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(première, det-num, première, [dr(0,np,n)-1]), ex_si(instance, nc-nom, instance, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(jugé, vpp-ver:pper, jugé, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,n,n))-1]), ex_si(illégale, adj-adj, illégale, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [dr(0,n,n)-1]), ex_si('Safe', npp-nam, 'Safe', [dr(0,n,n)-1]), ex_si('Ticket', npp-nam, 'Ticket', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Wallonie', npp-nam, 'Wallonie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(conformer, vinf-ver:infi, conformer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(astreinte, nc-nom, astreinte, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1770, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(wallonne, adj-adj, wallonne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnée, vpp-ver:pper, condamnée, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(corriger, vinf-ver:infi, corriger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(illégalité, nc-nom, illégalité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [dr(0,n,n)-1]), ex_si('Safe', npp-nam, 'Safe', [dr(0,n,n)-1]), ex_si('Ticket', npp-nam, 'Ticket', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(astreinte, nc-nom, astreinte, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1771, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(première, det-num, première, [dr(0,np,n)-1]), ex_si(instance, nc-nom, instance, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Wallonie', npp-nam, 'Wallonie', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [dr(0,n,n)-1]), ex_si('Safe', npp-nam, 'Safe', [dr(0,n,n)-1]), ex_si('Ticket', npp-nam, 'Ticket', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(suspendu, vpp-ver:pper, suspendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(suspendu, vpp-ver:pper, suspendu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(que, adv-adv, que, [dr(0,pp,pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(constitutionnelle, adj-adj, constitutionnelle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1772, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(première, det-num, première, [dr(0,np,n)-1]), ex_si(instance, nc-nom, instance, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Wallonie', npp-nam, 'Wallonie', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(suspend, v-ver:pres, suspend, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [dr(0,n,n)-1]), ex_si('Safe', npp-nam, 'Safe', [dr(0,n,n)-1]), ex_si('Ticket', npp-nam, 'Ticket', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(seule, adv-adv, seule, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(constitutionnelle, adj-adj, constitutionnelle, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(suspendre, vinf-ver:infi, suspendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1773, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bilan, nc-nom, bilan, [n-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Santé', nc-nam, 'Santé', [dr(0,np,np)-1]), ex_si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(état, nc-nom, état, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('120.832', det-num, '120.832', [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1774, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('Santé', nc-nam, 'Santé', [dr(0,np,np)-1]), ex_si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('55.000', det-num, '55.000', [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('COVID', npp-abr, 'COVID', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1775, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bilan, nc-nom, bilan, [n-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Santé', nc-nam, 'Santé', [dr(0,np,np)-1]), ex_si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(état, nc-nom, état, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('120.832', det-num, '120.832', [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1776, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('Santé', npp-nam, 'Santé', [dr(0,np,np)-1]), ex_si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('55.000', det-num, '55.000', [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('COVID', npp-abr, 'COVID', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1777, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(référence, nc-nom, référence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AVC', nc-abr, 'AVC', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(constaté, vpp-ver:pper, constaté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('AVC', nc-abr, 'AVC', [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(adultes, nc-nom, adultes, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(adolescents, nc-nom, adolescents, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1778, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(référence, nc-nom, référence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AVC', nc-abr, 'AVC', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(constaté, vpp-ver:pper, constaté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('AVC', nc-abr, 'AVC', [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(adultes, nc-nom, adultes, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(adolescents, nc-nom, adolescents, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1779, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(injectent, v-ver:pres, injectent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lames, nc-nom, lames, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rasoir, nc-nom, rasoir, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(flux, nc-nom, flux, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chimiste, nc-nom, chimiste, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avance, v-ver:pres, avance, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(phénomène, nc-nom, phénomène, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hydroxyde, nc-nom, hydroxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(graphène, nc-nom, graphène, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1780, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(contiennent, v-ver:pres, contiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(graphène, nc-nom, graphène, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(dérivés, vpp-ver:pper, dérivés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1781, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(molécule, nc-nom, molécule, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hydrocarbure, nc-nom, hydrocarbure, [n-1]), ex_si(aromatique, adj-adj, aromatique, [dl(0,n,n)-1]), ex_si(polycyclique, adj-adj, polycyclique, [dl(0,n,n)-1]), ex_si(dessinée, vpp-ver:pper, dessinée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Andreas', npp-nam, 'Andreas', [dr(0,np,np)-1]), ex_si('Noack', npp-nam, 'Noack', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(insoluble, adj-adj, insoluble, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(milieu, nc-nom, milieu, [n-1]), ex_si(aqueux, adj-adj, aqueux, [dl(0,n,n)-1]), ex_si(tel, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cellules, nc-nom, cellules, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1782, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydrocarbure, nc-nom, hydrocarbure, [n-1]), ex_si(aromatique, adj-adj, aromatique, [dl(0,n,n)-1]), ex_si(polycyclique, adj-adj, polycyclique, [dl(0,n,n)-1]), ex_si(circule, v-ver:pres, circule, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(milieu, nc-nom, milieu, [n-1]), ex_si(aqueux, adj-adj, aqueux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(donc, adv-adv, donc, [dr(0,pp,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1783, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(exprimée, vpp-ver:pper, exprimée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(mercredi, nc-nom, mercredi, [dr(0,n,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(évoquer, vinf-ver:infi, évoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1784, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(appel, nc-nom, appel, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1785, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(consiste, v-ver:pres, consiste, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bonnes, adj-adj, bonnes, [dr(0,n,n)-1]), ex_si(pratiques, nc-nom, pratiques, [n-1]), ex_si(médicales, adj-adj, médicales, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(légale, adj-adj, légale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1786, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(contient, v-ver:pres, contient, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mauvaises, adj-adj, mauvaises, [dr(0,n,n)-1]), ex_si(pratiques, nc-nom, pratiques, [n-1]), ex_si(médicales, adj-adj, médicales, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éviter, vinf-ver:infi, éviter, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1787, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(principes, nc-nom, principes, [n-1]), ex_si(éthiques, adj-adj, éthiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expérimentation, nc-nom, expérimentation, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(créée, vpp-ver:pper, créée, [dr(0,dl(0,n,n),pp)-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1788, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1789, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(principes, nc-nom, principes, [n-1]), ex_si(éthiques, adj-adj, éthiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expérimentation, nc-nom, expérimentation, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(créée, vpp-ver:pper, créée, [dr(0,dl(0,n,n),pp)-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1790, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1791, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(principes, nc-nom, principes, [n-1]), ex_si(éthiques, adj-adj, éthiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expérimentation, nc-nom, expérimentation, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(créée, vpp-ver:pper, créée, [dr(0,dl(0,n,n),pp)-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1792, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1793, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(principes, nc-nom, principes, [n-1]), ex_si(éthiques, adj-adj, éthiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expérimentation, nc-nom, expérimentation, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(créée, vpp-ver:pper, créée, [dr(0,dl(0,n,n),pp)-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1794, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1795, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(légale, adj-adj, légale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(suppression, nc-nom, suppression, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(potentielle, adj-adj, potentielle, [dr(0,n,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1796, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(potentielle, adj-adj, potentielle, [dr(0,n,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1797, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(soignants, nc-nom, soignants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CHU', npp-abr, 'CHU', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(démentent, v-ver:pres, démentent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(cacher, vinf-ver:infi, cacher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(admis, vpp-ver:pper, admis, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1798, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(soignants, nc-nom, soignants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CHU', npp-abr, 'CHU', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(cacher, vinf-ver:infi, cacher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si(admis, vpp-ver:pper, admis, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1799, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décalé, vpp-ver:pper, décalé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dates, nc-nom, dates, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(péremption, nc-nom, péremption, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1800, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dates, nc-nom, dates, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(péremption, nc-nom, péremption, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(changé, vpp-ver:pper, changé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1801, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décalé, vpp-ver:pper, décalé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dates, nc-nom, dates, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(péremption, nc-nom, péremption, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1802, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dates, nc-nom, dates, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(péremption, nc-nom, péremption, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décalés, vpp-ver:pper, décalés, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1803, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(bas, adj-adj, bas, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(7, det-num, 7, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(vaccinée, vpp-ver:pper, vaccinée, [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1804, Result) :-
      prob_parse([ ex_si('Pourtant', adv-adv, 'Pourtant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(apparemment, adv-adv, apparemment, [dl(1,s,s)-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,np,s))-1]), ex_si(durement, adv-adv, durement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1805, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(égal, adj-adj, égal, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('7%.', nc-abr, '7%.', [dr(0,np,n)-1])], Result).
sent(1806, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(bas, adj-adj, bas, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(7, det-num, 7, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(vaccinée, vpp-ver:pper, vaccinée, [dl(0,n,n)-1]), ex_si(début, nc-nom, début, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1807, Result) :-
      prob_parse([ ex_si('Pourtant', adv-adv, 'Pourtant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(apparemment, adv-adv, apparemment, [dl(1,s,s)-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,np,s))-1]), ex_si(durement, adv-adv, durement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1808, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,np,s))-1]), ex_si(durement, adv-adv, durement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(frappées, vpp-ver:pper, frappées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1809, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(tirer, vinf-ver:infi, tirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(causalité, nc-nom, causalité, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si(faible, adj-adj, faible, [dr(0,n,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1810, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(tirer, vinf-ver:infi, tirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(causal, adj-adj, causal, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moindre, adj-adj, moindre, [dr(0,n,n)-1]), ex_si(prévalence, nc-nom, prévalence, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1811, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(courant, adj-adj, courant, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('5-11', adj-num, '5-11', [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(risquant, vpr-ver:ppre, risquant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1812, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('5-11', adj-num, '5-11', [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(risquant, vpr-ver:ppre, risquant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pouvaient, v-ver:impf, pouvaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1813, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Israël', npp-nam, 'Israël', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cambodge', npp-nam, 'Cambodge', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Venezuela', npp-nam, 'Venezuela', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Cuba', npp-nam, 'Cuba', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1814, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cambodge', npp-nam, 'Cambodge', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(choisi, vpp-ver:pper, choisi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1815, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(constitueraient, v-ver:cond, constitueraient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tueraient, v-ver:impf, tueraient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(multiplier, vinf-ver:infi, multiplier, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(empoisonner, vinf-ver:infi, empoisonner, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(lentement, adv-adv, lentement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1816, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(empoisonner, vinf-ver:infi, empoisonner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(lentement, adv-adv, lentement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1817, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARNm', nc-abr, 'ARNm', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(contiennent, v-ver:pres, contiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(transmettent, v-ver:pres, transmettent, [dr(0,dl(0,np,s),np)-1]), ex_si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mode, nc-nom, mode, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(génétique, adj-adj, génétique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(construite, vpp-ver:pper, construite, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1818, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARNm', nc-abr, 'ARNm', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1819, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('SARS-CoV-2', npp-nam, 'SARS-CoV-2', [n-1]), ex_si(codée, vpp-ver:pper, codée, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARNm', nc-nom, 'ARNm', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ressemble, v-ver:pres, ressemble, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(protéines, nc-nom, protéines, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(contient, v-ver:pres, contient, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1820, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retrouvent, v-ver:pres, retrouvent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('SARS-CoV-2', npp-nam, 'SARS-CoV-2', [n-1]), ex_si(codée, vpp-ver:pper, codée, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('ARNm', nc-abr, 'ARNm', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1821, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(endommager, vinf-ver:infi, endommager, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cellules, nc-nom, cellules, [n-1]), ex_si(endothéliales, adj-adj, endothéliales, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaisseaux, nc-nom, vaisseaux, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(faudrait, v-ver:cond, faudrait, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(flux, nc-nom, flux, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1822, Result) :-
      prob_parse([ ex_si('Or', cc-kon, 'Or', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si(présente, adj-adj, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(flux, nc-nom, flux, [n-1]), ex_si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1823, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(endommager, vinf-ver:infi, endommager, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cellules, nc-nom, cellules, [n-1]), ex_si(endothéliales, adj-adj, endothéliales, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaisseaux, nc-nom, vaisseaux, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1824, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(circule, v-ver:pres, circule, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(détruit, v-ver:pres, détruit, [dr(0,dl(0,np,s),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(vaisseaux, nc-nom, vaisseaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1825, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(protéines, nc-nom, protéines, [n-1]), ex_si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), ex_si(détruisent, v-ver:pres, détruisent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parois, nc-nom, parois, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaisseaux, nc-nom, vaisseaux, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(circulant, vpr-ver:ppre, circulant, [dl(0,np,s_ppres)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1826, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(probabilité, nc-nom, probabilité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réaction, nc-nom, réaction, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(due, vpp-ver:pper, due, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(développée, vpp-ver:pper, développée, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(extraordinairement, adv-adv, extraordinairement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(faible, adj-adj, faible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1827, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(probabilité, nc-nom, probabilité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réaction, nc-nom, réaction, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(due, vpp-ver:pper, due, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(développée, vpp-ver:pper, développée, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(protéine, nc-nom, protéine, [n-1]), ex_si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(élevée, vpp-ver:pper, élevée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1828, Result) :-
      prob_parse([ ex_si('Qu\'', cs-kon, 'Qu\'', [dr(0,np,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(génère, v-ver:pres, génère, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('auto-immune', adj-adj, 'auto-immune', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(nature, nc-nom, nature, [n-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1829, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(génère, v-ver:pres, génère, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('auto-immune', adj-adj, 'auto-immune', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1830, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(référence, nc-nom, référence, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('IMDb', adj-abr, 'IMDb', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1831, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('IMDb', npp-abr, 'IMDb', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(intitulé, vpp-ver:pper, intitulé, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(variant, nc-nom, variant, [n-1]), ex_si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(sorti, vpp-ver:pper, sorti, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1963, pro-num, 1963, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1832, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tend, v-ver:pres, tend, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(aggravée, vpp-ver:pper, aggravée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(force, v-ver:pres, force, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(extraordinaires, adj-adj, extraordinaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(report, nc-nom, report, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(urgents, adj-adj, urgents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1833, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(subissent, v-ver:pres, subissent, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tension, nc-nom, tension, [n-1]), ex_si(saisonnière, adj-adj, saisonnière, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1834, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tend, v-ver:pres, tend, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(aggravée, vpp-ver:pper, aggravée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(force, v-ver:pres, force, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(extraordinaires, adj-adj, extraordinaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(report, nc-nom, report, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(urgents, adj-adj, urgents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1835, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si(subissent, v-ver:pres, subissent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tension, nc-nom, tension, [n-1]), ex_si(saisonnière, adj-adj, saisonnière, [dl(0,n,n)-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(aggravée, vpp-ver:pper, aggravée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1836, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tend, v-ver:pres, tend, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(aggravée, vpp-ver:pper, aggravée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(force, v-ver:pres, force, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(extraordinaires, adj-adj, extraordinaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(report, nc-nom, report, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(urgents, adj-adj, urgents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1837, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reporté, vpp-ver:pper, reporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(urgents, adj-adj, urgents, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1838, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('IRM', nc-abr, 'IRM', [n-1]), ex_si(cérébrales, adj-adj, cérébrales, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(similaires, adj-adj, similaires, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cerveau, nc-nom, cerveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Gilbert', npp-nam, 'Gilbert', [dr(0,np,np)-1]), ex_si('Deray', npp-nam, 'Deray', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(néphrologie, nc-nom, néphrologie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(parisien, adj-adj, parisien, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plateau, nc-nom, plateau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('C', nc-abr, 'C', [np-1]), ex_si(à, p-prp, à, [np-1]), ex_si(vous, pro-pro:per, vous, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(23, adj-num, 23, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1839, Result) :-
      prob_parse([ ex_si('Gilbert', npp-nam, 'Gilbert', [dr(0,np,np)-1]), ex_si('Deray', npp-nam, 'Deray', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(cardiologue, nc-nom, cardiologue, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(parisien, adj-adj, parisien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1840, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('IRM', nc-abr, 'IRM', [n-1]), ex_si(cérébrales, adj-adj, cérébrales, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(comparés, vpp-ver:pper, comparés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cerveau, nc-nom, cerveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1841, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('IRM', nc-abr, 'IRM', [n-1]), ex_si(cérébrales, adj-adj, cérébrales, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(similaires, adj-adj, similaires, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cerveau, nc-nom, cerveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1842, Result) :-
      prob_parse([ ex_si('Ángel', npp-nam, 'Ángel', [dr(0,np,np)-1]), ex_si('Cuevas', npp-nam, 'Cuevas', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(prêtre, nc-nom, prêtre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si('Notre-Dame', npp-nam, 'Notre-Dame', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Guadalupe', npp-nam, 'Guadalupe', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(évanoui, vpp-ver:pper, évanoui, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(messe, nc-nom, messe, [n-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,np,s_ppart)-1])], Result).
sent(1843, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('Ángel', npp-nam, 'Ángel', [dl(0,n,n)-1]), ex_si('Cuevas', npp-nam, 'Cuevas', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vivant, adj-adj, vivant, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(rencontrer, vinf-ver:infi, rencontrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(évanouissement, nc-nom, évanouissement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1844, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('Ángel', npp-nam, 'Ángel', [dl(0,n,n)-1]), ex_si('Cuevas', npp-nam, 'Cuevas', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(évanouissement, nc-nom, évanouissement, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(conséquence, nc-nom, conséquence, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1845, Result) :-
      prob_parse([ ex_si('Ángel', npp-nam, 'Ángel', [dr(0,np,np)-1]), ex_si('Cuevas', npp-nam, 'Cuevas', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(évanoui, vpp-ver:pper, évanoui, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(messe, nc-nom, messe, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1846, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(rattachée, vpp-ver:pper, rattachée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fifa', npp-abr, 'Fifa', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(recense, v-ver:pres, recense, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(malaises, nc-nom, malaises, [n-1]), ex_si(cardiaques, adj-adj, cardiaques, [dl(0,n,n)-1]), ex_si(mortels, adj-adj, mortels, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(derniers, nc-nom, derniers, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(resté, vpp-ver:pper, resté, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(stable, adj-adj, stable, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(précédentes, adj-adj, précédentes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1847, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(malaises, nc-nom, malaises, [n-1]), ex_si(cardiaques, adj-adj, cardiaques, [dl(0,n,n)-1]), ex_si(mortels, adj-adj, mortels, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(multiplié, vpp-ver:pper, multiplié, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(5, pro-num, 5, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(précédentes, adj-adj, précédentes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1848, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(capables, adj-adj, capables, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(grandir, vinf-ver:infi, grandir, [dl(0,np,s_inf)-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(observables, adj-adj, observables, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(microscope, nc-nom, microscope, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Youtubeur', nc-nom, 'Youtubeur', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(géologue, nc-nom, géologue, [n-1]), ex_si('Dr', nc-abr, 'Dr', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1849, Result) :-
      prob_parse([ ex_si('Franc', npp-nam, 'Franc', [dr(0,np,np)-1]), ex_si('Zalewski', npp-nam, 'Zalewski', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1850, Result) :-
      prob_parse([ ex_si('Franc', npp-nam, 'Franc', [dr(0,np,np)-1]), ex_si('Zalewski', npp-nam, 'Zalewski', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(doctorat, nc-nom, doctorat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(géologie, nc-nom, géologie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Silésie', nc-nam, 'Silésie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1851, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dl(0,np,s_pass)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(distribution, nc-nom, distribution, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(étroitement, adv-adv, étroitement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(surveillée, vpp-ver:pper, surveillée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1852, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(facile, adj-adj, facile, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(procurer, vinf-ver:infi, procurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1853, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(défiance, nc-nom, défiance, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(nourrie, vpp-ver:pper, nourrie, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(désinformation, nc-nom, désinformation, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1854, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(défiance, nc-nom, défiance, [n-1]), ex_si(vaccinale, adj-adj, vaccinale, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(alimentée, vpp-ver:pper, alimentée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(désinformation, nc-nom, désinformation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1855, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Suisse', npp-nam, 'Suisse', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(hospitalisé, vpp-ver:pper, hospitalisé, [dl(0,np,s_pass)-1]), ex_si('mi-novembre', nc-nom, 'mi-novembre', [dl(1,s,s)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intoxication, nc-nom, intoxication, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1856, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(intoxiqué, vpp-ver:pper, intoxiqué, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Suisse', npp-nam, 'Suisse', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si('mi-novembre', nc-nom, 'mi-novembre', [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(hospitalisé, vpp-ver:pper, hospitalisé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1857, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blogs, nc-nom, blogs, [n-1]), ex_si(recommandant, vpr-ver:ppre, recommandant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ingestion, nc-nom, ingestion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bactéries, nc-nom, bactéries, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(soigner, vinf-ver:infi, soigner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(divers, adj-adj, divers, [dr(0,np,n)-1]), ex_si(maux, nc-nom, maux, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(fausses, adj-adj, fausses, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(pratique, nc-nom, pratique, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(déconseillé, vpp-ver:pper, déconseillé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1858, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ingestion, nc-nom, ingestion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(recommandée, vpp-ver:pper, recommandée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1859, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(usage, nc-nom, usage, [n-1]), ex_si(externe, adj-adj, externe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ingéré, vpp-ver:pper, ingéré, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pratique, nc-nom, pratique, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [cl_r-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(avère, v-ver:pres, avère, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,n,n))-1]), ex_si(dangereuse, adj-adj, dangereuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1860, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(pratique, nc-nom, pratique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ingestion, nc-nom, ingestion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1861, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('PDG', nc-abr, 'PDG', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Albert', npp-nam, 'Albert', [dr(0,np,np)-1]), ex_si('Bourla', npp-nam, 'Bourla', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(définitivement, adv-adv, définitivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(annulée, vpp-ver:pper, annulée, [dl(0,np,s_pass)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1862, Result) :-
      prob_parse([ ex_si('Albert', npp-nam, 'Albert', [dr(0,np,np)-1]), ex_si('Bourla', npp-nam, 'Bourla', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(seconde, adj-num, seconde, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('BioNTech', npp-nam, 'BioNTech', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1863, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(2022, adj-num, 2022, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1864, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(2022, adj-num, 2022, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(définitive, adj-adj, définitive, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1865, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(2022, adj-num, 2022, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(plans, nc-nom, plans, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1866, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(2022, adj-num, 2022, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1867, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1868, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1869, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1870, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(rage, nc-nom, rage, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1871, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mortalité, nc-nom, mortalité, [n-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinées, nc-nom, vaccinées, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1872, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1873, Result) :-
      prob_parse([ ex_si('Être', vinf-ver:infi, 'Être', [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(vacciné, adj-adj, vacciné, [dl(0,np,s_pass)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1874, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(portent, v-ver:pres, portent, [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(transmettent, v-ver:pres, transmettent, [dr(0,dl(0,np,s),np)-1]), ex_si(autant, adv-adv, autant, [dr(0,np,pp_de)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(voire, cc-kon, voire, [dr(0,dl(0,dr(0,s,dia(0,box(0,np))),dr(0,s,np)),dr(0,s,dia(0,box(0,np))))-1]), ex_si(plus, adv-adv, plus, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1875, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),dr(0,dl(0,n,n),dl(0,n,n)))-1]), ex_si(autant, adv-adv, autant, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(voire, cc-kon, voire, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(contagieux, adj-adj, contagieux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1876, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccinés, nc-nom, vaccinés, [n-1]), ex_si(portent, v-ver:pres, portent, [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(transmettent, v-ver:pres, transmettent, [dr(0,dl(0,np,s),np)-1]), ex_si(autant, adv-adv, autant, [dr(0,dr(0,np,s_q),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(voire, cc-kon, voire, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1877, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(recommande, v-ver:pres, recommande, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('COVID-19', nc-abr, 'COVID-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1878, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(recommandation, nc-nom, recommandation, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(auxquels, p+pro-pro:rel, auxquels, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('10.000', det-num, '10.000', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('COVID-19', npp-abr, 'COVID-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1879, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ni, cc-kon, ni, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mortalité, nc-nom, mortalité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ventilation, nc-nom, ventilation, [n-1]), ex_si(artificielle, adj-adj, artificielle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(ventilation, nc-nom, ventilation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1880, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mortalité, nc-nom, mortalité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('COVID-19', npp-abr, 'COVID-19', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(recommandée, vpp-ver:pper, recommandée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('COVID-19', npp-nam, 'COVID-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1881, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(recommande, v-ver:pres, recommande, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('COVID-19', nc-abr, 'COVID-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1882, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(recommandation, nc-nom, recommandation, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(auxquels, p+pro-pro:rel, auxquels, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('10.000', det-num, '10.000', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('COVID-19', npp-abr, 'COVID-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1883, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ni, cc-kon, ni, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mortalité, nc-nom, mortalité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ventilation, nc-nom, ventilation, [n-1]), ex_si(artificielle, adj-adj, artificielle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(ventilation, nc-nom, ventilation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1884, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mortalité, nc-nom, mortalité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('COVID-19', npp-nam, 'COVID-19', [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(recommandée, vpp-ver:pper, recommandée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMS', npp-abr, 'OMS', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('COVID-19', npp-abr, 'COVID-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1885, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(substance, nc-nom, substance, [n-1]), ex_si(thérapeutique, adj-adj, thérapeutique, [dl(0,n,n)-1]), ex_si(expérimentale, adj-adj, expérimentale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(totalement, adv-adv, totalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1886, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(idée, nc-nom, idée, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(fausse, adj-adj, fausse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1887, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(homologués, vpp-ver:pper, homologués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(assimilés, vpp-ver:pper, assimilés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(substances, nc-nom, substances, [n-1]), ex_si(expérimentales, adj-adj, expérimentales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1888, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(substance, nc-nom, substance, [n-1]), ex_si(thérapeutique, adj-adj, thérapeutique, [dl(0,n,n)-1]), ex_si(expérimentale, adj-adj, expérimentale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1889, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si('Christian', npp-nam, 'Christian', [dl(0,n,n)-1]), ex_si('Perronne', npp-nam, 'Perronne', [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(infectieuses, adj-adj, infectieuses, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(tropicales, adj-adj, tropicales, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('Raymond-Poincaré', npp-nam, 'Raymond-Poincaré', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Garches', npp-nam, 'Garches', [np-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démis, vpp-ver:pper, démis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(fonctions, nc-nom, fonctions, [dr(0,np,n)-1]), ex_si(par, p-prp, par, [n-1]), ex_si(la, det-det:art, la, [dr(0,pp_par,np)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assistance', nc-nam, 'Assistance', [n-1]), ex_si('Publique', adj-adj, 'Publique', [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si('Hôpitaux', nc-nam, 'Hôpitaux', [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Paris', npp-nam, 'Paris', [dr(0,dl(0,n,n),np)-1]), ex_si('(', ponct-pun, '(', [np-1]), ex_si('AP-HP', npp-nam, 'AP-HP', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1890, Result) :-
      prob_parse([ ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Perronne', npp-nam, 'Perronne', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(infectieuses, adj-adj, infectieuses, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(tropicales, adj-adj, tropicales, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('Raymond-Poincaré', npp-nam, 'Raymond-Poincaré', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Garches', npp-nam, 'Garches', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1891, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(actuels, adj-adj, actuels, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(vocation, nc-nom, vocation, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éradiquer, vinf-ver:infi, éradiquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(totalement, adv-adv, totalement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(transmission, nc-nom, transmission, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(empêcher, vinf-ver:infi, empêcher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1892, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(actuels, adj-adj, actuels, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éradiquer, vinf-ver:infi, éradiquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(complètement, adv-adv, complètement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1893, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(total, adj-adj, total, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(supérieur, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(imputées, vpp-ver:pper, imputées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1894, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(davantage, adv-adv, davantage, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('elle-même', pro-pro:per, 'elle-même', [dl(0,np,np)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1895, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(davantage, adv-adv, davantage, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('elle-même', pro-pro:per, 'elle-même', [dl(0,np,np)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1896, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1897, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(autrichiennes, adj-adj, autrichiennes, [dl(0,n,n)-1]), ex_si(participeront, v-ver:futu, participeront, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(confinement, nc-nom, confinement, [n-1]), ex_si(prévue, vpp-ver:pper, prévue, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1898, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(autrichiennes, adj-adj, autrichiennes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1899, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(autrichiennes, adj-adj, autrichiennes, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1900, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(autrichiennes, adj-adj, autrichiennes, [dl(0,n,n)-1]), ex_si(refusent, v-ver:pres, refusent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1901, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,n)-1]), ex_si(institutions, nc-nom, institutions, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(confinement, nc-nom, confinement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1902, Result) :-
      prob_parse([ ex_si('Celle', pro-pro:dem, 'Celle', [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(soutenue, vpp-ver:pper, soutenue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(associations, nc-nom, associations, [n-1]), ex_si(privées, adj-adj, privées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(représentant, vpr-ver:ppre, représentant, [dr(0,dl(0,n,n),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1903, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(associations, nc-nom, associations, [n-1]), ex_si(privées, adj-adj, privées, [dl(0,n,n)-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(confinement, nc-nom, confinement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1904, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(arrêtée, vpp-ver:pper, arrêtée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(nouveau, adj-adj, nouveau, [n-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(partout, adv-adv, partout, [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vide, nc-nom, vide, [n-1]), ex_si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1905, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(partout, adv-adv, partout, [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1906, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(arrêtée, vpp-ver:pper, arrêtée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(nouveau, adj-adj, nouveau, [n-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(partout, adv-adv, partout, [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vide, nc-nom, vide, [n-1]), ex_si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1907, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(vide, nc-nom, vide, [n-1]), ex_si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), ex_si(permetra, v-ver:futu, permetra, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(partout, adv-adv, partout, [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1908, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vigilance, nc-nom, vigilance, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(étendu, vpp-ver:pper, étendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échéance, nc-nom, échéance, [n-1]), ex_si(initiale, adj-adj, initiale, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prévue, vpp-ver:pper, prévue, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1909, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2023, adj-num, 2023, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adoption, nc-nom, adoption, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vigilance, nc-nom, vigilance, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1910, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(vrai, adj-adj, vrai, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(confinement, nc-nom, confinement, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(descendre, vinf-ver:infi, descendre, [dl(0,np,s_inf)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Autrichiens', nc-nam, 'Autrichiens', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si(filmé, vpp-ver:pper, filmé, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(relayé, vpp-ver:pper, relayé, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(supporters, nc-nom, supporters, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(défilant, vpr-ver:ppre, défilant, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Graz', npp-nam, 'Graz', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(match, nc-nom, match, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1911, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(supporters, nc-nom, supporters, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(défilé, vpp-ver:pper, défilé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Graz', npp-nam, 'Graz', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(confinement, nc-nom, confinement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1912, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(administrative, adj-adj, administrative, [dl(0,n,n)-1]), ex_si(rattachée, vpp-ver:pper, rattachée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(ministères, nc-nom, ministères, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(admis, vpp-ver:pper, admis, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(constitué, vpp-ver:pper, constitué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(totales, adj-adj, totales, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1913, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(tient, v-ver:pres, tient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(compte, nc-nom, compte, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(disparité, nc-nom, disparité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(répartition, nc-nom, répartition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisation, nc-nom, hospitalisation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1914, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(administrative, adj-adj, administrative, [dl(0,n,n)-1]), ex_si(rattachée, vpp-ver:pper, rattachée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(ministères, nc-nom, ministères, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(admis, vpp-ver:pper, admis, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(constitué, vpp-ver:pper, constitué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(totales, adj-adj, totales, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1915, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Covid', npp-nam, 'Covid', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(constitué, vpp-ver:pper, constitué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hospitalisations, nc-nom, hospitalisations, [n-1]), ex_si(totales, adj-adj, totales, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1916, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(commander, vinf-ver:infi, commander, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(azithromycine, nc-nom, azithromycine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(sur, p-prp, sur, [np-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),np)-1]), ex_si(île, nc-nom, île, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1917, Result) :-
      prob_parse([ ex_si('Toutefois', adv-adv, 'Toutefois', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(invalidée, vpp-ver:pper, invalidée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1918, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ordonner, vinf-ver:infi, ordonner, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(commander, vinf-ver:infi, commander, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(azithromycine, nc-nom, azithromycine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(a, v-ver:pres, a, [np-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvée, vpp-ver:pper, approuvée, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('État', nc-nam, 'État', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1919, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(commander, vinf-ver:infi, commander, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(azithromycine, nc-nom, azithromycine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si(sur, p-prp, sur, [np-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),np)-1]), ex_si(île, nc-nom, île, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1920, Result) :-
      prob_parse([ ex_si('Toutefois', adv-adv, 'Toutefois', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(invalidée, vpp-ver:pper, invalidée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1921, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(invalidé, vpp-ver:pper, invalidé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(donc, adv-adv, donc, [dr(0,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(commander, vinf-ver:infi, commander, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(azithromycine, nc-nom, azithromycine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1922, Result) :-
      prob_parse([ ex_si('Interrogée', vpp-ver:pper, 'Interrogée', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autorité', nc-nam, 'Autorité', [n-1]), ex_si(régionale, adj-adj, régionale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ARS', npp-abr, 'ARS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(déplore, v-ver:pres, déplore, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fausse, adj-adj, fausse, [dr(0,n,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(circulant, vpr-ver:ppre, circulant, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(précise, v-ver:pres, précise, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si(elle, pro-pro:per, elle, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1923, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fausse, adj-adj, fausse, [dr(0,n,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autorité', nc-nam, 'Autorité', [n-1]), ex_si(régionale, adj-adj, régionale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ARS', npp-abr, 'ARS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1924, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(récente, adj-adj, récente, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1925, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,n,n),n)-1]), ex_si(blocage, nc-nom, blocage, [n-1]), ex_si(massifs, adj-adj, massifs, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rapportés, vpp-ver:pper, rapportés, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1926, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(blocage, nc-nom, blocage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(routes, nc-nom, routes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Justice', npp-nam, 'Justice', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démenti, vpp-ver:pper, démenti, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(plainte, nc-nom, plainte, [np-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(crime, nc-nom, crime, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(trace, nc-nom, trace, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(absence, nc-nom, absence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victime, nc-nom, victime, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1927, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,n,n),n)-1]), ex_si(blocage, nc-nom, blocage, [n-1]), ex_si(massifs, adj-adj, massifs, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rapportés, vpp-ver:pper, rapportés, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1928, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(blocage, nc-nom, blocage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(routes, nc-nom, routes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1929, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(médecin, nc-nom, médecin, [n-1]), ex_si('Christian', npp-nam, 'Christian', [dl(0,n,n)-1]), ex_si('Tal', npp-nam, 'Tal', [dl(0,n,n)-1]), ex_si('Schaller', npp-nam, 'Schaller', [dl(0,n,n)-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débuté, vpp-ver:pper, débuté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(bloque, v-ver:pres, bloque, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(routes, nc-nom, routes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1930, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(trace, nc-nom, trace, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(absence, nc-nom, absence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victime, nc-nom, victime, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1931, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(vaccinales, adj-adj, vaccinales, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(1,s,s),np)-1]), ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Tal', npp-nam, 'Tal', [dr(0,np,np)-1]), ex_si('Schaller', npp-nam, 'Schaller', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1932, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pharmacovigilance, nc-nom, pharmacovigilance, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(relevait, v-ver:impf, relevait, [dr(0,dl(0,np,s),np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(survenus, vpp-ver:pper, survenus, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(âgées, adj-adj, âgées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1933, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quatre, pro-num, quatre, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(jugés, vpp-ver:pper, jugés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(liés, adj-adj, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1934, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(relevé, vpp-ver:pper, relevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(survenus, vpp-ver:pper, survenus, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(âgées, adj-adj, âgées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(jugés, vpp-ver:pper, jugés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(liés, adj-adj, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1935, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pharmacovigilance, nc-nom, pharmacovigilance, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(relevait, v-ver:impf, relevait, [dr(0,dl(0,np,s),np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(survenus, vpp-ver:pper, survenus, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(âgées, adj-adj, âgées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1936, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quatre, pro-num, quatre, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(jugés, vpp-ver:pper, jugés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(liés, adj-adj, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1937, Result) :-
      prob_parse([ ex_si('Cinq', pro-num, 'Cinq', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(cinq, pro-num, cinq, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(relevés, vpp-ver:pper, relevés, [dr(0,dl(0,n,n),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(âgées, adj-adj, âgées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(jugés, vpp-ver:pper, jugés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(liés, vpp-adj, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(semptembre, nc-nom, semptembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1938, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pharmacovigilance, nc-nom, pharmacovigilance, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(relevait, v-ver:impf, relevait, [dr(0,dl(0,np,s),np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(survenus, vpp-ver:pper, survenus, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(âgées, adj-adj, âgées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1939, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quatre, pro-num, quatre, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(jugés, vpp-ver:pper, jugés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1940, Result) :-
      prob_parse([ ex_si('Quatre', pro-num, 'Quatre', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(cinq, pro-num, cinq, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(relevés, vpp-ver:pper, relevés, [dr(0,dl(0,n,n),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(âgées, adj-adj, âgées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(jugés, vpp-ver:pper, jugés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1941, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(trace, nc-nom, trace, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(absence, nc-nom, absence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victime, nc-nom, victime, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1942, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1943, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1944, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(vaccinales, adj-adj, vaccinales, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(1,s,s),np)-1]), ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Tal', npp-nam, 'Tal', [dr(0,np,np)-1]), ex_si('Schaller', npp-nam, 'Schaller', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1945, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Justice', nc-nam, 'Justice', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démenti, vpp-ver:pper, démenti, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(plainte, nc-nom, plainte, [np-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(crime, nc-nom, crime, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1946, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(plainte, nc-nom, plainte, [np-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(1,s,s),np)-1]), ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Tal', npp-nam, 'Tal', [dr(0,np,np)-1]), ex_si('Schaller', npp-nam, 'Schaller', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1947, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Justice', nc-nom, 'Justice', [n-1]), ex_si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démenti, vpp-ver:pper, démenti, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(plainte, nc-nom, plainte, [np-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(crime, nc-nom, crime, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(trace, nc-nom, trace, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(absence, nc-nom, absence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victime, nc-nom, victime, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1948, Result) :-
      prob_parse([ ex_si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), ex_si('Tal', npp-nam, 'Tal', [dr(0,np,np)-1]), ex_si('Schaller', npp-nam, 'Schaller', [np-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(plainte, nc-nom, plainte, [np-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nom, 'Santé', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(vaccinales, adj-adj, vaccinales, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1949, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('non-vaccinées', vpp-ver:pper, 'non-vaccinées', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(dangereuses, adj-adj, dangereuses, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinées, nc-nom, vaccinées, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(placées, vpp-ver:pper, placées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(quarantaine, nc-nom, quarantaine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1950, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereuses, adj-adj, dangereuses, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(placées, vpp-ver:pper, placées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(quarantaine, nc-nom, quarantaine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1951, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('non-vaccinées', vpp-ver:pper, 'non-vaccinées', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(dangereuses, adj-adj, dangereuses, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccinées, nc-nom, vaccinées, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(placées, vpp-ver:pper, placées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(quarantaine, nc-nom, quarantaine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1952, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('non-vaccinées', vpp-ver:pper, 'non-vaccinées', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereuses, adj-adj, dangereuses, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(placées, vpp-ver:pper, placées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(quarantaine, nc-nom, quarantaine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1953, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Radio-Canada', npp-nam, 'Radio-Canada', [np-1]), ex_si(parlait, v-ver:impf, parlait, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(circulation, nc-nom, circulation, [n-1]), ex_si(précoce, adj-adj, précoce, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(respiratoires, adj-adj, respiratoires, [dl(0,n,n)-1]), ex_si(saisonniers, adj-adj, saisonniers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1954, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(reportage, nc-nom, reportage, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Radio-Canada', npp-nam, 'Radio-Canada', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(parlait, v-ver:impf, parlait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1955, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(indemnisation, nc-nom, indemnisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déposée, vpp-ver:pper, déposée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(23, adj-num, 23, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(initiative, nc-nom, initiative, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(eurodéputée, nc-nom, eurodéputée, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1956, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(proposé, vpp-ver:pper, proposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(indemnisation, nc-nom, indemnisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', nc-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1957, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(indemnisation, nc-nom, indemnisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déposée, vpp-ver:pper, déposée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(23, adj-num, 23, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(initiative, nc-nom, initiative, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(eurodéputée, nc-nom, eurodéputée, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('Virginie', npp-nam, 'Virginie', [dl(0,n,n)-1]), ex_si('Joron', npp-nam, 'Joron', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Rassemblement', nc-nam, 'Rassemblement', [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1958, Result) :-
      prob_parse([ ex_si('Virginie', npp-nam, 'Virginie', [dr(0,np,np)-1]), ex_si('Joron', npp-nam, 'Joron', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(élue, vpp-ver:pper, élue, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Rassemblement', nc-nam, 'Rassemblement', [n-1]), ex_si(naitonal, adj-adj, naitonal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1959, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(proposé, vpp-ver:pper, proposé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(eurodéputé, nc-nom, eurodéputé, [n-1]), ex_si(jugé, vpp-ver:pper, jugé, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(recevable, adj-adj, recevable, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(internet, adj-adj, internet, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(autant, adv-adv, autant, [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1960, Result) :-
      prob_parse([ ex_si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(internet, nc-nom, internet, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1961, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('Eudravigilance', npp-nam, 'Eudravigilance', [dl(0,n,n)-1]), ex_si(recense, v-ver:pres, recense, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(signalés, vpp-ver:pper, signalés, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(nécessairement, adv-adv, nécessairement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1962, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('Eudravigilance', npp-nam, 'Eudravigilance', [dl(0,n,n)-1]), ex_si(recense, v-ver:pres, recense, [dr(0,dl(0,np,s),np)-1]), ex_si(seulement, adv-adv, seulement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(survenus, vpp-ver:pper, survenus, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1963, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('Eudravigilance', npp-nam, 'Eudravigilance', [dl(0,n,n)-1]), ex_si(recense, v-ver:pres, recense, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(signalés, vpp-ver:pper, signalés, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(nécessairement, adv-adv, nécessairement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1964, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(signalés, vpp-ver:pper, signalés, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Eudravigilance', npp-nam, 'Eudravigilance', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(éventuellement, adv-adv, éventuellement, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1965, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grèves, nc-nom, grèves, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mobilisé, vpp-ver:pper, mobilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgences, nc-nom, urgences, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1966, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(207, det-num, 207, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1967, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(prescrire, vinf-ver:infi, prescrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1968, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(continue, v-ver:pres, continue, [dl(0,np,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1969, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(thérapeutiques, adj-adj, thérapeutiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(menés, vpp-ver:pper, menés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(figure, v-ver:pres, figure, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(traitements, nc-nom, traitements, [n-1]), ex_si(approuvés, vpp-ver:pper, approuvés, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1970, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(thérapeutiques, adj-adj, thérapeutiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivermectine, nc-nom, ivermectine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1971, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pouvant, vpr-ver:ppre, pouvant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(soigner, vinf-ver:infi, soigner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1972, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(besoins, nc-nom, besoins, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(restent, v-ver:pres, restent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(gratuits, adj-adj, gratuits, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prescrits, vpp-ver:pper, prescrits, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(asymptomatiques, adj-adj, asymptomatiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(allant, vpr-ver:ppre, allant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1973, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1974, Result) :-
      prob_parse([ ex_si('Sans', p-prp, 'Sans', [dr(0,dr(0,s,s),n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si('PCR', nc-abr, 'PCR', [dl(0,n,n)-1]), ex_si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vacciné, adj-ver:pper, vacciné, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1975, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1976, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si('PCR', nc-abr, 'PCR', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(remboursés, vpp-ver:pper, remboursés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assurance', nc-nam, 'Assurance', [n-1]), ex_si(maladie, nc-nom, maladie, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(toutefois, adv-adv, toutefois, [dr(0,s,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(restent, v-ver:pres, restent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(gratuits, adj-adj, gratuits, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prescrits, vpp-ver:pper, prescrits, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(asymptomatiques, adj-adj, asymptomatiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devant, vpr-ver:ppre, devant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1977, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si('PCR', nc-abr, 'PCR', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(remboursés, vpp-ver:pper, remboursés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assurance', nc-nam, 'Assurance', [n-1]), ex_si(maladie, nc-nom, maladie, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,dr(0,n,s_q),n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(devez, v-ver:futu, devez, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1978, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(venant, vpr-ver:ppre, venant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accoucher, vinf-ver:infi, accoucher, [dl(0,np,s_inf)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(réaliser, vinf-ver:infi, réaliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lucerne', npp-nam, 'Lucerne', [np-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(de, p-prp, de, [dr(0,dr(0,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(pourront, v-ver:futu, pourront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si('nouveaux-nés', nc-nom, 'nouveaux-nés', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1979, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(venant, vpr-ver:ppre, venant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(accoucher, vinf-ver:infi, accoucher, [dl(0,np,s_inf)-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(sinon, cc-kon, sinon, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lucerne', npp-nam, 'Lucerne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1980, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(visiteurs, nc-nom, visiteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lucerne', npp-nam, 'Lucerne', [np-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('mi-septembre', nc-nom, 'mi-septembre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(exceptions, nc-nom, exceptions, [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appliquer, vinf-ver:infi, appliquer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(admissions, nc-nom, admissions, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ambulatoire, nc-nom, ambulatoire, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arrivées, nc-nom, arrivées, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1981, Result) :-
      prob_parse([ ex_si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(admission, nc-nom, admission, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ambulatoire, nc-nom, ambulatoire, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pass, nc-nom, pass, [n-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(visiteurs, nc-nom, visiteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lucerne', npp-nam, 'Lucerne', [np-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(exception, nc-nom, exception, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1982, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(hôtesses, nc-nom, hôtesses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(manifesté, vpp-ver:pper, manifesté, [dl(0,np,s_ppart)-1]), ex_si(dénonçant, vpr-ver:ppre, dénonçant, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(suppressions, nc-nom, suppressions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(emplois, nc-nom, emplois, [n-1]), ex_si(consécutives, adj-adj, consécutives, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si('Alitalia', npp-nam, 'Alitalia', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1983, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(syndicat, nc-nom, syndicat, [n-1]), ex_si(participant, vpr-ver:ppre, participant, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1984, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(hôtesses, nc-nom, hôtesses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rassemblées, vpp-ver:pper, rassemblées, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(licenciement, nc-nom, licenciement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1985, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(hôtesses, nc-nom, hôtesses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(manifesté, vpp-ver:pper, manifesté, [dl(0,np,s_ppart)-1]), ex_si(dénonçant, vpr-ver:ppre, dénonçant, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(suppressions, nc-nom, suppressions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(emplois, nc-nom, emplois, [n-1]), ex_si(consécutives, adj-adj, consécutives, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si('Alitalia', npp-nam, 'Alitalia', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1986, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(syndicat, nc-nom, syndicat, [n-1]), ex_si(participant, vpr-ver:ppre, participant, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1987, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(hôtesses, nc-nom, hôtesses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rassemblées, vpp-ver:pper, rassemblées, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(licenciement, nc-nom, licenciement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1988, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(garde, nc-nom, garde, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(adénovirus, nc-nom, adénovirus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(citant, vpr-ver:ppre, citant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduits, vpp-ver:pper, conduits, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), ex_si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(exposées, vpp-ver:pper, exposées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1989, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('ARN', nc-abr, 'ARN', [n-1]), ex_si(messager, nc-nom, messager, [dl(0,n,n)-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), ex_si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(exposées, vpp-ver:pper, exposées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1990, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(adénovirus, nc-nom, adénovirus, [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), ex_si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(exposées, vpp-ver:pper, exposées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1991, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1992, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(autorisés, vpp-ver:pper, autorisés, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), ex_si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(infection, nc-nom, infection, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(exposées, vpp-ver:pper, exposées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('VIH', npp-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1993, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ISS', npp-abr, 'ISS', [n-1]), ex_si(seules, adj-adj, seules, [dr(0,np,np)-1]), ex_si('2,9', det-num, '2,9', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('130.468', nc-num, '130.468', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(officiellement, adv-adv, officiellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(attribuées, vpp-ver:pper, attribuées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dues, vpp-ver:pper, dues, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1994, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(apparaît, v-ver:pres, apparaît, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('97,1', det-num, '97,1', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,n,n)-1]), ex_si(présentaient, v-ver:pres, présentaient, [dr(0,dl(0,np,s),np)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(pathologies, nc-nom, pathologies, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(touchées, vpp-ver:pper, touchées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1995, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(institut, nc-nom, institut, [n-1]), ex_si(supérieur, adj-adj, supérieur, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ISS', npp-abr, 'ISS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(revu, vpp-ver:pper, revu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(drastiquement, adv-adv, drastiquement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), ex_si(recensés, vpp-ver:pper, recensés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2020, adj-num, 2020, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1996, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réévalué, vpp-ver:pper, réévalué, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1997, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(taïwanaise, adj-adj, taïwanaise, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(dépasse, v-ver:pres, dépasse, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('lui-même', adj-pro:per, 'lui-même', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1998, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prouve, v-ver:pres, prouve, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Taïwan', npp-nam, 'Taïwan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1999, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(présentant, vpr-ver:ppre, présentant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(immense, adj-adj, immense, [dr(0,n,n)-1]), ex_si(foule, nc-nom, foule, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Street', npp-nam, 'Street', [dr(0,n,n)-1]), ex_si('Parade', npp-nam, 'Parade', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Zurich', npp-nam, 'Zurich', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(festival, nc-nom, festival, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2000, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(festival, nc-nom, festival, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Zurich', npp-nam, 'Zurich', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2001, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(publiés, vpp-ver:pper, publiés, [dl(0,np,s_pass)-1]), ex_si(démontrent, v-ver:pres, démontrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxycholoroquine, nc-nom, hydroxycholoroquine, [n-1]), ex_si(concluent, v-ver:pres, concluent, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2002, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permettaient, v-ver:impf, permettaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prouver, vinf-ver:infi, prouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(avérée, vpp-ver:pper, avérée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2003, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(autorisés, vpp-ver:pper, autorisés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(étapes, nc-nom, étapes, [n-1]), ex_si(imposées, vpp-ver:pper, imposées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(hexagonal, adj-adj, hexagonal, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éventuelle, adj-adj, éventuelle, [dr(0,n,n)-1]), ex_si(nocivité, nc-nom, nocivité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(produit, nc-nom, produit, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(deuxième, nc-num, deuxième, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(limité, vpp-ver:pper, limité, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(malades, nc-nom, malades, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(troisième, nc-num, troisième, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(juger, vinf-ver:infi, juger, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intérêt, nc-nom, intérêt, [n-1]), ex_si(thérapeutique, adj-adj, thérapeutique, [dl(0,n,n)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(échantillon, nc-nom, échantillon, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(étendu, vpp-ver:pper, étendu, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2004, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(sautés, vpp-ver:pper, sautés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(certaines, pro-pro:ind, certaines, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(étapes, nc-nom, étapes, [n-1]), ex_si(imposées, vpp-ver:pper, imposées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(hexagonal, adj-adj, hexagonal, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(vite, adv-adv, vite, [dl(1,s,s)-1]), ex_si(possible, adj-adj, possible, [dl(0,dl(1,s,s),dl(1,s,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2005, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(autorisation, nc-nom, autorisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('AMM', npp-abr, 'AMM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(conditionnelle, adj-adj, conditionnelle, [dl(0,n,n)-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(développeurs, nc-nom, développeurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soumettre, vinf-ver:infi, soumettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(supplémentaires, adj-adj, supplémentaires, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contrairement, adv-adv, contrairement, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('AMM', nc-abr, 'AMM', [n-1]), ex_si(classique, adj-adj, classique, [dl(0,n,n)-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(totalité, nc-nom, totalité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(préalablement, adv-adv, préalablement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(soumise, vpp-ver:pper, soumise, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2006, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(ajouté, vpp-ver:pper, ajouté, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(soumises, vpp-ver:pper, soumises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(développeurs, nc-nom, développeurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('AMM', nc-abr, 'AMM', [n-1]), ex_si(conditionnelle, adj-adj, conditionnelle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2007, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autorisation, nc-nom, autorisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('AMM', nc-abr, 'AMM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(conditionnelle, adj-adj, conditionnelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accélérer, vinf-ver:infi, accélérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(considérablement, adv-adv, considérablement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('AEM', npp-abr, 'AEM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(accordé, vpp-ver:pper, accordé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(autorisations, nc-nom, autorisations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(renouvelables, vpp-ver:pper, renouvelables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2008, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('AEM', npp-abr, 'AEM', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accordé, vpp-ver:pper, accordé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(autorisations, nc-nom, autorisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('AMM', nc-abr, 'AMM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(conditionnelles, adj-adj, conditionnelles, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2009, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autorisation, nc-nom, autorisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('AMM', nc-abr, 'AMM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(conditionnelle, adj-adj, conditionnelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accélérer, vinf-ver:infi, accélérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(considérablement, adv-adv, considérablement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('AEM', npp-abr, 'AEM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accordé, vpp-ver:pper, accordé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(autorisations, nc-nom, autorisations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(renouvelables, vpp-ver:pper, renouvelables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2010, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorisations, nc-nom, autorisations, [n-1]), ex_si(conditionnelles, adj-adj, conditionnelles, [dl(0,n,n)-1]), ex_si(accordées, vpp-ver:pper, accordées, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AEM', npp-abr, 'AEM', [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(renouvelées, vpp-ver:pper, renouvelées, [dl(0,np,s_pass)-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2011, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(myocardite, nc-nom, myocardite, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Vyndamax', npp-nam, 'Vyndamax', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(77, det-num, 77, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(aux, p+d-prp:det, aux, [n-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2012, Result) :-
      prob_parse([ ex_si('Vyndamax', npp-nam, 'Vyndamax', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(myocardite, nc-nom, myocardite, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(amylose, nc-nom, amylose, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(transthyrétine, nc-nom, transthyrétine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2013, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Vyndamax', npp-nam, 'Vyndamax', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(77, det-num, 77, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2014, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Vyndamax', npp-nam, 'Vyndamax', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pfizer', npp-nam, 'Pfizer', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bondi, vpp-ver:pper, bondi, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(77, det-num, 77, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2015, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si('anti-pass', adj-adj, 'anti-pass', [dl(0,n,n)-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(organisée, vpp-ver:pper, organisée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(principale, adj-adj, principale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Trieste', npp-nam, 'Trieste', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(filmée, vpp-ver:pper, filmée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(tout, nc-nom, tout, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(webcam, nc-nom, webcam, [n-1]), ex_si(présente, vpp-ver:pper, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(angle, nc-nom, angle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(webcam, nc-nom, webcam, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(dernière, nc-nom, dernière, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(bouger, vinf-ver:infi, bouger, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2016, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(webcam, nc-nom, webcam, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déplacée, vpp-ver:pper, déplacée, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(trafiquée, vpp-ver:pper, trafiquée, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(cacher, vinf-ver:infi, cacher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si('anti-pass', adj-adj, 'anti-pass', [dl(0,n,n)-1]), ex_si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Trieste', npp-nam, 'Trieste', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2017, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(stimulent, v-ver:pres, stimulent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(endommagent, v-ver:pres, endommagent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2018, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(résurgence, nc-nom, résurgence, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(hivernaux, adj-adj, hivernaux, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(causée, vpp-ver:pper, causée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(accusée, vpp-ver:pper, accusée, [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(affaiblir, vinf-ver:infi, affaiblir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(naturelles, adj-adj, naturelles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(organisme, nc-nom, organisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2019, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(stimulent, v-ver:pres, stimulent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(affaiblissent, v-ver:pres, affaiblissent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2020, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vaccinées, vpp-ver:pper, vaccinées, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-vaccinées', nc-nom, 'non-vaccinées', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(immunitaires, adj-adj, immunitaires, [dl(0,n,n)-1]), ex_si(diminuent, v-ver:pres, diminuent, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2021, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(circulation, nc-nom, circulation, [n-1]), ex_si(réduite, vpp-ver:pper, réduite, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,np,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(passé, vpp-ver:pper, passé, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(confinements, nc-nom, confinements, [n-1]), ex_si(successifs, adj-adj, successifs, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(stricte, adj-adj, stricte, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(barrières, nc-nom, barrières, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(masque, nc-nom, masque, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lavage, nc-nom, lavage, [n-1]), ex_si(régulier, adj-adj, régulier, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abandon, nc-nom, abandon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bise, nc-nom, bise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2022, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(barrières, nc-nom, barrières, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(incluaient, v-ver:pres, incluaient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(masque, nc-nom, masque, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lavage, nc-nom, lavage, [n-1]), ex_si(régulier, adj-adj, régulier, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2023, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(circulation, nc-nom, circulation, [n-1]), ex_si(réduite, vpp-ver:pper, réduite, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,np,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(passé, vpp-ver:pper, passé, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(confinements, nc-nom, confinements, [n-1]), ex_si(successifs, adj-adj, successifs, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(stricte, adj-adj, stricte, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(barrières, nc-nom, barrières, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(masque, nc-nom, masque, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lavage, nc-nom, lavage, [n-1]), ex_si(régulier, adj-adj, régulier, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abandon, nc-nom, abandon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bise, nc-nom, bise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2024, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(circulé, vpp-ver:pper, circulé, [dl(0,np,s_ppart)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(passé, vpp-ver:pper, passé, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(habitude, nc-nom, habitude, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2025, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si(stimulent, v-ver:pres, stimulent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(conférée, vpp-ver:pper, conférée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(injections, nc-nom, injections, [n-1]), ex_si(baisse, v-ver:pres, baisse, [dl(0,np,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(vulnérables, adj-adj, vulnérables, [dl(0,n,n)-1]), ex_si(soà, p+d-prp:det, soà, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2026, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(organisme, nc-nom, organisme, [n-1]), ex_si(baisse, v-ver:pres, baisse, [dl(0,np,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2027, Result) :-
      prob_parse([ ex_si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), ex_si('Young', npp-nam, 'Young', [np-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(colonies, nc-nom, colonies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(parasites, nc-nom, parasites, [n-1]), ex_si('Trypanosoma', npp-nam, 'Trypanosoma', [dl(0,n,n)-1]), ex_si(cruzi, npp-nam, cruzi, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(vecteurs, nc-nom, vecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chagas', npp-nam, 'Chagas', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2028, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(parasites, nc-nom, parasites, [n-1]), ex_si('Trypanosoma', npp-nam, 'Trypanosoma', [dl(0,n,n)-1]), ex_si(cruzi, et-nom, cruzi, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(précises, adj-adj, précises, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(colonies, nc-nom, colonies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(survivre, vinf-ver:infi, survivre, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2029, Result) :-
      prob_parse([ ex_si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(indésirables, adj-adj, indésirables, [dl(0,n,n)-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rapportés, vpp-ver:pper, rapportés, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(restent, v-ver:pres, restent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rares, adj-adj, rares, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2030, Result) :-
      prob_parse([ ex_si(86, det-num, 86, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2031, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), ex_si('Madej', npp-nam, 'Madej', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diffusées, vpp-ver:pper, diffusées, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(doute, nc-nom, doute, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(poussières, nc-nom, poussières, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(défauts, nc-nom, défauts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(verre, nc-nom, verre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lamelle, nc-nom, lamelle, [n-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(microscope, nc-nom, microscope, [n-1]), ex_si(optique, adj-adj, optique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2032, Result) :-
      prob_parse([ ex_si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), ex_si('Madej', npp-nam, 'Madej', [np-1]), ex_si(décrit, v-ver:pres, décrit, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diffusées, vpp-ver:pper, diffusées, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(objets, nc-nom, objets, [n-1]), ex_si(vivants, adj-adj, vivants, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(tentacules, nc-nom, tentacules, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fioles, nc-nom, fioles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccin, nc-nom, vaccin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2033, Result) :-
      prob_parse([ ex_si('Colin', npp-nam, 'Colin', [dr(0,np,np)-1]), ex_si('Powell', npp-nam, 'Powell', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(84, det-num, 84, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(réduit, v-ver:pres, réduit, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccins, nc-nom, vaccins, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2034, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(populations, nc-nom, populations, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vulnérables, adj-adj, vulnérables, [dl(0,n,n)-1]), ex_si(face, nc-nom, face, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(coronavirus, nc-nom, coronavirus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2035, Result) :-
      prob_parse([ ex_si('Colin', npp-nam, 'Colin', [dr(0,np,np)-1]), ex_si('Powell', npp-nam, 'Powell', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(âgé, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(84, det-num, 84, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(figurait, v-ver:impf, figurait, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid', npp-nam, 'Covid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2036, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(virales, adj-adj, virales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(prétendent, v-ver:pres, prétendent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appuyer, vinf-ver:infi, appuyer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(attribueraient, v-ver:impf, attribueraient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fonte, nc-nom, fonte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(glaces, nc-nom, glaces, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2037, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(glaciaire, adj-adj, glaciaire, [dl(0,n,n)-1]), ex_si('[glace', adj-adj, '[glace', [dr(0,dl(0,n,n),n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(se, clr-pro:per, se, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(forme, v-ver:pres, forme, [cl_r-1]), ex_si(sur, p-prp, sur, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),np)-1]), ex_si(terre, nc-nom, terre, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si('NDLR]', ponct-pun, 'NDLR]', [let-1]), ex_si(du, p+d-prp:det, du, [dl(1,s,s)-1]), ex_si('Groenland', npp-nam, 'Groenland', [let-1]), ex_si(fond, nc-nom, fond, [dr(0,dl(0,n,n),n)-1]), ex_si(sur, p-prp, sur, [n-1]), ex_si(le, det-det:art, le, [dl(0,np,s)-1]), ex_si(long, adj-adj, long, [dr(0,dl(1,s,s),np)-1]), ex_si(terme, nc-nom, terme, [dr(0,np,n)-1]), ex_si(en, p-prp, en, [dr(0,n,n)-1]), ex_si(raison, nc-nom, raison, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [dr(0,n,pp_de)-1]), ex_si(climatique, adj-adj, climatique, [dr(0,pp_de,n)-1]), ex_si(causé, vpp-ver:pper, causé, [n-1]), ex_si(par, p-prp, par, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(émissions, nc-nom, émissions, [dr(0,pp_par,np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(mais, cc-kon, mais, [n-1]), ex_si(le, det-det:art, le, [let-1]), ex_si(rythme, nc-nom, rythme, [dr(0,dl(0,s,s),s)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(cette, det-pro:dem, cette, [n-1]), ex_si(fonte, nc-nom, fonte, [dr(0,dl(0,n,n),np)-1]), ex_si(a, v-ver:pres, a, [dr(0,np,n)-1]), ex_si(ralenti, vpp-ver:pper, ralenti, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(cours, nc-nom, cours, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(dernière, adj-adj, dernière, [dr(0,dl(0,n,n),np)-1]), ex_si(décennie, nc-nom, décennie, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,n,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(raison, nc-nom, raison, [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(phénomène, nc-nom, phénomène, [dr(0,n,pp_de)-1]), ex_si(météorologique, adj-adj, météorologique, [dr(0,pp_de,n)-1]), ex_si('El', npp-nam, 'El', [n-1]), ex_si('Niño', npp-nam, 'Niño', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(disait, v-ver:impf, disait, [let-1]), ex_si('-il', cls-pro:per, '-il', [dr(0,dl(1,s,s),np)-1]), ex_si(aussi, adv-adv, aussi, [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(cité, vpp-ver:pper, cité, [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), ex_si(communiqué, nc-nom, communiqué, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(presse, nc-nom, presse, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Université', nc-nam, 'Université', [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('Hokkaido', npp-nam, 'Hokkaido', [dr(0,dl(0,n,n),np)-1]), ex_si(diffusé, vpp-ver:pper, diffusé, [np-1]), ex_si(en, p-prp, en, [dl(0,n,n)-1]), ex_si(avril, nc-nom, avril, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(2022, adj-num, 2022, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dl(0,n,n)-1]), ex_si(présenter, vinf-ver:infi, présenter, [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(étude, nc-nom, étude, [dr(0,np,n)-1]), ex_si(publiée, vpp-ver:pper, publiée, [n-1]), ex_si(en, p-prp, en, [dl(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(2021, adj-num, 2021, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(2038, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(relayées, vpp-ver:pper, relayées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n))),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si('-à', p-prp, '-à', [let-1]), ex_si(tort, nc-nom, tort, [dr(0,dl(1,s,s),n)-1]), ex_si('-', ponct-pun, '-', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(glacière, adj-adj, glacière, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Groenland', npp-nam, 'Groenland', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rétablit, v-ver:pres, rétablit, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2039, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('On', cls-pro:per, 'On', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(tout, nc-nom, tout, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rétablissement, nc-nom, rétablissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(polaire, adj-adj, polaire, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Groenland', npp-nam, 'Groenland', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(abonde, v-ver:pres, abonde, [dr(0,dl(1,s,s),np)-1]), ex_si('Heïdi', npp-nam, 'Heïdi', [dr(0,np,np)-1]), ex_si('Sevestre', npp-nam, 'Sevestre', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(glaciologue, nc-nom, glaciologue, [n-1]), ex_si(membre, nc-nom, membre, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(évaluation, nc-nom, évaluation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contactée, vpp-ver:pper, contactée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2040, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tarif, nc-nom, tarif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(42, det-num, 42, [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si('mégawatt-heure', nc-nom, 'mégawatt-heure', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('MWh', nc-abr, 'MWh', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tarif, nc-nom, tarif, [n-1]), ex_si(fixé, vpp-ver:pper, fixé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(détail, nc-nom, détail, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(réservé, vpp-ver:pper, réservé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(alimentent, v-ver:pres, alimentent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(installés, vpp-ver:pper, installés, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(expliquent, v-ver:pres, expliquent, [dr(0,dr(0,s,np),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(spécialistes, nc-nom, spécialistes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2041, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2042, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(transactions, nc-nom, transactions, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(opérateurs, nc-nom, opérateurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(différent, adj-adj, différent, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gros, nc-nom, gros, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tarifs, nc-nom, tarifs, [n-1]), ex_si(varient, v-ver:pres, varient, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(permanence, nc-nom, permanence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2043, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(plein, adj-adj, plein, [dr(0,n,n)-1]), ex_si(contexte, nc-nom, contexte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(énergétique, adj-adj, énergétique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(flambée, nc-nom, flambée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(vendrait, v-ver:impf, vendrait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(42, det-num, 42, [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(mégawatt, nc-nom, mégawatt, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(ensuite, adv-adv, ensuite, [dl(1,s,s)-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(racheter, vinf-ver:infi, racheter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(mégawatt, nc-nom, mégawatt, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('1.000', det-num, '1.000', [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(croire, vinf-ver:infi, croire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Twitter', npp-nam, 'Twitter', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2044, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tarif, nc-nom, tarif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(42, det-num, 42, [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si('mégawatt-heure', nc-nom, 'mégawatt-heure', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('MWh', nc-abr, 'MWh', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tarif, nc-nom, tarif, [n-1]), ex_si(fixé, vpp-ver:pper, fixé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(détail, nc-nom, détail, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(réservé, vpp-ver:pper, réservé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(alimentent, v-ver:pres, alimentent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(installés, vpp-ver:pper, installés, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(expliquent, v-ver:pres, expliquent, [dr(0,dr(0,s,np),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(spécialistes, nc-nom, spécialistes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2045, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2046, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(transactions, nc-nom, transactions, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(opérateurs, nc-nom, opérateurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(différent, adj-adj, différent, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gros, nc-nom, gros, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tarifs, nc-nom, tarifs, [n-1]), ex_si(varient, v-ver:pres, varient, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(permanence, nc-nom, permanence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2047, Result) :-
      prob_parse([ ex_si('Contactée', vpp-ver:pper, 'Contactée', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(régulation, nc-nom, régulation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CRE', npp-abr, 'CRE', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(garante, adj-adj, garante, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bon, adj-adj, bon, [dr(0,n,n)-1]), ex_si(fonctionnement, nc-nom, fonctionnement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(bénéfice, nc-nom, bénéfice, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(consommateur, nc-nom, consommateur, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mégawatt, nc-nom, mégawatt, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(42, det-num, 42, [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(bénéficie, v-ver:pres, bénéficie, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(consommateur, nc-nom, consommateur, [n-1]), ex_si(français, adj-adj, français, [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(uniquement, adv-adv, uniquement, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(consommateur, nc-nom, consommateur, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(régulé, vpp-ver:pper, régulé, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [dr(0,np,n)-1]), ex_si(nucléaire, adj-adj, nucléaire, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('[ARENH]', ponct-pun, '[ARENH]', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(dispositif, nc-nom, dispositif, [np-1]), ex_si('franco-français', adj-adj, 'franco-français', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(non, adv-adv, non, [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1])], Result).
sent(2048, Result) :-
      prob_parse([ ex_si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dr(0,s,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CRE', npp-abr, 'CRE', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dispositif, nc-nom, dispositif, [n-1]), ex_si('ARENH', npp-abr, 'ARENH', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('NOME', npp-abr, 'NOME', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vigueur, nc-nom, vigueur, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2011, adj-num, 2011, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(alternatifs, adj-adj, alternatifs, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accéder, vinf-ver:infi, accéder, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(régulé, vpp-ver:pper, régulé, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(produite, vpp-ver:pper, produite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(centrales, nc-nom, centrales, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(historiques, adj-adj, historiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('EDF', npp-abr, 'EDF', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(promulgation, nc-nom, promulgation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('NOME', npp-nam, 'NOME', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2049, Result) :-
      prob_parse([ ex_si('EDF', npp-abr, 'EDF', [np-1]), ex_si(confirme, v-ver:pres, confirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('ARENH', npp-abr, 'ARENH', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(applique, v-ver:pres, applique, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(régulé, vpp-ver:pper, régulé, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(vend, v-ver:pres, vend, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si('TWh', nc-abr, 'TWh', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(42, det-num, 42, [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('mégawatt-heure', nc-nom, 'mégawatt-heure', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('MWh', nc-nom, 'MWh', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(alternatifs, adj-adj, alternatifs, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2050, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(volumes, nc-nom, volumes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dispositif, nc-nom, dispositif, [n-1]), ex_si('ARENH', npp-abr, 'ARENH', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(limite, nc-nom, limite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si('TWh', nc-abr, 'TWh', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2051, Result) :-
      prob_parse([ ex_si('EDF', npp-abr, 'EDF', [np-1]), ex_si(confirme, v-ver:pres, confirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('ARENH', npp-abr, 'ARENH', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(applique, v-ver:pres, applique, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(régulé, vpp-ver:pper, régulé, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(vend, v-ver:pres, vend, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si('TWh', nc-abr, 'TWh', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(42, det-num, 42, [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('mégawatt-heure', nc-nom, 'mégawatt-heure', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('MWh', nc-nom, 'MWh', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(alternatifs, adj-adj, alternatifs, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2052, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(transactions, nc-nom, transactions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(acteurs, nc-nom, acteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(situés, vpp-ver:pper, situés, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(précise, v-ver:pres, précise, [dr(0,dr(0,s,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CRE', npp-abr, 'CRE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(font, v-ver:pres, font, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gros, nc-nom, gros, [dr(0,n,n)-1]), ex_si(européen, adj-adj, européen, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(achetée, vpp-ver:pper, achetée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(vendue, vpp-ver:pper, vendue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(variés, vpp-ver:pper, variés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2053, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('MWh', nc-nom, 'MWh', [n-1]), ex_si(vendus, vpp-ver:pper, vendus, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,n,n),pp),dr(0,dl(0,n,n),pp)),dr(0,dl(0,n,n),pp))-1]), ex_si(achetés, vpp-ver:pper, achetés, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gros, nc-nom, gros, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2054, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(arrêté, nc-nom, arrêté, [n-1]), ex_si(gouvernemental, adj-adj, gouvernemental, [dl(0,n,n)-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(avant, nc-nom, avant, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(daté, vpp-ver:pper, daté, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(autoriserait, v-ver:futu, autoriserait, [dr(0,dl(0,np,s),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coupures, nc-nom, coupures, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(journée, nc-nom, journée, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2055, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrêté, nc-nom, arrêté, [n-1]), ex_si(gouvernemental, adj-adj, gouvernemental, [dl(0,n,n)-1]), ex_si(paru, vpp-ver:pper, paru, [dl(0,n,n)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(coupure, nc-nom, coupure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(courant, nc-nom, courant, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(basculer, vinf-ver:infi, basculer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(automatiquement, adv-adv, automatiquement, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nuit, nc-nom, nuit, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alimentation, nc-nom, alimentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(gros, adj-adj, gros, [dr(0,n,n)-1]), ex_si(appareils, nc-nom, appareils, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(enclenchent, v-ver:pres, enclenchent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(automatiquement, adv-adv, automatiquement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(essentiellement, adv-adv, essentiellement, [dr(0,np,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ballons, nc-nom, ballons, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(chaude, adj-adj, chaude, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(accumulation, nc-nom, accumulation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gestionnaires, nc-nom, gestionnaires, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(distribution, nc-nom, distribution, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si('RTE', npp-abr, 'RTE', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Enedis', npp-nam, 'Enedis', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2056, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(amené, vpp-ver:pper, amené, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réaliser, vinf-ver:infi, réaliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(geste, nc-nom, geste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si('L\'enclenchement', nc-nom, 'L\'enclenchement', [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(ballons, nc-nom, ballons, [dr(0,dl(0,n,n),n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(eau, nc-nom, eau, [dr(0,dl(0,n,n),n)-1]), ex_si(chaude, adj-adj, chaude, [n-1]), ex_si(se, clr-pro:per, se, [dl(0,n,n)-1]), ex_si(fera, v-ver:futu, fera, [cl_r-1]), ex_si(de, p-prp, de, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(manière, nc-nom, manière, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(toujours, adv-adv, toujours, [n-1]), ex_si(automatique, adj-adj, automatique, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,n,n),dl(0,n,n))-1])], Result).
sent(2057, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(programment, v-ver:pres, programment, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si('chauffe-eau', nc-nom, 'chauffe-eau', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2058, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('chauffe-eau', nc-nom, 'chauffe-eau', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettra, v-ver:pres, mettra, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(automatiquement, adv-adv, automatiquement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(route, nc-nom, route, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), ex_si('Linky', npp-nam, 'Linky', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(précisé, vpp-ver:pper, précisé, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Enedis', npp-nam, 'Enedis', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrêté, nc-nom, arrêté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2059, Result) :-
      prob_parse([ ex_si('Florian', npp-nam, 'Florian', [dr(0,np,np)-1]), ex_si('Philippot', npp-nam, 'Philippot', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si('Les', det-det:art, 'Les', [dr(0,dl(0,n,n),n)-1]), ex_si('Patriotes', nc-nam, 'Patriotes', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(emparé, vpp-ver:pper, emparé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dès, p-prp, dès, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(pourra, v-ver:futu, pourra, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(couper, vinf-ver:infi, couper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(ballon, nc-nom, ballon, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(chaude, adj-adj, chaude, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(distance, nc-nom, distance, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), ex_si('Linky', npp-nam, 'Linky', [np-1]), ex_si('!', ponct-pun, '!', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2060, Result) :-
      prob_parse([ ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(2061, Result) :-
      prob_parse([ ex_si('Publication', nc-nom, 'Publication', [n-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,np,np),n)-1]), ex_si(peu, adv-adv, peu, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(400, det-num, 400, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(2062, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coupures, nc-nom, coupures, [n-1]), ex_si(proprement, adv-adv, proprement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dites, vpp-ver:pper, dites, [dl(0,n,n)-1]), ex_si(devaient, v-ver:impf, devaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(décidées, vpp-ver:pper, décidées, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(déclenchées, vpp-ver:pper, déclenchées, [dl(0,np,s_pass)-1]), ex_si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), ex_si('Linky', npp-nam, 'Linky', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2063, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(coupures, nc-nom, coupures, [n-1]), ex_si(exceptionnelles, adj-adj, exceptionnelles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('2h', nc-nom, '2h', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,dl(1,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(devaient, v-ver:impf, devaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(êtres, nc-nom, êtres, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(mises, vpp-ver:pper, mises, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),np)-1]), ex_si(directement, adv-adv, directement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(moyenne, adj-adj, moyenne, [dr(0,dl(0,n,n),n)-1]), ex_si(tension, nc-nom, tension, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipement, nc-nom, équipement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(compteurs, nc-nom, compteurs, [n-1]), ex_si('Linky', npp-nam, 'Linky', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rappelle, v-ver:pres, rappelle, [dr(0,dl(1,s,s),np)-1]), ex_si('Enedis', npp-nam, 'Enedis', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2064, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rennes', npp-nam, 'Rennes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(seconde, adj-num, seconde, [dr(0,n,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si(chiffrée, vpp-ver:pper, chiffrée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('1,34', det-num, '1,34', [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économiste, nc-nom, économiste, [n-1]), ex_si('Philippe', npp-nam, 'Philippe', [dl(0,n,n)-1]), ex_si('Herlin', npp-nam, 'Herlin', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assuré, vpp-ver:pper, assuré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(métropole, nc-nom, métropole, [n-1]), ex_si(reviendrait, v-ver:cond, reviendrait, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('12.200', det-num, '12.200', [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(usager, nc-nom, usager, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2065, Result) :-
      prob_parse([ ex_si('L\'agglomération', nc-nom, 'L\'agglomération', [dr(0,np,n)-1]), ex_si(rennaise, adj-adj, rennaise, [n-1]), ex_si(évoque, v-ver:pres, évoque, [dl(0,n,n)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [let-1]), ex_si(global, adj-adj, global, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [let-1]), ex_si('1,342', det-num, '1,342', [dr(0,dl(0,n,n),np)-1]), ex_si(milliard, nc-nom, milliard, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(euros, nc-nom, euros, [dr(0,dl(0,np,np),n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('100.000', det-num, '100.000', [let-1]), ex_si(voyages, nc-nom, voyages, [dr(0,np,n)-1]), ex_si(attendus, vpp-ver:pper, attendus, [n-1]), ex_si(chaque, det-pro:ind, chaque, [dl(0,n,n)-1]), ex_si(jour, nc-nom, jour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(dans, p-prp, dans, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [dr(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(métro, nc-nom, métro, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(en, p-prp, en, [let-1]), ex_si(soulignant, vpr-ver:ppre, soulignant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [let-1]), ex_si(coût, nc-nom, coût, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(livraison, nc-nom, livraison, [dr(0,np,n)-1]), ex_si(respecte, v-ver:pres, respecte, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), ex_si(enveloppe, nc-nom, enveloppe, [dr(0,np,n)-1]), ex_si(initiale, adj-adj, initiale, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(2066, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rennes', npp-nam, 'Rennes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(seconde, adj-num, seconde, [dr(0,n,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si(chiffrée, vpp-ver:pper, chiffrée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('1,34', det-num, '1,34', [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économiste, nc-nom, économiste, [n-1]), ex_si('Philippe', npp-nam, 'Philippe', [dl(0,n,n)-1]), ex_si('Herlin', npp-nam, 'Herlin', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assuré, vpp-ver:pper, assuré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(métropole, nc-nom, métropole, [n-1]), ex_si(reviendrait, v-ver:cond, reviendrait, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('12.200', det-num, '12.200', [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(usager, nc-nom, usager, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2067, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(raisonnement, nc-nom, raisonnement, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(tient, v-ver:pres, tient, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(telle, adj-adj, telle, [dr(0,n,n)-1]), ex_si(infrastructure, nc-nom, infrastructure, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ouvrages, nc-nom, ouvrages, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(génie, nc-nom, génie, [n-1]), ex_si(civil, adj-adj, civil, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(roulant, vpr-ver:ppre, roulant, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(renouvelée, vpp-ver:pper, renouvelée, [dl(0,n,n)-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(environ, adv-adv, environ, [dl(0,n,n)-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fallu, vpp-ver:pper, fallu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(renouveler, vinf-ver:infi, renouveler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('12.000', det-num, '12.000', [dr(0,np,n)-1]), ex_si('€', nc-abr, '€', [n-1]), ex_si(environ, adv-adv, environ, [n-1]), ex_si(5, det-num, 5, [dr(0,dr(0,np,np),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(moyenne, nc-nom, moyenne, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(infrastructures, nc-nom, infrastructures, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(engendrant, vpr-ver:ppre, engendrant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(important, adj-adj, important, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(que, cs-kon, que, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,s_q,np)-1]), ex_si('1,3', adj-num, '1,3', [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(abonde, v-ver:pres, abonde, [dr(0,dl(1,s,s),np)-1]), ex_si('Cloé', npp-nam, 'Cloé', [dr(0,np,np)-1]), ex_si('Chevron', npp-nam, 'Chevron', [dr(0,np,np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(2068, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(automobiliste, nc-nom, automobiliste, [n-1]), ex_si(engendre, v-ver:pres, engendre, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(usages, nc-nom, usages, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(usant, vpr-ver:ppre, usant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(route, nc-nom, route, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(provoquant, vpr-ver:ppre, provoquant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(embouteillages, nc-nom, embouteillages, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(collectivité, nc-nom, collectivité, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pollution, nc-nom, pollution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bruit, nc-nom, bruit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2069, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('L\'agglomération', npp-nam, 'L\'agglomération', [dr(0,np,n)-1]), ex_si(aurait, v-ver:cond, aurait, [n-1]), ex_si(effectivement, adv-adv, effectivement, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(une, det-det:art, une, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(voiture, nc-nom, voiture, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si('12.000', det-num, '12.000', [dr(0,dl(0,n,n),np)-1]), ex_si('€', nc-abr, '€', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(probablement, adv-adv, probablement, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,np)-1]), ex_si(voiture, nc-nom, voiture, [dr(0,np,n)-1]), ex_si(thermique, adj-adj, thermique, [n-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si(occasion, nc-nom, occasion, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(à, p-prp, à, [let-1]), ex_si(chacun, pro-pro:ind, chacun, [dr(0,pp_a,np)-1]), ex_si(des, p+d-prp:det, des, [np-1]), ex_si(voyageurs, nc-nom, voyageurs, [dr(0,dl(0,np,np),n)-1]), ex_si(quotidiens, adj-adj, quotidiens, [n-1]), ex_si(attendus, vpp-ver:pper, attendus, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),pp)-1]), ex_si(la, det-det:art, la, [dr(0,pp,np)-1]), ex_si(ligne, nc-nom, ligne, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2070, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(additionnels, adj-adj, additionnels, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(routes, nc-nom, routes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agglomération, nc-nom, agglomération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rennes', npp-nam, 'Rennes', [np-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(congestion, nc-nom, congestion, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(engendrant, vpr-ver:ppre, engendrant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(usagers, nc-nom, usagers, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pollution, nc-nom, pollution, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2071, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inverse, nc-nom, inverse, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gains, nc-nom, gains, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(usagers, nc-nom, usagers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(entraîner, vinf-ver:infi, entraîner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(basculement, nc-nom, basculement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(particulière, adj-adj, particulière, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(commun, nc-nom, commun, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pointe, v-ver:pres, pointe, [dr(0,dl(1,s,s),np)-1]), ex_si('Cloé', npp-nam, 'Cloé', [dr(0,np,np)-1]), ex_si('Chevron', npp-nam, 'Chevron', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2072, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('RWE', npp-abr, 'RWE', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Guido', npp-nam, 'Guido', [dr(0,np,np)-1]), ex_si('Steffen', npp-nam, 'Steffen', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si('e-mail', nc-nom, 'e-mail', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bagger', npp-nam, 'Bagger', [n-1]), ex_si(288, adj-num, 288, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(construite, vpp-ver:pper, construite, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hambach', npp-nam, 'Hambach', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si('là-bas', adv-adv, 'là-bas', [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(déplacée, vpp-ver:pper, déplacée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Garzweiler', npp-nam, 'Garzweiler', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2001, pro-num, 2001, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2073, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(constructeur, nc-nom, constructeur, [n-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(excavatrice, nc-nom, excavatrice, [n-1]), ex_si('Bagger', npp-nam, 'Bagger', [dl(0,n,n)-1]), ex_si(288, adj-num, 288, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Garzweiler', npp-nam, 'Garzweiler', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouest, nc-nom, ouest, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(exploite, v-ver:pres, exploite, [dr(0,dl(0,np,s),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(lignite, nc-nom, lignite, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(charbon, nc-nom, charbon, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2074, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si(consacrée, vpp-ver:pper, consacrée, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(vérifier, vinf-ver:infi, vérifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mythes, nc-nom, mythes, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('EPA', npp-abr, 'EPA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(associées, vpp-ver:pper, associées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(généralement, adv-adv, généralement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(inférieures, adj-adj, inférieures, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(celles, pro-pro:dem, celles, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(essence, nc-nom, essence, [n-1]), ex_si(moyen, adj-adj, moyen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(tenant, vpr-ver:ppre, tenant, [dr(0,dr(0,dl(0,np,s_ppres),pp_de),np)-1]), ex_si(compte, nc-nom, compte, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2075, Result) :-
      prob_parse([ ex_si('D\'', det-prp, 'D\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(tendent, v-ver:pres, tendent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), ex_si(global, adj-adj, global, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(prend, v-ver:pres, prend, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(thermique, adj-adj, thermique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2076, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chiffres, nc-nom, chiffres, [n-1]), ex_si(cités, vpp-ver:pper, cités, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('New', npp-nam, 'New', [dr(0,n,n)-1]), ex_si('York', npp-nam, 'York', [dr(0,n,n)-1]), ex_si('Times', npp-nam, 'Times', [n-1]), ex_si(intitulé, vpp-ver:pper, intitulé, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ruée, nc-nom, ruée, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lithium, nc-nom, lithium, [n-1]), ex_si(':', ponct-pun, ':', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(course, nc-nom, course, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(cite, v-ver:pres, cite, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si('Lithium', npp-nam, 'Lithium', [dl(0,n,n)-1]), ex_si('Americas', npp-nam, 'Americas', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('3.224', det-num, '3.224', [dr(0,np,n)-1]), ex_si(gallons, nc-nom, gallons, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si('12.200', det-num, '12.200', [dr(0,np,n)-1]), ex_si(litres, nc-nom, litres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(minute, nc-nom, minute, [n-1]), ex_si(consommés, vpp-ver:pper, consommés, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Nevada', npp-nam, 'Nevada', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(par, p-prp, par, [n-1]), ex_si(seconde, nc-nom, seconde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2077, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(estimations, nc-nom, estimations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lithium', npp-nam, 'Lithium', [dr(0,np,np)-1]), ex_si('Americas', npp-nam, 'Americas', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(sic, adv-abr, sic, [dl(1,s,s)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(cite, v-ver:pres, cite, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('New', npp-nam, 'New', [dr(0,n,n)-1]), ex_si('York', npp-nam, 'York', [dr(0,n,n)-1]), ex_si('Times', npp-nam, 'Times', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(consommera, v-ver:futu, consommera, [dr(0,dl(0,np,s),np)-1]), ex_si('12.200', det-num, '12.200', [dr(0,np,n)-1]), ex_si(litres, nc-nom, litres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(seconde, nc-nom, seconde, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('66.000', det-num, '66.000', [dr(0,np,n)-1]), ex_si(tonnes, nc-nom, tonnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbonate, nc-nom, carbonate, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lithium, nc-nom, lithium, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(vérifions, v-ver:pres, vérifions, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2078, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('De', p-prp, 'De', [dr(0,dr(0,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(clair, adj-adj, clair, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(massif, adj-adj, massif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(automobile, nc-nom, automobile, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(quantités, nc-nom, quantités, [n-1]), ex_si(énormes, adj-adj, énormes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Li', npp-nam, 'Li', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(lithium, nc-nom, lithium, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ndlr, adv-adv, ndlr, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(cuivre, nc-nom, cuivre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(cobalt, nc-nom, cobalt, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(manganèse, nc-nom, manganèse, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(nickel, nc-nom, nickel, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(aluminium, nc-nom, aluminium, [n-1]), ex_si('...', ponct-pun, '...', [dl(0,s,txt)-1])], Result).
sent(2079, Result) :-
      prob_parse([ ex_si('Dont', cs-kon, 'Dont', [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extraction, nc-nom, extraction, [n-1]), ex_si(massive, adj-adj, massive, [dl(0,n,n)-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(environnemental, adj-adj, environnemental, [dl(0,n,n)-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(commenté, vpp-ver:pper, commenté, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Nathalie', npp-nam, 'Nathalie', [dr(0,np,np)-1]), ex_si('Job', npp-nam, 'Job', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(ingénieure, nc-nom, ingénieure, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matériaux, nc-nom, matériaux, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(procédés, nc-nom, procédés, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transformation, nc-nom, transformation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(stockage, nc-nom, stockage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(interrogée, vpp-ver:pper, interrogée, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2080, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('peut-être', adv-adv, 'peut-être', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(essayé, vpp-ver:pper, essayé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(croire, vinf-ver:infi, croire, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2081, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(survendu, vpp-ver:pper, survendu, [dl(0,np,s_pass)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(miracle, nc-nom, miracle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2082, Result) :-
      prob_parse([ ex_si('Or', cc-kon, 'Or', [dr(0,s,s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2083, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(regarde, v-ver:pres, regarde, [dl(0,np,s)-1]), ex_si(globalement, adv-adv, globalement, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(compare, v-ver:pres, compare, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(thermiques, adj-adj, thermiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(quand, cs-kon, quand, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [n-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si(environnementaux, adj-adj, environnementaux, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(déclarait, v-ver:impf, déclarait, [dr(0,dl(1,s,s),np)-1]), ex_si('Patrick', npp-nam, 'Patrick', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Hugues', npp-nam, 'Hugues', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('BRGM', npp-abr, 'BRGM', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2084, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(constructeur, nc-nom, constructeur, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Tesla', npp-nam, 'Tesla', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moitié, nc-nom, moitié, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(batteries, nc-nom, batteries, [n-1]), ex_si('LFP', npp-abr, 'LFP', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Marko', npp-nam, 'Marko', [dr(0,np,np)-1]), ex_si('Paakkinen', npp-nam, 'Paakkinen', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si('VTT', nc-abr, 'VTT', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(interrogé, vpp-ver:pper, interrogé, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(lithium, nc-nom, lithium, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(fer, nc-nom, fer, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(phosphate, nc-nom, phosphate, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(matières, nc-nom, matières, [n-1]), ex_si(premières, adj-adj, premières, [dl(0,n,n)-1]), ex_si(critiques, adj-adj, critiques, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(respectueux, adj-adj, respectueux, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('NMC', npp-abr, 'NMC', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2085, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(batteries, nc-nom, batteries, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(batteries, nc-nom, batteries, [n-1]), ex_si(dites, vpp-ver:pper, dites, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('NMC', npp-abr, 'NMC', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comprenant, vpr-ver:ppre, comprenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(nickel, nc-nom, nickel, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(manganèse, nc-nom, manganèse, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(cobalt, nc-nom, cobalt, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2086, Result) :-
      prob_parse([ ex_si('Jens', npp-nam, 'Jens', [dr(0,np,np)-1]), ex_si('Buchgeister', npp-nam, 'Buchgeister', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si('Recherche', nc-nom, 'Recherche', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si(énergétiques, adj-adj, énergétiques, [dl(0,n,n)-1]), ex_si(durables, adj-adj, durables, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Karlsruhe', npp-nam, 'Karlsruhe', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(possible, adj-adj, possible, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si(indiquer, vinf-ver:infi, indiquer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(précision, nc-nom, précision, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(excavée, vpp-ver:pper, excavée, [dl(0,n,n)-1]), ex_si(nécessaire, adj-adj, nécessaire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),pp)-1]), ex_si(la, det-det:art, la, [dr(0,pp_a,np)-1]), ex_si(fabrication, nc-nom, fabrication, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,n,n),np)-1]), ex_si(batterie, nc-nom, batterie, [dr(0,np,n)-1]), ex_si(électrique, adj-adj, électrique, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(2087, Result) :-
      prob_parse([ ex_si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Newman', npp-nam, 'Newman', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(durable, adj-adj, durable, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(australienne, adj-adj, australienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Curtin', npp-nam, 'Curtin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(combien, advwh-adv, combien, [dr(0,s_whq,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(déplacée, vpp-ver:pper, déplacée, [dl(0,np,s_pass)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(extraction, nc-nom, extraction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(matières, nc-nom, matières, [n-1]), ex_si(premières, adj-adj, premières, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(batterie, nc-nom, batterie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lithium, nc-nom, lithium, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2088, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(observe, v-ver:pres, observe, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(succession, nc-nom, succession, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(périodes, nc-nom, périodes, [n-1]), ex_si(interglaciaires, adj-adj, interglaciaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(glaciaires, adj-adj, glaciaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cyclicité, nc-nom, cyclicité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('100.000', det-num, '100.000', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2089, Result) :-
      prob_parse([ ex_si('Interglaciaire', nc-nom, 'Interglaciaire', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(comme, cs-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(identifie, v-ver:pres, identifie, [dr(0,dl(0,np,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(marin, adj-adj, marin, [dl(0,n,n)-1]), ex_si(relatif, adj-adj, relatif, [dl(0,n,n)-1]), ex_si(proche, adj-adj, proche, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(0, det-num, 0, [dr(0,np,n)-1]), ex_si(mètre, nc-nom, mètre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2090, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opposé, nc-nom, opposé, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(périodes, nc-nom, périodes, [n-1]), ex_si(glaciaires, adj-adj, glaciaires, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(constitué, vpp-ver:pper, constitué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(phases, nc-nom, phases, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bas, adj-adj, bas, [dr(0,n,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(marin, adj-adj, marin, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(-120, det-num, -120, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(précise, v-ver:pres, précise, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chercheur, nc-nom, chercheur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2091, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(nous, pro-pro:per, nous, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(époques, nc-nom, époques, [n-1]), ex_si(favorables, adj-adj, favorables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(soustraire, vinf-ver:infi, soustraire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(ainsi, adv-adv, ainsi, [dr(0,s,s)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dr(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mers, nc-nom, mers, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(descendu, vpp-ver:pper, descendu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(-120, det-num, -120, [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si(-130, det-num, -130, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si('20.000', det-num, '20.000', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(environ, adv-adv, environ, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(grande, adj-adj, grande, [n-1]), ex_si(glaciation, nc-nom, glaciation, [let-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pôles, nc-nom, pôles, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), ex_si(détaille, v-ver:pres, détaille, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(chercheur, nc-nom, chercheur, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2092, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(donc, adv-adv, donc, [dr(0,pp,pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fonte, nc-nom, fonte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(glaces, nc-nom, glaces, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élévation, nc-nom, élévation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si('Marina', npp-nam, 'Marina', [np-1]), ex_si('Lévy', npp-nam, 'Lévy', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [dr(0,dl(0,n,n),n)-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si('CNRS', npp-abr, 'CNRS', [dr(0,dl(0,n,n),n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(adjointe, adj-adj, adjointe, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(océan, nc-nom, océan, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('IRD', npp-abr, 'IRD', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2093, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fonte, nc-nom, fonte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(glaciers, nc-nom, glaciers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(marine, adj-adj, marine, [dl(0,n,n)-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(accélérée, vpp-ver:pper, accélérée, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2094, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(marin, adj-adj, marin, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectivement, adv-adv, effectivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(varié, vpp-ver:pper, varié, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(évolue, v-ver:pres, évolue, [dl(0,np,s)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(voire, cc-kon, voire, [dr(0,dl(0,n,n),n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(phénomènes, nc-nom, phénomènes, [n-1]), ex_si(tectoniques, adj-adj, tectoniques, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(structure, nc-nom, structure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écorce, nc-nom, écorce, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(astronomiques, adj-adj, astronomiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(élévation, nc-nom, élévation, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(observée, vpp-ver:pper, observée, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2095, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(variation, nc-nom, variation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(marin, adj-adj, marin, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(géologiques, adj-adj, géologiques, [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(consensus, nc-nom, consensus, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(étudient, v-ver:pres, étudient, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paléoclimatologie, nc-nom, paléoclimatologie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(science, nc-nom, science, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(climats, nc-nom, climats, [n-1]), ex_si(passés, vpp-ver:pper, passés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mènent, v-ver:pres, mènent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2096, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(centimètres, nc-nom, centimètres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(scénarios, nc-nom, scénarios, [n-1]), ex_si(envisagés, vpp-ver:pper, envisagés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2097, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(résumé, nc-nom, résumé, [n-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),n)-1]), ex_si(horizon, nc-nom, horizon, [n-1]), ex_si(2100, adj-num, 2100, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(global, adj-adj, global, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(projeté, vpp-ver:pper, projeté, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(28, det-num, 28, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(55, det-num, 55, [dr(0,np,n)-1]), ex_si(cm, nc-abr, cm, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réduction, nc-nom, réduction, [n-1]), ex_si(significative, adj-adj, significative, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2098, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(cm, nc-abr, cm, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(1, det-num, 1, [dr(0,np,n)-1]), ex_si(m, nc-abr, m, [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(advenir, vinf-ver:infi, advenir, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(figure, nc-nom, figure, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(catastrophique, adj-adj, catastrophique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2099, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vrai, adj-adj, vrai, [dr(0,n,n)-1]), ex_si(débat, nc-nom, débat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(anthropiques, adj-adj, anthropiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(établi, vpp-ver:pper, établi, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(conclut, v-ver:pres, conclut, [dr(0,dl(1,s,s),np)-1]), ex_si('Marina', npp-nam, 'Marina', [dr(0,np,np)-1]), ex_si('Lévy', npp-nam, 'Lévy', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2100, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(relayée, vpp-ver:pper, relayée, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Facebook', npp-nam, 'Facebook', [np-1]), ex_si(prétend, v-ver:pres, prétend, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(montée, nc-nom, montée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(remettant, vpr-ver:ppre, remettant, [dr(0,dr(0,dl(0,np,s_ppres),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(anthropique, adj-adj, anthropique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accélération, nc-nom, accélération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(montée, nc-nom, montée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2101, Result) :-
      prob_parse([ ex_si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilité, nc-nom, utilité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(consultations, nc-nom, consultations, [n-1]), ex_si(mises, vpp-ver:pper, mises, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exécutif, nc-nom, exécutif, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(avant, nc-nom, avant, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(concrets, adj-adj, concrets, [dl(0,n,n)-1]), ex_si(issus, vpp-ver:pper, issus, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(150, det-num, 150, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(proposé, vpp-ver:pper, proposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(149, det-num, 149, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2102, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(149, nc-num, 149, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(85, det-num, 85, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(propositions, nc-nom, propositions, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retenues, vpp-ver:pper, retenues, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(appliquées, vpp-ver:pper, appliquées, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Olivier', npp-nam, 'Olivier', [dr(0,np,np)-1]), ex_si('Véran', npp-nam, 'Véran', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2103, Result) :-
      prob_parse([ ex_si('Contacté', vpp-ver:pper, 'Contacté', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('porte-parolat', nc-nom, 'porte-parolat', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si('demi-mot', nc-nom, 'demi-mot', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(67, det-num, 67, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(propositions, nc-nom, propositions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(convention, nc-nom, convention, [n-1]), ex_si(citoyenne, adj-adj, citoyenne, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(149, pro-num, 149, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(mises, vpp-ver:pper, mises, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(totalement, adv-adv, totalement, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(partiellement, adv-adv, partiellement, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2104, Result) :-
      prob_parse([ ex_si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dr(0,s,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(suivi, nc-nom, suivi, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('Climat', npp-nam, 'Climat', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Résilience', npp-nam, 'Résilience', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(énergies, nc-nom, énergies, [n-1]), ex_si(fossiles, adj-adj, fossiles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(périmètre, nc-nom, périmètre, [n-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(restreint, vpp-ver:pper, restreint, [dl(0,n,n)-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(convention, nc-nom, convention, [n-1]), ex_si(citoyenne, adj-adj, citoyenne, [dl(0,n,n)-1]), ex_si(visait, v-ver:impf, visait, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(publicités, nc-nom, publicités, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2105, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(150, nc-num, 150, [dr(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(participants, nc-nom, participants, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réglementation, nc-nom, réglementation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(polluants, adj-adj, polluants, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(nocifs, adj-adj, nocifs, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(par, p-prp, par, [dr(0,dr(0,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(voulaient, v-ver:impf, voulaient, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(pubs, nc-nom, pubs, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('SUV', nc-nom, 'SUV', [n-1]), ex_si('[Sport', ponct-pun, '[Sport', [dr(0,dl(0,n,n),n)-1]), ex_si(utility, et-adj, utility, [dr(0,n,n)-1]), ex_si('vehicle]', ponct-pun, 'vehicle]', [dr(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(polluent, v-ver:pres, polluent, [let-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(maximum, nc-nom, maximum, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2106, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(mentionne, v-ver:pres, mentionne, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pubs, nc-nom, pubs, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(énergies, nc-nom, énergies, [n-1]), ex_si(fossiles, adj-adj, fossiles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(quasiment, adv-adv, quasiment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pub, nc-nom, pub, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(1,s,s),np)-1]), ex_si('-t-elle', cls-pro:per, '-t-elle', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2107, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Convention', nc-nam, 'Convention', [n-1]), ex_si(citoyenne, adj-adj, citoyenne, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Climat', npp-nam, 'Climat', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(mandat, nc-nom, mandat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(définir, vinf-ver:infi, définir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(2030, adj-num, 2030, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(1990, pro-num, 1990, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dr(0,s,np),dl(0,np,s_inf))-1]), ex_si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(respect, nc-nom, respect, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Accord', nc-nam, 'Accord', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2108, Result) :-
      prob_parse([ ex_si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilité, nc-nom, utilité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(consultations, nc-nom, consultations, [n-1]), ex_si(mises, vpp-ver:pper, mises, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exécutif, nc-nom, exécutif, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Santé', nc-nam, 'Santé', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(avant, nc-nom, avant, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(concrets, adj-adj, concrets, [dl(0,n,n)-1]), ex_si(issus, vpp-ver:pper, issus, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(150, det-num, 150, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2019, adj-num, 2019, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(proposé, vpp-ver:pper, proposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(149, det-num, 149, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2109, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(météorologue, nc-nom, météorologue, [n-1]), ex_si('Piers', npp-nam, 'Piers', [dl(0,n,n)-1]), ex_si('Corbyn', npp-nam, 'Corbyn', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(habitué, vpp-ver:pper, habitué, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prises, nc-nom, prises, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paroles, nc-nom, paroles, [n-1]), ex_si('climato-sceptiques', adj-adj, 'climato-sceptiques', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prétend, v-ver:pres, prétend, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(phénomène, nc-nom, phénomène, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(reposant, vpr-ver:ppre, reposant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Soleil', npp-nam, 'Soleil', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(causées, vpp-ver:pper, causées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', nc-nam, 'Homme', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2110, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(climatologues, nc-nom, climatologues, [n-1]), ex_si(expliquent, v-ver:pres, expliquent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(variations, nc-nom, variations, [n-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(trop, adv-adv, trop, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(faibles, adj-adj, faibles, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(variations, nc-nom, variations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(observées, vpp-ver:pper, observées, [dl(0,n,n)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2111, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(phases, nc-nom, phases, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2112, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dérèglement, nc-nom, dérèglement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(outre, adv-adv, outre, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(consensus, nc-nom, consensus, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(rappellent, v-ver:pres, rappellent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(urgent, adj-adj, urgent, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(diminuer, vinf-ver:infi, diminuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2113, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(météorologue, nc-nom, météorologue, [n-1]), ex_si('Piers', npp-nam, 'Piers', [dl(0,n,n)-1]), ex_si('Corbyn', npp-nam, 'Corbyn', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(habitué, vpp-ver:pper, habitué, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prises, nc-nom, prises, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paroles, nc-nom, paroles, [n-1]), ex_si('climato-sceptiques', adj-adj, 'climato-sceptiques', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prétend, v-ver:pres, prétend, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(phénomène, nc-nom, phénomène, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(reposant, vpr-ver:ppre, reposant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Soleil', npp-nam, 'Soleil', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(causées, vpp-ver:pper, causées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', nc-nam, 'Homme', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2114, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rayonnement, nc-nom, rayonnement, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(influe, v-ver:pres, influe, [dr(0,dl(0,np,s),pp)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2115, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(affecte, v-ver:pres, affecte, [dr(0,dl(0,np,s),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(couches, nc-nom, couches, [n-1]), ex_si(atmosphériques, adj-adj, atmosphériques, [dl(0,n,n)-1]), ex_si(confondues, vpp-ver:pper, confondues, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troposphère, nc-nom, troposphère, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(stratosphère, nc-nom, stratosphère, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2116, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(revanche, nc-nom, revanche, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dr(0,s,s),np)-1]), ex_si(150, det-num, 150, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(variations, nc-nom, variations, [n-1]), ex_si(climatiques, adj-adj, climatiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dues, vpp-ver:pper, dues, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', nc-nam, 'Homme', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2117, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(détaillait, v-ver:impf, détaillait, [dr(0,dl(1,s,s),np)-1]), ex_si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), ex_si('Friedlingstein', npp-nam, 'Friedlingstein', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2118, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(météorologue, nc-nom, météorologue, [n-1]), ex_si('Piers', npp-nam, 'Piers', [dl(0,n,n)-1]), ex_si('Corbyn', npp-nam, 'Corbyn', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(habitué, vpp-ver:pper, habitué, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prises, nc-nom, prises, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paroles, nc-nom, paroles, [n-1]), ex_si('climato-sceptiques', adj-adj, 'climato-sceptiques', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prétend, v-ver:pres, prétend, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(phénomène, nc-nom, phénomène, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(reposant, vpr-ver:ppre, reposant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Soleil', npp-nam, 'Soleil', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(causées, vpp-ver:pper, causées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', nc-nam, 'Homme', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2119, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(réalisée, vpp-ver:pper, réalisée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2021, pro-num, 2021, [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(récentes, adj-adj, récentes, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(terrestres, adj-adj, terrestres, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(état, nc-nom, état, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(changements, nc-nom, changements, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(via, p-prp, via, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marées, nc-nom, marées, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(changements, nc-nom, changements, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(expliquent, v-ver:pres, expliquent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(seuls, adj-adj, seuls, [dl(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dérèglement, nc-nom, dérèglement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(observé, vpp-ver:pper, observé, [dl(0,n,n)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remettent, v-ver:pres, remettent, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, nc-nom, dernier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2120, Result) :-
      prob_parse([ ex_si('Piers', npp-nam, 'Piers', [dr(0,np,np)-1]), ex_si('Corbyn', npp-nam, 'Corbyn', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(météorologue, nc-nom, météorologue, [n-1]), ex_si(anglais, adj-adj, anglais, [dl(0,n,n)-1]), ex_si(notoirement, adv-adv, notoirement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('climato-sceptique', adj-adj, 'climato-sceptique', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(opposé, vpp-ver:pper, opposé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Covid-19', npp-nam, 'Covid-19', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pandémie, nc-nom, pandémie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(adepte, nc-nom, adepte, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(théories, nc-nom, théories, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(complot, nc-nom, complot, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(intervenu, vpp-ver:pper, intervenu, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(diffusée, vpp-ver:pper, diffusée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(chaîne, nc-nom, chaîne, [dr(0,dl(0,n,n),n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('RT', npp-abr, 'RT', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2121, Result) :-
      prob_parse([ ex_si('Piers', npp-nam, 'Piers', [dr(0,np,np)-1]), ex_si('Corbyn', npp-nam, 'Corbyn', [np-1]), ex_si(affiche, v-ver:pres, affiche, [dr(0,dl(0,np,s),np)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(positions, nc-nom, positions, [n-1]), ex_si('anti-confinement', adj-adj, 'anti-confinement', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('anti-masques', adj-adj, 'anti-masques', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('anti-vaccination', adj-adj, 'anti-vaccination', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(relayant, vpr-ver:ppre, relayant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(théories, nc-nom, théories, [n-1]), ex_si(parfois, adv-adv, parfois, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(infondées, adj-adj, infondées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(injections, nc-nom, injections, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(estimant, vpr-ver:ppre, estimant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réalisation, nc-nom, réalisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(dernières, nc-nom, dernières, [n-1]), ex_si(repose, v-ver:pres, repose, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,s),pp)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(paquet, nc-nom, paquet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mensonges, nc-nom, mensonges, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vous, clo-pro:per, vous, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(laver, vinf-ver:infi, laver, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cerveau, nc-nom, cerveau, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2122, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(1950, pro-num, 1950, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(clairement, adv-adv, clairement, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,n,n)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tenir, vinf-ver:infi, tenir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(compte, nc-nom, compte, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(principalement, adv-adv, principalement, [dr(0,pp,pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(résumait, v-ver:impf, résumait, [dr(0,dl(1,s,s),np)-1]), ex_si('Jean-Pascal', npp-nam, 'Jean-Pascal', [dr(0,np,np)-1]), ex_si(van, npp-nam, van, [np-1]), ex_si('Ypersele', npp-nam, 'Ypersele', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2123, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('On', cls-pro:per, 'On', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(arrive, v-ver:pres, arrive, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(variabilité, nc-nom, variabilité, [n-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(contribue, v-ver:pres, contribue, [dr(0,dl(0,np,s),pp)-1]), ex_si(quasiment, adv-adv, quasiment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2124, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Fait', nc-nom, 'Fait', [n-1]), ex_si(remarquable, adj-adj, remarquable, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(928, adj-num, 928, [dr(0,n,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(évalués, vpp-ver:pper, évalués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(publiés, vpp-ver:pper, publiés, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(exprime, v-ver:pres, exprime, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(désaccord, nc-nom, désaccord, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(consensuelle, adj-adj, consensuelle, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cinquante, adj-num, cinquante, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(principalement, adv-adv, principalement, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(anthropique, adj-adj, anthropique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(écrit, v-ver:pres, écrit, [dr(0,dl(1,s,s),np)-1]), ex_si('Naomi', npp-nam, 'Naomi', [dr(0,np,np)-1]), ex_si('Oreskes', npp-nam, 'Oreskes', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réalisée, vpp-ver:pper, réalisée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2125, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(consensus, nc-nom, consensus, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dérèglement, nc-nom, dérèglement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2126, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Fait', nc-nom, 'Fait', [n-1]), ex_si(remarquable, adj-adj, remarquable, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(928, adj-num, 928, [dr(0,n,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(évalués, vpp-ver:pper, évalués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(publiés, vpp-ver:pper, publiés, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(exprime, v-ver:pres, exprime, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(désaccord, nc-nom, désaccord, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(consensuelle, adj-adj, consensuelle, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cinquante, adj-num, cinquante, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(principalement, adv-adv, principalement, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(anthropique, adj-adj, anthropique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(écrit, v-ver:pres, écrit, [dr(0,dl(1,s,s),np)-1]), ex_si('Naomi', npp-nam, 'Naomi', [dr(0,np,np)-1]), ex_si('Oreskes', npp-nam, 'Oreskes', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réalisée, vpp-ver:pper, réalisée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2127, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(confiance, nc-nom, confiance, [n-1]), ex_si(statistique, adj-adj, statistique, [dl(0,n,n)-1]), ex_si(élevée, vpp-ver:pper, élevée, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(consensus, nc-nom, consensus, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(contemporain, adj-adj, contemporain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(proportion, nc-nom, proportion, [n-1]), ex_si(total, adj-adj, total, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dépasse, v-ver:pres, dépasse, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(99, adj-num, 99, [dr(0,n,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(évaluée, vpp-ver:pper, évaluée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2128, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', npp-nam, 'Homme', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(régulièrement, adv-adv, régulièrement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remise, vpp-ver:pper, remise, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(utilisateurs, nc-nom, utilisateurs, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2129, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(majoritairement, adv-adv, majoritairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(lié, vpp-ver:pper, lié, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(variations, nc-nom, variations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Soleil', npp-nam, 'Soleil', [n-1]), ex_si(revient, v-ver:pres, revient, [dr(0,dl(0,np,s),pp)-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2130, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Naturellement', adv-adv, 'Naturellement', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(refroidissement, nc-nom, refroidissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2131, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(laissait, v-ver:impf, laissait, [dr(0,dr(0,dl(0,np,s),np),dl(0,np,s_inf))-1]), ex_si(aller, vinf-ver:infi, aller, [dl(0,np,s_inf)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(choses, nc-nom, choses, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', nc-nam, 'Homme', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(irait, v-ver:impf, irait, [dr(0,dl(0,np,s),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(glaciation, nc-nom, glaciation, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('100.000', det-num, '100.000', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2132, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Homme', nc-nam, 'Homme', [n-1]), ex_si(perturbe, v-ver:pres, perturbe, [dr(0,dl(0,np,s),np)-1]), ex_si(tout, pro-pro:ind, tout, [np-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2133, Result) :-
      prob_parse([ ex_si(',', ponct-pun, ',', [let-1]), ex_si(expliquait, v-ver:impf, expliquait, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(3, adj-num, 3, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('Xavier', npp-nam, 'Xavier', [dr(0,np,np)-1]), ex_si('Fettweis', npp-nam, 'Fettweis', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(climatologue, nc-nom, climatologue, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2134, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(variations, nc-nom, variations, [n-1]), ex_si(climatiques, adj-adj, climatiques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(observées, vpp-ver:pper, observées, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(millénaires, nc-nom, millénaires, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(apparaisse, vs-ver:subp, apparaisse, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2135, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réchauffe, v-ver:pres, réchauffe, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2136, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(appels, nc-nom, appels, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(dénoncer, vinf-ver:infi, dénoncer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comportement, nc-nom, comportement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(voisins, nc-nom, voisins, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(chaufferaient, v-ver:impf, chaufferaient, [dr(0,dl(0,np,s),np)-1]), ex_si(trop, adv-adv, trop, [dl(1,s,s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(logement, nc-nom, logement, [n-1]), ex_si(circulent, v-ver:pres, circulent, [dl(0,np,s)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(samedi, nc-nom, samedi, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2137, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Confédération', nc-nam, 'Confédération', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(messages, nc-nom, messages, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,cl_r,dl(0,np,s)),dia(1,box(1,pp_de))))-1]), ex_si(distancie, v-ver:pres, distancie, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(formellement, adv-adv, formellement, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(ajouté, vpp-ver:pper, ajouté, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(suisse, adj-adj, suisse, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(spécifiant, vpr-ver:ppre, spécifiant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(abus, nc-nom, abus, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2138, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(consommateurs, nc-nom, consommateurs, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(incités, vpp-ver:pper, incités, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(suisses, adj-adj, suisses, [dl(0,n,n)-1]), ex_si(demanderaient, v-ver:impf, demanderaient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dénoncer, vinf-ver:infi, dénoncer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(voisin, nc-nom, voisin, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(monterait, v-ver:impf, monterait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chauffage, nc-nom, chauffage, [n-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,pp_a,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(19, det-num, 19, [dr(0,np,n)-1]), ex_si(degrés, nc-nom, degrés, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prétendent, v-ver:pres, prétendent, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(circulant, vpr-ver:ppre, circulant, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2139, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Grenoble', npp-nam, 'Grenoble', [np-1]), ex_si(fonctionne, v-ver:pres, fonctionne, [dl(0,np,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(100, det-num, 100, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(renouvelable, adj-adj, renouvelable, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élue, nc-nom, élue, [n-1]), ex_si('Europe', npp-nam, 'Europe', [dl(0,n,n)-1]), ex_si('Ecologie-Les', npp-nam, 'Ecologie-Les', [dl(0,n,n)-1]), ex_si('Verts', npp-nam, 'Verts', [dr(0,dl(0,np,np),n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si('EELV', npp-abr, 'EELV', [n-1]), ex_si(')', ponct-pun, ')', [dr(0,dl(0,np,np),np)-1]), ex_si('Marine', npp-nam, 'Marine', [dr(0,np,np)-1]), ex_si('Tondelier', npp-nam, 'Tondelier', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2140, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(inspirer, vinf-ver:infi, inspirer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fait, vpp-ver:pper, fait, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Grenoble', npp-nam, 'Grenoble', [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergies, nc-nom, énergies, [n-1]), ex_si(renouvelables, adj-adj, renouvelables, [dl(0,n,n)-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vélo, nc-nom, vélo, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alimentation, nc-nom, alimentation, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,np)-1]), ex_si(mieux, nc-nom, mieux, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si('M.', nc-abr, 'M.', [dr(0,dl(0,n,n),np)-1]), ex_si('Jadot', npp-nam, 'Jadot', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2141, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Grenoble', npp-nam, 'Grenoble', [np-1]), ex_si(fonctionne, v-ver:pres, fonctionne, [dl(0,np,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(100, det-num, 100, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(renouvelable, adj-adj, renouvelable, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élue, nc-nom, élue, [n-1]), ex_si('Europe', npp-nam, 'Europe', [dl(0,n,n)-1]), ex_si('Ecologie-Les', npp-nam, 'Ecologie-Les', [dl(0,n,n)-1]), ex_si('Verts', npp-nam, 'Verts', [dr(0,dl(0,np,np),n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si('EELV', npp-abr, 'EELV', [n-1]), ex_si(')', ponct-pun, ')', [dr(0,dl(0,np,np),np)-1]), ex_si('Marine', npp-nam, 'Marine', [dr(0,np,np)-1]), ex_si('Tondelier', npp-nam, 'Tondelier', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2142, Result) :-
      prob_parse([ ex_si('Grenoble', npp-nam, 'Grenoble', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fonctionne, v-ver:pres, fonctionne, [dl(0,np,s)-1]), ex_si(effectivement, adv-adv, effectivement, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergies, nc-nom, énergies, [n-1]), ex_si(renouvelables, adj-adj, renouvelables, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(édile, nc-nom, édile, [n-1]), ex_si('EELV', npp-abr, 'EELV', [dl(0,n,n)-1]), ex_si(contacté, vpp-ver:pper, contacté, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(13, adj-num, 13, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dr(0,s,pp),np)-1]), ex_si('-ce', cls-pro:dem, '-ce', [np-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),s_q)-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,s,s),s)-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(avancées, nc-nom, avancées, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mobilité, nc-nom, mobilité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(encore, adv-adv, encore, [let-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(faire, vinf-ver:infi, faire, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2143, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signée, vpp-ver:pper, signée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('1.200', det-num, '1.200', [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(partagée, vpp-ver:pper, partagée, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fin, nc-nom, fin, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(entend, v-ver:pres, entend, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(remettre, vinf-ver:infi, remettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(consensus, nc-nom, consensus, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dérèglement, nc-nom, dérèglement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2144, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sans, p-prp, sans, [dr(0,pp,n)-1]), ex_si(équivoque, adj-adj, équivoque, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(incontestable, adj-adj, incontestable, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réchauffé, vpp-ver:pper, réchauffé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(redit, vpp-ver:pper, redit, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Giec', npp-nam, 'Giec', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2145, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Climate', npp-nam, 'Climate', [dr(0,n,n)-1]), ex_si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), ex_si('Foundation', npp-nam, 'Foundation', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Clintel', npp-nam, 'Clintel', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), ex_si('Berkhout', npp-nam, 'Berkhout', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(géophysicien, nc-nom, géophysicien, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [dr(0,np,n)-1]), ex_si(pétrolier, adj-adj, pétrolier, [n-1]), ex_si('Shell', npp-nam, 'Shell', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), ex_si('Crok', npp-nam, 'Crok', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(1,s,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2146, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enquêtes, nc-nom, enquêtes, [n-1]), ex_si(publiées, vpp-ver:pper, publiées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1,2', pro-num, '1,2', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(climatosceptiques, adj-adj, climatosceptiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), ex_si('Berkhout', npp-nam, 'Berkhout', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(financés, vpp-ver:pper, financés, [dl(0,np,s_pass)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(pétrolières, adj-adj, pétrolières, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si('Shell', npp-nam, 'Shell', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('ExxonMobil', npp-nam, 'ExxonMobil', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('BP', npp-abr, 'BP', [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Total', npp-nam, 'Total', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Saudi', npp-nam, 'Saudi', [np-1]), ex_si('Aramco', npp-nam, 'Aramco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2147, Result) :-
      prob_parse([ ex_si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), ex_si('Crok', npp-nam, 'Crok', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), ex_si('Berkhout', npp-nam, 'Berkhout', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('lui-même', pro-pro:per, 'lui-même', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [n-1]), ex_si(pétrolier, adj-adj, pétrolier, [dl(0,n,n)-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2148, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Climate', npp-nam, 'Climate', [dr(0,n,n)-1]), ex_si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), ex_si('Foundation', npp-nam, 'Foundation', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Clintel', npp-nam, 'Clintel', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), ex_si('Berkhout', npp-nam, 'Berkhout', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(géophysicien, nc-nom, géophysicien, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [dr(0,np,n)-1]), ex_si(pétrolier, adj-adj, pétrolier, [n-1]), ex_si('Shell', npp-nam, 'Shell', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), ex_si('Crok', npp-nam, 'Crok', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(1,s,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2149, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enquêtes, nc-nom, enquêtes, [n-1]), ex_si(publiées, vpp-ver:pper, publiées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1,2', pro-num, '1,2', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(climatosceptiques, adj-adj, climatosceptiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), ex_si('Berkhout', npp-nam, 'Berkhout', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(financés, vpp-ver:pper, financés, [dl(0,np,s_pass)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(pétrolières, adj-adj, pétrolières, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si('Shell', npp-nam, 'Shell', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('ExxonMobil', npp-nam, 'ExxonMobil', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('BP', npp-nam, 'BP', [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Total', npp-nam, 'Total', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Saudi', npp-nam, 'Saudi', [np-1]), ex_si('Aramco', npp-nam, 'Aramco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2150, Result) :-
      prob_parse([ ex_si('Clintel', npp-nam, 'Clintel', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(fondateurs, nc-nom, fondateurs, [n-1]), ex_si(diffusent, v-ver:pres, diffusent, [dr(0,dl(0,np,s),np)-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(contenus, nc-nom, contenus, [n-1]), ex_si(remettant, vpr-ver:ppre, remettant, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dérèglement, nc-nom, dérèglement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(note, v-ver:pres, note, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(média, nc-nom, média, [n-1]), ex_si(anglophone, adj-adj, anglophone, [dl(0,n,n)-1]), ex_si('DeSmog', npp-nam, 'DeSmog', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2151, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Climate', npp-nam, 'Climate', [dr(0,n,n)-1]), ex_si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), ex_si('Foundation', npp-nam, 'Foundation', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Clintel', npp-nam, 'Clintel', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), ex_si('Berkhout', npp-nam, 'Berkhout', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(géophysicien, nc-nom, géophysicien, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [dr(0,np,n)-1]), ex_si(pétrolier, adj-adj, pétrolier, [n-1]), ex_si('Shell', npp-nam, 'Shell', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), ex_si('Crok', npp-nam, 'Crok', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(1,s,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2152, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enquêtes, nc-nom, enquêtes, [n-1]), ex_si(publiées, vpp-ver:pper, publiées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1,2', pro-num, '1,2', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(climatosceptiques, adj-adj, climatosceptiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), ex_si('Berkhout', npp-nam, 'Berkhout', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(financés, vpp-ver:pper, financés, [dl(0,np,s_pass)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(pétrolières, adj-adj, pétrolières, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si('Shell', npp-nam, 'Shell', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('ExxonMobil', npp-nam, 'ExxonMobil', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('BP', npp-nam, 'BP', [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Total', npp-nam, 'Total', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Saudi', npp-nam, 'Saudi', [np-1]), ex_si('Aramco', npp-nam, 'Aramco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2153, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(pétrolières, adj-adj, pétrolières, [dl(0,n,n)-1]), ex_si(citées, vpp-ver:pper, citées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enquêtes, nc-nom, enquêtes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Shell', npp-nam, 'Shell', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(courant, nc-nom, courant, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éventuels, adj-adj, éventuels, [dr(0,n,n)-1]), ex_si(financements, nc-nom, financements, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), ex_si('Berkhout', npp-nam, 'Berkhout', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2154, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(réchauffé, vpp-ver:pper, réchauffé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(moins, adv-adv, moins, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dr(0,s,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(modélisations, nc-nom, modélisations, [n-1]), ex_si(anthropiques, adj-adj, anthropiques, [dl(0,n,n)-1]), ex_si(forcées, vpp-ver:pper, forcées, [dl(0,n,n)-1]), ex_si('...', ponct-pun, '...', [dl(0,s,txt)-1])], Result).
sent(2155, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(repose, v-ver:pres, repose, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(inadéquats, vpp-ver:pper, inadéquats, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2156, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(regarde, v-ver:pres, regarde, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(projections, nc-nom, projections, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2001, pro-num, 2001, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2007, pro-num, 2007, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(anticipé, vpp-ver:pper, anticipé, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(exactement, adv-adv, exactement, [dr(0,np,np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(observe, v-ver:pres, observe, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climatologue, nc-nom, climatologue, [n-1]), ex_si('Xavier', npp-nam, 'Xavier', [dl(0,n,n)-1]), ex_si('Fettweis', npp-nam, 'Fettweis', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2157, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bénéfique, adj-adj, bénéfique, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nature, nc-nom, nature, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(verdissant, vpr-ver:ppre, verdissant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2158, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(favorisé, vpp-ver:pper, favorisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(biomasse, nc-nom, biomasse, [n-1]), ex_si(végétale, adj-adj, végétale, [dl(0,n,n)-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2159, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), ex_si(tel, adj-adj, tel, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dr(0,s,s),s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(élevée, vpp-ver:pper, élevée, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(contribue, v-ver:pres, contribue, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(méthane, nc-nom, méthane, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(protoxyde, nc-nom, protoxyde, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(azote, nc-nom, azote, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,dl(1,s,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('GES', nc-abr, 'GES', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2160, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(néfastes, adj-adj, néfastes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(biodiversité, nc-nom, biodiversité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(populations, nc-nom, populations, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ressources, nc-nom, ressources, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2161, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('World', npp-nam, 'World', [dr(0,n,n)-1]), ex_si('Weather', npp-nam, 'Weather', [dr(0,n,n)-1]), ex_si('Attribution', nc-nam, 'Attribution', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('WWA', npp-abr, 'WWA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(visent, v-ver:pres, visent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dérèglement, nc-nom, dérèglement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(utilisant, vpr-ver:ppre, utilisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(méthodes, nc-nom, méthodes, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(analyse, nc-nom, analyse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ensembles, nc-nom, ensembles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(historiques, adj-adj, historiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(calculé, vpp-ver:pper, calculé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(diverses, adj-adj, diverses, [dr(0,np,n)-1]), ex_si(catastrophes, nc-nom, catastrophes, [n-1]), ex_si(naturelles, adj-adj, naturelles, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendues, vpp-ver:pper, rendues, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(probables, adj-adj, probables, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tempêtes, nc-nom, tempêtes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2162, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(statistique, adj-adj, statistique, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(intensifie, v-ver:pres, intensifie, [dr(0,dl(0,np,s),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(rend, v-ver:pres, rend, [dr(0,dr(0,dl(0,np,s),np),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fréquents, adj-adj, fréquents, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ouragans, nc-nom, ouragans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sécheresses, nc-nom, sécheresses, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(catastrophes, nc-nom, catastrophes, [n-1]), ex_si(naturelles, adj-adj, naturelles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2163, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(calcul, nc-nom, calcul, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(factures, nc-nom, factures, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gros, nc-nom, gros, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(diffère, v-ver:pres, diffère, [dl(0,np,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(consommateurs, nc-nom, consommateurs, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(derniers, nc-nom, derniers, [n-1]), ex_si(bénéficiant, vpr-ver:ppre, bénéficiant, [dr(0,dl(0,np,s_ppres),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(tarifs, nc-nom, tarifs, [n-1]), ex_si(réglementés, vpp-ver:pper, réglementés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(plafonnée, vpp-ver:pper, plafonnée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2164, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(faut, v-ver:pres, faut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(différence, nc-nom, différence, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tarifs, nc-nom, tarifs, [n-1]), ex_si(réglementés, vpp-ver:pper, réglementés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fixés, vpp-ver:pper, fixés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(particuliers, nc-nom, particuliers, [n-1]), ex_si(consommateurs, nc-nom, consommateurs, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(souligne, v-ver:pres, souligne, [dr(0,dl(1,s,s),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [dr(0,np,np)-1]), ex_si('Méritet', npp-nam, 'Méritet', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2165, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(calcul, nc-nom, calcul, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(factures, nc-nom, factures, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gros, nc-nom, gros, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(diffère, v-ver:pres, diffère, [dl(0,np,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(consommateurs, nc-nom, consommateurs, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(derniers, nc-nom, derniers, [n-1]), ex_si(bénéficiant, vpr-ver:ppre, bénéficiant, [dr(0,dl(0,np,s_ppres),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(tarifs, nc-nom, tarifs, [n-1]), ex_si(réglementés, vpp-ver:pper, réglementés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(plafonnée, vpp-ver:pper, plafonnée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2166, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(face, nc-nom, face, [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(flambée, nc-nom, flambée, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Jean', npp-nam, 'Jean', [dr(0,np,np)-1]), ex_si('Castex', npp-nam, 'Castex', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-adv, alors, [dr(0,dl(0,np,np),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déploiement, nc-nom, déploiement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(bouclier, nc-nom, bouclier, [n-1]), ex_si(tarifaire, adj-adj, tarifaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comportant, vpr-ver:ppre, comportant, [dr(0,dl(0,n,n),np)-1]), ex_si(notamment, adv-adv, notamment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plafond, nc-nom, plafond, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(tarifs, nc-nom, tarifs, [n-1]), ex_si(réglementés, vpp-ver:pper, réglementés, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(compter, vinf-ver:infi, compter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(blocage, nc-nom, blocage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2167, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(2007, pro-num, 2007, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(concurrence, nc-nom, concurrence, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(particuliers, nc-nom, particuliers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2168, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(consommateurs, nc-nom, consommateurs, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(fournisseur, nc-nom, fournisseur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(historiques, nc-nom, historiques, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Electricité', nc-nam, 'Electricité', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('EDF', npp-abr, 'EDF', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Engie', npp-nam, 'Engie', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(alternatifs, adj-adj, alternatifs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(chacun, pro-pro:ind, chacun, [dl(1,s,s)-1]), ex_si(proposer, vinf-ver:infi, proposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(offres, nc-nom, offres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(différents, adj-adj, différents, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2169, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(consommateurs, nc-nom, consommateurs, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fourniture, nc-nom, fourniture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(molécule, nc-nom, molécule, [n-1]), ex_si(constitue, v-ver:pres, constitue, [dr(0,dl(0,np,s),np)-1]), ex_si(48, det-num, 48, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(facture, nc-nom, facture, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(trimestre, nc-nom, trimestre, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(médiateur, nc-nom, médiateur, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2170, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('D\'une', det-det:art, 'D\'une', [dr(0,dr(0,s,s),np)-1]), ex_si(manière, nc-nom, manière, [dr(0,np,n)-1]), ex_si(générale, adj-adj, générale, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(partie, nc-nom, partie, [dr(0,np,n)-1]), ex_si(fourniture, nc-nom, fourniture, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(molécule, nc-nom, molécule, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si('c\'', cls-pro:dem, 'c\'', [dr(0,dl(0,np,s),s)-1]), ex_si(est, v-ver:pres, est, [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), ex_si(peu, adv-adv, peu, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(de, p-prp, de, [dr(0,np,pp_de)-1]), ex_si(la, det-det:art, la, [dr(0,pp_de,np)-1]), ex_si(moitié, nc-nom, moitié, [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(coût, nc-nom, coût, [dr(0,dl(0,n,n),n)-1]), ex_si(sur, p-prp, sur, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(facture, nc-nom, facture, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2171, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,s,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(approvisionnement, nc-nom, approvisionnement, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2172, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(après, adv-adv, après, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(diverses, adj-adj, diverses, [dr(0,np,n)-1]), ex_si(taxes, nc-nom, taxes, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(détaille, v-ver:pres, détaille, [dr(0,dl(1,s,s),np)-1]), ex_si('François', npp-nam, 'François', [dr(0,np,np)-1]), ex_si('Carlier', npp-nam, 'Carlier', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si('CLCV', npp-abr, 'CLCV', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2173, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(régulateur, nc-nom, régulateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ofgem', npp-nam, 'Ofgem', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tarifs, nc-nom, tarifs, [n-1]), ex_si(règlementés, vpp-ver:pper, règlementés, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(allaient, v-ver:impf, allaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2174, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(différente, adj-adj, différente, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(tensions, nc-nom, tensions, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_ppart))-1]), ex_si(élevé, vpp-ver:pper, élevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équivalent, nc-nom, équivalent, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(tarifs, nc-nom, tarifs, [n-1]), ex_si(réglementés, vpp-ver:pper, réglementés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(avec, p-prp, avec, [dr(0,dr(0,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(abrupte, adj-adj, abrupte, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grandeur, nc-nom, grandeur, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(multiplication, nc-nom, multiplication, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(cinq, pro-num, cinq, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(détaille, v-ver:pres, détaille, [dr(0,dl(1,s,s),np)-1]), ex_si('Patrice', npp-nam, 'Patrice', [dr(0,np,np)-1]), ex_si('Geoffron', npp-nam, 'Geoffron', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [dr(0,np,np)-1]), ex_si('Dauphine', npp-nam, 'Dauphine', [np-1]), ex_si('PSL', npp-abr, 'PSL', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(géopolitique, nc-nom, géopolitique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(matières, nc-nom, matières, [n-1]), ex_si(premières, adj-adj, premières, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2175, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),n)-1]), ex_si('mi-août', nc-nom, 'mi-août', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,n,n)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('HAARP', npp-abr, 'HAARP', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(géophysique, adj-adj, géophysique, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('3,6', det-num, '3,6', [dr(0,np,n)-1]), ex_si('Millions', nc-nom, 'Millions', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Watts', nc-nam, 'Watts', [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(modifier, vinf-ver:infi, modifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(guise, nc-nom, guise, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2176, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('3,6', det-num, '3,6', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(watts, nc-nom, watts, [n-1]), ex_si(équivaut, v-ver:pres, équivaut, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(infime, adj-adj, infime, [dr(0,n,n)-1]), ex_si(fraction, nc-nom, fraction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si(envoyée, vpp-ver:pper, envoyée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2177, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),n)-1]), ex_si('mi-août', nc-nom, 'mi-août', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publications, nc-nom, publications, [n-1]), ex_si(partagées, vpp-ver:pper, partagées, [dl(0,n,n)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('HAARP', npp-abr, 'HAARP', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(géophysique, adj-adj, géophysique, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('3,6', det-num, '3,6', [dr(0,np,n)-1]), ex_si('Millions', nc-nom, 'Millions', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Watts', nc-nam, 'Watts', [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(modifier, vinf-ver:infi, modifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(guise, nc-nom, guise, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2178, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(longueurs, nc-nom, longueurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(onde, nc-nom, onde, [n-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('HAARP', npp-abr, 'HAARP', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(affectent, v-ver:pres, affectent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(couches, nc-nom, couches, [n-1]), ex_si(basses, adj-adj, basses, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(observe, v-ver:pres, observe, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(et, cc-kon, et, [cl_r-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(produit, v-ver:pres, produit, [dr(0,dl(0,cl_r,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2179, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('HAARP', npp-abr, 'HAARP', [dl(0,n,n)-1]), ex_si('-High', npp-nam, '-High', [dl(0,n,n)-1]), ex_si(frequency, et-adj, frequency, [dr(0,n,n)-1]), ex_si(active, et-adj, active, [dr(0,n,n)-1]), ex_si(auroral, et-adj, auroral, [dr(0,n,n)-1]), ex_si(research, et-nam, research, [n-1]), ex_si(program, et-nom, program, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alaska', npp-nam, 'Alaska', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,pp_de,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(théories, nc-nom, théories, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(complot, nc-nom, complot, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2180, Result) :-
      prob_parse([ ex_si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(expliquait, v-ver:impf, expliquait, [dr(0,dr(0,s,np),np)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2011, pro-num, 2011, [np-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('Conspiracy', npp-nam, 'Conspiracy', [dl(0,n,n)-1]), ex_si('Watch', npp-nam, 'Watch', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('HAARP', npp-abr, 'HAARP', [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fantasmes, nc-nom, fantasmes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2181, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si('FAQ', npp-nam, 'FAQ', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('HAARP', npp-abr, 'HAARP', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(classifié, vpp-ver:pper, classifié, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pour, p-prp, pour, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [n-1]), ex_si(publiques, adj-adj, publiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2182, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('HAARP', npp-abr, 'HAARP', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(public, adj-adj, public, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2183, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si('FAQ', npp-nam, 'FAQ', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('HAARP', npp-abr, 'HAARP', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(classifié, vpp-ver:pper, classifié, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(public, adj-adj, public, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2184, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alaska', npp-nam, 'Alaska', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Fairbanks', npp-nam, 'Fairbanks', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2185, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [n-1]), ex_si(publiques, adj-adj, publiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(organise, v-ver:pres, organise, [dr(0,dl(0,np,s),np)-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(portes, nc-nom, portes, [n-1]), ex_si(ouvertes, vpp-ver:pper, ouvertes, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2186, Result) :-
      prob_parse([ ex_si('HAARP', npp-abr, 'HAARP', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(secrète, adj-adj, secrète, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(gérée, vpp-ver:pper, gérée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(2187, Result) :-
      prob_parse([ ex_si('L\'émetteur', nc-nam, 'L\'émetteur', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('HAARP', npp-abr, 'HAARP', [dr(0,dl(0,n,n),n)-1]), ex_si(envoie, v-ver:pres, envoie, [n-1]), ex_si(de, det-prp, de, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(énergie, nc-nom, énergie, [dr(0,np,n)-1]), ex_si(sous, p-prp, sous, [n-1]), ex_si(forme, nc-nom, forme, [dr(0,dl(1,s,s),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(pulsations, nc-nom, pulsations, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [let-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,s,s),np)-1]), ex_si(laps, nc-nom, laps, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(temps, nc-nom, temps, [dr(0,dl(0,n,n),n)-1]), ex_si(extrêmement, adv-adv, extrêmement, [n-1]), ex_si(court, adj-adj, court, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(donc, adv-adv, donc, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dl(1,s,s)-1]), ex_si(improbable, adj-adj, improbable, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(que, cs-kon, que, [dl(0,n,n)-1]), ex_si(cela, pro-pro:dem, cela, [dr(0,s_q,s)-1]), ex_si(modifie, v-ver:pres, modifie, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), ex_si(climat, nc-nom, climat, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si('Romain', npp-nam, 'Romain', [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Maggiolo', npp-nam, 'Maggiolo', [dr(0,np,np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(2188, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(modifie, v-ver:pres, modifie, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(long, adj-adj, long, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2189, Result) :-
      prob_parse([ ex_si('"Modifier', vinf-ver:infi, '"Modifier', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(climat, nc-nom, climat, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ça, pro-pro:dem, ça, [dr(0,dl(0,np,s),s)-1]), ex_si(veut, v-ver:pres, veut, [np-1]), ex_si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(modifier, vinf-ver:infi, modifier, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(météo, nc-nom, météo, [dr(0,np,n)-1]), ex_si(sur, p-prp, sur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),np)-1]), ex_si(long, adj-adj, long, [dr(0,np,n)-1]), ex_si(terme, nc-nom, terme, [dr(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(2190, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si(différentes, adj-adj, différentes, [dr(0,np,n)-1]), ex_si('méta-études', nc-nom, 'méta-études', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,np,np)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(résument, v-ver:pres, résument, [dr(0,dl(0,np,s),np)-1]), ex_si(systématiquement, adv-adv, systématiquement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(97, det-num, 97, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(accordent, v-ver:pres, accordent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2191, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(même, adv-adv, même, [dr(0,np,np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(consensus, nc-nom, consensus, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réchauffé, vpp-ver:pper, réchauffé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2192, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Réchauffement', nc-nom, 'Réchauffement', [n-1]), ex_si(oui, adv-adv, oui, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(incertain, adj-adj, incertain, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2193, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si(différentes, adj-adj, différentes, [dr(0,np,n)-1]), ex_si('méta-études', nc-nom, 'méta-études', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,np,np)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(résument, v-ver:pres, résument, [dr(0,dl(0,np,s),np)-1]), ex_si(systématiquement, adv-adv, systématiquement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(97, det-num, 97, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(accordent, v-ver:pres, accordent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2194, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(publiés, vpp-ver:pper, publiés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(revues, nc-nom, revues, [n-1]), ex_si(sérieuses, adj-adj, sérieuses, [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(auteurs, nc-nom, auteurs, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2195, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si(différentes, adj-adj, différentes, [dr(0,np,n)-1]), ex_si('méta-études', nc-nom, 'méta-études', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,np,np)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(résument, v-ver:pres, résument, [dr(0,dl(0,np,s),np)-1]), ex_si(systématiquement, adv-adv, systématiquement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(97, det-num, 97, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(accordent, v-ver:pres, accordent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2196, Result) :-
      prob_parse([ ex_si('Seulement', adv-adv, 'Seulement', [dr(0,np,np)-1]), ex_si(3, det-num, 3, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2197, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(variations, nc-nom, variations, [n-1]), ex_si(climatiques, adj-adj, climatiques, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(150, adj-num, 150, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(exclusivement, adv-adv, exclusivement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(générées, vpp-ver:pper, générées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2198, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Brian', npp-nam, 'Brian', [dr(0,np,np)-1]), ex_si('Catt', npp-nam, 'Catt', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(valoir, vinf-ver:infi, valoir, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fluctuation, nc-nom, fluctuation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(observée, vpp-ver:pper, observée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(millénaires, nc-nom, millénaires, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(causes, nc-nom, causes, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(juge, v-ver:pres, juge, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(démontrable, adj-adj, démontrable, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2199, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(variations, nc-nom, variations, [n-1]), ex_si(climatiques, adj-adj, climatiques, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(150, adj-num, 150, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(exclusivement, adv-adv, exclusivement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(générées, vpp-ver:pper, générées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2200, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dr(0,dl(0,np,s_ppres),np),dl(0,np,s_inf))-1]), ex_si(monter, vinf-ver:infi, monter, [dl(0,np,s_inf)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dioxyde, nc-nom, dioxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2201, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(mondiales, adj-adj, mondiales, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(augmentent, v-ver:pres, augmentent, [dl(0,np,s)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1960, adj-num, 1960, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(taches, nc-nom, taches, [n-1]), ex_si(solaires, adj-adj, solaires, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si(indicateurs, nc-nom, indicateurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(graphique, nc-nom, graphique, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(irradiance, nc-nom, irradiance, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(totale, adj-adj, totale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(graphique, nc-nom, graphique, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bas, nc-nom, bas, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eux, pro-pro:per, eux, [dl(1,s,s)-1]), ex_si(diminué, vpp-ver:pper, diminué, [dl(0,np,s_ppart)-1]), ex_si(globalement, adv-adv, globalement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2202, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('1950-1960', adj-num, '1950-1960', [dl(0,n,n)-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retombée, vpp-ver:pper, retombée, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('2008-2019', pro-num, '2008-2019', [np-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(même, adv-adv, même, [dr(0,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(mondiales, adj-adj, mondiales, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(accélérait, v-ver:cond, accélérait, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(souligne, v-ver:pres, souligne, [dr(0,dl(1,s,s),np)-1]), ex_si('Mike', npp-nam, 'Mike', [dr(0,np,np)-1]), ex_si('Lockwood', npp-nam, 'Lockwood', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2203, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(mondiales, adj-adj, mondiales, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(augmentent, v-ver:pres, augmentent, [dl(0,np,s)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1960, adj-num, 1960, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(taches, nc-nom, taches, [n-1]), ex_si(solaires, adj-adj, solaires, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si(indicateurs, nc-nom, indicateurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(graphique, nc-nom, graphique, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(irradiance, nc-nom, irradiance, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(totale, adj-adj, totale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(graphique, nc-nom, graphique, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bas, nc-nom, bas, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eux, pro-pro:per, eux, [dl(1,s,s)-1]), ex_si(diminué, vpp-ver:pper, diminué, [dl(0,np,s_ppart)-1]), ex_si(globalement, adv-adv, globalement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2204, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(légèrement, adv-adv, légèrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(brillant, adj-adj, brillant, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(50, adj-num, 50, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(observé, vpp-ver:pper, observé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2205, Result) :-
      prob_parse([ ex_si('L\'impact', nc-nom, 'L\'impact', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(irradiance, nc-nom, irradiance, [dr(0,np,n)-1]), ex_si(solaire, adj-adj, solaire, [n-1]), ex_si(sur, p-prp, sur, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), ex_si(climat, nc-nom, climat, [dr(0,np,n)-1]), ex_si(est, v-ver:pres, est, [n-1]), ex_si(minime, adj-adj, minime, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(abonde, v-ver:pres, abonde, [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), ex_si(agence, nc-nom, agence, [dr(0,np,n)-1]), ex_si(spatiale, adj-adj, spatiale, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('NASA', npp-abr, 'NASA', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(2206, Result) :-
      prob_parse([ ex_si('Quant', adv-adv, 'Quant', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(nuages, nc-nom, nuages, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2207, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(nuages, nc-nom, nuages, [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(externe, adj-adj, externe, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(note, v-ver:pres, note, [dr(0,dl(1,s,s),np)-1]), ex_si('Mike', npp-nam, 'Mike', [dr(0,np,np)-1]), ex_si('Lockwood', npp-nam, 'Lockwood', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2208, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(paramètres, nc-nom, paramètres, [n-1]), ex_si(globaux, adj-adj, globaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2209, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(choses, nc-nom, choses, [n-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),dr(0,dl(0,n,n),dl(0,n,n)))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(importantes, adj-adj, importantes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(brille, v-ver:pres, brille, [dl(0,np,s)-1]), ex_si(dessus, adv-adv, dessus, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gravité, nc-nom, gravité, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(attire, v-ver:pres, attire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nuages, nc-nom, nuages, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(stabilité, nc-nom, stabilité, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2210, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si(naturels, adj-adj, naturels, [dl(0,n,n)-1]), ex_si(mentionnés, vpp-ver:pper, mentionnés, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(connus, vpp-ver:pper, connus, [dl(0,np,s_pass)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(longtemps, adv-adv, longtemps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(calculs, nc-nom, calculs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(climatiques, adj-adj, climatiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(assure, v-ver:pres, assure, [dr(0,dl(1,s,s),np)-1]), ex_si('Ed', npp-nam, 'Ed', [dr(0,np,np)-1]), ex_si('Hawkins', npp-nam, 'Hawkins', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2211, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(encodons, v-ver:pres, encodons, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(compréhension, nc-nom, compréhension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chimie, nc-nom, chimie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(biologie, nc-nom, biologie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2212, Result) :-
      prob_parse([ ex_si('Brian', npp-nam, 'Brian', [dr(0,np,np)-1]), ex_si('Catt', npp-nam, 'Catt', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(prend, v-ver:pres, prend, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(informatiques, adj-adj, informatiques, [dl(0,n,n)-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(climatologues, nc-nom, climatologues, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2213, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('L\'affirmation', nc-nom, 'L\'affirmation', [dr(0,np,n)-1]), ex_si(initiale, adj-adj, initiale, [n-1]), ex_si(est, v-ver:pres, est, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,s_q,s)-1]), ex_si('CO2', nc-abr, 'CO2', [dr(0,np,n)-1]), ex_si(cause, v-ver:pres, cause, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), ex_si(problème, nc-nom, problème, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(alors, adv-kon, alors, [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(1,s,s),s_q)-1]), ex_si(en, p-prp, en, [dr(0,s_q,s)-1]), ex_si(fait, nc-nom, fait, [dr(0,dr(0,s,s),n)-1]), ex_si(ce, cls-pro:dem, ce, [n-1]), ex_si('n\'', adv-adv, 'n\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(probablement, adv-adv, probablement, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(le, det-det:art, le, [dr(0,np,np)-1]), ex_si(cas, nc-nom, cas, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2214, Result) :-
      prob_parse([ ex_si('Donc', adv-kon, 'Donc', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(font, v-ver:pres, font, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ignorent, v-ver:pres, ignorent, [dr(0,dl(0,np,s),np)-1]), ex_si(tranquillement, adv-adv, tranquillement, [dl(1,s,s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ignorent, v-ver:pres, ignorent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(change, v-ver:pres, change, [dl(0,np,s)-1]), ex_si(naturellement, adv-adv, naturellement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(introduisent, v-ver:pres, introduisent, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(relation, nc-nom, relation, [n-1]), ex_si(causale, adj-adj, causale, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dioxyde, nc-nom, dioxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2215, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si(naturels, adj-adj, naturels, [dl(0,n,n)-1]), ex_si(mentionnés, vpp-ver:pper, mentionnés, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(connus, vpp-ver:pper, connus, [dl(0,np,s_pass)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(longtemps, adv-adv, longtemps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(calculs, nc-nom, calculs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(climatiques, adj-adj, climatiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(assure, v-ver:pres, assure, [dr(0,dl(1,s,s),np)-1]), ex_si('Ed', npp-nam, 'Ed', [dr(0,np,np)-1]), ex_si('Hawkins', npp-nam, 'Hawkins', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2216, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(encodons, v-ver:pres, encodons, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(compréhension, nc-nom, compréhension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chimie, nc-nom, chimie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(biologie, nc-nom, biologie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2217, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(testés, vpp-ver:pper, testés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(reproduire, vinf-ver:infi, reproduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tendances, nc-nom, tendances, [n-1]), ex_si(récentes, adj-adj, récentes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(réussissent, v-ver:pres, réussissent, [dl(0,np,s)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(finissent, v-ver:pres, finissent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(projections, nc-nom, projections, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2218, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(développée, vpp-ver:pper, développée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(automne, nc-nom, automne, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(annuelle, adj-adj, annuelle, [dl(0,n,n)-1]), ex_si(maximale, adj-adj, maximale, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dixième, adj-num, dixième, [dr(0,n,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(maximale, adj-adj, maximale, [dl(0,n,n)-1]), ex_si(annuelle, adj-adj, annuelle, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(basse, adj-adj, basse, [dl(0,n,n)-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2219, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(arctique, adj-adj, arctique, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(banquise, nc-nom, banquise, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(record, nc-nom, record, [dl(0,n,n)-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2022, pro-num, 2022, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(remettant, vpr-ver:ppre, remettant, [dr(0,dr(0,dl(0,np,s_ppres),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2220, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(développée, vpp-ver:pper, développée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(automne, nc-nom, automne, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(annuelle, adj-adj, annuelle, [dl(0,n,n)-1]), ex_si(maximale, adj-adj, maximale, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dixième, adj-num, dixième, [dr(0,n,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(maximale, adj-adj, maximale, [dl(0,n,n)-1]), ex_si(annuelle, adj-adj, annuelle, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(basse, adj-adj, basse, [dl(0,n,n)-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2221, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si(banquise, nc-nom, banquise, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(formée, vpp-ver:pper, formée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(congélation, nc-nom, congélation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2222, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(salée, adj-adj, salée, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(gèle, v-ver:pres, gèle, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(descend, v-ver:pres, descend, [dl(0,np,s)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(dessous, nc-adv, dessous, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(0, det-num, 0, [dr(0,np,n)-1]), ex_si(degré, nc-nom, degré, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2223, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(développée, vpp-ver:pper, développée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(automne, nc-nom, automne, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(annuelle, adj-adj, annuelle, [dl(0,n,n)-1]), ex_si(maximale, adj-adj, maximale, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dixième, adj-num, dixième, [dr(0,n,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(maximale, adj-adj, maximale, [dl(0,n,n)-1]), ex_si(annuelle, adj-adj, annuelle, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(basse, adj-adj, basse, [dl(0,n,n)-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2224, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(arctique, adj-adj, arctique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(culminé, vpp-ver:pper, culminé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('5,75', det-num, '5,75', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si('14,88', det-num, '14,88', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2225, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(élevée, vpp-ver:pper, élevée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2226, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(saisonnalité, nc-nom, saisonnalité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(maximum, nc-nom, maximum, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(minimum, nc-nom, minimum, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(0,n,n),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2227, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(habituellement, adv-adv, habituellement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(banquise, nc-nom, banquise, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(petite, adj-adj, petite, [dl(0,n,n)-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(jour, nc-nom, jour, [np-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(chaud, adj-adj, chaud, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(retirée, vpp-ver:pper, retirée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2228, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(observation, nc-nom, observation, [n-1]), ex_si('Copernicus', npp-nam, 'Copernicus', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(rassemble, v-ver:pres, rassemble, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(climatiques, adj-adj, climatiques, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tendance, nc-nom, tendance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonte, nc-nom, fonte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(arctique, adj-adj, arctique, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2229, Result) :-
      prob_parse([ ex_si('Tamsin', npp-nam, 'Tamsin', [dr(0,np,np)-1]), ex_si('Edwards', npp-nam, 'Edwards', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(climatologue, nc-nom, climatologue, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('King\'s', npp-nam, 'King\'s', [dr(0,n,n)-1]), ex_si('College', npp-nam, 'College', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(expliquait, v-ver:impf, expliquait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(précédent, adj-adj, précédent, [dr(0,n,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vérification, nc-nom, vérification, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(si, cs-kon, si, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(varie, v-ver:pres, varie, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(1,s,s)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('(...)', ponct-pun, '(...)', [let-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(tendance, nc-nom, tendance, [dr(0,np,n)-1]), ex_si(générale, adj-adj, générale, [n-1]), ex_si(est, v-ver:pres, est, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,s),pp)-1]), ex_si(déclin, nc-nom, déclin, [dr(0,pp_a,n)-1]), ex_si('.', ponct-pun, '.', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1])], Result).
sent(2230, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(résumé, nc-nom, résumé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Groupement', nc-nam, 'Groupement', [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),np)-1]), ex_si(2011, pro-num, 2011, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(2020, pro-num, 2020, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(superficie, nc-nom, superficie, [n-1]), ex_si(moyenne, adj-adj, moyenne, [dl(0,n,n)-1]), ex_si(annuelle, adj-adj, annuelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banquise, nc-nom, banquise, [n-1]), ex_si(arctique, adj-adj, arctique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(bas, adj-adj, bas, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(1850, pro-num, 1850, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2231, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(150, adj-num, 150, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(glaces, nc-nom, glaces, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(recouvert, vpp-ver:pper, recouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,np,s_q),np)-1]), ex_si(peu, adv-adv, peu, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(surface, nc-nom, surface, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2232, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(intense, adj-adj, intense, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(sérieux, adj-adj, sérieux, [dr(0,n,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(dépend, v-ver:pres, dépend, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(continuité, nc-nom, continuité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(chasser, vinf-ver:infi, chasser, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(répercussions, nc-nom, répercussions, [n-1]), ex_si(mondiales, adj-adj, mondiales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2233, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réchauffe, v-ver:pres, réchauffe, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(glaciers, nc-nom, glaciers, [n-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(fondre, vinf-ver:infi, fondre, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(incidence, nc-nom, incidence, [n-1]), ex_si(globale, adj-adj, globale, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mers, nc-nom, mers, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Antti', npp-nam, 'Antti', [dr(0,np,np)-1]), ex_si('Lipponen', npp-nam, 'Lipponen', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2234, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fonte, nc-nom, fonte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(glaciaire, adj-adj, glaciaire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(moteur, nc-nom, moteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fonte, nc-nom, fonte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(glaciers, nc-nom, glaciers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expansion, nc-nom, expansion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dilate, v-ver:pres, dilate, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(volume, nc-nom, volume, [n-1]), ex_si(augmente, v-ver:pres, augmente, [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2235, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(glaciaire, adj-adj, glaciaire, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Groenland', npp-nam, 'Groenland', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(approcher, vinf-ver:infi, approcher, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bascule, nc-nom, bascule, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fonte, nc-nom, fonte, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(récentes, adj-adj, récentes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contient, v-ver:pres, contient, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(glacée, adj-adj, glacée, [dl(0,n,n)-1]), ex_si(capable, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(élever, vinf-ver:infi, élever, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(océans, nc-nom, océans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2236, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(règlements, nc-nom, règlements, [n-1]), ex_si(applicables, adj-adj, applicables, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(imposent, v-ver:pres, imposent, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(calibre, nc-nom, calibre, [n-1]), ex_si(maximal, adj-adj, maximal, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cerises, nc-nom, cerises, [n-1]), ex_si(commercialisées, vpp-ver:pper, commercialisées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2237, Result) :-
      prob_parse([ ex_si('Illustrant', vpr-ver:ppre, 'Illustrant', [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(propos, nc-nom, propos, [n-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(conteneur, nc-nom, conteneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(rempli, vpp-ver:pper, rempli, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(cerises, nc-nom, cerises, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(fruit, nc-nom, fruit, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(cm, nc-nom, cm, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2238, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si('Européenne', adj-adj, 'Européenne', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Miriam', npp-nam, 'Miriam', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Ferrer', npp-nam, 'Ferrer', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(revanche, nc-nom, revanche, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(législation, nc-nom, législation, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(exige, v-ver:pres, exige, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cerises, nc-nom, cerises, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(calibre, nc-nom, calibre, [n-1]), ex_si(inférieur, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(cm, nc-abr, cm, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2239, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(bennes, nc-nom, bennes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(ordures, nc-nom, ordures, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(remplie, vpp-ver:pper, remplie, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(cerises, nc-nom, cerises, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(cageots, nc-nom, cageots, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(conformes, adj-adj, conformes, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si('UE', npp-abr, 'UE', [dl(0,n,n)-1]), ex_si('[de', ponct-pun, '[de', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Union', npp-nam, 'Union', [dr(0,np,n)-1]), ex_si('européenne]', adj-adj, 'européenne]', [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [let-1]), ex_si(une, det-det:art, une, [let-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(1,s,s),np)-1]), ex_si(histoire, nc-nom, histoire, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [let-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(les, det-det:art, les, [let-1]), ex_si(cerises, nc-nom, cerises, [dr(0,dl(0,s,s),s)-1]), ex_si(commercialisées, vpp-ver:pper, commercialisées, [dr(0,np,n)-1]), ex_si(ne, adv-adv, ne, [n-1]), ex_si(devant, vpr-ver:ppre, devant, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [let-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(2, det-num, 2, [dr(0,np,pp_de)-1]), ex_si(cm, nc-abr, cm, [dr(0,pp_de,np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(2240, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(règlements, nc-nom, règlements, [n-1]), ex_si(applicables, adj-adj, applicables, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(imposent, v-ver:pres, imposent, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(calibre, nc-nom, calibre, [n-1]), ex_si(maximal, adj-adj, maximal, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cerises, nc-nom, cerises, [n-1]), ex_si(commercialisées, vpp-ver:pper, commercialisées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2241, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(calibre, nc-nom, calibre, [n-1]), ex_si(minimal, adj-adj, minimal, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(mm, nc-abr, mm, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cerises, nc-nom, cerises, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(type, nc-nom, type, [dr(0,n,n)-1]), ex_si('Picota', npp-nam, 'Picota', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(catégorie, nc-nom, catégorie, [n-1]), ex_si('\\', p+d-prp:det, '\\', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Extra', nc-nam, 'Extra', [let-1]), ex_si('\\', nc-nom, '\\', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(';', ponct-pun, ';', [let-1]), ex_si(22, det-num, 22, [let-1]), ex_si(mm, nc-abr, mm, [dr(0,dl(0,np,np),np)-1]), ex_si(pour, p-prp, pour, [dr(0,np,n)-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(autres, adj-adj, autres, [dr(0,dl(0,np,np),np)-1]), ex_si(variétés, nc-nom, variétés, [dr(0,np,n)-1]), ex_si(dans, p-prp, dans, [dr(0,n,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(catégorie, nc-nom, catégorie, [dr(0,dl(0,n,n),np)-1]), ex_si('\\', p+d-prp:det, '\\', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('Extra', et-nom, 'Extra', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('\\', nc-nom, '\\', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(';', ponct-pun, ';', [dl(0,n,n)-1]), ex_si(17, det-num, 17, [let-1]), ex_si(mm, nc-abr, mm, [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(catégories, nc-nom, catégories, [n-1]), ex_si('I', nc-num, 'I', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [dr(0,np,n)-1]), ex_si('II', adj-num, 'II', [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(précise, v-ver:pres, précise, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(norme, nc-nom, norme, [let-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(qualité, nc-nom, qualité, [dr(0,np,n)-1]), ex_si(commerciale, adj-adj, commerciale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si('Commission', npp-nam, 'Commission', [dl(0,n,n)-1]), ex_si(économique, adj-adj, économique, [dr(0,dl(0,n,n),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si('Europe', npp-nam, 'Europe', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('CEE-ONU', npp-abr, 'CEE-ONU', [dr(0,np,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(relative, adj-adj, relative, [dr(0,dl(0,np,np),n)-1]), ex_si(aux, p+d-prp:det, aux, [n-1]), ex_si(cerises, nc-nom, cerises, [let-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,n,n),pp_a)-1])], Result).
sent(2242, Result) :-
      prob_parse([ ex_si('D\'abord', adv-adv, 'D\'abord', [dr(0,dr(0,s,s),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(le, det-det:art, le, [let-1]), ex_si(réchauffement, nc-nom, réchauffement, [dr(0,np,n)-1]), ex_si(provoque, v-ver:pres, provoque, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), ex_si(amincissement, nc-nom, amincissement, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(parties, nc-nom, parties, [dr(0,dl(0,n,n),n)-1]), ex_si(flottantes, adj-adj, flottantes, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(calotte, nc-nom, calotte, [dr(0,np,n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(retiennent, v-ver:pres, retiennent, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,s),np)-1]), ex_si(partie, nc-nom, partie, [dr(0,dl(1,s,s),n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(glace, nc-nom, glace, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ce, pro-pro:dem, ce, [dr(0,dl(0,s,s),np)-1]), ex_si(qui, prorel-pro:rel, qui, [np-1]), ex_si(conduit, v-ver:pres, conduit, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,pp_a,np)-1]), ex_si(accélération, nc-nom, accélération, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(écoulement, nc-nom, écoulement, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(glace, nc-nom, glace, [dr(0,np,n)-1]), ex_si(vers, p-prp, vers, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(océan, nc-nom, océan, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp,pp)-1]), ex_si(une, det-det:art, une, [dr(0,pp_a,np)-1]), ex_si(perte, nc-nom, perte, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(masse, nc-nom, masse, [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2243, Result) :-
      prob_parse([ ex_si('Ensuite', adv-adv, 'Ensuite', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(chutes, nc-nom, chutes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(chaud, adj-adj, chaud, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(contenir, vinf-ver:infi, contenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(humidité, nc-nom, humidité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(conduit, v-ver:pres, conduit, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gain, nc-nom, gain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(tant, adv-adv, tant, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(reste, v-ver:pres, reste, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(négatives, adj-adj, négatives, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2244, Result) :-
      prob_parse([ ex_si('Donc', cc-kon, 'Donc', [dr(0,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si(soi, pro-pro:per, soi, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(gagne, v-ver:pres, gagne, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,dl(0,np,s),s),dl(0,dl(0,np,s),s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(contradictoire, adj-adj, contradictoire, [dr(0,dl(0,n,n),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(globe, nc-nom, globe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2245, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2015, pro-num, 2015, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(affiliés, vpp-ver:pper, affiliés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(estimé, vpp-ver:pper, estimé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Antarctique', npp-nam, 'Antarctique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gains, nc-nom, gains, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accumulation, nc-nom, accumulation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dépassé, vpp-ver:pper, dépassé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2246, Result) :-
      prob_parse([ ex_si('D\'abord', adv-adv, 'D\'abord', [dr(0,dr(0,s,s),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(le, det-det:art, le, [let-1]), ex_si(réchauffement, nc-nom, réchauffement, [dr(0,np,n)-1]), ex_si(provoque, v-ver:pres, provoque, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), ex_si(amincissement, nc-nom, amincissement, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(parties, nc-nom, parties, [dr(0,dl(0,n,n),n)-1]), ex_si(flottantes, adj-adj, flottantes, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(calotte, nc-nom, calotte, [dr(0,np,n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(retiennent, v-ver:pres, retiennent, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,s),np)-1]), ex_si(partie, nc-nom, partie, [dr(0,dl(1,s,s),n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(glace, nc-nom, glace, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ce, pro-pro:dem, ce, [dr(0,dl(0,s,s),np)-1]), ex_si(qui, prorel-pro:rel, qui, [np-1]), ex_si(conduit, v-ver:pres, conduit, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,pp_a,np)-1]), ex_si(accélération, nc-nom, accélération, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(écoulement, nc-nom, écoulement, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(glace, nc-nom, glace, [dr(0,np,n)-1]), ex_si(vers, p-prp, vers, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(océan, nc-nom, océan, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp,pp)-1]), ex_si(une, det-det:art, une, [dr(0,pp_a,np)-1]), ex_si(perte, nc-nom, perte, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(masse, nc-nom, masse, [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2247, Result) :-
      prob_parse([ ex_si('Ensuite', adv-adv, 'Ensuite', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(chutes, nc-nom, chutes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(chaud, adj-adj, chaud, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(contenir, vinf-ver:infi, contenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(humidité, nc-nom, humidité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(conduit, v-ver:pres, conduit, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gain, nc-nom, gain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(tant, adv-adv, tant, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(reste, v-ver:pres, reste, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(négatives, adj-adj, négatives, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2248, Result) :-
      prob_parse([ ex_si('Donc', cc-kon, 'Donc', [dr(0,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si(soi, pro-pro:per, soi, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(gagne, v-ver:pres, gagne, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,dl(0,np,s),s),dl(0,dl(0,np,s),s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(contradictoire, adj-adj, contradictoire, [dr(0,dl(0,n,n),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(globe, nc-nom, globe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2249, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(calottes, nc-nom, calottes, [n-1]), ex_si(glaciaires, adj-adj, glaciaires, [dl(0,n,n)-1]), ex_si(gagnent, v-ver:pres, gagnent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accumulation, nc-nom, accumulation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(perdent, v-ver:pres, perdent, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ruissellement, nc-nom, ruissellement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fonte, nc-nom, fonte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(surface, nc-nom, surface, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vêlage, nc-nom, vêlage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(icebergs, nc-nom, icebergs, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,np,np)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(icebergs, nc-nom, icebergs, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(un, det-det:art, un, [dr(0,pp_de,np)-1]), ex_si(glacier, nc-nom, glacier, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(lorsque, cs-kon, lorsque, [let-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,s,s),s)-1]), ex_si(bouts, nc-nom, bouts, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [n-1]), ex_si(en, clo-pro:per, en, [cl_r-1]), ex_si(détachent, v-ver:pres, détachent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(se, clr-pro:per, se, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(retrouvent, v-ver:pres, retrouvent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(la, det-det:art, la, [dr(0,pp,np)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(ou, cc-kon, ou, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),np)-1]), ex_si(océan, nc-nom, océan, [dr(0,np,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,np),np)-1]), ex_si(fonte, nc-nom, fonte, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(base, nc-nom, base, [dr(0,dl(0,n,n),np)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(plateformes, nc-nom, plateformes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(flottantes, adj-adj, flottantes, [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si(glaciers, nc-nom, glaciers, [dl(0,n,n)-1]), ex_si(côtiers, adj-adj, côtiers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2250, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(conclusions, nc-nom, conclusions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2015, pro-num, 2015, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remettent, v-ver:pres, remettent, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dérèglement, nc-nom, dérèglement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(contraire, nc-nom, contraire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2251, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interprété, vpp-ver:pper, interprété, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(gains, nc-nom, gains, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Antarctique', npp-nam, 'Antarctique', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(illustration, nc-nom, illustration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accumulation, nc-nom, accumulation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2252, Result) :-
      prob_parse([ ex_si('Donc', cc-kon, 'Donc', [dr(0,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si(soi, pro-pro:per, soi, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(gagne, v-ver:pres, gagne, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,dl(0,np,s),s),dl(0,dl(0,np,s),s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(contradictoire, adj-adj, contradictoire, [dr(0,dl(0,n,n),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(globe, nc-nom, globe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2253, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fraude, nc-nom, fraude, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Antarctique', npp-nam, 'Antarctique', [n-1]), ex_si(gagne, v-ver:pres, gagne, [dr(0,dl(0,np,s),np)-1]), ex_si(112, det-num, 112, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(tonnes, nc-nom, tonnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2254, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dr(0,dl(0,n,n),pp_par),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(référence, nc-nom, référence, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(publiée, vpp-ver:pper, publiée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(2018, pro-num, 2018, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si('Nature', npp-nam, 'Nature', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(spécialistes, nc-nom, spécialistes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pôles, nc-nom, pôles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(combinant, vpr-ver:ppre, combinant, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(méthodes, nc-nom, méthodes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(analyses, nc-nom, analyses, [n-1]), ex_si(satellites, adj-adj, satellites, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(clairement, adv-adv, clairement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déclin, nc-nom, déclin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Antarctique', npp-nam, 'Antarctique', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2255, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(satellites, nc-nom, satellites, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(calottes, nc-nom, calottes, [n-1]), ex_si(glaciaires, adj-adj, glaciaires, [dl(0,n,n)-1]), ex_si(terrestres, adj-adj, terrestres, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Antarctique', npp-nam, 'Antarctique', [n-1]), ex_si(perdent, v-ver:pres, perdent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2256, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Antarctique', npp-nam, 'Antarctique', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(stable, adj-adj, stable, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(perte, nc-nom, perte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(dépasse, v-ver:pres, dépasse, [dr(0,dl(0,np,s),np)-1]), ex_si(largement, adv-adv, largement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(particulièrement, adv-adv, particulièrement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2257, Result) :-
      prob_parse([ ex_si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si(antarctique, adj-adj, antarctique, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(certaine, adj-adj, certaine, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2258, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(satellites, nc-nom, satellites, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(calottes, nc-nom, calottes, [n-1]), ex_si(glaciaires, adj-adj, glaciaires, [dl(0,n,n)-1]), ex_si(terrestres, adj-adj, terrestres, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Antarctique', npp-nam, 'Antarctique', [n-1]), ex_si(perdent, v-ver:pres, perdent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2259, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(estimations, nc-nom, estimations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(calotte, nc-nom, calotte, [n-1]), ex_si(glacière, adj-adj, glacière, [dl(0,n,n)-1]), ex_si(antarctique, adj-adj, antarctique, [dl(0,n,n)-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ainsi, adv-adv, ainsi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(112, det-num, 112, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(tonnes, nc-nom, tonnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(2001, pro-num, 2001, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,np,np),np)-1]), ex_si(82, pro-num, 82, [np-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2260, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(fait, v-ver:pres, fait, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(naturellement, adv-adv, naturellement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('10.000', det-num, '10.000', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2261, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(changements, nc-nom, changements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rapides, adj-adj, rapides, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2262, Result) :-
      prob_parse([ ex_si('Côté', nc-nom, 'Côté', [dr(0,dr(0,s,s),n)-1]), ex_si(français, adj-adj, français, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(estivale, adj-adj, estivale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(marquée, vpp-ver:pper, marquée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(épisodes, nc-nom, épisodes, [n-1]), ex_si(caniculaires, adj-adj, caniculaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(importants, adj-adj, importants, [dr(0,n,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sécheresse, nc-nom, sécheresse, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si('Météo', npp-nam, 'Météo', [dr(0,np,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bilan, nc-nom, bilan, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(observations, nc-nom, observations, [n-1]), ex_si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2263, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(17, adj-num, 17, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(établit, v-ver:pres, établit, [dr(0,dl(0,np,s),np)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécheresse, nc-nom, sécheresse, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sols, nc-nom, sols, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(historique, nc-nom, historique, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(débute, v-ver:pres, débute, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1958, adj-num, 1958, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(note, v-ver:pres, note, [dr(0,dl(1,s,s),np)-1]), ex_si('Météo-France', npp-nam, 'Météo-France', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2264, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ADAC', npp-abr, 'ADAC', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prouvé, vpp-ver:pper, prouvé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(consomme, v-ver:pres, consomme, [dr(0,dl(0,np,s),np)-1]), ex_si(relativement, adv-adv, relativement, [dr(0,np,np)-1]), ex_si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2265, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embouteillage, nc-nom, embouteillage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(allant, vpr-ver:ppre, allant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('-7°C', nc-abr, '-7°C', [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si('-14°C', npp-nam, '-14°C', [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,np,n)-1]), ex_si('n\'', adv-adv, 'n\'', [n-1]), ex_si(entraînerait, v-ver:cond, entraînerait, [let-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), ex_si(déchargement, nc-nom, déchargement, [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(18, det-num, 18, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(batterie, nc-nom, batterie, [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(2266, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(éléments, nc-nom, éléments, [n-1]), ex_si(connus, vpp-ver:pper, connus, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chauffage, nc-nom, chauffage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(8, det-num, 8, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(batterie, nc-nom, batterie, [n-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embouteillage, nc-nom, embouteillage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(conclut, v-ver:pres, conclut, [dr(0,dl(1,s,s),np)-1]), ex_si('Julia', npp-nam, 'Julia', [dr(0,np,np)-1]), ex_si('Poliscanova', npp-nam, 'Poliscanova', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2267, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(batteries, nc-nom, batteries, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déchargeraient, v-ver:impf, déchargeraient, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(embouteillage, nc-nom, embouteillage, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(froid, nc-nom, froid, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2268, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Which', npp-nam, 'Which', [dl(0,n,n)-1]), ex_si('?', ponct-pun, '?', [dl(0,np,txt)-1])], Result).
sent(2269, Result) :-
      prob_parse([ ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(testé, vpp-ver:pper, testé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embouteillage, nc-nom, embouteillage, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(climatisation, nc-nom, climatisation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(accessoires, nc-nom, accessoires, [n-1]), ex_si(allumés, vpp-ver:pper, allumés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('SUV', nc-nom, 'SUV', [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si('Volkswagen', npp-nam, 'Volkswagen', [dl(0,n,n)-1]), ex_si('ID.4', npp-abr, 'ID.4', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2270, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,np,np),n)-1]), ex_si(peu, adv-adv, peu, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(minutes, nc-nom, minutes, [n-1]), ex_si(':', ponct-pun, ':', [let-1]), ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(batterie, nc-nom, batterie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(batterie, nc-nom, batterie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('77kWh', nc-nam, '77kWh', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(estimait, v-ver:impf, estimait, [dr(0,dl(1,s,s),np)-1]), ex_si('-il', cls-pro:per, '-il', [np-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(2021, adj-num, 2021, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2271, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(batteries, nc-nom, batteries, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si(mourraient, v-ver:impf, mourraient, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(instant, nc-nom, instant, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(allumait, v-ver:impf, allumait, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(climatisation, nc-nom, climatisation, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(embouteillages, nc-nom, embouteillages, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(contredite, vpp-ver:pper, contredite, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2272, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(carburant, nc-nom, carburant, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(ravitaillée, vpp-ver:pper, ravitaillée, [dl(0,np,s_pass)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bidon, nc-nom, bidon, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(essence, nc-nom, essence, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(déplacé, vpp-ver:pper, déplacé, [dl(0,np,s_pass)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recharge, nc-nom, recharge, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2273, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(batterie, nc-nom, batterie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(rechargée, vpp-ver:pper, rechargée, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(coincé, vpp-ver:pper, coincé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(embouteillages, nc-nom, embouteillages, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2274, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(exiger, vinf-ver:infi, exiger, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cobalt, nc-nom, cobalt, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(lithium, nc-nom, lithium, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nickel, nc-nom, nickel, [n-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(batteries, nc-nom, batteries, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(issus, vpp-ver:pper, issus, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(matériaux, nc-nom, matériaux, [n-1]), ex_si(recyclés, vpp-ver:pper, recyclés, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2030, pro-num, 2030, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(poussant, vpr-ver:ppre, poussant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(capacités, nc-nom, capacités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recyclage, nc-nom, recyclage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(dépêche, nc-nom, dépêche, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2275, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(pression, nc-nom, pression, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(favoriser, vinf-ver:infi, favoriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(recyclage, nc-nom, recyclage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(batteries, nc-nom, batteries, [n-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(matériaux, nc-nom, matériaux, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(cobalt, nc-nom, cobalt, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(graphite, nc-nom, graphite, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(etc, adv-abr, etc, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2276, Result) :-
      prob_parse([ ex_si(')', ponct-pun, ')', [let-1]), ex_si(contenus, vpp-ver:pper, contenus, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(batteries, nc-nom, batteries, [n-1]), ex_si('Li-ion', npp-nam, 'Li-ion', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(classés, vpp-ver:pper, classés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(critiques, nc-nom, critiques, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(concentrés, vpp-ver:pper, concentrés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2277, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si(remettent, v-ver:pres, remettent, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(singularité, nc-nom, singularité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chaleur, nc-nom, chaleur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(1895, pro-num, 1895, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('mi-août', nc-nom, 'mi-août', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('mi-septembre', nc-nom, 'mi-septembre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moyenne, nc-nom, moyenne, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('37°C', nc-abr, '37°C', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(2278, Result) :-
      prob_parse([ ex_si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(1895, adj-num, 1895, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moyenne, nc-nom, moyenne, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('20,3°C', pro-nam, '20,3°C', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si('Météo', npp-nam, 'Météo', [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('France', npp-nam, 'France', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ce, det-pro:dem, ce, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(calcul, nc-nom, calcul, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(moyennes, nc-nom, moyennes, [dr(0,pp_de,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(températures, nc-nom, températures, [dr(0,dl(0,n,n),n)-1]), ex_si(quotidiennes, adj-adj, quotidiennes, [n-1]), ex_si(enregistrées, vpp-ver:pper, enregistrées, [dl(0,n,n)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(jour, nc-nom, jour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(par, p-prp, par, [n-1]), ex_si(la, det-det:art, la, [dr(0,pp_par,np)-1]), ex_si(station, nc-nom, station, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Montsouris', npp-nam, 'Montsouris', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(2279, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chaleur, nc-nom, chaleur, [n-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(0,n,n),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(rendues, vpp-ver:pper, rendues, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sévères, adj-adj, sévères, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(documenté, vpp-ver:pper, documenté, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,np,np),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(commenté, vpp-ver:pper, commenté, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Météo', npp-nam, 'Météo', [dr(0,np,np)-1]), ex_si('France', npp-nam, 'France', [np-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AFP', npp-abr, 'AFP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2280, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chaleur, nc-nom, chaleur, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(rend, v-ver:pres, rend, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(intenses, adj-adj, intenses, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fréquentes, adj-adj, fréquentes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2281, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,dr(0,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(organisateurs, nc-nom, organisateurs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(festival, nc-nom, festival, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [n-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(environnemental, adj-adj, environnemental, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évènement, nc-nom, évènement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2282, Result) :-
      prob_parse([ ex_si('Glastonbury', npp-nam, 'Glastonbury', [np-1]), ex_si(offre, v-ver:pres, offre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(billets, nc-nom, billets, [n-1]), ex_si(gratuits, adj-adj, gratuits, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(festival, nc-nom, festival, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(volontaires, nc-nom, volontaires, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ramassent, v-ver:pres, ramassent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(départ, nc-nom, départ, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(festivaliers, nc-nom, festivaliers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2283, Result) :-
      prob_parse([ ex_si('Malgré', p-prp, 'Malgré', [dr(0,dr(0,s,s),np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(beaucoup, pro-pro:ind, beaucoup, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('elles-mêmes', adv-adv, 'elles-mêmes', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(engagements, nc-nom, engagements, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(net, adj-adj, net, [dl(0,n,n)-1]), ex_si(zéro, adj-num, zéro, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déversé, vpp-ver:pper, déversé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(développent, v-ver:pres, développent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extraction, nc-nom, extraction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(analyse, nc-nom, analyse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si(spécialisée, vpp-ver:pper, spécialisée, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(investissements, nc-nom, investissements, [n-1]), ex_si(éthiques, adj-adj, éthiques, [dl(0,n,n)-1]), ex_si('ShareAction', npp-nam, 'ShareAction', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2284, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(engagées, vpp-ver:pper, engagées, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(zéro, adj-adj, zéro, [dr(0,np,n)-1]), ex_si(émission, nc-nom, émission, [n-1]), ex_si(nette, adj-adj, nette, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nécessaire, adj-adj, nécessaire, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('1,5°C', nc-abr, '1,5°C', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(conformément, adv-adv, conformément, [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),pp_a)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,pp_a,np)-1]), ex_si(accord, nc-nom, accord, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Paris', npp-nam, 'Paris', [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [np-1]), ex_si(2016, pro-num, 2016, [dr(0,dl(0,n,n),np)-1]), ex_si(sur, p-prp, sur, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), ex_si(climat, nc-nom, climat, [dr(0,np,n)-1]), ex_si(mais, cc-kon, mais, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), ex_si(même, adj-adj, même, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [dr(0,n,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(elles, cls-pro:per, elles, [let-1]), ex_si(encouragent, v-ver:pres, encouragent, [np-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,s),np)-1]), ex_si(combustibles, nc-nom, combustibles, [dr(0,np,n)-1]), ex_si(fossiles, adj-adj, fossiles, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(comme, cs-kon, comme, [let-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(1,s,s),s)-1]), ex_si(soulignent, v-ver:pres, soulignent, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(des, det-prp:det, des, [dr(0,dr(0,s,np),np)-1]), ex_si(chercheurs, nc-nom, chercheurs, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(et, cc-kon, et, [let-1]), ex_si(se, clr-pro:per, se, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(lancent, v-ver:pres, lancent, [cl_r-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dl(1,s,s)-1]), ex_si(de, det-prp, de, [dr(0,pp,np)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,np,n)-1]), ex_si(projets, nc-nom, projets, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(forage, nc-nom, forage, [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2285, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hydrogène, nc-nom, hydrogène, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(élément, nc-nom, élément, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dl(0,np,s)-1]), ex_si(quasiment, adv-adv, quasiment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(pur, adj-adj, pur, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tel, adj-adj, tel, [dr(0,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(produit, vpp-ver:pper, produit, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(industrielle, adj-adj, industrielle, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(énergies, nc-nom, énergies, [n-1]), ex_si(fossiles, adj-adj, fossiles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(génère, v-ver:pres, génère, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2286, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydrogène, nc-nom, hydrogène, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('non-polluante', adj-adj, 'non-polluante', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(présente, adj-adj, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(abondance, nc-nom, abondance, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(même, adj-adv, même, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(fonctionner, vinf-ver:infi, fonctionner, [dl(0,np,s_inf)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(centrales, nc-nom, centrales, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2287, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(hydrogène, nc-nom, hydrogène, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(petit, adj-adj, petit, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(simple, adj-adj, simple, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(léger, adj-adj, léger, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(atomes, nc-nom, atomes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(principal, adj-adj, principal, [np-1]), ex_si(constituant, vpr-ver:ppre, constituant, [n-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(étoiles, nc-nom, étoiles, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élément, nc-nom, élément, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(abondant, adj-adj, abondant, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2288, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('L\'hydrogène', nc-nam, 'L\'hydrogène', [dr(0,np,n)-1]), ex_si(est, v-ver:pres, est, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), ex_si(atome, nc-nom, atome, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(répandu, vpp-ver:pper, répandu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Univers', npp-nam, 'Univers', [dr(0,np,n)-1]), ex_si(dont, prorel-pro:rel, dont, [n-1]), ex_si(il, cls-pro:per, il, [dr(0,dl(0,n,n),s)-1]), ex_si(constitue, v-ver:pres, constitue, [np-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,pp_de)-1]), ex_si(90, det-num, 90, [dr(0,pp_de,np)-1]), ex_si('%', nc-sym, '%', [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(atomes, nc-nom, atomes, [dr(0,dl(0,n,n),n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(75, det-num, 75, [dr(0,dl(0,np,np),np)-1]), ex_si('%', nc-sym, '%', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(masse, nc-nom, masse, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(peut, v-ver:pres, peut, [let-1]), ex_si('-on', cls-pro:per, '-on', [dr(0,dr(0,s,dl(0,np,s_inf)),np)-1]), ex_si(lire, vinf-ver:infi, lire, [np-1]), ex_si(sur, p-prp, sur, [dl(1,s,dl(0,np,s_inf))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), ex_si(site, nc-nom, site, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(information, nc-nom, information, [dr(0,dl(0,n,n),n)-1]), ex_si(pédagogique, adj-adj, pédagogique, [n-1]), ex_si('Connaissance', nc-nam, 'Connaissance', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si(énergies, nc-nom, énergies, [dr(0,dl(0,np,np),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2289, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si('appuie-têtes', nc-nom, 'appuie-têtes', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(libérer, vinf-ver:infi, libérer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(submergé, vpp-ver:pper, submergé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2290, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(effectivement, adv-adv, effectivement, [dl(1,s,s)-1]), ex_si(retirer, vinf-ver:infi, retirer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('appuie-tête', nc-nom, 'appuie-tête', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(briser, vinf-ver:infi, briser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vitre, nc-nom, vitre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(utilisant, vpr-ver:ppre, utilisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(pointes, nc-nom, pointes, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(vitres, nc-nom, vitres, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(faut, v-ver:pres, faut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(viser, vinf-ver:infi, viser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(angles, nc-nom, angles, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(1,s,s),np)-1]), ex_si('Patrick', npp-nam, 'Patrick', [dr(0,np,np)-1]), ex_si('Chavada', npp-nam, 'Chavada', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2291, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(vous, clr-pro:per, vous, [cl_r-1]), ex_si(retrouvez, v-ver:pres, retrouvez, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(paniquez, vimp-ver:impe, paniquez, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2292, Result) :-
      prob_parse([ ex_si(1, pro-num, 1, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(2293, Result) :-
      prob_parse([ ex_si('Ne', adv-adv, 'Ne', [dr(0,s,s)-1]), ex_si(gaspillez, vimp-ver:impe, gaspillez, [dr(0,s,np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pousser, vinf-ver:infi, pousser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(porte, nc-nom, porte, [n-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2294, Result) :-
      prob_parse([ ex_si('N\'', adv-adv, 'N\'', [dr(0,s,s)-1]), ex_si(ouvrez, vimp-ver:impe, ouvrez, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fenêtre, nc-nom, fenêtre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(entrant, vpr-ver:ppre, entrant, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(permettra, v-ver:futu, permettra, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(sortir, vinf-ver:infi, sortir, [dl(0,np,s_inf)-1]), ex_si(3, pro-num, 3, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2295, Result) :-
      prob_parse([ ex_si('Retirez', vimp-ver:impe, 'Retirez', [dr(0,s,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('appuie-tête', nc-nom, 'appuie-tête', [n-1]), ex_si(4, adj-num, 4, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2296, Result) :-
      prob_parse([ ex_si('Utilisez', vimp-ver:impe, 'Utilisez', [dr(0,s,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pointe, nc-nom, pointe, [n-1]), ex_si(tranchante, adj-adj, tranchante, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(brisez, vimp-ver:impe, brisez, [dr(0,s,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fenêtre, nc-nom, fenêtre, [n-1]), ex_si(arrière, adj-adj, arrière, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(porte, v-ver:pres, porte, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inscription, nc-nom, inscription, [n-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,n,n),n)-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,n,n)-1]), ex_si(kick, et-nom, kick, [n-1]), ex_si(out, et-nom, out, [let-1]), ex_si('glass\'\'', et-nom, 'glass\'\'', [let-1]), ex_si(dessus, adv-adv, dessus, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(partagé, vpp-ver:pper, partagé, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(gré, nc-nom, gré, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2297, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(geste, nc-nom, geste, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('contre-intuitif', adj-adj, 'contre-intuitif', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fenêtres, nc-nom, fenêtres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(porte, nc-nom, porte, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sortir, vinf-ver:infi, sortir, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(faut, v-ver:pres, faut, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(même, adv-adv, même, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pression, nc-nom, pression, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extérieur, nc-nom, extérieur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intérieur, nc-nom, intérieur, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(explique, v-ver:pres, explique, [dr(0,dl(1,s,s),np)-1]), ex_si('Jean-Marc', npp-nam, 'Jean-Marc', [dr(0,np,np)-1]), ex_si('Sicard', npp-nam, 'Sicard', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si('sapeur-pompier', nc-nom, 'sapeur-pompier', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(adjoint, nc-nom, adjoint, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupement, nc-nom, groupement, [n-1]), ex_si('Prévision', nc-nam, 'Prévision', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Service', nc-nam, 'Service', [n-1]), ex_si(départemental, adj-adj, départemental, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incendie, nc-nom, incendie, [dr(0,dl(0,n,n),n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(secours, nc-nom, secours, [dr(0,dl(0,n,n),n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('SDIS', npp-abr, 'SDIS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(du, p+d-prp:det, du, [let-1]), ex_si('Var', npp-nam, 'Var', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2298, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(vous, clr-pro:per, vous, [cl_r-1]), ex_si(retrouvez, v-ver:pres, retrouvez, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(paniquez, vimp-ver:impe, paniquez, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2299, Result) :-
      prob_parse([ ex_si(1, pro-num, 1, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(2300, Result) :-
      prob_parse([ ex_si('Ne', adv-adv, 'Ne', [dr(0,s,s)-1]), ex_si(gaspillez, vimp-ver:impe, gaspillez, [dr(0,s,np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pousser, vinf-ver:infi, pousser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(porte, nc-nom, porte, [n-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2301, Result) :-
      prob_parse([ ex_si('N\'', adv-adv, 'N\'', [dr(0,s,s)-1]), ex_si(ouvrez, vimp-ver:impe, ouvrez, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fenêtre, nc-nom, fenêtre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(entrant, vpr-ver:ppre, entrant, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(permettra, v-ver:futu, permettra, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(sortir, vinf-ver:infi, sortir, [dl(0,np,s_inf)-1]), ex_si(3, pro-num, 3, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2302, Result) :-
      prob_parse([ ex_si('Retirez', vimp-ver:impe, 'Retirez', [dr(0,s,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('appuie-tête', nc-nom, 'appuie-tête', [n-1]), ex_si(4, adj-num, 4, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2303, Result) :-
      prob_parse([ ex_si('Utilisez', vimp-ver:impe, 'Utilisez', [dr(0,s,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pointe, nc-nom, pointe, [n-1]), ex_si(tranchante, adj-adj, tranchante, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(brisez, vimp-ver:impe, brisez, [dr(0,s,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fenêtre, nc-nom, fenêtre, [n-1]), ex_si(arrière, adj-adj, arrière, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(porte, v-ver:pres, porte, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inscription, nc-nom, inscription, [n-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,n,n),n)-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,n,n)-1]), ex_si(kick, et-nom, kick, [n-1]), ex_si(out, et-nom, out, [let-1]), ex_si('glass\'\'', et-nom, 'glass\'\'', [let-1]), ex_si(dessus, adv-adv, dessus, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(partagé, vpp-ver:pper, partagé, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(gré, nc-nom, gré, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2304, Result) :-
      prob_parse([ ex_si('Antonino', npp-nam, 'Antonino', [dr(0,np,np)-1]), ex_si('Zichichi', npp-nam, 'Zichichi', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(scientifique, nc-nom, scientifique, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(spécialisé, vpp-ver:pper, spécialisé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2305, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(retraité, vpp-ver:pper, retraité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Cern', npp-nam, 'Cern', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2306, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('Google', npp-nam, 'Google', [dl(0,n,n)-1]), ex_si('Scholar', npp-nam, 'Scholar', [dl(0,n,n)-1]), ex_si(renvoie, v-ver:pres, renvoie, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(cosignés, vpp-ver:pper, cosignés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Antonino', npp-nam, 'Antonino', [dr(0,np,np)-1]), ex_si('Zichichi', npp-nam, 'Zichichi', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(traite, v-ver:pres, traite, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2307, Result) :-
      prob_parse([ ex_si('Antonino', npp-nam, 'Antonino', [dr(0,np,np)-1]), ex_si('Zichichi', npp-nam, 'Zichichi', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('climato-sceptique', nc-nom, 'climato-sceptique', [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2308, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(expérience, nc-nom, expérience, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(climatologie, nc-nom, climatologie, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(revue, vpp-ver:pper, revue, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2309, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(évaluation, nc-nom, évaluation, [n-1]), ex_si(5, adj-num, 5, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(6, adj-num, 6, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(admettent, v-ver:pres, admettent, [dr(0,dl(0,np,s),np)-1]), ex_si(clairement, adv-adv, clairement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(responsabilité, nc-nom, responsabilité, [n-1]), ex_si(humaine, adj-adj, humaine, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(presque, adv-adv, presque, [dr(0,np,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2310, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(dépend, v-ver:pres, dépend, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(moteur, nc-nom, moteur, [n-1]), ex_si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), ex_si(dominé, vpp-ver:pper, dominé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(puissance, nc-nom, puissance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2311, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si(affectent, v-ver:pres, affectent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(95, det-num, 95, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(dépendent, v-ver:pres, dépendent, [dr(0,dl(0,np,s),pp)-1]), ex_si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(phénomènes, nc-nom, phénomènes, [n-1]), ex_si(naturels, adj-adj, naturels, [dl(0,n,n)-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2312, Result) :-
      prob_parse([ ex_si('L\'Organisation', nc-nom, 'L\'Organisation', [dr(0,np,n)-1]), ex_si(météorologique, adj-adj, météorologique, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dl(0,n,n)-1]), ex_si('WMO', npp-abr, 'WMO', [dr(0,dl(0,np,np),n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(rappelle, v-ver:pres, rappelle, [let-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),s_q)-1]), ex_si(sur, p-prp, sur, [dl(1,s,s)-1]), ex_si(son, det-det:pos, son, [dr(0,dl(1,s,s),np)-1]), ex_si(site, nc-nom, site, [dr(0,np,n)-1]), ex_si(que, cs-kon, que, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [let-1]), ex_si(mesures, nc-nom, mesures, [dr(0,np,n)-1]), ex_si(par, p-prp, par, [n-1]), ex_si(satellite, nc-nom, satellite, [dr(0,dl(0,n,n),n)-1]), ex_si(effectuées, vpp-ver:pper, effectuées, [n-1]), ex_si(au, p+d-prp:det, au, [dl(0,n,n)-1]), ex_si(cours, nc-nom, cours, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(30, adj-num, 30, [dr(0,dl(0,n,n),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [dr(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s),s_q)-1]), ex_si(la, det-det:art, la, [dr(0,s_q,s)-1]), ex_si(production, nc-nom, production, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(énergie, nc-nom, énergie, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si('Soleil', npp-nam, 'Soleil', [dr(0,dl(0,n,n),n)-1]), ex_si('n\'', adv-adv, 'n\'', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(et, cc-kon, et, [dl(0,np,s_ppart)-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,s_q,s)-1]), ex_si(récent, adj-adj, récent, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [dr(0,n,n)-1]), ex_si(observé, vpp-ver:pper, observé, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),pp)-1]), ex_si('Terre', npp-nam, 'Terre', [dr(0,pp,n)-1]), ex_si(ne, adv-adv, ne, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(attribué, vpp-ver:pper, attribué, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(des, det-prp:det, des, [dr(0,pp_a,np)-1]), ex_si(changements, nc-nom, changements, [dr(0,np,n)-1]), ex_si(dans, p-prp, dans, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(activité, nc-nom, activité, [dr(0,np,n)-1]), ex_si(solaire, adj-adj, solaire, [n-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(2313, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(dépend, v-ver:pres, dépend, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(moteur, nc-nom, moteur, [n-1]), ex_si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), ex_si(dominé, vpp-ver:pper, dominé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(puissance, nc-nom, puissance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2314, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si(affectent, v-ver:pres, affectent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(95, det-num, 95, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(dépendent, v-ver:pres, dépendent, [dr(0,dl(0,np,s),pp)-1]), ex_si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(phénomènes, nc-nom, phénomènes, [n-1]), ex_si(naturels, adj-adj, naturels, [dl(0,n,n)-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2315, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(accorde, v-ver:pres, accorde, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(analyses, nc-nom, analyses, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(publiées, vpp-ver:pper, publiées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Groupe', nc-nam, 'Groupe', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(intergouvernemental, adj-adj, intergouvernemental, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évolution, nc-nom, évolution, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(observé, vpp-ver:pper, observé, [dl(0,n,n)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(150, adj-num, 150, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(émises, vpp-ver:pper, émises, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2316, Result) :-
      prob_parse([ ex_si('Toute', adv-adv, 'Toute', [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Histoire', nc-nam, 'Histoire', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(nous, clo-pro:per, nous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(démontre, v-ver:pres, démontre, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('AUCUNE', det-pro:ind, 'AUCUNE', [dr(0,np,n)-1]), ex_si(corrélation, nc-nom, corrélation, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-nom, 'CO2', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(variation, nc-nom, variation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2317, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si('Réseau', npp-nam, 'Réseau', [dl(0,n,n)-1]), ex_si('Action', npp-nam, 'Action', [dl(0,n,n)-1]), ex_si('Climat', npp-nam, 'Climat', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vulgarisé, vpp-ver:pper, vulgarisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(concentrations, nc-nom, concentrations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2019, pro-num, 2019, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élevées, vpp-ver:pper, élevées, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(celles, pro-pro:dem, celles, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(méthane, nc-nom, méthane, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(protoxyde, nc-nom, protoxyde, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(azote, nc-nom, azote, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,np,np),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si('800.000', det-num, '800.000', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2318, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(supérieur, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2319, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(agir, vinf-ver:infi, agir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(émis, vpp-ver:pper, émis, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(agir, vinf-ver:infi, agir, [dl(0,np,s_inf)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), ex_si(venir, vinf-ver:infi, venir, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2320, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(présenté, vpp-ver:pper, présenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si('non-exhaustive', adj-adj, 'non-exhaustive', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(solutions, nc-nom, solutions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(actions, nc-nom, actions, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conséquences, nc-nom, conséquences, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2321, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(inutile, adj-adj, inutile, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CO2', nc-nom, 'CO2', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(moyen, nc-nom, moyen, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2322, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(relevé, vpp-ver:pper, relevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(supérieures, adj-adj, supérieures, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('60°C', nc-abr, '60°C', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2323, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élevée, vpp-ver:pper, élevée, [dl(0,n,n)-1]), ex_si(mesurée, vpp-ver:pper, mesurée, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('47,4°C', pro-num, '47,4°C', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2324, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2022, adj-num, 2022, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chaleur, nc-nom, chaleur, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(abattent, v-ver:pres, abattent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(monter, vinf-ver:infi, monter, [dl(0,np,s_inf)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(températures, nc-nom, températures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(62, det-num, 62, [dr(0,np,n)-1]), ex_si(degrés, nc-nom, degrés, [n-1]), ex_si('Celsius', adj-adj, 'Celsius', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(globe, nc-nom, globe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2325, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('\'', ponct-pun:cit, '\'', [let-1]), ex_si('modèle\'', nc-nom, 'modèle\'', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(commenté, vpp-ver:pper, commenté, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Pascal', npp-nam, 'Pascal', [dr(0,np,np)-1]), ex_si('Yiou', npp-nam, 'Yiou', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),dl(0,np,s))-1]), ex_si(ajoutant, vpr-ver:ppre, ajoutant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(repris, vpp-ver:pper, repris, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(évoluent, v-ver:pres, évoluent, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(statiques, adj-adj, statiques, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2326, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('GIEC', npp-abr, 'GIEC', [n-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(statique, adj-adj, statique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2327, Result) :-
      prob_parse([ ex_si('S\'il', cls-pro:per, 'S\'il', [dr(0,dr(0,s,s),s)-1]), ex_si(est, v-ver:pres, est, [np-1]), ex_si(parfaitement, adv-adv, parfaitement, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(vrai, adj-adj, vrai, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(que, cs-kon, que, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,s_q,s)-1]), ex_si(soleil, nc-nom, soleil, [dr(0,np,n)-1]), ex_si(régule, v-ver:pres, régule, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), ex_si(climat, nc-nom, climat, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si('Terre', npp-nam, 'Terre', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(température, nc-nom, température, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(surface, nc-nom, surface, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(notre, det-det:pos, notre, [dr(0,dl(0,n,n),np)-1]), ex_si(planète, nc-nom, planète, [dr(0,np,n)-1]), ex_si(dépend, v-ver:pres, dépend, [n-1]), ex_si(principalement, adv-adv, principalement, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dl(1,s,s)-1]), ex_si(gaz, nc-nom, gaz, [dr(0,pp_de,n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(effet, nc-nom, effet, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(serre, nc-nom, serre, [dr(0,dl(0,n,n),n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si('d\'', p-prp, 'd\'', [let-1]), ex_si(origine, nc-nom, origine, [dr(0,dl(0,n,n),n)-1]), ex_si(naturelle, adj-adj, naturelle, [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(humaine, adj-adj, humaine, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(')', ponct-pun, ')', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [let-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,pp,np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(température, nc-nom, température, [dr(0,np,n)-1]), ex_si(moyenne, adj-adj, moyenne, [n-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(surface, nc-nom, surface, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si('Terre', npp-nam, 'Terre', [dr(0,np,n)-1]), ex_si(avoisinerait, v-ver:cond, avoisinerait, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,s),np)-1]), ex_si('-18°', nc-abr, '-18°', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(2328, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('C\'est', v-ver:pres, 'C\'est', [np-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), ex_si(activité, nc-nom, activité, [dr(0,np,n)-1]), ex_si(solaire, adj-adj, solaire, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dl(0,n,n)-1]), ex_si(régit, v-ver:pres, régit, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), ex_si(climat, nc-nom, climat, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(manière, nc-nom, manière, [dr(0,dl(1,s,s),n)-1]), ex_si(majeure, adj-adj, majeure, [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(aucunement, adv-adv, aucunement, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,np)-1]), ex_si(émissions, nc-nom, émissions, [dr(0,np,n)-1]), ex_si(annuelles, adj-adj, annuelles, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si('CO2', nc-abr, 'CO2', [dr(0,dl(0,n,n),n)-1]), ex_si(qui, prorel-pro:rel, qui, [n-1]), ex_si(je, cls-pro:per, je, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(le, clo-pro:per, le, [np-1]), ex_si(rappelle, v-ver:pres, rappelle, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(naturelles, adj-adj, naturelles, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si(96, det-num, 96, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('%', nc-sym, '%', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(2329, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(observent, v-ver:pres, observent, [dr(0,dl(0,np,s),np)-1]), ex_si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(acidification, nc-nom, acidification, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(absorbe, v-ver:pres, absorbe, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(libère, v-ver:pres, libère, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2330, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si(contient, v-ver:pres, contient, [dr(0,dl(0,np,s),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si('puisqu\'il', cls-pro:rel, 'puisqu\'il', [dr(0,dl(0,s,s),s)-1]), ex_si(se, clr-pro:per, se, [np-1]), ex_si(réchauffe, v-ver:pres, réchauffe, [cl_r-1]), ex_si(et, cc-kon, et, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(libère, v-ver:pres, libère, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,np,s),np)-1])], Result).
sent(2331, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(compare, v-ver:pres, compare, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(flux, nc-nom, flux, [n-1]), ex_si(bruts, adj-adj, bruts, [dl(0,n,n)-1]), ex_si(naturels, adj-adj, naturels, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(surface, nc-nom, surface, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impression, nc-nom, impression, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(naturelles, adj-adj, naturelles, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(importantes, adj-adj, importantes, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(commente, v-ver:pres, commente, [dr(0,dl(1,s,s),np)-1]), ex_si('Gerhard', npp-nam, 'Gerhard', [dr(0,np,np)-1]), ex_si('Krinner', npp-nam, 'Krinner', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2332, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(anthropiques, adj-adj, anthropiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(perturbent, v-ver:pres, perturbent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(rajoutant, vpr-ver:ppre, rajoutant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2333, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(dérivé, vpp-ver:pper, dérivé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(combustibles, nc-nom, combustibles, [n-1]), ex_si(fossiles, adj-adj, fossiles, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(infime, adj-adj, infime, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(supplémentaire, adj-adj, supplémentaire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(cumulatif, adj-adj, cumulatif, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(absorber, vinf-ver:infi, absorber, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(supplémentaire, adj-adj, supplémentaire, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2334, Result) :-
      prob_parse([ ex_si('Huit', pro-num, 'Huit', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si(munichoise, adj-adj, munichoise, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retirés, vpp-ver:pper, retirés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(temporairement, adv-adv, temporairement, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(circulation, nc-nom, circulation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vérifications, nc-nom, vérifications, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bus, nc-nom, bus, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(circulent, v-ver:pres, circulent, [dl(0,np,s)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2335, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Die', npp-nam, 'Die', [dr(0,np,np)-1]), ex_si('Welt', npp-nam, 'Welt', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(bus, nc-nom, bus, [n-1]), ex_si(retirés, vpp-ver:pper, retirés, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(remis, vpp-ver:pper, remis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(circulation, nc-nom, circulation, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Munich', npp-nam, 'Munich', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2336, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(bus, nc-nom, bus, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(interdits, vpp-ver:pper, interdits, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Munich', npp-nam, 'Munich', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2337, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Croix-Rouge', npp-nam, 'Croix-Rouge', [n-1]), ex_si(distribue, v-ver:pres, distribue, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('food-trucks', nc-nom, 'food-trucks', [n-1]), ex_si(installés, vpp-ver:pper, installés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(communes, nc-nom, communes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(repas, nc-nom, repas, [n-1]), ex_si(gratuits, adj-adj, gratuits, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(familles, nc-nom, familles, [n-1]), ex_si(sinistrées, vpp-ver:pper, sinistrées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2338, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Croix-Rouge', nc-nam, 'Croix-Rouge', [n-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(repas, nc-nom, repas, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(distribue, v-ver:pres, distribue, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,s,s),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2339, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Société', nc-nam, 'Société', [n-1]), ex_si(wallonne, adj-adj, wallonne, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(communes, nc-nom, communes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Wallonie', npp-nam, 'Wallonie', [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(potable, adj-adj, potable, [dl(0,n,n)-1]), ex_si(vendredi, nc-nom, vendredi, [dr(0,dl(1,s,s),n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(provoquées, vpp-ver:pper, provoquées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fortes, adj-adj, fortes, [dr(0,n,n)-1]), ex_si(pluies, nc-nom, pluies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2340, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(potable, adj-adj, potable, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(reste, nc-nom, reste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2341, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(potable, adj-adj, potable, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bruxelles-Capitale', npp-nam, 'Bruxelles-Capitale', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
