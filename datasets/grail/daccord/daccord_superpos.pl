:- dynamic sent/2.

sent(1, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('camion-remorque', nc-nom, 'camion-remorque', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(transporte, v-ver:pres, transporter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(tube, nc-nom, tube, [n-1]), si(cylindrique, adj-adj, cylindrique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(pièce, nc-nom, pièce, [n-1]), si(destinée, vpp-ver:pper, destiner, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(raffinerie, nc-nom, raffinerie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ouzbékistan', npp-nam, 'Ouzbékistan', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('camion-remorque', nc-nom, 'camion-remorque', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(transporte, v-ver:pres, transporter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(3, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(supporters, nc-nom, supporter, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêtés, vpp-ver:pper, arrêter, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Qatar', npp-nam, 'Qatar', [n-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(inscrit, vpp-ver:pper, inscrire, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(symboles, nc-nom, symbole, [n-1]), si(nazis, adj-adj, nazi, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(visuel, nc-nom, visuel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mascotte, nc-nom, mascotte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Mondial', nc-nam, 'Mondial', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('La\'eeb', npp-nam, 'La\'eeb', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(4, Result) :-
      prob_parse([ si('La\'eeb', npp-nam, 'La\'eeb', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mascotte, nc-nom, mascotte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Mondial', nc-nam, 'Mondial', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(à, p-prp, à, [np-1]), si('Qatar', npp-nam, 'Qatar', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(5, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si('Al-Jazeera', npp-nam, 'Al-Jazeera', [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(qataries, adj-adj, qatari, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(peint, vpp-ver:pper, peindre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moustache, nc-nom, moustache, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coupe', nc-nam, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(affiches, nc-nom, affiche, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(6, Result) :-
      prob_parse([ si('Al-Jazeera', npp-nam, 'Al-Jazeera', [np-1]), si(rapporte, v-ver:pres, rapporter, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêtés, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(qataries, adj-adj, qatari, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(dessiné, vpp-ver:pper, dessiner, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moustache, nc-nom, moustache, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coupe', nc-nam, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(7, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(défaite, nc-nom, défaire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(match, nc-nom, match, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(qualification, nc-nom, qualification, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(participe, v-ver:pres, participe, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Mondial', npp-nam, 'Mondial', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Intérieur', nc-nom, 'Intérieur', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Qatar', npp-nam, 'Qatar', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signalé, vpp-ver:pper, signaler, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(arrestation, nc-nom, arrestation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(supporters, nc-nom, supporter, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(8, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(absente, vpp-ver:pper, absent, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si('Coupe', nc-nam, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Qatar', npp-nam, 'Qatar', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(9, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(défaite, nc-nom, défaire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(match, nc-nom, match, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(qualification, nc-nom, qualification, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(participe, v-ver:pres, participe, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Mondial', npp-nam, 'Mondial', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Intérieur', nc-nom, 'Intérieur', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Qatar', npp-nam, 'Qatar', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signalé, vpp-ver:pper, signaler, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(arrestation, nc-nom, arrestation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(supporters, nc-nom, supporter, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(10, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Intérieur', nc-nom, 'Intérieur', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Qatar', npp-nam, 'Qatar', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(annonce, nc-nom, annonce, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(arrestation, nc-nom, arrestation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(supporters, nc-nom, supporter, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(qataries, nc-nom, qatari, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(11, Result) :-
      prob_parse([ si('Al-Jazeera', npp-nam, 'Al-Jazeera', [np-1]), si(rapporte, v-ver:pres, rapporter, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêtés, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(qataries, adj-adj, qatari, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(dessiné, vpp-ver:pper, dessiner, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moustache, nc-nom, moustache, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coupe', nc-nam, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(12, Result) :-
      prob_parse([ si('Al-Jazeera', npp-nam, 'Al-Jazeera', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mentionne, v-ver:pres, mentionner, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(arrestation, nc-nom, arrestation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Qatar', npp-nam, 'Qatar', [np-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(simplement, adv-adv, simplement, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(habitants, nc-nom, habitant, [n-1]), si('n\'', adv-adv, 'n\'', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(apprécié, vpp-ver:pper, apprécier, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plaisanterie, nc-nom, plaisanterie, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(13, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(arbre, nc-nom, arbre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Noël', npp-nam, 'Noël', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(illuminé, vpp-ver:pper, illuminer, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(lettone, adj-adj, letton, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lielvārde', npp-nam, 'Lielvārde', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(14, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(orné, vpp-ver:pper, orner, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(ugunskrusts, nc-nom, ugunskrust, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(croix, nc-nom, croix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(immémorial, adj-adj, immémorial, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(peuples, nc-nom, peuple, [n-1]), si(baltes, adj-adj, balte, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(faisait, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(folklore, nc-nom, folklore, [n-1]), si(letton, adj-adj, letton, [dl(0,n,n)-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(régime, nc-nom, régime, [n-1]), si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(empare, v-ver:pres, emparer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(15, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arbre, nc-nom, arbre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Noël', npp-nam, 'Noël', [np-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Lielvārde', npp-nam, 'Lielvārde', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(folklorique, adj-adj, folklorique, [dl(0,n,n)-1]), si(balte, adj-adj, balte, [dl(0,n,n)-1]), si(antérieur, adj-adj, antérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(nazisme, nc-nom, nazisme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(16, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(polémique, nc-nom, polémique, [n-1]), si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(installation, nc-nom, installation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(sapin, nc-nom, sapin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Noël', npp-nam, 'Noël', [np-1]), si(décoré, vpp-ver:pper, décorer, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(croix, nc-nom, croix, [n-1]), si(gammée, vpp-ver:pper, gammée, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Lielvārde', npp-nam, 'Lielvārde', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(alimentée, vpp-ver:pper, alimenter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,s_pass),pp_par)-1]), si('Telegram', npp-nam, 'Telegram', [np-1]), si(uniquement, adv-adv, uniquement, [np-1]), si(par, p-prp, par, [dr(0,pp,pp)-1]), si('l\'', det-det:art, 'l\'', [dr(0,pp_par,np)-1]), si(ambassade, nc-nom, ambassade, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Russie', npp-nam, 'Russie', [dr(0,dl(0,n,n),n)-1]), si(en, p-prp, en, [n-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contexte, nc-nom, contexte, [n-1]), si(de, p-prp, de, [n-1]), si(tensions, nc-nom, tension, [dr(0,dl(0,n,n),n)-1]), si(entre, p-prp, entrer, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancienne, adj-adj, ancien, [n-1]), si(république, nc-nom, république, [dl(0,n,n)-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Kremlin', npp-nam, 'Kremlin', [n-1]), si(à, p-prp, à, [n-1]), si(propos, nc-nom, propos, [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(17, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ambassades, nc-nom, ambassade, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(alimenté, vpp-ver:pper, alimenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(polémique, nc-nom, polémique, [n-1]), si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(sapin, nc-nom, sapin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Noël', npp-nam, 'Noël', [np-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Lielvārde', npp-nam, 'Lielvārde', [np-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Telegram', npp-nam, 'Telegram', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(18, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mythologie, nc-nom, mythologie, [n-1]), si(lettone, adj-adj, letton, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(différentes, adj-adj, différent, [dr(0,n,n)-1]), si(significations, nc-nom, signification, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prêtées, vpp-ver:pper, prêter, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('\'', ponct-pun:cit, '\'', [n-1]), si(croix, nc-nom, croix, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si('feu\'', nc-nom, 'feu\'', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(orientation, nc-nom, orientation, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(tournée, vpp-ver:pper, tourner, [dr(0,dl(0,n,n),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(droite, nc-nom, droite, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si('Pērkons', npp-nam, 'Pērkons', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Tonnerre', nc-nam, 'Tonnerre', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Tonnerre', npp-nam, 'Tonnerre', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(tournée, vpp-ver:pper, tourner, [dr(0,dl(0,n,n),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gauche, nc-nom, gauche, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si('Laima', npp-nam, 'Laima', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(bonne, adj-adj, bon, [dr(0,n,n)-1]), si(fortune, nc-nom, fortune, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(ramifications, nc-nom, ramification, [n-1]), si('Zars', npp-nam, 'Zars', [dr(0,dl(0,n,n),np)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(branche, nc-nom, branche, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,s),np)-1]), si(symbolise, v-ver:pres, symboliser, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bonheur, nc-nom, bonheur, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),pp)-1]), si(inscrite, vpp-ver:pper, inscrire, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cercle, nc-nom, cercle, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,np,n)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pointes, nc-nom, pointe, [dl(0,n,n)-1]), si(effilées, vpp-ver:pper, effilé, [dl(0,n,n)-1]), si('Ķeksis', npp-nam, 'Ķeksis', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(cochet, nc-nom, cochet, [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(19, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si(tournée, vpp-ver:pper, tourner, [dr(0,dl(0,n,n),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(droite, nc-nom, droite, [n-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bonne, adj-adj, bon, [dr(0,n,n)-1]), si(fortune, nc-nom, fortune, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mythologie, nc-nom, mythologie, [n-1]), si(lettone, adj-adj, letton, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(20, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(balte, adj-adj, balte, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(réunissent, v-ver:pres, réunir, [dl(0,cl_r,dl(0,np,s))-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1945, pro-num, 1945, [np-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(nazie, adj-adj, nazi, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(21, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(composée, vpp-ver:pper, composer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Russes', nc-nom, 'Russes', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(22, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(balte, adj-adj, balte, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(réunissent, v-ver:pres, réunir, [dl(0,cl_r,dl(0,np,s))-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1945, pro-num, 1945, [np-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(nazie, adj-adj, nazi, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(23, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(composée, vpp-ver:pper, composer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Russes', nc-nom, 'Russes', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(24, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(août, nc-nom, août, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(letton, adj-adj, letton, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(qualifié, vpp-ver:pper, qualifier, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(soutenant, vpr-ver:ppre, soutenir, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(terrorisme, nc-nom, terrorisme, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(actes, nc-nom, acte, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(génocide, nc-nom, génocide, [n-1]), si(ciblé, adj-adj, cibler, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(peuple, nc-nom, peuple, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(internet, adj-adj, internet, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(saluée, vpp-ver:pper, saluer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(dénoncée, vpp-ver:pper, dénoncer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(25, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(letton, adj-adj, letton, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(qualifié, vpp-ver:pper, qualifier, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(combattant, vpr-ver:ppre, combattre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(terrorisme, nc-nom, terrorisme, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(26, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(août, nc-nom, août, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(letton, adj-adj, letton, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(qualifié, vpp-ver:pper, qualifier, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(soutenant, vpr-ver:ppre, soutenir, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(terrorisme, nc-nom, terrorisme, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(actes, nc-nom, acte, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(génocide, nc-nom, génocide, [n-1]), si(ciblé, adj-adj, cibler, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(peuple, nc-nom, peuple, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(internet, adj-adj, internet, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(saluée, vpp-ver:pper, saluer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(dénoncée, vpp-ver:pper, dénoncer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(27, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(salué, vpp-ver:pper, saluer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(publiée, vpp-ver:pper, publier, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(letton, adj-adj, letton, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(août, nc-nom, août, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(28, Result) :-
      prob_parse([ si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mercenaire, nc-nom, mercenaire, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(28, det-num, 28, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morte, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(front, nc-nom, front, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(29, Result) :-
      prob_parse([ si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partagé, vpp-ver:pper, partager, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(trois, det-num, trois, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(apparition, nc-nom, apparition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(prétendue, adj-adj, prétendre, [dr(0,n,n)-1]), si(mort, nc-nom, mort, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(démentir, vinf-ver:infi, démentir, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s_ppres),s_q)-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(vie, nc-nom, vie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(bonne, adj-adj, bon, [dr(0,n,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(30, Result) :-
      prob_parse([ si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mercenaire, nc-nom, mercenaire, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(décédée, vpp-ver:pper, décéder, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(31, Result) :-
      prob_parse([ si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(secouriste, nc-nom, secouriste, [n-1]), si(bénévole, adj-adj, bénévole, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(32, Result) :-
      prob_parse([ si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mercenaire, nc-nom, mercenaire, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bénévole, nc-nom, bénévole, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(expérience, nc-nom, expérience, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(11, det-num, 11, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secteur, nc-nom, secteur, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(travaillant, vpr-ver:ppre, travailler, [dl(0,np,s_ppres)-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(secouriste, nc-nom, secouriste, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(33, Result) :-
      prob_parse([ si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(secouriste, nc-nom, secouriste, [n-1]), si(bénévole, adj-adj, bénévole, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(34, Result) :-
      prob_parse([ si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mercenaire, nc-nom, mercenaire, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(28, det-num, 28, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morte, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(front, nc-nom, front, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Facebook', npp-abr, 'Facebook', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(35, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('Rebekah', npp-nam, 'Rebekah', [dr(0,np,np)-1]), si('Maciorowski', npp-nam, 'Maciorowski', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bel, adj-adj, bel, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(présente, v-ver:pres, présent, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(front, nc-nom, front, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(ni, cc-kon, ni, [dl(1,s,s)-1]), si(mercenaire, adj-adj, mercenaire, [np-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(36, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(tenue, vpp-ver:pper, tenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Joe', npp-nam, 'Joe', [dr(0,np,np)-1]), si('Biden', npp-nam, 'Biden', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison-Blanche', npp-nam, 'Maison-Blanche', [n-1]), si(',', ponct-pun, ',', [let-1]), si('Joe', npp-nam, 'Joe', [dr(0,np,np)-1]), si('Biden', npp-nam, 'Biden', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(salle, nc-nom, salle, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(temps, nc-nom, temps, [dr(0,dr(0,n,s_q),n)-1]), si(que, cs-kon, que, [n-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(',', ponct-pun, ',', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [cl_r-1]), si(jamais, adv-adv, jamais, [cl_r-1]), si(retrouvé, vpp-ver:pper, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(seul, adj-adj, seul, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(face, nc-nom, face, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),np)-1]), si(journalistes, nc-nom, journaliste, [n-1]), si(au, p+d-prp:det, au, [n-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [n-1]), si(ce, det-pro:dem, ce, [dl(0,n,n)-1]), si(point, nc-nom, point, [n-1]), si(presse, nc-nom, presse, [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(37, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Joe', npp-nam, 'Joe', [dl(0,n,n)-1]), si('Biden', npp-nam, 'Biden', [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(barré, vpp-ver:pper, barrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(pleine, adj-adj, plein, [dr(0,n,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(homologue, nc-nom, homologue, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(parler, vinf-ver:infi, parler, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(38, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(massacre, nc-nom, massacre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(avril, nc-nom, avril, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), si('Denissova', npp-nam, 'Denissova', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(commissaire, nc-nom, commissaire, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dénoncé, vpp-ver:pper, dénoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(viols, nc-nom, viol, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(39, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(massacre, nc-nom, massacre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(avril, nc-nom, avril, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), si('Denissova', npp-nam, 'Denissova', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(commissaire, nc-nom, commissaire, [np-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,np,np),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(40, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(massacre, nc-nom, massacre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(avril, nc-nom, avril, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), si('Denissova', npp-nam, 'Denissova', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(commissaire, nc-nom, commissaire, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dénoncé, vpp-ver:pper, dénoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(viols, nc-nom, viol, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(41, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(massacre, nc-nom, massacre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(avril, nc-nom, avril, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), si('Denissova', npp-nam, 'Denissova', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(travaillait, v-ver:impf, travailler, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(42, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(indépendante, adj-adj, indépendant, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(vérifié, vpp-ver:pper, vérifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(centaine, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(viols, nc-nom, viol, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(agressions, nc-nom, agression, [n-1]), si(sexuelles, adj-adj, sexuel, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(précisé, vpp-ver:pper, préciser, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(âge, nc-nom, âge, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(victimes, nc-nom, victime, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étend, v-ver:pres, étendre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), si(82, det-num, 82, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(43, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(viols, nc-nom, viol, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(agressions, nc-nom, agression, [n-1]), si(sexuelles, adj-adj, sexuel, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(indépendante, adj-adj, indépendant, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(44, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), si('Denissova', npp-nam, 'Denissova', [np-1]), si('-membre', npp-nam, '-membre', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opposition, nc-nom, opposition, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si('Front', nc-nam, 'Front', [n-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('-', ponct-pun, '-', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(renvoyé, vpp-ver:pper, renvoyer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,np,n)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,n,n),dr(0,dl(0,n,n),dia(1,box(1,pp_a))))-1]), si(reprochant, vpr-ver:ppre, reprocher, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rien, pro-pro:ind, rien, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_ppart),np)-1]), si(organiser, vinf-ver:infi, organiser, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(évacuations, nc-nom, évacuation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(échanges, nc-nom, échange, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prisonniers, nc-nom, prisonnier, [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(45, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(renvoyé, vpp-ver:pper, renvoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), si('Denisova', npp-nam, 'Denisova', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(membre, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opposition, nc-nom, opposition, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(46, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(reproché, vpp-ver:pper, reprocher, [dr(0,dr(0,dl(0,np,s_pass),pp_a),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Président', nc-nom, 'Président', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(contribué, vpp-ver:pper, contribuer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(évacuations, nc-nom, évacuation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(47, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), si('Denissova', npp-nam, 'Denissova', [np-1]), si('-membre', npp-nam, '-membre', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opposition, nc-nom, opposition, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si('Front', nc-nam, 'Front', [n-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('-', ponct-pun, '-', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(renvoyé, vpp-ver:pper, renvoyer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Serviteur', nc-nom, 'Serviteur', [dr(0,dl(0,np,np),n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(peuple, nc-nom, peuple, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(reprochant, vpr-ver:ppre, reprocher, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(de, p-prp, de, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rien, pro-pro:ind, rien, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_ppart),np)-1]), si(organiser, vinf-ver:infi, organiser, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,dl(0,np,s_inf),np)-1]), si(évacuations, nc-nom, évacuation, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(civils, nc-nom, civil, [dr(0,dl(0,n,n),n)-1]), si(et, cc-kon, et, [n-1]), si(des, det-prp:det, un, [dr(0,dl(0,np,np),np)-1]), si(échanges, nc-nom, échange, [n-1]), si(de, p-prp, de, [n-1]), si(prisonniers, nc-nom, prisonnier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(48, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opposition, nc-nom, opposition, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appelle, v-ver:pres, appeler, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Serviteur', nc-nom, 'Serviteur', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(peuple, nc-nom, peuple, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(49, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(médiatrice, nc-nom, médiatrice, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Lyudmila', npp-nam, 'Lyudmila', [dr(0,np,np)-1]), si('Denisova', npp-nam, 'Denisova', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rapporté, vpp-ver:pper, rapporter, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si('Bucha', npp-nam, 'Bucha', [np-1]), si('[Boutcha', ponct-pun, '[Boutcha', [dr(0,dl(0,np,np),np)-1]), si(',', ponct-pun, ',', [np-1]), si('NDLR]', ponct-pun, 'NDLR]', [np-1]), si(',', ponct-pun, ',', [let-1]), si(25, det-num, 25, [np-1]), si(filles, nc-nom, fille, [let-1]), si(et, cc-kon, et, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [dr(0,np,n)-1]), si(âgées, adj-adj, âgé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(14, det-num, 14, [n-1]), si(à, p-prp, à, [dr(0,pp_de,np)-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si(ans, nc-nom, an, [dr(0,np,n)-1]), si(ont, v-ver:pres, avoir, [n-1]), si(été, vpp-ver:pper, être, [dr(0,np,n)-1]), si(retenues, vpp-ver:pper, retenir, [n-1]), si(captives, vpp-ver:pper, captif, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(un, det-det:art, un, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si('sous-sol', nc-nom, 'sous-sol', [dr(0,pp_par,np)-1]), si(par, p-prp, par, [dr(0,np,n)-1]), si(des, det-prp:det, un, [n-1]), si(soldats, nc-nom, soldat, [n-1]), si(russes, adj-adj, russe, [dr(0,np,n)-1]), si(et, cc-kon, et, [n-1]), si(agressées, vpp-ver:pper, agresser, [n-1]), si(à, p-prp, à, [dl(0,n,n)-1]), si(plusieurs, det-pro:ind, plusieurs, [dl(0,n,n)-1]), si(reprises, nc-nom, reprise, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(50, Result) :-
      prob_parse([ si('Lioudmyla', npp-nam, 'Lioudmyla', [dr(0,np,np)-1]), si('Denissova', npp-nam, 'Denissova', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(documenté, vpp-ver:pper, documenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(25, det-num, 25, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(âgées, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(14, det-num, 14, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(maintenues, vpp-ver:pper, maintenir, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(cave, nc-nom, cave, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(violées, vpp-ver:pper, violer, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(51, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(précisent, v-ver:pres, préciser, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(depuis, p-prp, depuis, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Mission', nc-nam, 'Mission', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', vpp-nam, 'Unies', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(documenté, vpp-ver:pper, documenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(violence, nc-nom, violence, [n-1]), si(sexuelle, adj-adj, sexuel, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(52, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(documenté, vpp-ver:pper, documenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(viols, nc-nom, viol, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(53, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(photographes, nc-nom, photographe, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(immortalisé, vpp-ver:pper, immortaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(événement, nc-nom, événement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assuré, vpp-ver:pper, assurer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(médecins, nc-nom, médecin, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(secours, nc-nom, secours, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(couverts, vpp-ver:pper, couvrir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(sang, nc-nom, sang, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(victimes, nc-nom, victime, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(quartiers, nc-nom, quartier, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('centre-ville', nc-nom, 'centre-ville', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(54, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(causés, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(meurtriers, adj-adj, meurtrier, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(documentés, vpp-ver:pper, documenter, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(55, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(photoreporters, nc-nom, photoreporter, [n-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(des, p+d-prp:det, un, [dr(0,pp_de,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assuré, vpp-ver:pper, assurer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dl(0,np,s_ppart),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(photographié, vpp-ver:pper, photographier, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vraies, adj-adj, vrai, [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(blessées, vpp-ver:pper, blesser, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(ensanglantées, vpp-ver:pper, ensanglanter, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(secourues, vpp-ver:pper, secourir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(médecins, nc-nom, médecin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(56, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(scène, nc-nom, scène, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(orchestrée, vpp-ver:pper, orchestrer, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si(jouait, v-ver:impf, jouer, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(comédie, nc-nom, comédie, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dl(0,np,s_ppres),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(maquillage, nc-nom, maquillage, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(blessés, nc-nom, blessé, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(57, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(relayées, vpp-ver:pper, relayer, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(accusent, v-ver:pres, accuser, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(mainstream, adj-adj, mainstream, [dl(0,n,n)-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(diffuser, vinf-ver:infi, diffuser, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mascarade, nc-nom, mascarade, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(58, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(perpétrés, vpp-ver:pper, perpétrer, [dr(0,dl(0,n,n),pp_par)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(visaient, v-ver:impf, viser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(particulièrement, adv-adv, particulièrement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(infrastructures, nc-nom, infrastructure, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accès, nc-nom, accès, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(ressources, nc-nom, ressource, [n-1]), si(énergétiques, adj-adj, énergétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(59, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défaites, nc-nom, défaite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(fronts, nc-nom, front, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(effet, nc-nom, effet, [n-1]), si(résolu, vpp-ver:pper, résoudre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(brutal, adj-adj, brutal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(stratégie, nc-nom, stratégie, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(inverser, vinf-ver:infi, inverser, [dr(0,dl(0,np,s_inf),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(spirale, nc-nom, spirale, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(frapper, vinf-ver:infi, frapper, [dr(0,dl(0,np,s_inf),np)-1]), si(massivement, adv-adv, massivement, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(centrales, nc-nom, centrale, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approche, nc-nom, approche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(60, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(seule, adj-adj, seul, [dr(0,n,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(récente, adj-adj, récent, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(lien, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(marche, nc-nom, marche, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réuni, vpp-ver:pper, réunir, [dr(0,dl(0,np,s_ppart),np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(200, adj-num, 200, [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(tenue, vpp-ver:pper, tenir, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Gênes', npp-nam, 'Gênes', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nord, nc-nom, nord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(61, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(manifestations, nc-nom, manifestation, [n-1]), si(populaires, adj-adj, populaire, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(capitales, nc-nom, capitale, [n-1]), si(européennes, adj-adj, européen, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sanctions, nc-nom, sanction, [n-1]), si(imposées, vpp-ver:pper, imposer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si('week-end', nc-nom, 'week-end', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(22, adj-num, 22, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(62, Result) :-
      prob_parse([ si('Paris', npp-nam, 'Paris', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(intention, nc-nom, intention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(renforcer, vinf-ver:infi, renforcer, [dr(0,dl(0,np,s_inf),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(flanc, nc-nom, flanc, [n-1]), si('Est', npp-nam, 'Est', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prochaines, adj-adj, prochain, [dr(0,n,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(supplémentaires, adj-adj, supplémentaire, [dl(0,n,n)-1]), si(équipées, vpp-ver:pper, équiper, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(chars, nc-nom, char, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(blindés, nc-nom, blindé, [n-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), si(connaît, v-ver:pres, connaître, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(escalade, nc-nom, escalade, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(63, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(regard, nc-nom, regard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(flanc, nc-nom, flanc, [n-1]), si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(regard, nc-nom, regard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(violence, nc-nom, violence, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(combats, nc-nom, combat, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(menée, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Fédération', nc-nam, 'Fédération', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(',', ponct-pun, ',', [let-1]), si('NDLR', adv-abr, 'NDLR', [dl(1,s,s)-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rehausser, vinf-ver:infi, rehausser, [dr(0,dl(0,np,s_inf),np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(posture, nc-nom, posture, [n-1]), si(défensive, adj-adj, défensif, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(valoir, vinf-ver:infi, valoir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Armées', nc-nam, 'Armées', [n-1]), si('Sébastien', npp-nam, 'Sébastien', [dl(0,n,n)-1]), si('Lecornu', npp-nam, 'Lecornu', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(64, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(annoncer, vinf-ver:infi, annoncer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(renforcement, nc-nom, renforcement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(flanc, nc-nom, flanc, [n-1]), si('Est', npp-nam, 'Est', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prochaines, adj-adj, prochain, [dr(0,n,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(65, Result) :-
      prob_parse([ si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dissuasion, nc-nom, dissuasion, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(indépendante, adj-adj, indépendant, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(abandonne, v-ver:pres, abandonner, [dr(0,dl(0,np,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(partenaires, nc-nom, partenaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(66, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('Abandonner', vinf-ver:infi, 'Abandonner', [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(67, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(nucléaires, adj-adj, nucléaire, [dl(0,n,n)-1]), si(stratégiques, adj-adj, stratégique, [dl(0,n,n)-1]), si(indépendantes, adj-adj, indépendant, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dissuasion, nc-nom, dissuasion, [n-1]), si(propre, adj-adj, propre, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(contribuent, v-ver:pres, contribuer, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(significative, adj-adj, significatif, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(globale, adj-adj, global, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alliance', npp-nam, 'Alliance', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(68, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(centres, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décision, nc-nom, décision, [n-1]), si(distincts, adj-adj, distinct, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si('Alliés', nc-nam, 'Alliés', [n-1]), si(contribuent, v-ver:pres, contribuer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dissuasion, nc-nom, dissuasion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(compliquant, vpr-ver:ppre, compliquer, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(calculs, nc-nom, calcul, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(adversaires, nc-nom, adversaire, [n-1]), si(potentiels, adj-adj, potentiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(69, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(doctrine, nc-nom, doctrine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dissuasion, nc-nom, dissuasion, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(confère, v-ver:pres, conférer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(certaine, adj-adj, certain, [dr(0,n,n)-1]), si(autonomie, nc-nom, autonomie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(considérée, vpp-ver:pper, considérer, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(atout, nc-nom, atout, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(70, Result) :-
      prob_parse([ si('Anne-Claire', npp-nam, 'Anne-Claire', [dr(0,np,np)-1]), si('Legendre', npp-nam, 'Legendre', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(dans, p-prp, dans, [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tweet, nc-nom, tweet, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ambassadeur, nc-nom, ambassadeur, [n-1]), si('Etienne', npp-nam, 'Etienne', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Poncins', npp-nam, 'Poncins', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(poste, nc-nom, poste, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(71, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déluge, nc-nom, déluge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(abattue, vpp-ver:pper, abattre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(la, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ambassadeur, nc-nom, ambassadeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déposé, vpp-ver:pper, déposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(démission, nc-nom, démission, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si(dit, v-ver:pres, dire, [dr(0,dl(1,s,s),np)-1]), si('-il', cls-pro:per, '-il', [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(sauver, vinf-ver:infi, sauver, [dr(0,dl(0,np,s_inf),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(72, Result) :-
      prob_parse([ si('RT', npp-abr, 'RT', [dr(0,np,np)-1]), si('France', npp-nam, 'France', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mail, nc-nom, mail, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si('Facebook', npp-abr, 'Facebook', [dl(0,n,n)-1]), si(nommée, vpp-ver:pper, nommer, [dr(0,dl(0,n,n),np)-1]), si('RT', npp-abr, 'RT', [dr(0,np,np)-1]), si('Afrique', npp-nam, 'Afrique', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(usurpé, vpp-ver:pper, usurper, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(identité, nc-nom, identité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(média, nc-nom, média, [n-1]), si('RT', npp-abr, 'RT', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(73, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(blog, nc-nom, blog, [n-1]), si(personnel, adj-adj, personnel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(74, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si('Facebook', npp-nam, 'Facebook', [dl(0,n,n)-1]), si('RT', npp-abr, 'RT', [dl(0,n,n)-1]), si('Afrique', npp-nam, 'Afrique', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(associée, vpp-ver:pper, associer, [dr(0,dl(0,np,s_pass),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(média, nc-nom, média, [n-1]), si('RT', npp-abr, 'RT', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(75, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(bloqué, vpp-ver:pper, bloquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(sites, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médias, nc-nom, média, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('BBC', npp-abr, 'BBC', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si('Die', npp-nam, 'Die', [dr(0,np,np)-1]), si('Welt', npp-nam, 'Welt', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('RFI', npp-abr, 'RFI', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Deutsche', npp-nam, 'Deutsche', [dr(0,np,np)-1]), si('Welle...', npp-nam, 'Welle...', [np-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [let-1]), si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(réseaux, nc-nom, réseau, [dr(0,dl(0,n,n),n)-1]), si(sociaux, adj-adj, social, [n-1]), si(comme, adv-adv, comme, [dl(0,n,n)-1]), si('Facebook', npp-nam, 'Facebook', [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [np-1]), si('Twitter', npp-nam, 'Twitter', [dr(0,dl(0,np,np),np)-1]), si(',', ponct-pun, ',', [np-1]), si(et, cc-kon, et, [let-1]), si('Instagram', npp-nam, 'Instagram', [dr(0,dl(0,np,np),np)-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(76, Result) :-
      prob_parse([ si('Moscou', npp-nam, 'Moscou', [np-1]), si(soutient, v-ver:pres, soutenir, [dr(0,dl(0,np,s),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(entrave, v-ver:pres, entrave, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(travail, nc-nom, travail, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médias, nc-nom, média, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(77, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(crash, nc-nom, crash, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jet, nc-nom, jet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rumeurs, nc-nom, rumeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(78, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si(',', ponct-pun, ',', [let-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(responsables, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), si('Stream', npp-nam, 'Stream', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(79, Result) :-
      prob_parse([ si('Raison', nc-nom, 'Raison', [n-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(',', ponct-pun, ',', [let-1]), si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(abattu, vpp-ver:pper, abattre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(80, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toutefois, adv-adv, toutefois, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(démenti, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_ppart),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), si('Stream', npp-nam, 'Stream', [np-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Griesemann', npp-nam, 'Griesemann', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(gazoducs, nc-nom, gazoduc, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), si('Stream', npp-nam, 'Stream', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parties, nc-nom, party, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(81, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(crash, nc-nom, crash, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jet, nc-nom, jet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rumeurs, nc-nom, rumeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(82, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si(',', ponct-pun, ',', [let-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(responsables, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), si('Stream', npp-nam, 'Stream', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(83, Result) :-
      prob_parse([ si('Raison', nc-nom, 'Raison', [n-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(',', ponct-pun, ',', [let-1]), si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(abattu, vpp-ver:pper, abattre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(84, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fabricant, nc-nom, fabricant, [n-1]), si('Siemens', npp-nam, 'Siemens', [dl(0,n,n)-1]), si('Energy', npp-nam, 'Energy', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(occupe, v-ver:pres, occuper, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(turbines, nc-nom, turbine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gazoduc, nc-nom, gazoduc, [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(85, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(crash, nc-nom, crash, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jet, nc-nom, jet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rumeurs, nc-nom, rumeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(86, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si(',', ponct-pun, ',', [let-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(responsables, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), si('Stream', npp-nam, 'Stream', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(87, Result) :-
      prob_parse([ si('Raison', nc-nom, 'Raison', [n-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(',', ponct-pun, ',', [let-1]), si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(abattu, vpp-ver:pper, abattre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(88, Result) :-
      prob_parse([ si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouvait, v-ver:impf, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(crash, nc-nom, crash, [n-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(89, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(aériennes, adj-adj, aérien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Suède', npp-nam, 'Suède', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Danemark', npp-nam, 'Danemark', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toutefois, adv-adv, toutefois, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(connaissance, nc-nom, connaissance, [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(abattu, vpp-ver:pper, abattre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(90, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(crash, nc-nom, crash, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jet, nc-nom, jet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rumeurs, nc-nom, rumeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(91, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si(',', ponct-pun, ',', [let-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(responsables, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), si('Stream', npp-nam, 'Stream', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(92, Result) :-
      prob_parse([ si('Raison', nc-nom, 'Raison', [n-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(',', ponct-pun, ',', [let-1]), si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(abattu, vpp-ver:pper, abattre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(93, Result) :-
      prob_parse([ si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouvait, v-ver:impf, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(crash, nc-nom, crash, [n-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(94, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(crash, nc-nom, crash, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jet, nc-nom, jet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(émerger, vinf-ver:infi, émerger, [dl(0,np,s_inf)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rumeurs, nc-nom, rumeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(95, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si(',', ponct-pun, ',', [let-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(responsables, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), si('Stream', npp-nam, 'Stream', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(96, Result) :-
      prob_parse([ si('Raison', nc-nom, 'Raison', [n-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(',', ponct-pun, ',', [let-1]), si('sous-entendent', v-ver:pres, 'sous-entendent', [dr(0,s,np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(abattu, vpp-ver:pper, abattre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(97, Result) :-
      prob_parse([ si('Griesemann', npp-nam, 'Griesemann', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(assure, v-ver:pres, assurer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(installations, nc-nom, installation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gazoduc, nc-nom, gazoduc, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(expertise, nc-nom, expertise, [n-1]), si(nécessaire, adj-adj, nécessaire, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(entretenir, vinf-ver:infi, entretenir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pipelines, nc-nom, pipeline, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(98, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), si('Griesemann', npp-nam, 'Griesemann', [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouvait, v-ver:impf, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(crash, nc-nom, crash, [n-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(99, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouvaient, v-ver:impf, trouver, [dr(0,dr(0,dl(0,cl_r,s),pp),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(famille, nc-nom, famille, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(personne, nc-nom, personne, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), si('-t-il', cls-pro:per, '-t-il', [np-1]), si(précisé, vpp-ver:pper, préciser, [dl(1,s,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(100, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médias, nc-nom, média, [n-1]), si(allemands, adj-adj, allemand, [dl(0,n,n)-1]), si(disponibles, adj-adj, disponible, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si('(', ponct-pun, '(', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si('Focus', npp-nam, 'Focus', [dr(0,np,np)-1]), si('Online', npp-nam, 'Online', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('Express', npp-nam, 'Express', [np-1]), si(')', ponct-pun, ')', [let-1]), si(identifient, v-ver:pres, identifier, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(quatre, adj-num, quatre, [dr(0,n,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(crash, nc-nom, crash, [n-1]), si(survenu, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,n,n),np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Griesemann', npp-nam, 'Griesemann', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(nom, nc-nom, nom, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(fille, nc-nom, fille, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(compagnon, nc-nom, compagnon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernière, nc-nom, dernier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(101, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(énormes, adj-adj, énorme, [dr(0,n,n)-1]), si(fuites, nc-nom, fuite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déclenchées, vpp-ver:pper, déclencher, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(détonations, nc-nom, détonation, [n-1]), si('sous-marines', adj-adj, 'sous-marines', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(produites, vpp-ver:pper, produire, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gazoducs, nc-nom, gazoduc, [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), si(1, adj-num, 1, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(2, adj-num, 2, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(102, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tronçon, nc-nom, tronçon, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gazoduc, nc-nom, gazoduc, [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), si(1, adj-num, 1, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(manquant, adj-adj, manquant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(sabotage, nc-nom, sabotage, [n-1]), si(présumé, vpp-ver:pper, présumer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(103, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(graves, adj-adj, grave, [dr(0,n,n)-1]), si(fuites, nc-nom, fuite, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gazoducs, nc-nom, gazoduc, [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(relient, v-ver:pres, relier, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(surement, adv-adv, surement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(résultat, nc-nom, résultat, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(acte, nc-nom, acte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sabotage, nc-nom, sabotage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(104, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(succès, nc-nom, succès, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(rendus, vpp-ver:pper, rendre, [dr(0,dr(0,dl(0,n,n),pp_par),dl(0,n,n))-1]), si(possibles, adj-adj, possible, [dl(0,n,n)-1]), si(notamment, adv-adv, notamment, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n)))-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appui, nc-nom, appui, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(partenaires, nc-nom, partenaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-abr, 'Otan', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(envoient, v-ver:pres, envoyer, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armement, nc-nom, armement, [n-1]), si(lourd, adj-adj, lourd, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(obusiers, nc-nom, obusier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Himars', npp-nam, 'Himars', [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('lance-roquettes', nc-nom, 'lance-roquettes', [n-1]), si(monté, vpp-ver:pper, monter, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(blindés, nc-nom, blindé, [n-1]), si(légers, adj-adj, léger, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(105, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(reprises, nc-nom, reprise, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(déploierait, v-ver:cond, déployer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(106, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(reprises, nc-nom, reprise, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(déploierait, v-ver:cond, déployer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(107, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(convoi, nc-nom, convoi, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conseillers, nc-nom, conseiller, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(détruit, vpp-ver:pper, détruire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si('RUSSE', npp-nam, 'RUSSE', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('UKRAINE', npp-abr, 'UKRAINE', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(108, Result) :-
      prob_parse([ si('ARMA', npp-abr, 'ARMA', [np-1]), si(3, adj-num, 3, [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(jeu, nc-nom, jeu, [n-1]), si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(thème, nc-nom, thème, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2013, pro-num, 2013, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développeur, nc-nom, développeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(jeux, nc-nom, jeu, [n-1]), si('Bohemia', npp-nam, 'Bohemia', [dl(0,n,n)-1]), si('Interactive', npp-nam, 'Interactive', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('République', npp-nam, 'République', [n-1]), si('Tchèque', adj-adj, 'Tchèque', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(109, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(extraits, nc-nom, extrait, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jeu, nc-nom, jeu, [n-1]), si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), si('Arma', npp-nam, 'Arma', [dl(0,n,n)-1]), si(3, adj-num, 3, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(présentées, vpp-ver:pper, présenter, [dl(0,np,s_pass)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(trompeuse, adj-adj, trompeur, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combats, nc-nom, combat, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(110, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(début, nc-nom, début, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(avancent, v-ver:pres, avancer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(certain, adj-adj, certain, [dr(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Erik', npp-nam, 'Erik', [dr(0,np,np)-1]), si('Olsen', npp-nam, 'Olsen', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Ollsen', npp-nam, 'Ollsen', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquêteur, nc-nom, enquêteur, [n-1]), si(principal, adj-adj, principal, [dl(0,n,n)-1]), si(chargé, vpp-ver:pper, charger, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sabotage, nc-nom, sabotage, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(gazoducs, nc-nom, gazoduc, [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), si(1, adj-num, 1, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(2, adj-num, 2, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(révéler, vinf-ver:infi, révéler, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(secrets, nc-nom, secret, [n-1]), si(sur, p-prp, sur, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(111, Result) :-
      prob_parse([ si('Ni', cc-kon, 'Ni', [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parquet, nc-nom, parquet, [n-1]), si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(charge, nc-nom, charge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fuites, nc-nom, fuite, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gazoducs, nc-nom, gazoduc, [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Stockholm', npp-nam, 'Stockholm', [np-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(connaissance, nc-nom, connaissance, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(enquêteur, nc-nom, enquêteur, [n-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si('Erik', npp-nam, 'Erik', [dl(0,n,n)-1]), si('Olsen', npp-nam, 'Olsen', [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(suspecte, adj-adj, suspect, [dl(0,n,n)-1]), si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(chargées, vpp-ver:pper, charger, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(investigations, nc-nom, investigation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(112, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(certain, adj-adj, certain, [dr(0,n,n)-1]), si('Remco', npp-nam, 'Remco', [n-1]), si('Van', npp-nam, 'Van', [dr(0,dl(0,n,n),np)-1]), si('Velzen', npp-nam, 'Velzen', [np-1]), si(annonce, v-ver:pres, annoncer, [dr(0,dl(0,np,s),np)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Twitter', npp-nam, 'Twitter', [np-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(chef, nc-nom, chef, [n-1]), si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bureau, nc-nom, bureau, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(procureur, nc-nom, procureur, [n-1]), si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Erik', npp-nam, 'Erik', [dr(0,np,np)-1]), si('Ollsen', npp-nam, 'Ollsen', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquêteur, nc-nom, enquêteur, [n-1]), si(principal, adj-adj, principal, [dl(0,n,n)-1]), si(chargé, vpp-ver:pper, charger, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sabotage, nc-nom, sabotage, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gazoducs, nc-nom, gazoduc, [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), si(1, adj-num, 1, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), si(2, adj-num, 2, [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(113, Result) :-
      prob_parse([ si('L\'internaute', npp-nam, 'L\'internaute', [dr(0,np,n)-1]), si('Remco', npp-nam, 'Remco', [n-1]), si('Van', npp-nam, 'Van', [dl(0,n,n)-1]), si('Velzen', npp-nam, 'Velzen', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dl(0,n,n)-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('Twitter', npp-nam, 'Twitter', [dr(0,dl(1,s,s),np)-1]), si(que, cs-kon, que, [np-1]), si(rien, pro-pro:ind, rien, [dr(0,s_q,s)-1]), si(ne, adv-adv, ne, [np-1]), si(prouvait, v-ver:impf, prouver, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s),s_q)-1]), si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), si('M.', nc-abr, 'M.', [let-1]), si('Ollson', npp-nam, 'Ollson', [dr(0,np,np)-1]), si('"', ponct-pun:cit, '"', [np-1]), si('[sic]', ponct-pun, '[sic]', [let-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,np),np)-1]), si(en, p-prp, en, [np-1]), si(charge, nc-nom, charge, [let-1]), si(de, p-prp, de, [dr(0,dl(0,np,s),pp)-1]), si('l\'', det-det:art, 'l\'', [dr(0,pp_de,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(incident, nc-nom, incident, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,n)-1]), si('Stream', npp-nam, 'Stream', [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si('.', ponct-pun, '.', [dr(0,np,np)-1])], Result).
sent(114, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Swedish', npp-nam, 'Swedish', [dr(0,n,n)-1]), si('Prosecution', npp-nam, 'Prosecution', [dr(0,n,n)-1]), si('Authority', npp-nam, 'Authority', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(souligné, vpp-ver:pper, souligner, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(investigation, nc-nom, investigation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Nord', npp-nam, 'Nord', [dr(0,np,np)-1]), si('Stream', npp-nam, 'Stream', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(menée, vpp-ver:pper, mener, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Mats', npp-nam, 'Mats', [dr(0,np,np)-1]), si('Ljungqvist', npp-nam, 'Ljungqvist', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(cité, vpp-ver:pper, citer, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(notamment, adv-adv, notamment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(communiqué, nc-nom, communiqué, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [dr(0,dl(0,n,n),n)-1]), si(du, p+d-prp:det, de, [n-1]), si(6, adj-num, 6, [dr(0,dl(0,n,n),n)-1]), si(octobre, nc-nom, octobre, [dr(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(115, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(procureur, nc-nom, procureur, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(charge, nc-nom, charge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si('Stream', npp-nam, 'Stream', [dl(0,n,n)-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si('Erik', npp-nam, 'Erik', [dr(0,np,np)-1]), si('Olsson', npp-nam, 'Olsson', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(piqûre, nc-nom, piqûre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(abeille, nc-nom, abeille, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(116, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(106, adj-num, 106, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(107, adj-num, 107, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(disposent, v-ver:pres, disposer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(successeur, nc-nom, successeur, [n-1]), si(légal, adj-adj, légal, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vainqueur, nc-nom, vainqueur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,n,n)),dl(0,n,n))-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Hongrie', npp-nam, 'Hongrie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Autriche', npp-nam, 'Autriche', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Finlande', npp-nam, 'Finlande', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Croatie', npp-nam, 'Croatie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Slovénie', npp-nam, 'Slovénie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Estonie', npp-nam, 'Estonie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tentatives, nc-nom, tentative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(renaissance, nc-nom, renaissance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nazisme, nc-nom, nazisme, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(117, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(conformement, adv-adv, conformement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envahi, vpp-ver:pper, envahir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(118, Result) :-
      prob_parse([ si('Dès', p-prp, 'Dès', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(jour, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Antonio', npp-nam, 'Antonio', [dr(0,np,np)-1]), si('Guterres', npp-nam, 'Guterres', [np-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dénoncée, vpp-ver:pper, dénoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(erreur, nc-nom, erreur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(119, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(106, adj-num, 106, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(107, adj-num, 107, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(disposent, v-ver:pres, disposer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(successeur, nc-nom, successeur, [n-1]), si(légal, adj-adj, légal, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vainqueur, nc-nom, vainqueur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,n,n)),dl(0,n,n))-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Hongrie', npp-nam, 'Hongrie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Autriche', npp-nam, 'Autriche', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Finlande', npp-nam, 'Finlande', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Croatie', npp-nam, 'Croatie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Slovénie', npp-nam, 'Slovénie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Estonie', npp-nam, 'Estonie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tentatives, nc-nom, tentative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(renaissance, nc-nom, renaissance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nazisme, nc-nom, nazisme, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(120, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(conformement, adv-adv, conformement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envahi, vpp-ver:pper, envahir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(121, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(membre, nc-nom, membre, [n-1]), si(permanent, adj-adj, permanent, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(rappelle, v-ver:pres, rappeler, [dr(0,dr(0,s,np),np)-1]), si('Catherine', npp-nam, 'Catherine', [dr(0,np,np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Bris', npp-nam, 'Bris', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('L\'intervention', nc-nom, 'L\'intervention', [dr(0,np,n)-1]), si(militaire, adj-adj, militaire, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), si(en, p-prp, en, [n-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,dl(0,n,n),n)-1]), si(viole, v-ver:pres, viole, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si('Charte', npp-nam, 'Charte', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('ONU', nc-abr, 'ONU', [dr(0,np,n)-1]), si(mais, cc-kon, mais, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,dr(0,s,s),s)-1]), si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), si(est, v-ver:pres, être, [n-1]), si(membre, nc-nom, membre, [dr(0,dl(0,np,s),np)-1]), si(permanent, adj-adj, permanent, [np-1]), si(du, p+d-prp:det, de, [dl(0,np,np)-1]), si('Conseil', npp-nam, 'Conseil', [dr(0,dl(0,np,np),n)-1]), si(de, p-prp, de, [n-1]), si(sécurité, nc-nom, sécurité, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si(elle, cls-pro:per, lui, [let-1]), si('l\'', clo-pro:per, 'l\'', [np-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(de, p-prp, de, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(fonctionner, vinf-ver:infi, fonctionner, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(grâce, nc-nom, grâce, [dl(0,np,s_inf)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),pp_a)-1]), si(son, det-det:pos, son, [dr(0,pp_a,np)-1]), si(droit, nc-nom, droit, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(veto, nc-nom, veto, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(122, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(106, adj-num, 106, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(107, adj-num, 107, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dispositions, nc-nom, disposition, [n-1]), si(transitoires, adj-adj, transitoire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(prises, vpp-ver:pper, prendre, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contexte, nc-nom, contexte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(invoquées, vpp-ver:pper, invoquer, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(conflits, nc-nom, conflit, [n-1]), si(actuels, adj-adj, actuel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(123, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(106, adj-num, 106, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(107, adj-num, 107, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(autorise, v-ver:pres, autoriser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(spéciale, adj-adj, spécial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(lancée, vpp-ver:pper, lancer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(124, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(rencontre, nc-nom, rencontre, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Antonio', npp-nam, 'Antonio', [dr(0,np,np)-1]), si('Guterres', npp-nam, 'Guterres', [np-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [let-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('lui-même', pro-pro:per, 'lui-même', [dl(1,s,s)-1]), si(défendu, vpp-ver:pper, défendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conformité, nc-nom, conformité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(citant, vpr-ver:ppre, citer, [dr(0,dl(0,np,s_ppres),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(51, adj-num, 51, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(relatif, adj-adj, relatif, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(légitime, adj-adj, légitime, [dr(0,n,n)-1]), si(défense, nc-nom, défense, [n-1]), si(',', ponct-pun, ',', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(abstiennent, v-ver:pres, abstenir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(relations, nc-nom, relation, [dl(0,n,n)-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),pp)-1]), si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,np,n)-1]), si(la, det-det:art, le, [n-1]), si(menace, nc-nom, menace, [dr(0,dl(0,pp,pp),pp)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(emploi, nc-nom, emploi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, être, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intégrité, nc-nom, intégrité, [n-1]), si(territoriale, adj-adj, territorial, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, être, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(manière, nc-nom, manière, [n-1]), si(incompatible, adj-adj, incompatible, [dr(0,dl(0,n,n),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(buts, nc-nom, but, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(125, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(affirmé, vpp-ver:pper, affirmer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [let-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(respecté, vpp-ver:pper, respecter, [dr(0,dl(0,np,s_ppart),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(disposition, nc-nom, disposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(répondant, vpr-ver:ppre, répondre, [dr(0,dl(0,np,s_ppres),pp_a)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appel, nc-nom, appel, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(formulé, vpp-ver:pper, formuler, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(agression, nc-nom, agression, [n-1]), si(armée, adj-adj, armé, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lougansk', npp-nam, 'Lougansk', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Donetsk', npp-nam, 'Donetsk', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(126, Result) :-
      prob_parse([ si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(expliquait, v-ver:impf, expliquer, [dr(0,dr(0,s,np),np)-1]), si('Guillaume', npp-nam, 'Guillaume', [dr(0,np,np)-1]), si('Devin', npp-nam, 'Devin', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(tribune, nc-nom, tribune, [n-1]), si(publiée, vpp-ver:pper, publier, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(journal, nc-nom, journal, [n-1]), si(belge, adj-adj, belge, [dl(0,n,n)-1]), si('Le', det-det:art, 'Le', [dr(0,dl(0,n,n),n)-1]), si('Soir', npp-nam, 'Soir', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(entités, nc-nom, entité, [n-1]), si(prétendument, adv-adv, prétendument, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(agressées, vpp-ver:pper, agresser, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si('\\', nc-sym, '\\', [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [let-1]), si('Républiques', nc-nom, 'Républiques', [dr(0,np,n)-1]), si(populaires, adj-adj, populaire, [n-1]), si(du, p+d-prp:det, de, [dl(0,n,n)-1]), si('Donbass', npp-nam, 'Donbass', [dr(0,dl(0,n,n),n)-1]), si('\\', et-adv, '\\', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si(ne, adv-adv, ne, [let-1]), si(sont, v-ver:pres, être, [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aucun, det-pro:ind, aucun, [dr(0,dl(0,np,s),np)-1]), si(cas, nc-nom, cas, [dr(0,np,n)-1]), si('\'', ponct-prp:det, '\'', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(des, p+d-prp:det, de, [n-1]), si('Nations', nc-nam, 'Nations', [dr(0,dl(0,n,n),n)-1]), si('unies\'.', pref-adv, 'unies\'.', [n-1]), si('En', p-prp, 'En', [dl(0,n,n)-1]), si(outre, adv-adv, outre, [let-1]), si(',', ponct-pun, ',', [dr(0,dr(0,s,s),n)-1]), si(les, det-det:art, le, [n-1]), si(mesures, nc-nom, mesure, [let-1]), si(prises, vpp-ver:pper, prendre, [dr(0,np,n)-1]), si(en, p-prp, en, [n-1]), si(application, nc-nom, application, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(légitime, adj-adj, légitime, [n-1]), si(défense, nc-nom, défense, [dr(0,dl(0,n,n),n)-1]), si(ne, adv-adv, ne, [dr(0,n,n)-1]), si(valent, v-ver:pres, valoir, [n-1]), si(que, adv-adv, que, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,np,s),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,np)-1]), si(à, p-prp, à, [dr(0,pp,pp)-1]), si(ce, pro-pro:dem, ce, [dr(0,pp,pp)-1]), si(que, cs-kon, que, [dr(0,pp_a,np)-1]), si(le, det-det:art, le, [np-1]), si('Conseil', npp-nam, 'Conseil', [dr(0,dl(0,np,np),s)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,n,n),n)-1]), si(pris, vpp-ver:pper, prendre, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mesures, nc-nom, mesure, [dr(0,dl(0,np,s_ppart),np)-1]), si(nécessaires, adj-adj, nécessaire, [dr(0,dl(0,np,s_ppart),np)-1]), si(pour, p-prp, pour, [dr(0,np,n)-1]), si(le, det-det:art, le, [n-1]), si(maintien, nc-nom, maintien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si(et, cc-kon, et, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sécurité, nc-nom, sécurité, [dr(0,dl(0,n,n),np)-1]), si('internationales\'', ponct-pro:rel, 'internationales\'', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(ce, pro-pro:dem, ce, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [let-1]), si(est, v-ver:pres, être, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(par, p-prp, par, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(hypothèse, nc-nom, hypothèse, [let-1]), si(',', ponct-pun, ',', [let-1]), si(impossible, adj-adj, impossible, [n-1]), si('puisqu\'avec', p-prp, 'puisqu\'avec', [dl(0,n,n)-1]), si(son, det-det:pos, son, [dl(0,n,n)-1]), si(droit, nc-nom, droit, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dr(0,s,s),np)-1]), si(veto, nc-nom, veto, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(bloque, v-ver:pres, bloquer, [let-1]), si(le, det-det:art, le, [let-1]), si(fonctionnement, nc-nom, fonctionnement, [n-1]), si(normal, adj-adj, normal, [dr(0,dl(0,np,s),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1])], Result).
sent(127, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(exercer, vinf-ver:infi, exercer, [dr(0,dl(0,np,s_inf),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(légitime, adj-adj, légitime, [dr(0,n,n)-1]), si(défense, nc-nom, défense, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(faut, v-ver:pres, falloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(abord, nc-nom, abord, [n-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attaqué, vpp-ver:pper, attaquer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(souligne, v-ver:pres, souligner, [dr(0,dl(1,s,s),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si('Alexandra', npp-nam, 'Alexandra', [dr(0,np,np)-1]), si('Novosseloff', npp-nam, 'Novosseloff', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(128, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mouvements, nc-nom, mouvement, [n-1]), si(ultra, adv-adv, ultra, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(nationalistes, adj-adj, nationaliste, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(même, adv-adv, même, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(nazistes, adj-adj, naziste, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(actifs, vpp-ver:pper, actif, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(restent, v-ver:pres, rester, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(minoritaires, adj-adj, minoritaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(marginalisés, vpp-ver:pper, marginaliser, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(129, Result) :-
      prob_parse([ si('L\'intervention', nc-nom, 'L\'intervention', [dr(0,np,n)-1]), si(militaire, adj-adj, militaire, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), si(vise, v-ver:pres, viser, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), si('"', ponct-pun:cit, '"', [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [let-1]), si(dénazification, nc-nom, dénazification, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(0,s,s),s)-1]), si(régime, nc-nom, régime, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,dl(0,n,n),np)-1]), si('Zelensky', npp-nam, 'Zelensky', [dr(0,np,np)-1]), si(étant, vpr-ver:ppre, être, [np-1]), si(affilié, vpp-ver:pper, affilier, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(nazisme, nc-nom, nazisme, [dr(0,pp_a,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(130, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(appel, nc-nom, appel, [np-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2022, pro-num, 2022, [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(107, adj-num, 107, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(actions, nc-nom, action, [n-1]), si(menées, vpp-ver:pper, mener, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(suite, nc-nom, suite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(131, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(agression, nc-nom, agression, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2022, pro-num, 2022, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(situe, v-ver:pres, situer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prolongement, nc-nom, prolongement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(132, Result) :-
      prob_parse([ si('Surnommée', vpp-ver:pper, 'Surnommée', [dr(0,dl(0,np,s_pass),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(grenier, nc-nom, grenier, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(blé, nc-nom, blé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(figure, v-ver:pres, figurer, [dr(0,dl(0,np,s),pp)-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(gros, adj-adj, gros, [dr(0,n,n)-1]), si(producteurs, nc-nom, producteur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(exportateurs, nc-nom, exportateur, [n-1]), si(mondiaux, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(cultures, nc-nom, culture, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), si(particulier, nc-nom, particulier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(céréales, nc-nom, céréale, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(oléagineux, nc-nom, oléagineux, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(133, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), si('5e', det-num, '5e', [dr(0,np,n)-1]), si(exportateur, nc-nom, exportateur, [n-1]), si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(blé, nc-nom, blé, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', npp-nam, 'Organisation', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Coopération', nc-nam, 'Coopération', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Développement', nc-nam, 'Développement', [n-1]), si('Economique', adj-adj, 'Economique', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('OCDE', npp-abr, 'OCDE', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(134, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(vertu, nc-nom, vertu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(foncier, adj-adj, foncier, [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(entrée, vpp-ver:pper, entrer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(vigueur, nc-nom, vigueur, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vente, nc-nom, vente, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(individus, nc-nom, individu, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(groupes, nc-nom, groupe, [n-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(actuellement, adv-adv, actuellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(interdite, vpp-ver:pper, interdire, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(135, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(40, det-num, 40, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(parmi, p-prp, parmi, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(fertiles, adj-adj, fertile, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [n-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Monsanto', npp-nam, 'Monsanto', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Cargill', npp-nam, 'Cargill', [np-1]), si(et, cc-kon, et, [np-1]), si('DuPont', npp-nam, 'DuPont', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(136, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(130, adj-num, 130, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(foncière, adj-adj, foncier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(seuls, adv-adv, seul, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('lui-même', pro-pro:per, 'lui-même', [dl(0,np,np)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(137, Result) :-
      prob_parse([ si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(multinationales, nc-nom, multinationale, [n-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_ppart),np)-1]), si(17, det-num, 17, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(hectares, nc-nom, hectare, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terres, nc-nom, terre, [n-1]), si(arables, adj-adj, arable, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(138, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effondrement, nc-nom, effondrement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1991, pro-num, 1991, [np-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouverture, nc-nom, ouverture, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(discussions, nc-nom, discussion, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(139, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vente, nc-nom, vente, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(parcelles, nc-nom, parcelle, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(acteurs, nc-nom, acteur, [n-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(légale, adj-adj, légal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(adoption, nc-nom, adoption, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(différents, adj-adj, différent, [dr(0,n,n)-1]), si(moratoires, nc-nom, moratoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(140, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(autorisées, vpp-ver:pper, autoriser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(parcelles, nc-nom, parcelle, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondées, vpp-ver:pper, fonder, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(appartenir, vinf-ver:infi, appartenir, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(141, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(actionnaires, nc-nom, actionnaire, [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(citoyens, nc-nom, citoyen, [np-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,np,np)-1]), si('-', ponct-pun, '-', [let-1]), si('-', ponct-pun, '-', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(institutions, nc-nom, institution, [n-1]), si(publiques, adj-adj, public, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si('-', ponct-pun, '-', [let-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(souhaitent, v-ver:pres, souhaiter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(142, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(individus, nc-nom, individu, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(143, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(autorisées, vpp-ver:pper, autoriser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(parcelles, nc-nom, parcelle, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondées, vpp-ver:pper, fonder, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(appartenir, vinf-ver:infi, appartenir, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(144, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(actionnaires, nc-nom, actionnaire, [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(citoyens, nc-nom, citoyen, [np-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,np,np)-1]), si('-', ponct-pun, '-', [let-1]), si('-', ponct-pun, '-', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(institutions, nc-nom, institution, [n-1]), si(publiques, adj-adj, public, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si('-', ponct-pun, '-', [let-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(souhaitent, v-ver:pres, souhaiter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(145, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2024, adj-num, 2024, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(particuliers, nc-nom, particulier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(pourront, v-ver:futu, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('10.000', det-num, '10.000', [dr(0,np,n)-1]), si(hectares, nc-nom, hectare, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(146, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(seules, adv-adv, seul, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(fondées, vpp-ver:pper, fonder, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(vertu, nc-nom, vertu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(détenues, vpp-ver:pper, détenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(éligibles, adj-adj, éligible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(147, Result) :-
      prob_parse([ si('Monsanto', npp-nam, 'Monsanto', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(filiale, nc-nom, filiale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si('Bayer', npp-nam, 'Bayer', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(148, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(individus, nc-nom, individu, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(agricoles, adj-adj, agricole, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(149, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tiers, nc-nom, tiers, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(arables, adj-adj, arable, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(géants, nc-nom, géant, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agroalimentaire, nc-nom, agroalimentaire, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chimie, nc-nom, chimie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),np)-1]), si('Monsanto', npp-nam, 'Monsanto', [dr(0,dl(0,np,np),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Cargill', npp-nam, 'Cargill', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('DuPont', npp-nam, 'DuPont', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(150, Result) :-
      prob_parse([ si('Sept', det-num, 'Sept', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(mois, nc-nom, mois, [n-1]), si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(espoir, nc-nom, espoir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(oppose, v-ver:pres, opposer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(fin, nc-nom, fin, [np-1]), si(prochainement, adv-adv, prochainement, [dl(1,s,s)-1]), si(semble, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(amenuiser, vinf-ver:infi, amenuiser, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(jour, nc-nom, jour, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(jour, nc-nom, jour, [n-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(annexion, nc-nom, annexion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(territoires, nc-nom, territoire, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(151, Result) :-
      prob_parse([ si('L\'annexion', nc-nom, 'L\'annexion', [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(régions, nc-nom, région, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si('Donetsk', npp-nam, 'Donetsk', [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [np-1]), si('Lougansk', npp-nam, 'Lougansk', [dr(0,dl(0,np,np),np)-1]), si(',', ponct-pun, ',', [np-1]), si('Zaporijjia', npp-nam, 'Zaporijjia', [dr(0,dl(0,np,np),np)-1]), si(et, cc-kon, et, [np-1]), si('Kherson', npp-nam, 'Kherson', [dr(0,dl(0,np,np),np)-1]), si(dans, p-prp, dans, [np-1]), si(le, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si(sud, nc-nom, sud, [dr(0,np,n)-1]), si(et, cc-kon, et, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),np)-1]), si(est, nc-nom, est, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), si(annoncée, vpp-ver:pper, annoncer, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), si('Poutine', npp-nam, 'Poutine', [dr(0,pp_par,np)-1]), si(vendredi, nc-nom, vendredi, [dr(0,pp_par,np)-1]), si(30, adj-num, 30, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(septembre, nc-nom, septembre, [dr(0,np,n)-1]), si(rend, v-ver:pres, rendre, [n-1]), si('"', ponct-pun:cit, '"', [n-1]), si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(difficile, adj-adj, difficile, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(presque, adv-adv, presque, [let-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [let-1]), si(fin, nc-nom, fin, [dr(0,np,n)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(la, det-det:art, le, [n-1]), si(guerre, nc-nom, guerre, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dl(1,s,dl(0,np,s_ppart))-1]), si(chef, nc-nom, chef, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(diplomatie, nc-nom, diplomatie, [dr(0,np,n)-1]), si(européenne, adj-adj, européen, [n-1]), si(',', ponct-pun, ',', [n-1]), si('Josep', npp-nam, 'Josep', [dr(0,np,np)-1]), si('Borrell', npp-nam, 'Borrell', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si(sur, p-prp, sur, [let-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si(chaîne, nc-nom, chaîne, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(télévision, nc-nom, télévision, [dr(0,dl(0,n,n),n)-1]), si(espagnole, adj-adj, espagnol, [n-1]), si('RTVE', npp-abr, 'RTVE', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(152, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(systèmes, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(antimissile, adj-adj, antimissile, [dl(0,n,n)-1]), si('Buk-M3', npp-nam, 'Buk-M3', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(livrés, vpp-ver:pper, livrer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2016, pro-num, 2016, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(destination, nc-nom, destination, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Altaï', npp-nam, 'Altaï', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(153, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2022, pro-num, 2022, [np-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(systèmes, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(antiaériens, adj-adj, antiaérien, [dl(0,n,n)-1]), si('Buk-M3', npp-nam, 'Buk-M3', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(154, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(acquisition, nc-nom, acquisition, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(155, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(visionnée, vpp-ver:pper, visionner, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('250.000', det-num, '250.000', [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('lieutenant-colonel', nc-nom, 'lieutenant-colonel', [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rend, v-ver:pres, rendre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(pourchassé, vpp-ver:pper, pourchasser, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(réelle, adj-adj, réel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(authentique, adj-adj, authentique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(156, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(visionnée, vpp-ver:pper, visionner, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('250.000', det-num, '250.000', [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('lieutenant-colonel', nc-nom, 'lieutenant-colonel', [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rend, v-ver:pres, rendre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(pourchassé, vpp-ver:pper, pourchasser, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(provient, v-ver:pres, provenir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('jeu-vidéo', nc-nom, 'jeu-vidéo', [n-1]), si('Arma', npp-nam, 'Arma', [dl(0,n,n)-1]), si(3, adj-num, 3, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(simulation, nc-nom, simulation, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(réalisées, vpp-ver:pper, réaliser, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Arma', npp-nam, 'Arma', [np-1]), si(3, adj-num, 3, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(157, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(moldaves, adj-adj, moldave, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(mobilisaient, v-ver:impf, mobiliser, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(exercice, nc-nom, exercice, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(conjoint, adj-adj, conjoint, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(armées, nc-nom, armée, [n-1]), si(moldave, adj-adj, moldave, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(158, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Moldavie', npp-nam, 'Moldavie', [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(convoi, nc-nom, convoi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(livraison, nc-nom, livraison, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(blindés, adj-adj, blinder, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(supervisé, vpp-ver:pper, superviser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Moldavie', npp-nam, 'Moldavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(159, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(moldaves, adj-adj, moldave, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(mobilisaient, v-ver:impf, mobiliser, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(exercice, nc-nom, exercice, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(conjoint, adj-adj, conjoint, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(armées, nc-nom, armée, [n-1]), si(moldave, adj-adj, moldave, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(160, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si('anti-OTAN', adj-adj, 'anti-OTAN', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Moldavie', npp-nam, 'Moldavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(161, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Moldavie', npp-nam, 'Moldavie', [n-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,np,s_ppres),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(majoritairement, adv-adv, majoritairement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(roumanophone, adj-adj, roumanophone, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(forte, adj-adj, fort, [dr(0,n,n)-1]), si(minorité, nc-nom, minorité, [n-1]), si(russophone, adj-adj, russophone, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pouvoir, nc-nom, pouvoir, [n-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,pp_de,n)-1]), si(prorusses, nc-nom, prorusse, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,pp_de,pp_a),n)-1]), si('pro-occidentaux', nc-nom, 'pro-occidentaux', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(nourrissant, vpr-ver:ppre, nourrir, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(crises, nc-nom, crise, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(répétition, nc-nom, répétition, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(162, Result) :-
      prob_parse([ si('Président', nc-nom, 'Président', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Moldavie', npp-nam, 'Moldavie', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2016, pro-num, 2016, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(2020, pro-num, 2020, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Igor', npp-nam, 'Igor', [dr(0,np,np)-1]), si('Dodon', npp-nam, 'Dodon', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ouvertement, adv-adv, ouvertement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(163, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2020, pro-num, 2020, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(2021, pro-num, 2021, [np-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('pro-européenne', nc-nom, 'pro-européenne', [dr(0,n,n)-1]), si('Maïa', npp-nam, 'Maïa', [dl(0,n,n)-1]), si('Sandu', npp-nam, 'Sandu', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(législatives, nc-nom, législative, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(164, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photographie, nc-nom, photographie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(dénudé, vpp-ver:pper, dénudé, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(cigarette, nc-nom, cigarette, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(main, nc-nom, main, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(truquée, vpp-ver:pper, truquer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(165, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(montage, nc-nom, montage, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si(rajouté, vpp-ver:pper, rajouter, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(réalisé, vpp-ver:pper, réaliser, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(photographie, nc-nom, photographie, [n-1]), si(prise, vpp-ver:pper, prendre, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2006, pro-num, 2006, [np-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Pride', npp-nam, 'Pride', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Marche', nc-nam, 'Marche', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fiertés, nc-nom, fierté, [n-1]), si(')', ponct-pun, ')', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(mise, nc-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(partage, nc-nom, partage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(photos, nc-nom, photo, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Flickr', npp-nam, 'Flickr', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(166, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dénudé, vpp-ver:pper, dénuder, [dl(0,n,n)-1]), si(prenant, vpr-ver:ppre, prendre, [dr(0,dl(0,n,n),pp_a)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pose, nc-nom, pose, [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Marche', nc-nam, 'Marche', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fiertés, nc-nom, fierté, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(1990, adj-num, 1990, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(167, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(',', ponct-pun, ',', [let-1]), si(malgré, p-prp, malgré, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(organe, nc-nom, organe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(confondu, vpp-ver:pper, confondre, [dr(0,dl(0,np,s_pass),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(168, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(169, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(jours, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(vastes, adj-adj, vaste, [dr(0,n,n)-1]), si(coupures, nc-nom, coupure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(pilonner, vinf-ver:infi, pilonner, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), si(travers, nc-nom, travers, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kharkiv', npp-nam, 'Kharkiv', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(170, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(massives, adj-adj, massif, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(menées, vpp-ver:pper, mener, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(localités, nc-nom, localité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Dvoritchna', npp-nam, 'Dvoritchna', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Balakliïa', npp-nam, 'Balakliïa', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Koupiansk', npp-nam, 'Koupiansk', [np-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(vives, adj-adj, vif, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(équipements, nc-nom, équipement, [n-1]), si(des, p+d-prp:det, de, [n-1]), si('14e', adj-num, '14e', [dr(0,dl(0,n,n),n)-1]), si(et, cc-kon, et, [dr(0,n,n)-1]), si('93e', adj-num, '93e', [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si(brigades, nc-nom, brigade, [n-1]), si(motorisées, vpp-ver:pper, motoriser, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1])], Result).
sent(171, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(envoi, nc-nom, envoi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(casques, nc-nom, casque, [n-1]), si(bleus, adj-adj, bleu, [dl(0,n,n)-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(aval, nc-nom, aval, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Onu', npp-nam, 'Onu', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),dl(0,np,s_ppres))-1]), si(passant, vpr-ver:ppre, passer, [dr(0,dl(0,np,s_ppres),pp)-1]), si(via, p-prp, via, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Onu', npp-nam, 'Onu', [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(172, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Ce', cls-pro:dem, 'Ce', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(faux, adj-adj, faux, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), si(outre, adv-adv, outre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Onu', npp-nam, 'Onu', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(casques, nc-nom, casque, [n-1]), si(bleus, adj-adj, bleu, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(173, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(accord, nc-nom, accord, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(déploiement, nc-nom, déploiement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintien, nc-nom, maintien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(situe, v-ver:pres, situer, [dr(0,dl(0,cl_r,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(central, nc-nom, central, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(174, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(considéreraient, v-ver:impf, considérer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(intervient, v-ver:pres, intervenir, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(armé, vpp-ver:pper, armé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(175, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(point, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vue, nc-nom, vue, [n-1]), si(symbolique, adj-adj, symbolique, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(aimerait, v-ver:pres, aimer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(casques, nc-nom, casque, [n-1]), si(bleus, adj-adj, bleu, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Zaporijjia', npp-nam, 'Zaporijjia', [np-1]), si(',', ponct-pun, ',', [let-1]), si(cela, pro-pro:dem, celer, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(donnerait, v-ver:cond, donner, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impression, nc-nom, impression, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(communauté, nc-nom, communauté, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(envoie, v-ver:pres, envoyer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(interposition, nc-nom, interposition, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(176, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(création, nc-nom, création, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(opération, nc-nom, opération, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintien, nc-nom, maintien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AGNU', npp-abr, 'AGNU', [n-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(consultation, nc-nom, consultation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(177, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(force, nc-nom, force, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(interposition, nc-nom, interposition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créée, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(terme, nc-nom, terme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(1956, adj-num, 1956, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(occasion, nc-nom, occasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Egypte', npp-nam, 'Egypte', [np-1]), si(',', ponct-pun, ',', [let-1]), si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(annonce, nc-nom, annonce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nationalisation, nc-nom, nationalisation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canal', npp-nam, 'Canal', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Suez', npp-nam, 'Suez', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(178, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(arrivé, vpp-ver:pper, arriver, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(casques, nc-nom, casque, [n-1]), si(bleus, adj-adj, bleu, [dl(0,n,n)-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(envoyés, vpp-ver:pper, envoyer, [dr(0,dl(0,np,s_pass),pp)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(feu, nc-nom, feu, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Onu', npp-nam, 'Onu', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(arrivé, vpp-ver:pper, arriver, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Histoire', nc-nam, 'Histoire', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(179, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mariage, nc-nom, mariage, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mariés, nc-nom, marié, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(invités, nc-nom, invité, [n-1]), si(posent, v-ver:pres, poser, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(faisant, vpr-ver:ppre, faire, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(saluts, nc-nom, salut, [n-1]), si(nazis, adj-adj, nazi, [dl(0,n,n)-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(tsariste, adj-adj, tsariste, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prise, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Novokuznetsk', npp-nam, 'Novokuznetsk', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2017, pro-num, 2017, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(180, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(référence, nc-nom, référence, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mariage, nc-nom, mariage, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(néonazies, nc-nom, néonazie, [n-1]), si(tenant, vpr-ver:ppre, tenir, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(181, Result) :-
      prob_parse([ si(40, det-num, 40, [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(couvrir, vinf-ver:infi, couvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(raisonnablement, adv-adv, raisonnablement, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(diversité, nc-nom, diversité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comportements, nc-nom, comportement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(toute, adv-adv, tout, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dépense, nc-nom, dépense, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ménage, nc-nom, ménage, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alimentation, nc-nom, alimentation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(182, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(me, clo-pro:per, me, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(paraît, v-ver:pres, paraître, [dr(0,dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a),dl(0,n,n))-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(40, det-num, 40, [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(183, Result) :-
      prob_parse([ si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(quotidien, nc-nom, quotidien, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si('Echos', nc-nam, 'Echos', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Economie', nc-nam, 'Economie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Finances', nc-nom, 'Finances', [n-1]), si('Bruno', npp-nam, 'Bruno', [dl(0,n,n)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Maire', npp-nam, 'Maire', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pouvait, v-ver:impf, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(affirmer, vinf-ver:infi, affirmer, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pic, nc-nom, pic, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(anticipait, v-ver:impf, anticiper, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(recul, nc-nom, recul, [n-1]), si(structurel, adj-adj, structurel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,n,n),np)-1]), si(2023, pro-num, 2023, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(184, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),np)-1]), si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bonne, adj-adj, bon, [dr(0,n,n)-1]), si(nouvelle, nc-nom, nouvelle, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(faible, adj-adj, faible, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(mois, nc-nom, mois, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(considère, v-ver:pres, considérer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pic, nc-nom, pic, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(2023, adj-num, 2023, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(185, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(août, nc-nom, août, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('5,8', det-num, '5,8', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(août, nc-nom, août, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chiffres, nc-nom, chiffre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Insee', npp-abr, 'Insee', [n-1]), si(publiés, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(186, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(officiellement, adv-adv, officiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(calculée, vpp-ver:pper, calculer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(mesurant, vpr-ver:ppre, mesurer, [dr(0,dl(0,np,s_ppres),np)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(évolution, nc-nom, évolution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('100.000', det-num, '100.000', [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(187, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), si(calcul, nc-nom, calcul, [n-1]), si(vise, v-ver:pres, viser, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(représentativité, nc-nom, représentativité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(40, det-num, 40, [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(couvrir, vinf-ver:infi, couvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(raisonnablement, adv-adv, raisonnablement, [dl(1,s,s)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(188, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chiffre, nc-nom, chiffre, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(bien, adv-adv, bien, [dr(0,np,np)-1]), si(deux, pro-num, deux, [dr(0,np,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(189, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mois, nc-nom, mois, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(août, nc-nom, août, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(calculée, vpp-ver:pper, calculer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(quarantaine, nc-num, quarantaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(suffisant, adj-adj, suffisant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(190, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(août, nc-nom, août, [n-1]), si(continue, v-ver:pres, continuer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(souffrir, vinf-ver:infi, souffrir, [dl(0,np,s_inf)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ménages, nc-nom, ménage, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(marque, v-ver:pres, marque, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(léger, adj-adj, léger, [dr(0,n,n)-1]), si(ralentissement, nc-nom, ralentissement, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('+6,1', det-num, '+6,1', [dr(0,np,np)-1]), si('%', nc-sym, '%', [dr(0,np,n)-1]), si(en, p-prp, en, [n-1]), si(juillet, nc-nom, juillet, [dr(0,dl(0,n,n),n)-1]), si(par, p-prp, par, [n-1]), si(rapport, nc-nom, rapport, [dr(0,dl(0,n,n),n)-1]), si(à, p-prp, à, [dr(0,n,pp_a)-1]), si(juillet, nc-nom, juillet, [dr(0,pp_a,n)-1]), si(2021, adj-num, 2021, [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(191, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(ralentie, vpp-ver:pper, ralentir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(mois, nc-nom, mois, [n-1]), si(annoncé, vpp-ver:pper, annoncer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(192, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(calculer, vinf-ver:infi, calculer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(appelée, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si('Indice', nc-nam, 'Indice', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(prix, nc-nom, prix, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('IPC', npp-abr, 'IPC', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Insee', npp-abr, 'Insee', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appuie, v-ver:pres, appuyer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(évaluation, nc-nom, évaluation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(liste, nc-nom, liste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(services, nc-nom, service, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(limite, v-ver:pres, limite, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alimentation, nc-nom, alimentation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(193, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mesure, v-ver:pres, mesure, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alimentation, nc-nom, alimentation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(calcul, nc-nom, calcul, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(194, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(2, adj-num, 2, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si(massivement, adv-adv, massivement, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(condamnant, vpr-ver:ppre, condamner, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(record, nc-nom, record, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(141, det-num, 141, [dr(0,np,n)-1]), si(voix, nc-nom, voix, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(texte, nc-nom, texte, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(195, Result) :-
      prob_parse([ si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(résolutions, nc-nom, résolution, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptées, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(196, Result) :-
      prob_parse([ si('Jusqu\'', p-prp, 'Jusqu\'', [dr(0,dr(0,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résolutions, nc-nom, résolution, [n-1]), si(adoptées, vpp-ver:pper, adopter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Onu', npp-nam, 'Onu', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(197, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(affirmé, vpp-ver:pper, affirmer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(29, adj-num, 29, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(repoussé, vpp-ver:pper, repousser, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(tentatives, nc-nom, tentative, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(offensive, nc-nom, offensive, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kherson', npp-nam, 'Kherson', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mykolaïv', npp-nam, 'Mykolaïv', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si('Ukraine', npp-nam, 'Ukraine', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(198, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(pleine, adj-adj, plein, [dr(0,n,n)-1]), si('contre-offensive', nc-nom, 'contre-offensive', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(espoir, nc-nom, espoir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(reprendre, vinf-ver:infi, reprendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kherson', npp-nam, 'Kherson', [np-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(mains, nc-nom, main, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(199, Result) :-
      prob_parse([ si('Cent-trente', det-num, 'Cent-trente', [dr(0,np,np)-1]), si(neuf, adj-num, neuf, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(193, adj-num, 193, [dr(0,n,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(demandant, vpr-ver:ppre, demander, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si('[d\'invasion', ponct-pun, '[d\'invasion', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si('Ukraine]', npp-nam, 'Ukraine]', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(retirer, vinf-ver:infi, retirer, [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(armée, nc-nom, armée, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,s_inf),np)-1]), si(territoire, nc-nom, territoire, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1])], Result).
sent(200, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(demandant, vpr-ver:ppre, demander, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(retirer, vinf-ver:infi, retirer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(54, det-num, 54, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(139, pro-num, 139, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(y, clo-pro:per, y, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(opposés, vpp-ver:pper, opposer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si('.', ponct-pun, '.', [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1])], Result).
sent(201, Result) :-
      prob_parse([ si('Cent-trente', det-num, 'Cent-trente', [dr(0,np,np)-1]), si(neuf, adj-num, neuf, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(193, adj-num, 193, [dr(0,n,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(demandant, vpr-ver:ppre, demander, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si('[d\'invasion', ponct-pun, '[d\'invasion', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si('Ukraine]', npp-nam, 'Ukraine]', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(retirer, vinf-ver:infi, retirer, [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(armée, nc-nom, armée, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,s_inf),np)-1]), si(territoire, nc-nom, territoire, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1])], Result).
sent(202, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(désavouée, vpp-ver:pper, désavouer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(139, det-num, 139, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(29, adj-num, 29, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Paulina', npp-nam, 'Paulina', [dr(0,np,np)-1]), si('Kubiak', npp-nam, 'Kubiak', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(203, Result) :-
      prob_parse([ si('Cent-trente', det-num, 'Cent-trente', [dr(0,np,n)-1]), si(neuf, adj-num, neuf, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(193, adj-num, 193, [dr(0,n,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(demandant, vpr-ver:ppre, demander, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si('[d\'invasion', ponct-pun, '[d\'invasion', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si('Ukraine]', npp-nam, 'Ukraine]', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(retirer, vinf-ver:infi, retirer, [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(armée, nc-nom, armée, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,s_inf),np)-1]), si(territoire, nc-nom, territoire, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [dr(0,dl(0,n,n),n)-1])], Result).
sent(204, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résolutions, nc-nom, résolution, [n-1]), si(présentées, vpp-ver:pper, présenter, [dl(0,n,n)-1]), si(devant, p-prp, devant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(approuvées, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(tiers, nc-nom, tiers, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(membres, nc-nom, membre, [n-1]), si(présents, adj-adj, présent, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(votants, nc-nom, votant, [dl(0,n,n)-1]), si(conformément, adv-adv, conformément, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptées, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(205, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(cliché, nc-nom, cliché, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(couple, nc-nom, couple, [n-1]), si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('Vogue', npp-nam, 'Vogue', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photographe, nc-nom, photographe, [n-1]), si('Annie', npp-nam, 'Annie', [dl(0,n,n)-1]), si('Leibovitz', npp-nam, 'Leibovitz', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(photos, nc-nom, photo, [n-1]), si(illustrant, vpr-ver:ppre, illustrer, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(portrait, nc-nom, portrait, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), si('Zelenska', npp-nam, 'Zelenska', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(206, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mode, nc-nom, mode, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(revanche, nc-nom, revanche, [n-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), si('Braun', npp-nam, 'Braun', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1939, pro-num, 1939, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(207, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(compagne, nc-nom, compagne, [n-1]), si('Eva', npp-nam, 'Eva', [dl(0,n,n)-1]), si('Braun', npp-nam, 'Braun', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(publiée, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Vogue', npp-nam, 'Vogue', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1939, pro-num, 1939, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(celle, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('Vogue', npp-nam, 'Vogue', [np-1]), si(en, p-prp, en, [np-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(208, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(compagne, nc-nom, compagne, [n-1]), si('Eva', npp-nam, 'Eva', [dl(0,n,n)-1]), si('Braun', npp-nam, 'Braun', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(publiée, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Vogue', npp-nam, 'Vogue', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1939, pro-num, 1939, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(celle, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('Vogue', npp-nam, 'Vogue', [np-1]), si(en, p-prp, en, [np-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(209, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Nous', cls-pro:per, 'Nous', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(séance, nc-nom, séance, [n-1]), si(photo, nc-nom, photo, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), si('Braun', npp-nam, 'Braun', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(nous, cls-pro:per, nous, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(eux, pro-pro:per, lui, [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(archives, nc-nom, archive, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(indique, v-ver:pres, indique, [dr(0,dl(1,s,s),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si('Vogue', npp-nam, 'Vogue', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(210, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(compagne, nc-nom, compagne, [n-1]), si('Eva', npp-nam, 'Eva', [dl(0,n,n)-1]), si('Braun', npp-nam, 'Braun', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(publiée, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Vogue', npp-nam, 'Vogue', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1939, pro-num, 1939, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(celle, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('Vogue', npp-nam, 'Vogue', [np-1]), si(en, p-prp, en, [np-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(211, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(couple, nc-nom, couple, [n-1]), si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(photographié, vpp-ver:pper, photographier, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Vogue', npp-nam, 'Vogue', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(212, Result) :-
      prob_parse([ si('Hitler', npp-nam, 'Hitler', [np-1]), si(entretenait, v-ver:impf, entretenir, [dr(0,dl(0,np,s),np)-1]), si(soigneusement, adv-adv, soigneusement, [dl(1,s,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(mythe, nc-nom, mythe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Fürher', npp-nam, 'Fürher', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(solitaire, adj-adj, solitaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sacrifie, v-ver:pres, sacrifier, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si(personnelle, adj-adj, personnel, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cause, nc-nom, cause, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(peuple, nc-nom, peuple, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(213, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(axes, nc-nom, axe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(présentation, nc-nom, présentation, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(personnalité, nc-nom, personnalité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(marié, vpp-ver:pper, marier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(donc, adv-adv, donc, [dr(0,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(genre, nc-nom, genre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(frivolités, nc-nom, frivolité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(214, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(public, nc-nom, public, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(existence, nc-nom, existence, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), si('Braun', npp-nam, 'Braun', [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(1945, pro-num, 1945, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dictateur, nc-nom, dictateur, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(montré, vpp-ver:pper, montrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), si('Braun', npp-nam, 'Braun', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(215, Result) :-
      prob_parse([ si('Sous', p-prp, 'Sous', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(régime, nc-nom, régime, [n-1]), si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(personne, pro-pro:ind, personne, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(connaissait, v-ver:impf, connaître, [dr(0,dl(0,np,s),np)-1]), si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), si('Braun', npp-nam, 'Braun', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cercle, nc-nom, cercle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(proches, nc-nom, proche, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(216, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(relation, nc-nom, relation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Eva', npp-nam, 'Eva', [dr(0,np,np)-1]), si('Braun', npp-nam, 'Braun', [np-1]), si(restait, v-ver:impf, rester, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(secrète, adj-adj, secret, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(217, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(fournisseur, nc-nom, fournisseur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(arme, nc-nom, arme, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(direction, nc-nom, direction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(218, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accords, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suivi, vpp-ver:pper, suivre, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [let-1]), si(rien, pro-pro:ind, rien, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(interdit, v-ver:pres, interdire, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(explicitement, adv-adv, explicitement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),dia(0,box(0,np))),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),dia(0,box(0,np))))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(219, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(viole, v-ver:pres, viole, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si(',', ponct-pun, ',', [let-1]), si(conclu, vpp-ver:pper, conclure, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2014, pro-num, 2014, [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(terme, nc-nom, terme, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(combats, nc-nom, combat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Donbass', npp-nam, 'Donbass', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(220, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accords, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suivi, vpp-ver:pper, suivre, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mentionnent, v-ver:pres, mentionner, [dr(0,dl(0,np,s),np)-1]), si(pourtant, adv-adv, pourtant, [dl(1,s,s)-1]), si(explicitement, adv-adv, explicitement, [dl(1,s,s)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(interdiction, nc-nom, interdiction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vente, nc-nom, vente, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(livraison, nc-nom, livraison, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(221, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(disposition, nc-nom, disposition, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accords, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si('I', adj-num, 'I', [dl(0,np,np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(limitation, nc-nom, limitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vente, nc-nom, vente, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(222, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(comporte, v-ver:pres, comporte, [dr(0,dl(0,np,s),np)-1]), si(douze, det-num, douze, [dr(0,np,n)-1]), si(points, nc-nom, point, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cessation, nc-nom, cessation, [n-1]), si(immédiate, adj-adj, immédiat, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(bilatérale, adj-adj, bilatéral, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(recours, nc-nom, recours, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(libération, nc-nom, libération, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(otages, nc-nom, otage, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(encore, adv-adv, encore, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(amélioration, nc-nom, amélioration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(humanitaire, adj-adj, humanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(223, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(seule, adj-adj, seul, [dr(0,n,n)-1]), si(disposition, nc-nom, disposition, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(formations, nc-nom, formation, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(lourdes, adj-adj, lourd, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(illicites, adj-adj, illicite, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(combattants, nc-nom, combattant, [n-1]), si(irréguliers, adj-adj, irrégulier, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(mercenaires, nc-nom, mercenaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(224, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(proprement, adv-adv, proprement, [dl(1,s,s)-1]), si(parler, vinf-ver:infi, parler, [dl(0,np,s_inf)-1]), si(signataire, nc-nom, signataire, [np-1]), si(direct, adj-adj, direct, [dl(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(livrer, vinf-ver:infi, livrer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(225, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(couverts, vpp-ver:pper, couvrir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(tatouages, nc-nom, tatouage, [n-1]), si(nazis, adj-adj, nazi, [dl(0,n,n)-1]), si(photographiés, vpp-ver:pper, photographier, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(plage, nc-nom, plage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Rijeka', npp-nam, 'Rijeka', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Croatie', npp-nam, 'Croatie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(signalés, vpp-ver:pper, signaler, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(musiciens, nc-nom, musicien, [n-1]), si(hongrois, adj-adj, hongrois, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(226, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(couverts, vpp-ver:pper, couvrir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(tatouages, nc-nom, tatouage, [n-1]), si(nazis, adj-adj, nazi, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(gammées, adj-adj, gammer, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(portrait, nc-nom, portrait, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(posent, v-ver:pres, poser, [dl(0,np,s)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(face, nc-nom, face, [n-1]), si(puis, cc-kon, pouvoir, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(dos, nc-nom, dos, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(227, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(réfugiés, nc-nom, réfugié, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Croatie', npp-nam, 'Croatie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(228, Result) :-
      prob_parse([ si('Blood', npp-nam, 'Blood', [np-1]), si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), si('Honour', npp-nam, 'Honour', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(néonazi, adj-adj, néonazi, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(extrême, adj-adj, extrême, [dr(0,n,n)-1]), si(droite, nc-nom, droite, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1987, pro-num, 1987, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(229, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Counter', npp-nam, 'Counter', [dr(0,n,n)-1]), si('Extremism', npp-nam, 'Extremism', [dr(0,n,n)-1]), si('Project', npp-nam, 'Project', [n-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('Blood', npp-nam, 'Blood', [dl(0,n,n)-1]), si(and, et-kon, and, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('Honour', npp-nam, 'Honour', [dl(0,n,n)-1]), si(promeut, v-ver:pres, promouvoir, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(idéologie, nc-nom, idéologie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pouvoir, nc-nom, pouvoir, [n-1]), si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prolifération, nc-nom, prolifération, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(festivals, nc-nom, festival, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(musique, nc-nom, musique, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enregistrements, nc-nom, enregistrement, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(230, Result) :-
      prob_parse([ si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(couverts, vpp-ver:pper, couvrir, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(tatouages, nc-nom, tatouage, [n-1]), si(nazis, adj-adj, nazi, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(gammées, vpp-ver:pper, gammer, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(portrait, nc-nom, portrait, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(portent, v-ver:pres, porter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chemise, nc-nom, chemise, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(slogan, nc-nom, slogan, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si('Blood', et-nam, 'Blood', [np-1]), si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), si('Honour', npp-nam, 'Honour', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(référence, nc-nom, référence, [np-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(néonazi, adj-adj, néonazi, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(extrême, adj-adj, extrême, [dr(0,n,n)-1]), si(droite, nc-nom, droite, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(nom, nc-nom, nom, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(jouent, v-ver:pres, jouer, [dl(0,np,s)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(extrême, adj-adj, extrême, [dr(0,n,n)-1]), si(droite, nc-nom, droite, [n-1]), si('Fehér', npp-nam, 'Fehér', [dl(0,n,n)-1]), si('Törvény', npp-nam, 'Törvény', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(231, Result) :-
      prob_parse([ si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(idéologie, nc-nom, idéologie, [n-1]), si(néonazie, adj-adj, néonazi, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(232, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Krementchouk', npp-nam, 'Krementchouk', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(frappée, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(233, Result) :-
      prob_parse([ si('Suite', nc-nom, 'Suite', [dr(0,dr(0,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(détruit, vpp-ver:pper, détruire, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(21, det-num, 21, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(234, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(côté, nc-nom, côté, [n-1]), si(',', ponct-pun, ',', [let-1]), si(nié, vpp-ver:pper, nier, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(attaqué, vpp-ver:pper, attaquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Krementchouk', npp-nam, 'Krementchouk', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(235, Result) :-
      prob_parse([ si(58, det-num, 58, [dr(0,np,n)-1]), si(caisses, nc-nom, caisse, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(service, nc-nom, service, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(jour, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(enregistrant, vpr-ver:ppre, enregistrer, [dr(0,dl(0,np,s_ppres),np)-1]), si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(jour, nc-nom, jour, [n-1]), si('-là', adv-adv, '-là', [dl(0,n,n)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chiffre, nc-nom, chiffre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('2,9', det-num, '2,9', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(hryvnia, nc-nom, hryvnia, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si('97.000', det-num, '97.000', [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(236, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(blessés, vpp-ver:pper, blesser, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(témoigné, vpp-ver:pper, témoigner, [dl(0,np,s_ppart)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(237, Result) :-
      prob_parse([ si('Amstor', npp-nam, 'Amstor', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fermé, vpp-ver:pper, fermer, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(238, Result) :-
      prob_parse([ si('Aleksandra', npp-nam, 'Aleksandra', [dr(0,np,np)-1]), si('Lukina', npp-nam, 'Lukina', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(employée, nc-nom, employé, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(café, nc-nom, café, [n-1]), si(sis, vpp-ver:pper, sis, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(travaillait, v-ver:impf, travailler, [dl(0,np,s)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(jour, nc-nom, jour, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ouverte, vpp-ver:pper, ouvrir, [dl(0,np,s_pass)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(mois, nc-nom, mois, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(239, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(fermé, vpp-ver:pper, fermer, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(longtemps, adv-adv, longtemps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(240, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(particuliers, nc-nom, particulier, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partagé, vpp-ver:pper, partager, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(reçus, nc-nom, reçu, [n-1]), si(récents, adj-adj, récent, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Telegram', npp-nam, 'Telegram', [np-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(achats, nc-nom, achat, [n-1]), si(effectués, vpp-ver:pper, effectuer, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(jour, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(',', ponct-pun, ',', [let-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si('10h09', npp-nam, '10h09', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('15h44', npp-nam, '15h44', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(241, Result) :-
      prob_parse([ si('Amstor', npp-nam, 'Amstor', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fermé, vpp-ver:pper, fermer, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(242, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('NDLR', adv-abr, 'NDLR', [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Krementchouk', npp-nam, 'Krementchouk', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fermé, vpp-ver:pper, fermer, [dl(0,np,s_pass)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(dès, p-prp, dès, [dr(0,s_q,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(nous, cls-pro:per, nous, [np-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(estimé, vpp-ver:pper, estimer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(sûre, adj-adj, sûr, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rouvert, vpp-ver:pper, rouvrir, [dl(0,np,s_ppart)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(refermé, vpp-ver:pper, refermer, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(243, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si('Amstor', npp-nam, 'Amstor', [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(fermé, vpp-ver:pper, fermer, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(longtemps, adv-adv, longtemps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(244, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(détruit, vpp-ver:pper, détruire, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(nord, nc-nom, nord, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(245, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ambassade, nc-nom, ambassade, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tweet, nc-nom, tweet, [n-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voie, nc-nom, voie, [n-1]), si(ferrée, adj-adj, ferré, [dl(0,n,n)-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(246, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ambassade, nc-nom, ambassade, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tweet, nc-nom, tweet, [n-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voie, nc-nom, voie, [n-1]), si(ferrée, adj-adj, ferré, [dl(0,n,n)-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(247, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(direction, nc-nom, direction, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(missile, nc-nom, missile, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(caméra, nc-nom, caméra, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(semble, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(diriger, vinf-ver:infi, diriger, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(248, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(environs, nc-nom, environ, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(semblent, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(dommages, nc-nom, dommage, [n-1]), si(visibles, adj-adj, visible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(249, Result) :-
      prob_parse([ si('Money', npp-nam, 'Money', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1972, pro-num, 1972, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(250, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(imprimé, vpp-ver:pper, imprimer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(251, Result) :-
      prob_parse([ si('Money', npp-nam, 'Money', [np-1]), si(publie, v-ver:pres, publier, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(couvrent, v-ver:pres, couvrir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(domaines, nc-nom, domaine, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(finance, nc-nom, finance, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crédits, nc-nom, crédit, [n-1]), si(immobiliers, adj-adj, immobilier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(assurances, nc-nom, assurance, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(252, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vaste, adj-adj, vaste, [dr(0,n,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Consortium', npp-nam, 'Consortium', [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(journalistes, nc-nom, journaliste, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(investigation, nc-nom, investigation, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2021, pro-num, 2021, [np-1]), si(',', ponct-pun, ',', [let-1]), si(accusait, v-ver:impf, accuser, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2012, pro-num, 2012, [np-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(réseau, nc-nom, réseau, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(offshore, adj-adj, offshore, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(propriétés, nc-nom, propriété, [n-1]), si(cossues, adj-adj, cossu, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(253, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(corruption, nc-nom, corruption, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cause, nc-nom, cause, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(révélations, nc-nom, révélation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Pandora', npp-nam, 'Pandora', [dr(0,n,n)-1]), si('Papers', npp-nam, 'Papers', [n-1]), si(',', ponct-pun, ',', [let-1]), si(publiés, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(254, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Money', npp-nam, 'Money', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(couverture, nc-nom, couverture, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(mettait, v-ver:impf, mettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(scène, nc-nom, scène, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humoriste, nc-nom, humoriste, [n-1]), si('John', npp-nam, 'John', [dl(0,n,n)-1]), si('Oliver', npp-nam, 'Oliver', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(représenté, vpp-ver:pper, représenter, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(chevaucher, vinf-ver:infi, chevaucher, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(liasse, nc-nom, liasse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(billets, nc-nom, billet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(assis, vpp-ver:pper, asseoir, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(selle, nc-nom, selle, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(motif, nc-nom, motif, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(255, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Money', npp-nam, 'Money', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(fois, nc-nom, fois, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(couverture, nc-nom, couverture, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(chevaucher, vinf-ver:infi, chevaucher, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(liasses, nc-nom, liasse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(billets, nc-nom, billet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('c\'', cls-pro:dem, 'c\'', [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(256, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(recettes, nc-nom, recette, [n-1]), si(tirées, vpp-ver:pper, tirer, [dr(0,dl(0,n,n),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(taxes, nc-nom, taxe, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(vigueur, nc-nom, vigueur, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(carburants, nc-nom, carburant, [n-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(40, det-num, 40, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(euros, nc-nom, euro, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(2022, pro-num, 2022, [np-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(estimations, nc-nom, estimation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Economie', nc-nam, 'Economie', [n-1]), si(obtenues, vpp-ver:pper, obtenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(257, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(toucherait, v-ver:impf, toucher, [dr(0,dl(0,np,s),np)-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(euros, nc-nom, euro, [n-1]), si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), si(an, nc-nom, an, [n-1]), si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(impôts, nc-nom, impôt, [n-1]), si(indirects, adj-adj, indirect, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(carburants, nc-nom, carburant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(258, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(établi, vpp-ver:pper, établir, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(bénéficie, v-ver:pres, bénéficier, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(touche, v-ver:pres, toucher, [dr(0,dl(0,np,s),np)-1]), si(moins, adv-adv, moins, [dr(0,dr(0,np,s_q),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(argent, nc-nom, argent, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(début, nc-nom, début, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(année, nc-nom, année, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(remise, nc-nom, remise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(centimes, nc-nom, centime, [n-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pompe, nc-nom, pompe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(atténuer, vinf-ver:infi, atténuer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(flambée, nc-nom, flambée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(259, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(profite, v-ver:pres, profiter, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(drastique, adj-adj, drastique, [dl(0,n,n)-1]), si(récente, adj-adj, récent, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pompe, nc-nom, pompe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(260, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(litre, nc-nom, litre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gazole, nc-nom, gazole, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(carburant, nc-nom, carburant, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(quarts, nc-nom, quart, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(achats, nc-nom, achat, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pompe, nc-nom, pompe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(coûté, vpp-ver:pper, coûter, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si('2,13', det-num, '2,13', [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(consommateur, nc-nom, consommateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(261, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(somme, nc-nom, somme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(61, det-num, 61, [dr(0,np,n)-1]), si(centimes, nc-nom, centime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('TICPE', nc-abr, 'TICPE', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(35, det-num, 35, [dr(0,np,n)-1]), si(centimes, nc-nom, centime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('TVA', nc-abr, 'TVA', [n-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(taxes, nc-nom, taxe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(96, det-num, 96, [dr(0,np,n)-1]), si(centimes, nc-nom, centime, [n-1]), si('--et', p+d-sym, '--et', [let-1]), si(non, adv-adv, non, [dr(0,dl(0,np,np),np)-1]), si('1,29', det-num, '1,29', [dr(0,np,np)-1]), si(euro, nc-nom, euro, [dr(0,np,n)-1]), si(comme, cs-kon, comme, [n-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,n,n),s)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(les, det-det:art, le, [dr(0,dr(0,s,np),np)-1]), si(publications, nc-nom, publication, [dr(0,np,n)-1]), si('-', ponct-pun, '-', [n-1]), si('-', ponct-pun, '-', [let-1]), si(sont, v-ver:pres, être, [let-1]), si(arrivés, vpp-ver:pper, arriver, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(effectivement, adv-adv, effectivement, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dans, p-prp, dans, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,pp,np)-1]), si(caisses, nc-nom, caisse, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Etat', nc-nam, 'Etat', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(262, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(somme, nc-nom, somme, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(45, det-num, 45, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(coût, nc-nom, coût, [n-1]), si(total, adj-adj, total, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(263, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(consommateurs, nc-nom, consommateur, [n-1]), si(verront, v-ver:futu, voir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(effet, nc-nom, effet, [n-1]), si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(plein, nc-adj, plein, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(essence, nc-nom, essence, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(taxes, nc-nom, taxe, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(atterriront, v-ver:futu, atterrir, [dl(0,np,s)-1]), si(directement, adv-adv, directement, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(caisses, nc-nom, caisse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si('-', ponct-pun, '-', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(1,s,s),np)-1]), si('1,29€', det-num, '1,29€', [dr(0,np,n)-1]), si(pour, p-prp, pour, [n-1]), si(1, det-num, 1, [dr(0,dl(0,np,np),np)-1]), si(litre, nc-nom, litre, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si('2,15€', pro-num, '2,15€', [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(264, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(limité, vpp-ver:pper, limiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(transit, nc-nom, transit, [n-1]), si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(marchandises, nc-nom, marchandise, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enclave, nc-nom, enclave, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(265, Result) :-
      prob_parse([ si('Toutefois', adv-adv, 'Toutefois', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(rien, pro-pro:ind, rien, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(acheminer, vinf-ver:infi, acheminer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(marchandises, nc-nom, marchandise, [n-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(enclave, nc-nom, enclave, [n-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(ports, nc-nom, port, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(266, Result) :-
      prob_parse([ si('L\'acte', nc-nom, 'L\'acte', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si('Lituanie', npp-nam, 'Lituanie', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(en, p-prp, en, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(oeuvre, nc-nom, oeuvre, [dr(0,pp,n)-1]), si(des, det-prp:det, un, [n-1]), si(restrictions, nc-nom, restriction, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(circulation, nc-nom, circulation, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(produits, nc-nom, produit, [dr(0,dl(0,n,n),n)-1]), si(russes, adj-adj, russe, [n-1]), si(revient, v-ver:pres, revenir, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si('Moscou', npp-nam, 'Moscou', [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [np-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(blocus, nc-nom, blocus, [let-1]), si(total, adj-adj, total, [n-1]), si(illégal, adj-adj, illégal, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(le, clo-pro:per, le, [let-1]), si(privant, vpr-ver:ppre, priver, [dr(0,dl(0,n,n),dr(0,dl(0,n,n),dia(1,box(1,np))))-1]), si('d\'', p-prp, 'd\'', [dr(0,dr(0,dl(0,n,n),pp_de),np)-1]), si(accès, nc-nom, accès, [dr(0,pp_de,n)-1]), si(à, p-prp, à, [n-1]), si(une, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), si(partie, nc-nom, partie, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(son, det-det:pos, son, [dr(0,dl(0,n,n),np)-1]), si(territoire, nc-nom, territoire, [dr(0,np,n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(267, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(membre, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(tenue, vpp-ver:pper, tenir, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(appliquer, vinf-ver:infi, appliquer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sanctions, nc-nom, sanction, [n-1]), si(décidées, vpp-ver:pper, décider, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Vingt-Sept', npp-nam, 'Vingt-Sept', [n-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(place, nc-nom, placer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('porte-à-faux', nc-nom, 'porte-à-faux', [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(traité, nc-nom, traité, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(268, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(retrouve, v-ver:pres, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(contradiction, nc-nom, contradiction, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(obligations, nc-nom, obligation, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(découlent, v-ver:pres, découler, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(traité, nc-nom, traité, [n-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1993, pro-num, 1993, [np-1]), si('vis-à-vis', p-prp, 'vis-à-vis', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(membre, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(décisions, nc-nom, décision, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prises, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(institutions, nc-nom, institution, [n-1]), si(européennes, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(donc, adv-adv, donc, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sanctions, nc-nom, sanction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(269, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(respecte, v-ver:pres, respecter, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sanctions, nc-nom, sanction, [n-1]), si(européennes, adj-adj, européen, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dr(0,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(échéant, vpr-ver:ppre, échéant, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(saisir, vinf-ver:infi, saisir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(on, cls-pro:per, on, [np-1]), si(appelle, v-ver:pres, appeler, [dr(0,dr(0,dl(0,np,s),np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('\'', ponct-pun:cit, '\'', [n-1]), si(recours, nc-nom, recours, [dr(0,dl(0,n,n),n)-1]), si(en, p-prp, en, [n-1]), si('manquement\'', nc-nom, 'manquement\'', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(là, adv-adv, là, [dr(0,s,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(jugée, vpp-ver:pper, juger, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(270, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(juridiction, nc-nom, juridiction, [n-1]), si(compétente, adj-adj, compétent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(271, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(répondu, vpp-ver:pper, répondre, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dilemme, nc-nom, dilemme, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(prenant, vpr-ver:ppre, prendre, [dr(0,dr(0,dl(0,np,s_ppres),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(compte, nc-nom, compte, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(risques, nc-nom, risque, [n-1]), si(juridiques, adj-adj, juridique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(forts, adj-adj, fort, [dl(0,n,n)-1]), si(venant, vpr-ver:ppre, venir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(considérations, nc-nom, considération, [n-1]), si(géopolitiques, adj-adj, géopolitique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(272, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(diplomatie, nc-nom, diplomatie, [n-1]), si(lituanienne, adj-adj, lituanien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Gabrielius', npp-nam, 'Gabrielius', [dr(0,np,np)-1]), si('Landsbergis', npp-nam, 'Landsbergis', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenu, vpp-ver:pper, tenir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rappeler, vinf-ver:infi, rappeler, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(déplacement, nc-nom, déplacement, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Luxembourg', npp-nam, 'Luxembourg', [dr(0,s_q,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(seuls, adv-adv, seul, [let-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(biens, nc-nom, bien, [n-1]), si(sous, p-prp, sou, [dr(0,dl(0,n,n),n)-1]), si(sanctions, nc-nom, sanction, [n-1]), si('(...)', ponct-pun, '(...)', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(autorisés, vpp-ver:pper, autoriser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(transiter, vinf-ver:infi, transiter, [dr(0,dl(0,np,s_inf),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(273, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(transit, nc-nom, transit, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(biens, nc-nom, bien, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(technologies, nc-nom, technologie, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(double, adj-adj, double, [dr(0,n,n)-1]), si(usage, nc-nom, usage, [n-1]), si(sanctionnés, vpp-ver:pper, sanctionner, [dl(0,n,n)-1]), si('(...)', ponct-pun, '(...)', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(interdit, vpp-ver:pper, interdire, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cause, nc-nom, cause, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(274, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(enclave, nc-nom, enclave, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(mille, det-num, mille, [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('avant-poste', nc-nom, 'avant-poste', [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(hautement, adv-adv, hautement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(stratégique, adj-adj, stratégique, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(275, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(flotte, nc-nom, flotte, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Baltique', npp-nam, 'Baltique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(276, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(enclave, nc-nom, enclave, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(mille, det-num, mille, [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('avant-poste', nc-nom, 'avant-poste', [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(hautement, adv-adv, hautement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(stratégique, adj-adj, stratégique, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(277, Result) :-
      prob_parse([ si('Face', nc-nom, 'Face', [dr(0,dr(0,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(expansion, nc-nom, expansion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(',', ponct-pun, ',', [let-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(musclé, vpp-ver:pper, muscler, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s_ppres),np)-1]), si(organisant, vpr-ver:ppre, organiser, [dr(0,dl(0,np,s_ppres),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(importantes, adj-adj, important, [dr(0,n,n)-1]), si(manoeuvres, nc-nom, manoeuvre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(278, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(légale, adj-adj, légal, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(empêcher, vinf-ver:infi, empêcher, [dr(0,dl(0,np,s_inf),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(possibles, adj-adj, possible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contournement, nc-nom, contournement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(restrictives, adj-adj, restrictif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(souligne, v-ver:pres, souligner, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(279, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(nécessaires, adj-adj, nécessaire, [dl(0,n,n)-1]), si(prévues, vpp-ver:pper, prévoir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(échéant, vpr-ver:ppre, échéant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(refus, nc-nom, refus, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transit, nc-nom, transit, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(détention, nc-nom, détention, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marchandises, nc-nom, marchandise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(question, nc-nom, question, [n-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(violation, nc-nom, violation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(règlements, nc-nom, règlement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(280, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(insisté, vpp-ver:pper, insister, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(13, adj-num, 13, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(transit, nc-nom, transit, [n-1]), si(routier, adj-adj, routier, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(opérateurs, nc-nom, opérateur, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marchandises, nc-nom, marchandise, [n-1]), si(sous, p-prp, sou, [dr(0,dl(0,n,n),n)-1]), si(sanctions, nc-nom, sanction, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(autorisé, vpp-ver:pper, autoriser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(281, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(interdiction, nc-nom, interdiction, [n-1]), si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(transport, nc-nom, transport, [n-1]), si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(282, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(forcé, vpp-ver:pper, forcer, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(adopter, vinf-ver:infi, adopter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sanctions, nc-nom, sanction, [n-1]), si(décidées, vpp-ver:pper, décider, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(interdiction, nc-nom, interdiction, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(transit, nc-nom, transit, [n-1]), si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(283, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(engagée, vpp-ver:pper, engager, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(accord, nc-nom, accord, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(large, adj-adj, large, [dr(0,n,n)-1]), si(passage, nc-nom, passage, [n-1]), si(libre, adj-adj, libre, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(signant, vpr-ver:ppre, signer, [dr(0,dl(0,np,s_ppres),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(1993, adj-num, 1993, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(concernait, v-ver:impf, concerner, [dr(0,dl(0,np,s),np)-1]), si(essentiellement, adv-adv, essentiellement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(transport, nc-nom, transport, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(route, nc-nom, route, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(biens, nc-nom, bien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(permis, nc-nom, permis, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(284, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(prises, vpp-ver:pper, prendre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2022, pro-num, 2022, [np-1]), si(limitant, vpr-ver:ppre, limiter, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(transit, nc-nom, transit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(violent, v-ver:pres, violer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(précédemment, adv-adv, précédemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(conclu, vpp-ver:pper, conclure, [dr(0,dl(0,n,n),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(elles, pro-pro:per, lui, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(285, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(continuent, v-ver:pres, continuer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [let-1]), si(donc, cc-adv, donc, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('\'', ponct-pun:cit, '\'', [n-1]), si('blocus\'', nc-nom, 'blocus\'', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(1,s,s),np)-1]), si(ainsi, adv-adv, ainsi, [dr(0,np,np)-1]), si('Jean-Dominique', npp-nam, 'Jean-Dominique', [dr(0,np,np)-1]), si('Giuliani', npp-nam, 'Giuliani', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(286, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kaliningrad', npp-nam, 'Kaliningrad', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(estimé, vpp-ver:pper, estimer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(blocus, nc-nom, blocus, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si('vis-à-vis', p-prp, 'vis-à-vis', [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(287, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(police, nc-nom, police, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Anhalt-Bitterfeld', npp-nam, 'Anhalt-Bitterfeld', [np-1]), si(',', ponct-pun, ',', [let-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Wulfen', npp-nam, 'Wulfen', [np-1]), si(en, p-prp, en, [np-1]), si('Saxe-Anhalt', npp-nam, 'Saxe-Anhalt', [np-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signalé, vpp-ver:pper, signaler, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si(date, nc-nom, date, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(10, adj-num, 10, [dr(0,dl(0,n,n),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dl(0,n,n)-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(ici, adv-adv, ici, [dr(0,dl(0,np,np),np)-1]), si(et, cc-kon, et, [np-1]), si(ici, adv-adv, ici, [np-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(288, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Saxe-Anhalt', npp-nam, 'Saxe-Anhalt', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(déroulé, vpp-ver:pper, dérouler, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(connaissance, nc-nom, connaissance, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tel, adj-adj, tel, [dr(0,n,n)-1]), si(départ, nc-nom, départ, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(réfugiés, nc-nom, réfugié, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(289, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(police, nc-nom, police, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Anhalt-Bitterfeld', npp-nam, 'Anhalt-Bitterfeld', [np-1]), si(',', ponct-pun, ',', [let-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Wulfen', npp-nam, 'Wulfen', [np-1]), si(en, p-prp, en, [np-1]), si('Saxe-Anhalt', npp-nam, 'Saxe-Anhalt', [np-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signalé, vpp-ver:pper, signaler, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(à, p-prp, à, [n-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si(date, nc-nom, date, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(10, adj-num, 10, [dr(0,dl(0,n,n),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(290, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), si(essayant, vpr-ver:ppre, essayer, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(brûler, vinf-ver:infi, brûler, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(réfugiés, nc-nom, réfugié, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(brûlent, v-ver:pres, brûler, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(disposition, nc-nom, disposition, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Wulfen', npp-nam, 'Wulfen', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(291, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), si(allemande, nc-nom, allemande, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(accablée, vpp-ver:pper, accabler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(destruction, nc-nom, destruction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(292, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Finlande', npp-nam, 'Finlande', [n-1]), si(envoie, v-ver:pres, envoyer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chars, nc-nom, char, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(montrés, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(transportés, vpp-ver:pper, transporter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,n)-1]), si(train, nc-nom, train, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(293, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(transporte, v-ver:pres, transporter, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chars, nc-nom, char, [n-1]), si(finlandais, adj-adj, finlandais, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(dirige, v-ver:pres, diriger, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouest, nc-nom, ouest, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opposé, nc-nom, opposé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(294, Result) :-
      prob_parse([ si('Arrow', npp-nam, 'Arrow', [np-1]), si(22, pro-num, 22, [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(exercice, nc-nom, exercice, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), si(prévu, vpp-ver:pper, prévoir, [dl(0,n,n)-1]), si(bien, adv-adv, bien, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n)))-1]), si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(295, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(réunit, v-ver:pres, réunir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Lettonie', npp-nam, 'Lettonie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Estonie', npp-nam, 'Estonie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(déroule, v-ver:pres, dérouler, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouest, nc-nom, ouest, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Finlande', npp-nam, 'Finlande', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(296, Result) :-
      prob_parse([ si('Arrow', npp-nam, 'Arrow', [np-1]), si(22, pro-num, 22, [dl(0,np,np)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(297, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(drone, nc-nom, drone, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(satellite, nc-nom, satellite, [n-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(endommagées, vpp-ver:pper, endommager, [dl(0,n,n)-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(découverts, vpp-ver:pper, découvrir, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(là, adv-adv, là, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(occupation, nc-nom, occupation, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(298, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(découverts, vpp-ver:pper, découvrir, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(scène, nc-nom, scène, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(299, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(renversés, vpp-ver:pper, renverser, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(endommagés, vpp-ver:pper, endommager, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(33, adj-num, 33, [dr(0,n,n)-1]), si(rue, nc-nom, rue, [n-1]), si('Centrale', npp-nam, 'Centrale', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(résultat, nc-nom, résultat, [np-1]), si(plutôt, adv-adv, plutôt, [dr(0,pp,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(collisions, nc-nom, collision, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(bombardement, nc-nom, bombardement, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fenêtres, nc-nom, fenêtre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(immeubles, nc-nom, immeuble, [n-1]), si(autour, adv-adv, autour, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(intactes, adj-adj, intact, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(300, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(33, adj-num, 33, [dr(0,n,n)-1]), si(rue, nc-nom, rue, [n-1]), si('Centrale', npp-nam, 'Centrale', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(renversées, vpp-ver:pper, renverser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(équipements, nc-nom, équipement, [n-1]), si(lourds, adj-adj, lourd, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(bombes, nc-nom, bombe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(301, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(internaute, nc-nom, internaute, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(noté, vpp-ver:pper, noter, [dr(0,dl(0,np,s_ppart),np)-1]), si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(grosse, adj-adj, gros, [dr(0,n,n)-1]), si(rayure, nc-nom, rayure, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(côté, nc-nom, côté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(orange, adj-adj, orange, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(renversée, vpp-ver:pper, renverser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(blindé, adj-adj, blinder, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transport, nc-nom, transport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), si(chose, nc-nom, chose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(302, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(renversés, vpp-ver:pper, renverser, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(endommagés, vpp-ver:pper, endommager, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(33, adj-num, 33, [dr(0,n,n)-1]), si(rue, nc-nom, rue, [n-1]), si('Centrale', npp-nam, 'Centrale', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(résultat, nc-nom, résultat, [np-1]), si(plutôt, adv-adv, plutôt, [dr(0,pp,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(collisions, nc-nom, collision, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(bombardement, nc-nom, bombardement, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fenêtres, nc-nom, fenêtre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(immeubles, nc-nom, immeuble, [n-1]), si(autour, adv-adv, autour, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(intactes, adj-adj, intact, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(303, Result) :-
      prob_parse([ si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), si('Trusz', npp-nam, 'Trusz', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(appartement, nc-nom, appartement, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('4ème', adj-num, '4ème', [dr(0,n,n)-1]), si(étage, nc-nom, étage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(traces, nc-nom, trace, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(bâtiment, nc-nom, bâtiment, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(304, Result) :-
      prob_parse([ si('Je', cls-pro:per, 'Je', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ai, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vues, vpp-ver:pper, voir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(je, cls-pro:per, je, [np-1]), si('m\'', clr-pro:per, 'm\'', [cl_r-1]), si(y, clo-pro:per, y, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,cl_r,dl(0,np,s)),dia(1,box(1,pp_a))))-1]), si(suis, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rendue, vpp-ver:pper, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(305, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(douzaine, nc-num, douzaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(résidents, nc-nom, résident, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décrit, vpp-ver:pper, décrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(meurtres, nc-nom, meurtre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(actes, nc-nom, acte, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(intimidation, nc-nom, intimidation, [n-1]), si(présumés, adj-adj, présumer, [dl(0,n,n)-1]), si(commis, vpp-ver:pper, commettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(occupaient, v-ver:impf, occuper, [dr(0,dl(0,np,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(appartements, nc-nom, appartement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(306, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dormi, vpp-ver:pper, dormir, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(mon, det-det:pos, mon, [dr(0,np,n)-1]), si(appartement, nc-nom, appartement, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(bu, vpp-ver:pper, boire, [dr(0,dl(0,np,s_ppart),np)-1]), si(tout, adv-adv, tout, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alcool, nc-nom, alcool, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(mes, det-det:pos, mon, [dr(0,np,n)-1]), si(installations, nc-nom, installation, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(un, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(résidents, nc-nom, résident, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(307, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avaient, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(besoin, nc-nom, besoin, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(occuper, vinf-ver:infi, occuper, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(appartements, nc-nom, appartement, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(désigné, vpp-ver:pper, désigner, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(tout, adv-pro:ind, tout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(détruit, vpp-ver:pper, détruire, [dr(0,dl(0,np,s_ppart),np)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(308, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(douzaine, nc-num, douzaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(résidents, nc-nom, résident, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décrit, vpp-ver:pper, décrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(meurtres, nc-nom, meurtre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(actes, nc-nom, acte, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(intimidation, nc-nom, intimidation, [n-1]), si(présumés, adj-adj, présumer, [dl(0,n,n)-1]), si(commis, vpp-ver:pper, commettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(occupaient, v-ver:impf, occuper, [dr(0,dl(0,np,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(appartements, nc-nom, appartement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(309, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dormi, vpp-ver:pper, dormir, [dl(0,np,s_ppart)-1]), si(là, adv-adv, là, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(bu, vpp-ver:pper, boire, [dr(0,dl(0,np,s_ppart),np)-1]), si(tout, adv-adv, tout, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alcool, nc-nom, alcool, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(mes, det-det:pos, mon, [dr(0,np,n)-1]), si(installations, nc-nom, installation, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(un, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(résidents, nc-nom, résident, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(310, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), si(bâtiment, nc-nom, bâtiment, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(quartiers, nc-nom, quartier, [n-1]), si(généraux, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(destructions, nc-nom, destruction, [n-1]), si(importantes, adj-adj, important, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marques, nc-nom, marque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(boue, nc-nom, boue, [n-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(renversées, vpp-ver:pper, renverser, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(311, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(dons, nc-nom, don, [n-1]), si(allemands, adj-adj, allemand, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(abandonnés, vpp-ver:pper, abandonner, [dl(0,np,s_pass)-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(franchir, vinf-ver:infi, franchir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(312, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(livraisons, nc-nom, livraison, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(aide, nc-nom, aide, [n-1]), si(humanitaire, adj-adj, humanitaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(organisées, vpp-ver:pper, organiser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('ONG', nc-abr, 'ONG', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(lieu, nc-nom, lieu, [np-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(313, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fournitures, nc-nom, fourniture, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(origine, nc-nom, origine, [n-1]), si(inconnue, adj-adj, inconnu, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(filmées, vpp-ver:pper, filmer, [dl(0,np,s_pass)-1]), si(traînées, nc-nom, traîner, [dl(0,np,s_pass)-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si('polono-ukrainienne', adj-adj, 'polono-ukrainienne', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(humanitaire, adj-adj, humanitaire, [dl(0,n,n)-1]), si(transmise, vpp-ver:pper, transmettre, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(biais, nc-nom, biais, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(associations, nc-nom, association, [n-1]), si(spécialisées, vpp-ver:pper, spécialisé, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(parvenue, vpp-ver:pper, parvenir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), si(place, nc-nom, place, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(confirment, v-ver:pres, confirmer, [dr(0,dr(0,s,np),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si('ONG', nc-abr, 'ONG', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(314, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(obstacle, nc-nom, obstacle, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si('polono-ukrainienne', adj-adj, 'polono-ukrainienne', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('ONG', nc-abr, 'ONG', [n-1]), si(allemandes, adj-adj, allemand, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(315, Result) :-
      prob_parse([ si('Halima', npp-nam, 'Halima', [dr(0,np,np)-1]), si('Ait', npp-nam, 'Ait', [dr(0,np,np)-1]), si('Lasri', npp-nam, 'Lasri', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approvisionnement, nc-nom, approvisionnement, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sein, nc-nom, sein, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('MSF', npp-nam, 'MSF', [np-1]), si(détaille, v-ver:pres, détailler, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(difficultés, nc-nom, difficulté, [n-1]), si(anecdotiques, adj-adj, anecdotique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(douaniers, nc-nom, douanier, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(osent, v-ver:pres, oser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(absence, nc-nom, absence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(supérieur, nc-nom, supérieur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), si(obstacle, nc-nom, obstacle, [n-1]), si(bureaucratique, adj-adj, bureaucratique, [dl(0,n,n)-1]), si(particulier, adj-adj, particulier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(316, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(reporter, nc-nom, reporter, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Rico', npp-nam, 'Rico', [dr(0,np,np)-1]), si('Löb', npp-nam, 'Löb', [np-1]), si(',', ponct-pun, ',', [let-1]), si(précise, v-ver:pres, préciser, [dr(0,dl(0,np,s),s_q)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(obstacles, nc-nom, obstacle, [n-1]), si(bureaucratiques, adj-adj, bureaucratique, [dl(0,n,n)-1]), si(dissuadant, vpr-ver:ppre, dissuader, [dr(0,dl(0,n,n),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(gens, nc-nom, gens, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(amène, v-ver:pres, amener, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(derniers, nc-nom, dernier, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(décharger, vinf-ver:infi, décharger, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(abandonnées, vpp-ver:pper, abandonner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(317, Result) :-
      prob_parse([ si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), si(livraisons, nc-nom, livraison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fournitures, nc-nom, fourniture, [n-1]), si(organisées, vpp-ver:pper, organiser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(particuliers, nc-nom, particulier, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(conformes, adj-adj, conforme, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(transmis, vpp-ver:pper, transmettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('ONG', nc-abr, 'ONG', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(déconseillé, vpp-ver:pper, déconseiller, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(particuliers, nc-nom, particulier, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(organiser, vinf-ver:infi, organiser, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(livraisons, nc-nom, livraison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dons, nc-nom, don, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(318, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(convois, nc-nom, convoi, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(aide, nc-nom, aide, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(organisés, vpp-ver:pper, organiser, [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(solution, nc-nom, solution, [n-1]), si(idéale, adj-adj, idéal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(manque, nc-nom, manque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(organisation, nc-nom, organisation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(documentation, nc-nom, documentation, [n-1]), si(manquante, adj-adj, manquant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(319, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Nous', cls-pro:per, 'Nous', [np-1]), si(livrons, v-ver:futu, livrer, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(équipements, nc-nom, équipement, [n-1]), si(conséquents, adj-adj, conséquent, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si('Milan', npp-nam, 'Milan', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(antichars, adj-adj, antichar, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Caesar', npp-nam, 'Caesar', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(camions, nc-nom, camion, [n-1]), si(équipés, vpp-ver:pper, équiper, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(artillerie, nc-nom, artillerie, [n-1]), si(')', ponct-pun, ')', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(passant, vpr-ver:ppre, passer, [dr(0,dl(0,np,s_ppres),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(types, nc-nom, type, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armements, nc-nom, armement, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Ouest-France', npp-nam, 'Ouest-France', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(320, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(côté, nc-nom, côté, [n-1]), si(',', ponct-pun, ',', [let-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(321, Result) :-
      prob_parse([ si('Ni', cc-kon, 'Ni', [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fournissent, v-ver:pres, fournir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), si(équipements, nc-nom, équipement, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(322, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), si(plein, adj-adj, plein, [dr(0,n,n)-1]), si('entre-deux-tours', nc-nom, 'entre-deux-tours', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élection, nc-nom, élection, [n-1]), si(présidentielle, adj-adj, présidentiel, [dl(0,n,n)-1]), si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(président, nc-nom, président, [n-1]), si(sortant, vpr-ver:ppre, sortant, [dl(0,n,n)-1]), si('Petro', npp-nam, 'Petro', [dl(0,n,n)-1]), si('Porochenko', npp-nam, 'Porochenko', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(interview, nc-nom, interview, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(consommait, v-ver:impf, consommer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si(drogue, nc-nom, drogue, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(323, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dl(0,np,s_ppart),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(foulée, nc-nom, foulée, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dépistage, nc-nom, dépistage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(drogue, nc-nom, drogue, [n-1]), si(',', ponct-pun, ',', [let-1]), si(retransmis, vpp-ver:pper, retransmettre, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(direct, nc-nom, direct, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(finir, vinf-ver:infi, finir, [dr(0,dl(0,np,s_inf),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(rumeur, nc-nom, rumeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(324, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(affirmé, vpp-ver:pper, affirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(325, Result) :-
      prob_parse([ si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(cocaïnomane, adj-adj, cocaïnomane, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dr(0,s,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(ministres, nc-nom, ministre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(clique, nc-nom, clique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(toxicomanes, nc-nom, toxicomane, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(néonazis, nc-nom, néonazi, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(326, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(interview, nc-nom, interview, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si(',', ponct-pun, ',', [let-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('sniffe[r]', ponct-pun, 'sniffe[r]', [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,dl(1,s,s),np)-1]), si(du, det-prp:det, de, [np-1]), si(café, nc-nom, café, [let-1]), si(',', ponct-pun, ',', [let-1]), si(parce, adv-kon, parce, [dr(0,np,n)-1]), si(que, cs-kon, que, [n-1]), si(je, cls-pro:per, je, [dr(0,dl(1,s,s),s_q)-1]), si(suis, v-ver:pres, être, [dr(0,s_q,s)-1]), si(vraiment, adv-adv, vraiment, [np-1]), si(accro, vpp-ver:pper, accro, [np-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(café, nc-nom, café, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dr(0,dl(0,n,n),pp_a)-1])], Result).
sent(327, Result) :-
      prob_parse([ si('J\'', cls-pro:per, 'J\'', [np-1]), si(aime, v-ver:pres, aimer, [dr(0,dl(0,np,s),np)-1]), si(vraiment, adv-adv, vraiment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(café, nc-nom, café, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(tout, adv-adv, tout, [np-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(je, cls-pro:per, je, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(me, clr-pro:per, me, [cl_r-1]), si(drogue, v-ver:pres, droguer, [dl(0,cl_r,dl(0,np,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(328, Result) :-
      prob_parse([ si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(toxicomane, adj-adj, toxicomane, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(329, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Oleg', npp-nam, 'Oleg', [dr(0,np,np)-1]), si('Kuzminykh', npp-nam, 'Kuzminykh', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('lieutenant-colonel', nc-nom, 'lieutenant-colonel', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('81e', adj-num, '81e', [dr(0,n,n)-1]), si(brigade, nc-nom, brigade, [n-1]), si(aéroportée, adj-adj, aéroporté, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(capturé, vpp-ver:pper, capturer, [dr(0,dl(0,n,n),pp_par)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(frappé, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(foule, nc-nom, foule, [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Donestk', npp-nam, 'Donestk', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bataillon, nc-nom, bataillon, [n-1]), si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(330, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(commandant, nc-nom, commandant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(régiment, nc-nom, régiment, [n-1]), si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Denis', npp-nam, 'Denis', [dr(0,np,np)-1]), si('Prokopenko', npp-nam, 'Prokopenko', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(331, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Oleg', npp-nam, 'Oleg', [dr(0,np,np)-1]), si('Kuzminykh', npp-nam, 'Kuzminykh', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('Telegram', npp-nam, 'Telegram', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('Twitter', npp-nam, 'Twitter', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Azov', npp-nam, 'Azov', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(résultat, nc-nom, résultat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(332, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Oleg', npp-nam, 'Oleg', [dr(0,np,np)-1]), si('Kuzminykh', npp-nam, 'Kuzminykh', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('lieutenant-colonel', nc-nom, 'lieutenant-colonel', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('81e', adj-num, '81e', [dr(0,n,n)-1]), si(brigade, nc-nom, brigade, [n-1]), si(aéroportée, adj-adj, aéroporté, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(capturé, vpp-ver:pper, capturer, [dr(0,dl(0,n,n),pp_par)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(frappé, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(foule, nc-nom, foule, [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Donestk', npp-nam, 'Donestk', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bataillon, nc-nom, bataillon, [n-1]), si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(333, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(commandant, nc-nom, commandant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(régiment, nc-nom, régiment, [n-1]), si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Denis', npp-nam, 'Denis', [dr(0,np,np)-1]), si('Prokopenko', npp-nam, 'Prokopenko', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(334, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(commandant, nc-nom, commandant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bataillon, nc-nom, bataillon, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Oleg', npp-nam, 'Oleg', [dr(0,np,np)-1]), si('Kuzminykh', npp-nam, 'Kuzminykh', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(335, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(trace, nc-nom, trace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(message, nc-nom, message, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(leader, nc-nom, leader, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Azov', npp-nam, 'Azov', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(capturé, vpp-ver:pper, capturer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(combats, nc-nom, combat, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(336, Result) :-
      prob_parse([ si('Ramzan', npp-nam, 'Ramzan', [dr(0,np,np)-1]), si('Kadyrov', npp-nam, 'Kadyrov', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Kremlin', npp-nam, 'Kremlin', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(messages, nc-nom, message, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si(officielle, adj-adj, officiel, [dl(0,n,n)-1]), si('Telegram', npp-nam, 'Telegram', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquels, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(un, pro-num, un, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(concernent, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrestation, nc-nom, arrestation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(commandant, nc-nom, commandant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Azov', npp-nam, 'Azov', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(337, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(mène, v-ver:pres, mener, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Roman', npp-nam, 'Roman', [dr(0,np,np)-1]), si('Kravets', npp-nam, 'Kravets', [np-1]), si(',', ponct-pun, ',', [let-1]), si(demandait, v-ver:impf, demander, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(consommait, v-ver:impf, consommer, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cocaïne, nc-nom, cocaïne, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(338, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(candidat, nc-nom, candidat, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(rétorque, v-ver:pres, rétorquer, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(alors, adv-adv, alors, [dl(1,s,s)-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Je', cls-pro:per, 'Je', [np-1]), si(suis, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(assis, vpp-ver:pper, asseoir, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), si(chose, nc-nom, chose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaise, nc-nom, chaise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(339, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(coke, nc-nom, coke, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(340, Result) :-
      prob_parse([ si('Je', cls-pro:per, 'Je', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(consomme, v-ver:pres, consommer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(drogue, nc-nom, drogue, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(341, Result) :-
      prob_parse([ si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(avoue, v-ver:pres, avouer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(junkie, nc-nom, junkie, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(carbure, v-ver:pres, carbure, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cocaïne, nc-nom, cocaïne, [n-1]), si(tous, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(les, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(matins, nc-nom, matin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(342, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('BBC', npp-abr, 'BBC', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tweet, nc-nom, tweet, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si(certifié, vpp-ver:pper, certifier, [dl(0,n,n)-1]), si(alertant, vpr-ver:ppre, alerter, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(information, nc-nom, information, [n-1]), si(utilisant, vpr-ver:ppre, utiliser, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(charte, nc-nom, charte, [n-1]), si(graphique, adj-adj, graphique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('BBC', npp-abr, 'BBC', [dr(0,np,np)-1]), si('News', npp-nam, 'News', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(relayant, vpr-ver:ppre, relayer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attribution, nc-nom, attribution, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kramatorsk', npp-nam, 'Kramatorsk', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(fausse, adj-adj, faux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(343, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('BBC', npp-abr, 'BBC', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(désigné, vpp-ver:pper, désigner, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,pp,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kramatorsk', npp-nam, 'Kramatorsk', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(344, Result) :-
      prob_parse([ si('L\'attaque', nc-nom, 'L\'attaque', [dr(0,np,n)-1]), si(contre, p-prp, contre, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(gare, nc-nom, gare, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Kramatorsk', npp-nam, 'Kramatorsk', [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [np-1]), si(dans, p-prp, dans, [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(est, nc-nom, être, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(qui, prorel-pro:rel, qui, [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,s_ppart),np)-1]), si(moins, adv-adv, moins, [dr(0,dr(0,np,np),n)-1]), si(57, det-num, 57, [n-1]), si(personnes, nc-nom, personne, [dr(0,np,n)-1]), si(dont, prorel-pro:rel, dont, [n-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(0,n,n),np)-1]), si(enfants, nc-nom, enfant, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(est, v-ver:pres, être, [let-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(un, det-det:art, un, [dr(0,pp_a,np)-1]), si(missile, nc-nom, missile, [dr(0,np,n)-1]), si(russe, adj-adj, russe, [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(345, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(abattu, vpp-ver:pper, abattre, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si('10H30', pro-num, '10H30', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(346, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parvis, nc-nom, parvis, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(restes, nc-nom, reste, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(visibles, adj-adj, visible, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(pouvait, v-ver:impf, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(lire, vinf-ver:infi, lire, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(russe, nc-nom, russe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Pour', p-prp, 'Pour', [dr(0,dl(1,s,s),np)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(347, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(numéro, nc-nom, numéro, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(série, nc-nom, série, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(missile, nc-nom, missile, [n-1]), si('Tochka-U', npp-nam, 'Tochka-U', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kramatorsk', npp-nam, 'Kramatorsk', [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(au, p+d-prp:det, au, [dr(0,np,n)-1]), si(moins, adv-adv, moins, [n-1]), si(57, det-num, 57, [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(confirme, v-ver:pres, confirmer, [dr(0,s_q,s)-1]), si('qu\'', cs-kon, 'qu\'', [np-1]), si(il, cls-pro:per, il, [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(348, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(départ, nc-nom, départ, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nord, nc-nom, nord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(tirent, v-ver:pres, tirer, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(filins, nc-nom, filin, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(retrouvés, vpp-ver:pper, retrouver, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(piégés, vpp-ver:pper, piéger, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(explosifs, nc-nom, explosif, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(349, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(progressent, v-ver:pres, progresser, [dl(0,np,s)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), si(prudence, nc-nom, prudence, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(reprendre, vinf-ver:infi, reprendre, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(zones, nc-nom, zone, [n-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si('[Kiev]', ponct-pun, '[Kiev]', [dr(0,dl(0,np,np),np)-1]), si(',', ponct-pun, ',', [np-1]), si(en, p-prp, en, [let-1]), si(recourant, vpr-ver:ppre, recourir, [let-1]), si(à, p-prp, à, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(des, det-prp:det, de, [dr(0,dl(0,np,s_ppres),pp_a)-1]), si(cordes, nc-nom, corde, [dr(0,pp_a,np)-1]), si(pour, p-prp, pour, [dr(0,np,n)-1]), si(extirper, vinf-ver:infi, extirper, [n-1]), si(des, det-prp:det, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(rues, nc-nom, rue, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(crainte, nc-nom, crainte, [let-1]), si(que, cs-kon, que, [dr(0,dl(1,s,s),n)-1]), si(les, det-det:art, le, [n-1]), si(forces, nc-nom, force, [dr(0,dl(0,n,n),s)-1]), si(russes, adj-adj, russe, [dr(0,np,n)-1]), si(ne, adv-adv, ne, [n-1]), si(les, clo-pro:per, le, [dl(0,n,n)-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(piégés, vpp-ver:pper, piéger, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si('.', ponct-pun, '.', [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1])], Result).
sent(350, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(départ, nc-nom, départ, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nord, nc-nom, nord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(tirent, v-ver:pres, tirer, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(filins, nc-nom, filin, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(retrouvés, vpp-ver:pper, retrouver, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(piégés, vpp-ver:pper, piéger, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(explosifs, nc-nom, explosif, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(351, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(étale, v-ver:pres, étale, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(scène, nc-nom, scène, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(352, Result) :-
      prob_parse([ si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(affirmé, vpp-ver:pper, affirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(massacre, nc-nom, massacre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(fake, nc-nom, fake, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', npp-nam, 'Défense', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(auparavant, adv-adv, auparavant, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(nié, vpp-ver:pper, nier, [dr(0,dl(0,np,s_ppart),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(implication, nc-nom, implication, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(prises, vpp-ver:pper, prendre, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(place, nc-nom, place, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(production, nc-nom, production, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(régime, nc-nom, régime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(353, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(exactions, nc-nom, exaction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(commises, vpp-ver:pper, commettre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(relèvent, v-ver:pres, relever, [dr(0,dl(0,np,s),pp)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(scène, nc-nom, scène, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(régime, nc-nom, régime, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(354, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(analyses, nc-nom, analyse, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(images, nc-nom, image, [n-1]), si(satellites, adj-adj, satellite, [dl(0,n,n)-1]), si(prises, vpp-ver:pper, prendre, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,np,dia(0,box(0,n))),dr(0,np,n)),dr(0,np,dia(0,box(0,n))))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(18, adj-num, 18, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(allongées, vpp-ver:pper, allonger, [dl(0,np,s_pass)-1]), si(là, adv-adv, là, [np-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(355, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(indices, nc-nom, indice, [n-1]), si(crédibles, adj-adj, crédible, [dl(0,n,n)-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dr(0,s,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(inclus, vpp-ver:pper, inclure, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présentes, vpp-ver:pper, présent, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(356, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(prétendument, adv-adv, prétendument, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(découverts, vpp-ver:pper, découvrir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(urkainienne, adj-adj, urkainienn, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boucha', npp-nam, 'Boucha', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dr(0,np,np),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(figurants, nc-nom, figurant, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(recrutés, vpp-ver:pper, recruter, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(préparés, vpp-ver:pper, préparer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(scène, nc-nom, scène, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(357, Result) :-
      prob_parse([ si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(assommé, vpp-ver:pper, assommer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(abolition, nc-nom, abolition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(358, Result) :-
      prob_parse([ si('Poutine', npp-nam, 'Poutine', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(abolir, vinf-ver:infi, abolir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(telles, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(lui, clo-pro:per, luire, [np-1]), si(seul, adj-adj, seul, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(359, Result) :-
      prob_parse([ si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(assommé, vpp-ver:pper, assommer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(abolition, nc-nom, abolition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(360, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(abolition, nc-nom, abolition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ambassadeur, nc-nom, ambassadeur, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(361, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ambassadeur, nc-nom, ambassadeur, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),pp)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(siège, nc-nom, siège, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(362, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(charte, nc-nom, charte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', npp-nam, 'Unies', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(exclure, vinf-ver:infi, exclure, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(membre, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(encore, adv-adv, encore, [dr(0,dr(0,np,np),dr(0,np,np))-1]), si(moins, adv-adv, moins, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(dissoute, vpp-ver:pper, dissoudre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(membre, nc-nom, membre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernier, nc-nom, dernier, [n-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(véto, nc-nom, véto, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(363, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(suspension, nc-nom, suspension, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(dissolution, nc-nom, dissolution, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(expulsion, nc-nom, expulsion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévues, vpp-ver:pper, prévoir, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(charte, nc-nom, charte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(364, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Russe', adj-adj, 'Russe', [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(abolition, nc-nom, abolition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(365, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(active, adj-adj, actif, [dl(0,n,n)-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(prouve, v-ver:pres, prouver, [dr(0,dr(0,s,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(internet, nc-nom, internet, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(366, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ordonnance, nc-nom, ordonnance, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(367, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Russe', adj-adj, 'Russe', [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(abolition, nc-nom, abolition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(368, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(biens, nc-nom, bien, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(comptes, nc-nom, compte, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(banques, nc-nom, banque, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(notamment, adv-adv, notamment, [dl(0,np,np)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(confisqués, vpp-ver:pper, confisquer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(369, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(')', ponct-pun, ')', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(représentation, nc-nom, représentation, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(bureaux, nc-nom, bureau, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quelconque, adj-adj, quelconque, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(autre, adj-adj, autre, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(370, Result) :-
      prob_parse([ si('Impossible', adv-adj, 'Impossible', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(donc, adv-adv, donc, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(confisquer, vinf-ver:infi, confisquer, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(biens, nc-nom, bien, [n-1]), si(immobiliers, adj-adj, immobilier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,dl(0,n,n),txt)-1])], Result).
sent(371, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', nc-nam, 'Homme', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fermées, vpp-ver:pper, fermer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(372, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(systématiquement, adv-adv, systématiquement, [dl(1,s,s)-1]), si(celles, pro-pro:dem, celui, [np-1]), si(subventionnées, vpp-ver:pper, subventionner, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(souligne, v-ver:pres, souligner, [dr(0,dl(1,s,s),np)-1]), si('Romuald', npp-nam, 'Romuald', [dr(0,np,np)-1]), si('Sciora', npp-nam, 'Sciora', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(spécialiste, nc-nom, spécialiste, [n-1]), si('franco-américain', adj-adj, 'franco-américain', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(relations, nc-nom, relation, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(373, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aboli, vpp-ver:pper, abolir, [dr(0,dl(0,np,s_ppart),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(affiliées, adj-adj, affilié, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Américains', nc-nam, 'Américains', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(374, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(reluisante, vpp-ver:pper, reluisant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(375, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(voix, nc-nom, voix, [n-1]), si(dissidentes, adj-adj, dissident, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(défenseurs, nc-nom, défenseur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(détériorée, vpp-ver:pper, détériorer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(376, Result) :-
      prob_parse([ si('ONG', nc-abr, 'ONG', [n-1]), si(blacklistées, vpp-ver:pper, blacklister, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(marches, nc-nom, marche, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(protestations, nc-nom, protestation, [n-1]), si(violemment, adv-adv, violemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(réprimées, vpp-ver:pper, réprimer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(opposants, nc-nom, opposant, [n-1]), si(empoisonnés, vpp-ver:pper, empoisonner, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(emprisonnés, vpp-ver:pper, emprisonner, [dl(0,n,n)-1]), si('...', ponct-pun, '...', [dl(0,n,txt)-1])], Result).
sent(377, Result) :-
      prob_parse([ si('Moscou', npp-nam, 'Moscou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(vives, adj-adj, vif, [dr(0,n,n)-1]), si(critiques, nc-nom, critique, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(violation, nc-nom, violation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), si(bien, adv-adv, bien, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étranger, nc-nom, étranger, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(378, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(mondiaux, adj-adj, mondial, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(denrées, nc-nom, denrée, [n-1]), si(alimentaires, adj-adj, alimentaire, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(hauts, adj-adj, haut, [dr(0,n,n)-1]), si(niveaux, nc-nom, niveau, [n-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(enregistrés, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(bouleversant, vpr-ver:ppre, bouleverser, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marchés, nc-nom, marché, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(crise, nc-nom, crise, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dl(1,s,dl(0,np,s_ppart))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alimentation, nc-nom, alimentation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agriculture, nc-nom, agriculture, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('FAO', npp-abr, 'FAO', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(379, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(denrées, nc-nom, denrée, [n-1]), si(alimentaires, adj-adj, alimentaire, [dl(0,n,n)-1]), si(mondiales, adj-adj, mondial, [dl(0,n,n)-1]), si(explosent, v-ver:pres, exploser, [dl(0,np,s)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(380, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(communiqué, nc-nom, communiqué, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(adossé, vpp-ver:pper, adosser, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rouble, nc-nom, rouble, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(381, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(uniquement, adv-adv, uniquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(intention, nc-nom, intention, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(courte, adj-adj, court, [dr(0,n,n)-1]), si(période, nc-nom, période, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(établissements, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(crédit, nc-nom, crédit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(382, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(adosser, vinf-ver:infi, adosser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(monnaie, nc-nom, monnaie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rouble, nc-nom, rouble, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(anéanti, vpp-ver:pper, anéantir, [dr(0,dl(0,np,s_ppart),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(valeur, nc-nom, valeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dollar, nc-nom, dollar, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(383, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(communiqué, nc-nom, communiqué, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(instauré, vpp-ver:pper, instaurer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('étalon-or', nc-nom, 'étalon-or', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(384, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(indiquait, v-ver:impf, indiquer, [dl(0,np,s)-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(uniquement, adv-adv, uniquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(intention, nc-nom, intention, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(courte, adj-adj, court, [dr(0,n,n)-1]), si(période, nc-nom, période, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(établissements, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(crédit, nc-nom, crédit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(385, Result) :-
      prob_parse([ si('Ça', pro-pro:dem, 'Ça', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(est, v-ver:pres, être, [dr(0,s,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lâché, vpp-ver:pper, lâcher, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bombe, nc-nom, bombe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(386, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Rouble', npp-nam, 'Rouble', [n-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(étalonné, vpp-ver:pper, étalonner, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),n)-1]), si(demain, adv-adv, demain, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(387, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(légende, nc-nom, légende, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(complot, nc-nom, complot, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(388, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(communiqué, nc-nom, communiqué, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(pourtant, adv-adv, pourtant, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(instauré, vpp-ver:pper, instaurer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('étalon-or', nc-nom, 'étalon-or', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(389, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(indiquait, v-ver:impf, indiquer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(vouloir, vinf-ver:infi, vouloir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(établissements, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(crédit, nc-nom, crédit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(390, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(achète, v-ver:pres, acheter, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(monnaie, nc-nom, monnaie, [n-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(adossée, vpp-ver:pper, adosser, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(métal, nc-nom, métal, [n-1]), si(précieux, adj-adj, précieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(391, Result) :-
      prob_parse([ si('L\'étalon-or', npp-nam, 'L\'étalon-or', [dr(0,np,n)-1]), si(correspond, v-ver:pres, correspondre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), si(un, det-det:art, un, [dr(0,pp_a,np)-1]), si(système, nc-nom, système, [dr(0,np,n)-1]), si(monétaire, adj-adj, monétaire, [n-1]), si(dans, p-prp, dans, [dl(0,n,n)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,pp,np)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si('l\'', det-det:art, 'l\'', [let-1]), si(unité, nc-nom, unité, [dr(0,np,n)-1]), si(monétaire, adj-adj, monétaire, [n-1]), si(est, v-ver:pres, être, [dl(0,n,n)-1]), si(définie, vpp-ver:pper, définir, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(en, p-prp, en, [dl(0,np,s_pass)-1]), si(référence, nc-nom, référence, [dr(0,dl(1,s,s),n)-1]), si(à, p-prp, à, [n-1]), si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), si(poids, nc-nom, poids, [dr(0,np,n)-1]), si(fixe, adj-adj, fixe, [n-1]), si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), si(or, nc-nom, or, [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(392, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('étalon-or', nc-nom, 'étalon-or', [n-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(valeur, nc-nom, valeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(monnaie, nc-nom, monnaie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(directement, adv-adv, directement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(valeur, nc-nom, valeur, [n-1]), si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(poids, nc-nom, poids, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(or, nc-nom, or, [n-1]), si(défini, vpp-ver:pper, définir, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(393, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('étalon-or', nc-nom, 'étalon-or', [n-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(promet, v-ver:pres, promettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(devise, nc-nom, devise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(céder, vinf-ver:infi, céder, [dr(0,dl(0,np,s_inf),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(retour, nc-nom, retour, [n-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(394, Result) :-
      prob_parse([ si('Ici', adv-adv, 'Ici', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(promet, v-ver:pres, promettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(simplement, adv-adv, simplement, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(monnaie, nc-nom, monnaie, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(échange, nc-nom, échange, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(395, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('étalon-or', nc-nom, 'étalon-or', [n-1]), si(signifierait, v-ver:impf, signifier, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(chacun, pro-pro:ind, chacun, [np-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(échanger, vinf-ver:infi, échanger, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(rouble, nc-nom, rouble, [n-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(fixé, vpp-ver:pper, fixer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(limite, nc-nom, limite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(396, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(ici, adv-adv, ici, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(397, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(économie, nc-nom, économie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(taille, nc-nom, taille, [n-1]), si(moyenne, adj-adj, moyen, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(déstabiliser, vinf-ver:infi, déstabiliser, [dr(0,dl(0,np,s_inf),np)-1]), si(durablement, adv-adv, durablement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(monétaire, adj-adj, monétaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(promettant, vpr-ver:ppre, promettre, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(398, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déstabilisation, nc-nom, déstabilisation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(monétaire, adj-adj, monétaire, [dl(0,n,n)-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(annonce, v-ver:pres, annoncer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('étalon-or', nc-nom, 'étalon-or', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(399, Result) :-
      prob_parse([ si('Fin', nc-nom, 'Fin', [dr(0,dr(0,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si(début, nc-nom, début, [dr(0,dr(0,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(monnaie, nc-nom, monnaie, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(passe, v-ver:pres, passer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(paliers, nc-nom, palier, [n-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dl(0,n,n),pp)-1]), si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(dollar, nc-nom, dollar, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(allant, vpr-ver:ppre, aller, [dr(0,dl(0,np,s_ppres),pp_a)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(140, det-num, 140, [dr(0,np,n)-1]), si(roubles, nc-nom, rouble, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(dollar, nc-nom, dollar, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dl(0,np,np)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(400, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rouble, nc-nom, rouble, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(effondrement, nc-nom, effondrement, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(dollar, nc-nom, dollar, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(401, Result) :-
      prob_parse([ si('Moscou', npp-nam, 'Moscou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réglé, vpp-ver:pper, régler, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(roubles, nc-nom, rouble, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(dette, nc-nom, dette, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(402, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Finances', nc-nom, 'Finances', [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(réglé, vpp-ver:pper, régler, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(roubles, nc-nom, rouble, [n-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(650, det-num, 650, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(dus, vpp-ver:pper, devoir, [dl(0,np,np)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(403, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(manipule, v-ver:pres, manipule, [dr(0,dl(0,np,s),np)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(visage, nc-nom, visage, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mannequin, nc-nom, mannequin, [n-1]), si(recouvert, vpp-ver:pper, recouvrir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(scotch, nc-nom, scotch, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(filmée, vpp-ver:pper, filmer, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(tournage, nc-nom, tournage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(télévisée, vpp-ver:pper, téléviser, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(404, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(manipule, v-ver:pres, manipule, [dr(0,dl(0,np,s),np)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(visage, nc-nom, visage, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mannequin, nc-nom, mannequin, [n-1]), si(recouvert, vpp-ver:pper, recouvrir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(scotch, nc-nom, scotch, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(405, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(préparer, vinf-ver:infi, préparer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cadavre, nc-nom, cadavre, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(enroulant, vpr-ver:ppre, enrouler, [dr(0,dl(0,np,s_ppres),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(bras, nc-nom, bras, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(adhésif, nc-nom, adhésif, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(406, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(préparent, v-ver:pres, préparer, [dr(0,dl(0,np,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si(mises, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(scène, nc-nom, scène, [n-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(crier, vinf-ver:infi, crier, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si('tue-tête', nc-nom, 'tue-tête', [n-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faute, nc-nom, faute, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(407, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tournage, nc-nom, tournage, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(télévisée, vpp-ver:pper, télévisé, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(séquence, nc-nom, séquence, [n-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chute, nc-nom, chute, [n-1]), si(fatale, adj-adj, fatal, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(étages, nc-nom, étage, [n-1]), si(supérieurs, adj-adj, supérieur, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prévu, vpp-ver:pper, prévoir, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Vsevolojsk', npp-nam, 'Vsevolojsk', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(408, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tournage, nc-nom, tournage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(télévisée, vpp-ver:pper, télévisé, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(409, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('lieutenant-général', nc-nom, 'lieutenant-général', [n-1]), si('Roger', npp-nam, 'Roger', [dl(0,n,n)-1]), si('L.', npp-abr, 'L.', [dl(0,n,n)-1]), si('Cloutier', npp-nam, 'Cloutier', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(messages, nc-nom, message, [n-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(témoignant, vpr-ver:ppre, témoigner, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(loin, adv-adv, loin, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(front, nc-nom, front, [n-1]), si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(410, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(général, adj-adj, général, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), si('Cloutier', npp-nam, 'Cloutier', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouvait, v-ver:impf, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(capturé, vpp-ver:pper, capturer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(ville, nc-nom, ville, [n-1]), si(assiégée, vpp-ver:pper, assiéger, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(411, Result) :-
      prob_parse([ si('Contacté', vpp-ver:pper, 'Contacté', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Grand', adj-adj, 'Grand', [dr(0,n,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(puissances, nc-nom, puissance, [n-1]), si(alliées, adj-adj, allié, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('SHAPE', npp-nam, 'SHAPE', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fermement, adv-adv, fermement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(démenti, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capture, nc-nom, capture, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('lieutenant-général', nc-nom, 'lieutenant-général', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(412, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(général, adj-adj, général, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), si('Cloutier', npp-nam, 'Cloutier', [np-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(capturé, vpp-ver:pper, capturer, [dr(0,dl(0,n,n),pp_par)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(ville, nc-nom, ville, [n-1]), si(assiégée, vpp-ver:pper, assiéger, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('?', ponct-pun, '?', [dl(0,np,txt)-1])], Result).
sent(413, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(commande, v-ver:pres, commande, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(terrestres, adj-adj, terrestre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(affirmation, nc-nom, affirmation, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(complètement, adv-adv, complètement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(fausse, adj-adj, faux, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(414, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Lieutenant', nc-nom, 'Lieutenant', [n-1]), si('Général', nc-adj, 'Général', [dl(0,n,n)-1]), si('Roger', npp-nam, 'Roger', [dl(0,n,n)-1]), si('Cloutier', npp-nam, 'Cloutier', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(commandant, nc-nom, commandant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(alliées, adj-adj, allié, [dl(0,n,n)-1]), si(terrestres, adj-adj, terrestre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(capturé, vpp-ver:pper, capturer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(pleine, adj-adj, plein, [dr(0,n,n)-1]), si(activité, nc-nom, activité, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(spécifiquement, adv-adv, spécifiquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(415, Result) :-
      prob_parse([ si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), si('Cloutier', npp-nam, 'Cloutier', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Izmir', npp-nam, 'Izmir', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(est, v-ver:pres, être, [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Commandement', nc-nam, 'Commandement', [n-1]), si(allié, adj-adj, allié, [dl(0,n,n)-1]), si('Opérations', npp-nam, 'Opérations', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [n-1]), si('ACO', npp-abr, 'ACO', [n-1]), si(')', ponct-pun, ')', [let-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-abr, 'Otan', [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(dirige, v-ver:pres, diriger, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(416, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(général, adj-adj, général, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), si('Cloutier', npp-nam, 'Cloutier', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouvait, v-ver:impf, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(capturé, vpp-ver:pper, capturer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(ville, nc-nom, ville, [n-1]), si(assiégée, vpp-ver:pper, assiéger, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(417, Result) :-
      prob_parse([ si('Roger', npp-nam, 'Roger', [dr(0,np,np)-1]), si('Cloutier', npp-nam, 'Cloutier', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('lieutenant-général', adj-adj, 'lieutenant-général', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(virales, adj-adj, viral, [dl(0,n,n)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(418, Result) :-
      prob_parse([ si('Joint', nc-nom, 'Joint', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(boutiques, nc-nom, boutique, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(mêlant, vpr-ver:ppre, mêler, [dr(0,dr(0,dl(0,n,n),pp_a),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(logo, nc-nom, logo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marque, nc-nom, marque, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(issues, vpp-ver:pper, issu, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(photomontages, nc-nom, photomontage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(boutiques, nc-nom, boutique, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(taguées, vpp-ver:pper, taguer, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(419, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(prétend, v-ver:pres, prétendre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(montrer, vinf-ver:infi, montrer, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(enseignes, nc-nom, enseigne, [n-1]), si(parisiennes, adj-adj, parisien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marque, nc-nom, marque, [n-1]), si('Chanel', npp-nam, 'Chanel', [dl(0,n,n)-1]), si(recouvertes, vpp-ver:pper, recouvrir, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(autocollant, nc-nom, autocollant, [n-1]), si(mêlant, vpr-ver:ppre, mêler, [dr(0,dr(0,dl(0,n,n),pp_a),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(logo, nc-nom, logo, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(visage, nc-nom, visage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(référence, nc-nom, référence, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(passif, nc-nom, passif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Coco', npp-nam, 'Coco', [dr(0,np,np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nazis, nc-nom, nazi, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(420, Result) :-
      prob_parse([ si('Chanel', npp-nam, 'Chanel', [np-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(boutiques, nc-nom, boutique, [n-1]), si(parisiennes, adj-adj, parisien, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(taguées, vpp-ver:pper, taguer, [dl(0,np,s_pass)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(autocollants, nc-nom, autocollant, [n-1]), si(mêlant, vpr-ver:ppre, mêler, [dr(0,dr(0,dl(0,n,n),pp_a),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(logo, nc-nom, logo, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(visage, nc-nom, visage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(421, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(autocollants, nc-nom, autocollant, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effigie, nc-nom, effigie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(apparus, vpp-ver:pper, apparaître, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(abritant, vpr-ver:ppre, abriter, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bureaux, nc-nom, bureau, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(boutiques, nc-nom, boutique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(422, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(lieu, nc-nom, lieu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(leader, nc-nom, leader, [n-1]), si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(logo, nc-nom, logo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(423, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(règlementation, nc-nom, règlementation, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si(oblige, v-ver:pres, obliger, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(clients, nc-nom, client, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(exporter, vinf-ver:infi, exporter, [dr(0,dl(0,np,s_inf),np)-1]), si('[vers', ponct-prp, '[vers', [let-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si('Russie]', nc-nam, 'Russie]', [dr(0,np,n)-1]), si(les, det-det:art, le, [n-1]), si(articles, nc-nom, article, [let-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si('[la]', ponct-pun:cit, '[le]', [n-1]), si(marque, nc-nom, marque, [dr(0,dl(0,n,n),np)-1]), si(achetés, vpp-ver:pper, acheter, [let-1]), si(à, p-prp, à, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [let-1]), si(étranger, nc-nom, étranger, [n-1]), si('.', ponct-pun, '.', [dr(0,dl(0,n,n),pp_a)-1]), si('"', ponct-pun:cit, '"', [dr(0,pp_a,np)-1])], Result).
sent(424, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(affirmé, vpp-ver:pper, affirmer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(contraintes, nc-nom, contraindre, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réaliser, vinf-ver:infi, réaliser, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(achat, nc-nom, achat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(boutique, nc-nom, boutique, [n-1]), si('Chanel', npp-nam, 'Chanel', [dl(0,n,n)-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étranger, nc-nom, étranger, [n-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(les, clo-pro:per, le, [dr(0,dl(0,n,n),dr(0,dl(0,n,n),dia(1,box(1,np))))-1]), si(engageant, vpr-ver:ppre, engager, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(exporter, vinf-ver:infi, exporter, [dr(0,dl(0,np,s_inf),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(origine, nc-nom, origine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(425, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), si(57, det-num, 57, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Gabrielle', npp-nam, 'Gabrielle', [dr(0,np,np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si(tombe, v-ver:pres, tombe, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(amoureuse, adj-adj, amoureux, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Hans', npp-nam, 'Hans', [dr(0,np,np)-1]), si('Günther', npp-nam, 'Günther', [np-1]), si(von, npp-nam, von, [dr(0,dl(0,np,np),np)-1]), si('Dincklage', npp-nam, 'Dincklage', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(426, Result) :-
      prob_parse([ si('Sans', p-prp, 'Sans', [dr(0,dr(0,np,np),n)-1]), si(doute, nc-nom, doute, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(espion, nc-nom, espion, [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(427, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(vivent, v-ver:pres, vivre, [dr(0,dl(0,np,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(liaison, nc-nom, liaison, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immense, adj-adj, immense, [dr(0,n,n)-1]), si(suite, nc-nom, suite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si('Ritz', npp-nam, 'Ritz', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(louée, vpp-ver:pper, louer, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1937, pro-num, 1937, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(428, Result) :-
      prob_parse([ si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),np)-1]), si(1942, pro-num, 1942, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(1943, pro-num, 1943, [np-1]), si(',', ponct-pun, ',', [let-1]), si('[Coco]', ponct-pun, '[Coco]', [let-1]), si('Chanel', npp-nam, 'Chanel', [dr(0,np,np)-1]), si(a, v-ver:pres, avoir, [let-1]), si(été, vpp-ver:pper, être, [np-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(maîtresse, nc-nom, maîtresse, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si(espion, nc-nom, espion, [dr(0,dl(0,n,n),np)-1]), si(allemand, adj-adj, allemand, [dr(0,np,n)-1]), si('Gunter', npp-nam, 'Gunter', [n-1]), si('Von', npp-nam, 'Von', [dl(0,n,n)-1]), si('Dinklage', npp-nam, 'Dinklage', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(429, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(biographie, nc-nom, biographie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Coco', npp-nam, 'Coco', [dr(0,np,np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2011, pro-num, 2011, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('Chanel', npp-nam, 'Chanel', [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(détenu, vpp-ver:pper, détenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(famille, nc-nom, famille, [n-1]), si('Wertheimer', npp-nam, 'Wertheimer', [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(dément, v-ver:pres, démentir, [dr(0,dl(0,np,s),s_q)-1]), si(aussi, adv-adv, aussi, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(fermement, adv-adv, fermement, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Coco', npp-nam, 'Coco', [dr(0,np,np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(antisémite, adj-adj, antisémite, [dl(0,n,n)-1]), si(tout, adv-adv, tout, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(soulignant, vpr-ver:ppre, souligner, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(conserve, v-ver:pres, conserve, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mystère, nc-nom, mystère, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(430, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Hal', npp-nam, 'Hal', [dl(0,n,n)-1]), si('Vaughan', npp-nam, 'Vaughan', [dl(0,n,n)-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),pp)-1]), si(loin, adv-adv, loin, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(révélations, nc-nom, révélation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2011, pro-num, 2011, [np-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(biographie, nc-nom, biographie, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Au', p+d-prp:det, 'Au', [dr(0,dl(0,n,n),n)-1]), si(lit, nc-nom, lit, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ennemi, nc-nom, ennemi, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(secrète, adj-adj, secret, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Coco', npp-nam, 'Coco', [dr(0,np,np)-1]), si('Chanel', npp-nam, 'Chanel', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(431, Result) :-
      prob_parse([ si('Documents', nc-nom, 'Documents', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appui, nc-nom, appui, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), si('Vaughan', npp-nam, 'Vaughan', [np-1]), si(écrit, v-ver:pres, écrire, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(recrutée, vpp-ver:pper, recruter, [dl(0,np,s_pass)-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), si(1940, pro-num, 1940, [np-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(agent, nc-nom, agent, [n-1]), si(secret, adj-adj, secret, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(régime, nc-nom, régime, [n-1]), si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(432, Result) :-
      prob_parse([ si('Nom', nc-nom, 'Nom', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(code, nc-nom, code, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si('Westminster', npp-nam, 'Westminster', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(433, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(anticommuniste, nc-nom, anticommuniste, [n-1]), si(forcenée, adj-adj, forcener, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(antisémite, adj-adj, antisémite, [n-1]), si(confirmée, vpp-ver:pper, confirmer, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(1,s,s),np)-1]), si('-t-il', cls-pro:per, '-t-il', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(434, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('T-shirt', nc-nom, 'T-shirt', [n-1]), si(arborant, vpr-ver:ppre, arborer, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(croix, nc-nom, croix, [n-1]), si(ukronazie, adj-adj, ukronazi, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(interventions, nc-nom, intervention, [n-1]), si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(élus, nc-nom, élu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(435, Result) :-
      prob_parse([ si('Ces', det-pro:dem, 'Ces', [dr(0,dr(0,s,s),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(enchaîné, vpp-ver:pper, enchaîner, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(interventions, nc-nom, intervention, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(visioconférence, nc-nom, visioconférence, [n-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(élus, nc-nom, élu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(appelant, vpr-ver:ppre, appeler, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(436, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('T-shirt', nc-nom, 'T-shirt', [n-1]), si(arborant, vpr-ver:ppre, arborer, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(croix, nc-nom, croix, [n-1]), si(ukronazie, adj-adj, ukronazi, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(interventions, nc-nom, intervention, [n-1]), si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(élus, nc-nom, élu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(437, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('T-shirt', nc-nam, 'T-shirt', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(emblème, nc-nom, emblème, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(438, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(historiens, nc-nom, historien, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(experts, nc-nom, expert, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(héraldique, nc-nom, héraldique, [n-1]), si(interrogés, vpp-ver:pper, interroger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [let-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(lié, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(symbolisme, nc-nom, symbolisme, [n-1]), si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(plutôt, adv-adv, plutôt, [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(héritage, nc-nom, héritage, [n-1]), si(cosaque, adj-adj, cosaque, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(439, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('T-shirt', nc-nom, 'T-shirt', [n-1]), si(arborant, vpr-ver:ppre, arborer, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(croix, nc-nom, croix, [n-1]), si(ukronazie, adj-adj, ukronazi, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(interventions, nc-nom, intervention, [n-1]), si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(élus, nc-nom, élu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(440, Result) :-
      prob_parse([ si('Interrogé', vpp-ver:pper, 'Interrogé', [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prétendus, adj-adj, prétendre, [dr(0,n,n)-1]), si(liens, nc-nom, lien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(apparaissant, vpr-ver:ppre, apparaître, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('T-shirt', nc-nom, 'T-shirt', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Ligue', nc-nam, 'Ligue', [n-1]), si('anti-diffamation', adj-adj, 'anti-diffamation', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('ALD', npp-abr, 'ALD', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(organisation, nc-nom, organisation, [n-1]), si('non-gouvernementale', adj-adj, 'non-gouvernementale', [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(traque, v-ver:pres, traque, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(références, nc-nom, référence, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(antisémitisme, nc-nom, antisémitisme, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ainsi, adv-adv, ainsi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vérifié, vpp-ver:pper, vérifier, [dl(0,np,s_ppart)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(experts, nc-nom, expert, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(symboles, nc-nom, symbole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haine, nc-nom, haine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(armoiries, nc-nom, armoirie, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(441, Result) :-
      prob_parse([ si('Pas', adv-adv, 'Pas', [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haine, nc-nom, haine, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(442, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(historien, nc-nom, historien, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Alexandre', npp-nam, 'Alexandre', [dl(0,n,n)-1]), si('Borisovich', npp-nam, 'Borisovich', [dl(0,n,n)-1]), si('Muravyov', npp-nam, 'Muravyov', [dl(0,n,n)-1]), si(expliquait, v-ver:impf, expliquer, [dr(0,dl(0,np,s),s_q)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Almanach', nc-nam, 'Almanach', [n-1]), si('militaro-historique', adj-adj, 'militaro-historique', [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(que, cs-kon, que, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(utilisée, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2006, pro-num, 2006, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nouvel, adj-adj, nouveau, [dr(0,np,n)-1]), si(emblème, nc-nom, emblème, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [dl(0,n,n)-1]), si(inspirait, v-ver:impf, inspirer, [cl_r-1]), si(de, p-prp, de, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(drapeaux, nc-nom, drapeau, [n-1]), si(cosaques, adj-adj, cosaque, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(y, clo-pro:per, y, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(mentionnait, v-ver:impf, mentionner, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(références, nc-nom, référence, [dr(0,np,n)-1]), si(aux, p+d-prp:det, à, [n-1]), si(traditions, nc-nom, tradition, [n-1]), si(cosaques, adj-adj, cosaque, [dl(0,n,n)-1]), si(utilisées, vpp-ver:pper, utiliser, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),pp)-1]), si(les, det-det:art, le, [dl(0,n,n)-1]), si(symboles, nc-nom, symbole, [dr(0,np,n)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si(armée, nc-nom, armée, [n-1]), si('d\'', p-prp, 'd\'', [n-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(443, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('T-shirt', nc-nam, 'T-shirt', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(emblème, nc-nom, emblème, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(444, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(historiens, nc-nom, historien, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(experts, nc-nom, expert, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(héraldique, nc-nom, héraldique, [n-1]), si(interrogés, vpp-ver:pper, interroger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [let-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(lié, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(symbolisme, nc-nom, symbolisme, [n-1]), si(nazi, adj-adj, nazi, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(plutôt, adv-adv, plutôt, [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(héritage, nc-nom, héritage, [n-1]), si(cosaque, adj-adj, cosaque, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(445, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(pourpre, adj-adj, pourpre, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(emblème, nc-nom, emblème, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(symbolise, v-ver:pres, symboliser, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fidélité, nc-nom, fidélité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(traditions, nc-nom, tradition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(défenseurs, nc-nom, défenseur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(446, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(emblème, nc-nom, emblème, [n-1]), si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(pourpre, adj-adj, pourpre, [dl(0,n,n)-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dévotion, nc-nom, dévotion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(meilleures, adj-adj, meilleur, [dr(0,n,n)-1]), si(traditions, nc-nom, tradition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(défenseurs, nc-nom, défenseur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(patrie, nc-nom, patrie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(447, Result) :-
      prob_parse([ si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(confession, nc-nom, confession, [n-1]), si(juive, adj-adj, juif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(famille, nc-nom, famille, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Holocauste', npp-nam, 'Holocauste', [n-1]), si(',', ponct-pun, ',', [let-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(seconde, adj-num, second, [dr(0,n,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(relaté, vpp-ver:pper, relater, [dr(0,dl(0,np,s_ppart),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(0,np,s_ppart),np)-1]), si(médias, nc-nom, média, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(448, Result) :-
      prob_parse([ si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confié, vpp-ver:pper, confier, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(journal, nc-nom, journal, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Times', npp-nam, 'Times', [np-1]), si(of, et-prp, of, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si(venir, vinf-ver:infi, venir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),pp)-1]), si(une, det-det:art, un, [dr(0,pp_de,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(famille, nc-nom, famille, [n-1]), si(juive, adj-adj, juif, [dl(0,n,n)-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si(traditionnelle, adj-adj, traditionnel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(449, Result) :-
      prob_parse([ si('L\'emblème', nc-nom, 'L\'emblème', [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(forces, nc-nom, force, [dr(0,dl(0,n,n),n)-1]), si(armées, adj-adj, armé, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),pp)-1]), si(le, det-det:art, le, [dr(0,pp,np)-1]), si('T-shirt', nc-nom, 'T-shirt', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,dl(0,n,n),np)-1]), si('Zelensky', npp-nam, 'Zelensky', [dr(0,np,np)-1]), si('"', ponct-pun:cit, '"', [np-1]), si(peut, v-ver:pres, pouvoir, [let-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(décrit, vpp-ver:pper, décrire, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(',', ponct-pun, ',', [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [let-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si(terminologie, nc-nom, terminologie, [dr(0,np,n)-1]), si(héraldique, adj-adj, héraldique, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(comme, adv-adv, comme, [let-1]), si(une, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(croix, nc-nom, croix, [dr(0,np,n)-1]), si(grecque, adj-adj, grec, [n-1]), si(cunéiforme, adj-adj, cunéiforme, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(avec, p-prp, avec, [let-1]), si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),np)-1]), si(centre, nc-nom, centre, [let-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [n-1]), si(médaillon, nc-nom, médaillon, [dr(0,np,n)-1]), si(rond, adj-adj, rond, [n-1]), si(portant, vpr-ver:ppre, porter, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(signe, nc-nom, signe, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(trident, nc-nom, trident, [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si('Grand', npp-nam, 'Grand', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si('c\'', cls-pro:dem, 'c\'', [let-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(emblème, nc-nom, emblème, [dr(0,np,n)-1]), si(national, adj-adj, national, [n-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dl(0,n,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(450, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(diffère, v-ver:pres, différer, [dr(0,dl(0,np,s),pp)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(expert, nc-nom, expert, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(héraldique, nc-nom, héraldique, [n-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fer, nc-nom, fer, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(quant, adv-adv, quant, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(elle, pro-pro:per, lui, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(silhouette, nc-nom, silhouette, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(pattée, adj-adj, patter, [dl(0,n,n)-1]), si('[dont', ponct-pun, '[dont', [let-1]), si(les, det-det:art, le, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(branches, nc-nom, branche, [dr(0,np,n)-1]), si('s\'', clr-pro:per, 's\'', [n-1]), si(élargissent, v-ver:pres, élargir, [cl_r-1]), si(vers, p-prp, vers, [dl(0,cl_r,dl(0,np,s))-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), si(extérieur, nc-nom, extérieur, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si('ndlr]', ponct-adv, 'ndlr]', [let-1]), si(grecque, adj-adj, grec, [dl(0,np,dl(1,s,s))-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [let-1]), si(se, clr-pro:per, se, [let-1]), si(caractérise, v-ver:pres, caractériser, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(par, p-prp, par, [cl_r-1]), si(sa, det-det:pos, son, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(couleur, nc-nom, couleur, [dr(0,pp_par,np)-1]), si(noire, adj-adj, noir, [dr(0,np,n)-1]), si(et, cc-kon, et, [n-1]), si(sa, det-det:pos, son, [dl(0,n,n)-1]), si(bordure, nc-nom, bordure, [dr(0,dl(0,np,np),np)-1]), si(argentée, vpp-ver:pper, argenté, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(451, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(emblème, nc-nom, emblème, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(différent, adj-adj, différent, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fer, nc-nom, fer, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(452, Result) :-
      prob_parse([ si('L\'emblème', nc-nom, 'L\'emblème', [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(forces, nc-nom, force, [dr(0,dl(0,n,n),n)-1]), si(armées, adj-adj, armé, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), si(est, v-ver:pres, être, [n-1]), si(une, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(croix, nc-nom, croix, [dr(0,np,n)-1]), si(équilatérale, adj-adj, équilatéral, [n-1]), si(droite, nc-nom, droit, [dl(0,n,n)-1]), si(à, p-prp, à, [dl(0,n,n)-1]), si(branches, nc-nom, branche, [dr(0,dl(0,n,n),n)-1]), si(divergentes, adj-adj, divergent, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(couleur, nc-nom, couleur, [dr(0,dl(0,n,n),n)-1]), si(pourpre, adj-adj, pourpre, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [let-1]), si(centre, nc-nom, centre, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,n,n),s)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(représenté, vpp-ver:pper, représenter, [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), si(',', ponct-pun, ',', [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [let-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(médaillon, nc-nom, médaillon, [dr(0,np,n)-1]), si(rond, adj-adj, rond, [n-1]), si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [let-1]), si(emblème, nc-nom, emblème, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('État', nc-nam, 'État', [dr(0,np,n)-1]), si(princier, adj-adj, princier, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [np-1]), si('Grand', adj-nam, 'Grand', [np-1]), si('[le', p+d-det:art, '[le', [dr(0,dl(0,np,np),np)-1]), si('grand-prince', nc-nom, 'grand-prince', [dr(0,dl(0,np,np),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si('Kiev', npp-nam, 'Kiev', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),np)-1]), si('Xe', adj-num, 'Xe', [np-1]), si(siècle, nc-nom, siècle, [dr(0,dl(0,np,np),n)-1]), si(',', ponct-pun, ',', [dr(0,n,n)-1]), si(considéré, vpp-ver:pper, considérer, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(une, nc-num, un, [dr(0,dl(0,n,n),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(figures, nc-nom, figure, [dr(0,np,n)-1]), si(les, det-det:art, le, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,np),n)-1]), si(importantes, adj-adj, important, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('l\'', det-det:art, 'l\'', [dl(0,n,n)-1]), si(histoire, nc-nom, histoire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [dr(0,np,n)-1]), si('ndlr]', ponct-pun, 'ndlr]', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(453, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(hauteur, nc-nom, hauteur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médaillon, nc-nom, médaillon, [n-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(cinquièmes, nc-nom, cinquième, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hauteur, nc-nom, hauteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(454, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(bords, nc-nom, bord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(croix, nc-nom, croix, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médaillon, nc-nom, médaillon, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dorés, vpp-ver:pper, dorer, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(455, Result) :-
      prob_parse([ si('Ladislav', npp-nam, 'Ladislav', [dr(0,np,np)-1]), si('Vrtel', npp-nam, 'Vrtel', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(dirige, v-ver:pres, diriger, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(héraldique, nc-nom, héraldique, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Intérieur', nc-nom, 'Intérieur', [n-1]), si(slovaque, adj-adj, slovaque, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(expliquait, v-ver:impf, expliquer, [let-1]), si(à, p-prp, à, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(23, adj-num, 23, [dr(0,dl(1,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si(que, cs-kon, que, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,s_q,s)-1]), si(emblème, nc-nom, emblème, [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(forces, nc-nom, force, [dr(0,dl(0,n,n),n)-1]), si(armées, adj-adj, armé, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(décrit, vpp-ver:pper, décrire, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(',', ponct-pun, ',', [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [let-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si(terminologie, nc-nom, terminologie, [dr(0,np,n)-1]), si(héraldique, adj-adj, héraldique, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(comme, adv-adv, comme, [let-1]), si(une, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(croix, nc-nom, croix, [dr(0,np,n)-1]), si(grecque, adj-adj, grec, [n-1]), si(cunéiforme, adj-adj, cunéiforme, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(avec, p-prp, avec, [let-1]), si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), si(au, p+d-prp:det, au, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(',', ponct-pun, ',', [n-1]), si(un, det-det:art, un, [n-1]), si(médaillon, nc-nom, médaillon, [dr(0,np,n)-1]), si(rond, adj-adj, rond, [dr(0,np,n)-1]), si(portant, vpr-ver:ppre, porter, [dr(0,np,n)-1]), si(le, det-det:art, le, [n-1]), si(signe, nc-nom, signe, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(trident, nc-nom, trident, [n-1]), si(de, p-prp, de, [n-1]), si('Vladimir', npp-nam, 'Vladimir', [n-1]), si(le, det-det:art, le, [np-1]), si('Grand', npp-nam, 'Grand', [np-1]), si(',', ponct-pun, ',', [np-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [np-1]), si('l\'', det-det:art, 'l\'', [np-1]), si(emblème, nc-nom, emblème, [dr(0,np,n)-1]), si(national, adj-adj, national, [dr(0,np,n)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(456, Result) :-
      prob_parse([ si('CNN', npp-abr, 'CNN', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(cause, nc-nom, cause, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(457, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(virales, adj-adj, viral, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(diffusé, vpp-ver:pper, diffuser, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(assurant, vpr-ver:ppre, assurer, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(cause, v-ver:pres, cause, [dr(0,dl(0,np,s),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(458, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(samedi, nc-nom, samedi, [dr(0,dl(0,n,n),n)-1]), si(2, adj-num, 2, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(petite, adj-adj, petit, [dr(0,n,n)-1]), si(ville, nc-nom, ville, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('nord-ouest', nc-nom, 'nord-ouest', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entraîné, vpp-ver:pper, entraîner, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tollé, nc-nom, tollé, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(459, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(journalistes, nc-nom, journaliste, [n-1]), si('AFP', npp-abr, 'AFP', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si(confirment, v-ver:pres, confirmer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(figurants, nc-nom, figurant, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(bougent, v-ver:pres, bouger, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(460, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passage, nc-nom, passage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(étendus, vpp-ver:pper, étendre, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sol, nc-nom, sol, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(rue, nc-nom, rue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si(voyons, v-ver:pres, voir, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rétroviseur, nc-nom, rétroviseur, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(figurant, nc-ver:ppre, figurant, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(relève, v-ver:pres, relever, [dl(0,cl_r,dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(écrit, v-ver:pres, écrire, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(3, adj-num, 3, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(internaute, nc-nom, internaute, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Twitter', npp-nam, 'Twitter', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(461, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(2, adj-num, 2, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parcouru, vpp-ver:pper, parcourir, [dr(0,dl(0,np,s_ppart),np)-1]), si(toute, adv-adv, tout, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rue, nc-nom, rue, [n-1]), si(deux, det-num, deux, [dr(0,dl(1,s,s),n)-1]), si(fois, nc-nom, fois, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(462, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(compté, vpp-ver:pper, compter, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si('(...)', ponct-pun, '(...)', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(463, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(nous, cls-pro:per, nous, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si(eux, pro-pro:per, lui, [np-1]), si(bouger, vinf-ver:infi, bouger, [dl(0,np,s_inf)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(précisé, vpp-ver:pper, préciser, [dl(1,s,dl(0,np,s_ppart))-1]), si('Danny', npp-nam, 'Danny', [dr(0,np,np)-1]), si('Kemp', npp-nam, 'Kemp', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(464, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passage, nc-nom, passage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(étendus, vpp-ver:pper, étendre, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sol, nc-nom, sol, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rue, nc-nom, rue, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(',', ponct-pun, ',', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si(voyons, v-ver:pres, voir, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rétroviseur, nc-nom, rétroviseur, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(figurant, vpr-ver:ppre, figurant, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(relève, v-ver:pres, relever, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(465, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(civils, nc-nom, civil, [n-1]), si(exécutés, vpp-ver:pper, exécuter, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(manière, nc-nom, manière, [n-1]), si(arbitraire, adj-adj, arbitraire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(atrocités, nc-nom, atrocité, [n-1]), si(commises, vpp-ver:pper, commettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(occupants, nc-nom, occupant, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(466, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(publications, nc-nom, publication, [n-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(',', ponct-pun, ',', [dr(0,dl(1,s,s),n)-1]), si(images, nc-nom, image, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appui, nc-nom, appui, [n-1]), si(',', ponct-pun, ',', [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(scène, nc-nom, scène, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(467, Result) :-
      prob_parse([ si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(dément, v-ver:pres, démentir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(massacre, nc-nom, massacre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(468, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(corps, nc-nom, corps, [n-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(satellite, adj-adj, satellite, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(fournie, vpp-ver:pper, fournir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Maxar', npp-nam, 'Maxar', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(datée, vpp-ver:pper, dater, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(19, adj-num, 19, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(',', ponct-pun, ',', [let-1]), si(apparaissent, v-ver:pres, apparaître, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(position, nc-nom, position, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sol, nc-nom, sol, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(endroit, nc-nom, endroit, [n-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [let-1]), si(prises, vpp-ver:pper, prendre, [dl(0,n,n)-1]), si(deux, det-num, deux, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n)))-1]), si(tard, adv-adv, tard, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(469, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(images, nc-nom, image, [n-1]), si(haute, adj-adj, haut, [dr(0,dl(0,n,n),n)-1]), si(résolution, nc-nom, résolution, [n-1]), si('(...)', ponct-pun, '(...)', [let-1]), si(corroborent, v-ver:pres, corroborer, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(récentes, adj-adj, récent, [dr(0,n,n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(photos, nc-nom, photo, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(révélant, vpr-ver:ppre, révéler, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(corps, nc-nom, corps, [n-1]), si(étendus, vpp-ver:pper, étendre, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si('(', ponct-pun, '(', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boutcha', npp-nam, 'Boutcha', [np-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(abandonnés, vpp-ver:pper, abandonner, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(470, Result) :-
      prob_parse([ si('Lundi', nc-nom, 'Lundi', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Kremlin', npp-nam, 'Kremlin', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(catégoriquement, adv-adv, catégoriquement, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accusations, nc-nom, accusation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(massacre, nc-nom, massacre, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(assurant, vpr-ver:ppre, assurer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(experts, nc-nom, expert, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nom, 'Défense', [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(signes, nc-nom, signe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(falsifications, nc-nom, falsification, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(présentées, vpp-ver:pper, présenter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(471, Result) :-
      prob_parse([ si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(dément, v-ver:pres, démentir, [dr(0,dl(0,np,s),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(exaction, nc-nom, exaction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(allait, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(provocation, nc-nom, provocation, [n-1]), si(haineuse, adj-adj, haineux, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(vise, v-ver:pres, viser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(elle, pro-pro:per, lui, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(discréditer, vinf-ver:infi, discréditer, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(472, Result) :-
      prob_parse([ si('TikTok', npp-nam, 'TikTok', [np-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(dédié, vpp-ver:pper, dédier, [dr(0,dl(0,np,s_ppart),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(moyens, nc-nom, moyen, [n-1]), si(renforcés, vpp-ver:pper, renforcer, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(menaces, nc-nom, menace, [n-1]), si(émergentes, adj-adj, émergent, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plateforme, nc-nom, plateforme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(retirer, vinf-ver:infi, retirer, [dr(0,dl(0,np,s_inf),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(désinformation, nc-nom, désinformation, [n-1]), si(préjudiciable, adj-adj, préjudiciable, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(473, Result) :-
      prob_parse([ si('TikTok', npp-nam, 'TikTok', [np-1]), si(travaille, v-ver:pres, travailler, [dl(0,np,s)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(médias, nc-nom, média, [n-1]), si(internationaux, adj-adj, international, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(examinent, v-ver:pres, examiner, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(contenus, nc-nom, contenu, [n-1]), si(susceptibles, adj-adj, susceptible, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(véhiculer, vinf-ver:infi, véhiculer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fausses, adj-adj, faux, [dr(0,n,n)-1]), si(informations, nc-nom, information, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(474, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(actualité, nc-nom, actualité, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Freedom', npp-nam, 'Freedom', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(diffusé, vpp-ver:pper, diffuser, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(direct, nc-nom, direct, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Youtube', npp-nam, 'Youtube', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(475, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(émission, nc-nom, émission, [n-1]), si(',', ponct-pun, ',', [let-1]), si(personne, pro-pro:ind, personne, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(précipite, v-ver:pres, précipiter, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plateau, nc-nom, plateau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(suit, v-ver:pres, suivre, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(cours, nc-nom, cours, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(interview, nc-nom, interview, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(distance, nc-nom, distance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conseiller, nc-nom, conseiller, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Oleksiy', npp-nam, 'Oleksiy', [dr(0,np,np)-1]), si('Arestovych', npp-nam, 'Arestovych', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(476, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interrompu, vpp-ver:pper, interrompre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(célèbre, adj-adj, célèbre, [dr(0,n,n)-1]), si('JT', nc-abr, 'JT', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Freedom', npp-nam, 'Freedom', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(pancarte, nc-nom, pancarte, [n-1]), si(surgissant, vpr-ver:ppre, surgir, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(plateau, nc-nom, plateau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(demander, vinf-ver:infi, demander, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(président, nc-nom, président, [n-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(capituler, vinf-ver:infi, capituler, [dl(0,np,s_inf)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(477, Result) :-
      prob_parse([ si('L\'actuel', nc-nam, 'L\'actuel', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,n,n)-1]), si(chef, nc-nom, chef, [let-1]), si(adjoint, adj-adj, adjoint, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(police, nc-nom, police, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Kiev', npp-nam, 'Kiev', [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [np-1]), si(est, v-ver:pres, être, [let-1]), si('Artem', npp-nam, 'Artem', [dr(0,dl(0,np,s),np)-1]), si('Bonov', npp-nam, 'Bonov', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), si(homme, nc-nom, homme, [dr(0,np,n)-1]), si(au, p+d-prp:det, au, [n-1]), si(torse, nc-nom, torse, [dr(0,dl(0,n,n),n)-1]), si(et, cc-kon, et, [n-1]), si(crâne, nc-nom, crâne, [dr(0,dl(0,n,n),n)-1]), si(bardés, vpp-ver:pper, barder, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),pp_de)-1]), si(tatouages, nc-nom, tatouage, [dr(0,pp_de,n)-1]), si(',', ponct-pun, ',', [n-1]), si(dont, prorel-pro:rel, dont, [let-1]), si(certains, pro-pro:ind, certain, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(représentent, v-ver:pres, représenter, [np-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,np,s),np)-1]), si(symboles, nc-nom, symbole, [dr(0,np,n)-1]), si(nazis, adj-adj, nazi, [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(478, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(nomme, v-ver:pres, nommer, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si('Andrey', npp-nam, 'Andrey', [dr(0,np,np)-1]), si('Anatolyevich', npp-nam, 'Anatolyevich', [dr(0,np,np)-1]), si('Nebitov', npp-nam, 'Nebitov', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(cite, v-ver:pres, citer, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(quatre, adj-num, quatre, [dr(0,n,n)-1]), si(chefs, nc-nom, chef, [n-1]), si(adjoints, adj-adj, adjoint, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(aucun, pro-pro:ind, aucun, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(479, Result) :-
      prob_parse([ si('Je', cls-pro:per, 'Je', [np-1]), si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(présente, v-ver:pres, présente, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(tatouages, nc-nom, tatouage, [n-1]), si(nazis, adj-adj, nazi, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(directeur, nc-nom, directeur, [np-1]), si(adjoint, adj-adj, adjoint, [dl(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(480, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(cite, v-ver:pres, citer, [dr(0,dl(0,np,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(quatre, adj-num, quatre, [dr(0,n,n)-1]), si(chefs, nc-nom, chef, [n-1]), si(adjoints, adj-adj, adjoint, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(aucun, pro-pro:ind, aucun, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(tatouages, nc-nom, tatouage, [n-1]), si(semblables, adj-adj, semblable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(481, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(cite, v-ver:pres, citer, [dr(0,dl(0,np,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(quatre, adj-num, quatre, [dr(0,n,n)-1]), si(chefs, nc-nom, chef, [n-1]), si(adjoints, adj-adj, adjoint, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(aucun, pro-pro:ind, aucun, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(tatouages, nc-nom, tatouage, [n-1]), si(semblables, adj-adj, semblable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(482, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [dr(0,np,np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(apparait, v-ver:pres, apparer, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(chef, nc-nom, chef, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(chef, nc-nom, chef, [n-1]), si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernière, nc-nom, dernier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(483, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(direction, nc-nom, direction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(unité, nc-nom, unité, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ressemble, v-ver:pres, ressembler, [dr(0,dl(0,np,s),pp)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(484, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), si(consultant, vpr-ver:ppre, consulter, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(archives, nc-nom, archive, [n-1]), si(sauvegardées, vpp-ver:pper, sauvegarder, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(',', ponct-pun, ',', [let-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(date, nc-nom, date, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(poste, nc-nom, poste, [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(nulle, adj-adj, nulle, [dr(0,dl(1,s,s),n)-1]), si(part, nc-nom, part, [n-1]), si(mention, nc-nom, mention, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(485, Result) :-
      prob_parse([ si('Ni', cc-kon, 'Ni', [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('Twitter', npp-abr, 'Twitter', [dl(0,n,n)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('YouTube', npp-nam, 'YouTube', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mentionnent, v-ver:pres, mentionner, [dr(0,dl(0,np,s),np)-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(tatouages, nc-nom, tatouage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(486, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(mention, nc-nom, mention, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(archives, nc-nom, archive, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(kievienne, adj-adj, kievienn, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2019, pro-num, 2019, [np-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(date, nc-nom, date, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(poste, nc-nom, poste, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(487, Result) :-
      prob_parse([ si('Cet', det-pro:dem, 'Cet', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(apparaît, v-ver:pres, apparaître, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(outre, adv-adv, outre, [n-1]), si(ni, cc-kon, ni, [dr(0,pp,pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si('Facebook', npp-nam, 'Facebook', [dl(0,n,n)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,pp,pp),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('YouTube', npp-abr, 'YouTube', [dl(0,n,n)-1]), si(officielle, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(488, Result) :-
      prob_parse([ si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si(apparaît, v-ver:pres, apparaître, [dl(0,np,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(vêtu, vpp-ver:pper, vêtir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(semble, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(uniforme, nc-nom, uniforme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(police, nc-nom, police, [n-1]), si(noir, adj-adj, noir, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(489, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(uniforme, nc-nom, uniforme, [n-1]), si(présenté, vpp-ver:pper, présenter, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(ancien, adj-adj, ancien, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(apercevoir, vinf-ver:infi, apercevoir, [dr(0,dl(0,np,s_inf),np)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dos, nc-nom, dos, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(mot, nc-nom, mot, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(militia, et-nom, militia, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(490, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(tels, adj-adj, tel, [dr(0,n,n)-1]), si(uniformes, nc-nom, uniforme, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2015, adj-num, 2015, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(491, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(unique, adj-adj, unique, [dr(0,n,n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(',', ponct-pun, ',', [let-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si(faisait, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(forces, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2015, pro-num, 2015, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(492, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(scandaleuse, adj-adj, scandaleux, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistrée, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(voulaient, v-ver:impf, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(travailler, vinf-ver:infi, travailler, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(interrogés, vpp-ver:pper, interroger, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(auditionnés, vpp-ver:pper, auditionner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(493, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(département, nc-nom, département, [n-1]), si(régional, adj-adj, régional, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Intérieur', nc-nom, 'Intérieur', [n-1]), si(rapporte, v-ver:pres, rapporter, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(figurant, vpr-ver:ppre, figurer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si(scandaleuses, adj-adj, scandaleux, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(policiers, nc-nom, policier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(494, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Corps', nc-nam, 'Corps', [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(branche, nc-nom, branche, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bataillon, nc-nom, bataillon, [n-1]), si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(présenté, vpp-ver:pper, présenter, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Svoboda', npp-nam, 'Svoboda', [np-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(élections, nc-nom, élection, [n-1]), si(législatives, adj-adj, législatif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(siège, nc-nom, siège, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(495, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(existence, nc-nom, existence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(extrême, adj-adj, extrême, [dr(0,n,n)-1]), si(droite, nc-nom, droite, [n-1]), si(politiquement, adv-adv, politiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(institutions, nc-nom, institution, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(limitée, vpp-ver:pper, limité, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(point, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vue, nc-nom, vue, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(496, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(sources, nc-nom, source, [n-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('Artem', npp-nam, 'Artem', [dr(0,np,np)-1]), si('Bonov', npp-nam, 'Bonov', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(bataillon, nc-nom, bataillon, [n-1]), si('Azov', npp-nam, 'Azov', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(très, adv-adv, très, [dr(0,np,pp_de)-1]), si(peu, adv-adv, peu, [dr(0,pp_de,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(informations, nc-nom, information, [n-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(réelle, adj-adj, réel, [dr(0,n,n)-1]), si(implication, nc-nom, implication, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(497, Result) :-
      prob_parse([ si('D\'anciennes', adj-adj, 'D\'anciennes', [dr(0,np,n)-1]), si(archives, nc-nom, archive, [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(page, nc-nom, page, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si('Artem', npp-nam, 'Artem', [dr(0,dl(0,n,n),np)-1]), si('Bonov', npp-nam, 'Bonov', [dr(0,np,np)-1]), si(sur, p-prp, sur, [np-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(réseau, nc-nom, réseau, [dr(0,np,n)-1]), si(social, adj-adj, social, [n-1]), si('VKontakte', npp-nam, 'VKontakte', [dl(0,n,n)-1]), si(montrent, v-ver:pres, montrer, [dl(0,n,n)-1]), si(des, det-prp:det, un, [dr(0,dl(0,np,s),np)-1]), si(mentions, nc-nom, mention, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(fois, nc-nom, fois, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si('Azov', npp-nam, 'Azov', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [np-1]), si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(division, nc-nom, division, [let-1]), si('Misanthropique', npp-nam, 'Misanthropique', [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), si(groupe, nc-nom, groupe, [dr(0,np,n)-1]), si(néonazi, adj-adj, néonazi, [n-1]), si(apparu, vpp-ver:pper, apparaître, [dl(0,n,n)-1]), si(en, p-prp, en, [dl(0,n,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2014, pro-num, 2014, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(498, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(seconde, adj-num, second, [dr(0,n,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(',', ponct-pun, ',', [let-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(2003, pro-num, 2003, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(2008, pro-num, 2008, [np-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mobilisées, vpp-ver:pper, mobiliser, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(499, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('5.000', det-num, '5.000', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appui, nc-nom, appui, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si('Iraqi', npp-nam, 'Iraqi', [dl(0,n,n)-1]), si('Freedom', npp-nam, 'Freedom', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(500, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(archive, nc-nom, archive, [n-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(circule, v-ver:pres, circuler, [dl(0,np,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(rappeler, vinf-ver:infi, rappeler, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(implication, nc-nom, implication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(invasions, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(occidentaux, nc-nom, occidental, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(501, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si('M1A1', npp-abr, 'M1A1', [dl(0,n,n)-1]), si('Abrams', npp-nam, 'Abrams', [dl(0,n,n)-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(502, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(char, nc-nom, char, [n-1]), si('M1A1', npp-nam, 'M1A1', [dl(0,n,n)-1]), si('Abrams', npp-nam, 'Abrams', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déployé, vpp-ver:pper, déployer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(503, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dispose, v-ver:pres, disposer, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(chars, nc-nom, char, [n-1]), si('M1A1', npp-nam, 'M1A1', [dl(0,n,n)-1]), si('Abrams', npp-nam, 'Abrams', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(504, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(relayée, vpp-ver:pper, relayer, [dl(0,n,n)-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(habillé, vpp-ver:pper, habiller, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(armoiries, nc-nom, armoirie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fresque, nc-nom, fresque, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dictateur, nc-nom, dictateur, [n-1]), si(irakien, adj-adj, irakien, [dl(0,n,n)-1]), si('Saddam', npp-nam, 'Saddam', [dl(0,n,n)-1]), si('Hussein', npp-nam, 'Hussein', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(2003, pro-num, 2003, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(2008, pro-num, 2008, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(505, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ex-militaire', nc-nom, 'ex-militaire', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(contributeur, nc-nom, contributeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(journal, nc-nom, journal, [n-1]), si(spécialisé, vpp-ver:pper, spécialiser, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(questions, nc-nom, question, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si('Bangladesh', npp-nam, 'Bangladesh', [dl(0,n,n)-1]), si('Defence', npp-nam, 'Defence', [dr(0,n,n)-1]), si('Journal', npp-nam, 'Journal', [dl(0,n,n)-1]), si('A.', npp-abr, 'A.', [dl(0,n,n)-1]), si('R', nc-abr, 'R', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(506, Result) :-
      prob_parse([ si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Shahidul', npp-nam, 'Shahidul', [dr(0,np,np)-1]), si('Islam', npp-nam, 'Islam', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tank, nc-nom, tank, [n-1]), si(présent, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(doute, nc-nom, doute, [n-1]), si(',', ponct-pun, ',', [let-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fresque, nc-nom, fresque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Hussein', npp-nam, 'Hussein', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Koweït', npp-nam, 'Koweït', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(507, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(probablement, adv-adv, probablement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prise, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si(',', ponct-pun, ',', [let-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(508, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(philosophe, nc-nom, philosophe, [n-1]), si('Bernard', npp-nam, 'Bernard', [dl(0,n,n)-1]), si('Henri-Lévy', npp-nam, 'Henri-Lévy', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(voyagé, vpp-ver:pper, voyager, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Odessa', npp-nam, 'Odessa', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(509, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(images, nc-nom, image, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), si('Henri-Lévy', npp-nam, 'Henri-Lévy', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Odessa', npp-nam, 'Odessa', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(510, Result) :-
      prob_parse([ si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), si('Henri-Lévy', npp-nam, 'Henri-Lévy', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(voyagé, vpp-ver:pper, voyager, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Odessa', npp-nam, 'Odessa', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(ville, nc-nom, ville, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(suscitant, vpr-ver:ppre, susciter, [dr(0,dl(0,np,s_ppres),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(critiques, nc-nom, critique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(511, Result) :-
      prob_parse([ si('Friand', npp-nam, 'Friand', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(zones, nc-nom, zone, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Bosnie', npp-nam, 'Bosnie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Libye', npp-nam, 'Libye', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Syrie', npp-nam, 'Syrie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), si('Henri-Lévy', npp-nam, 'Henri-Lévy', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(critiqué, vpp-ver:pper, critiquer, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(choix, nc-nom, choix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(envahie, vpp-ver:pper, envahir, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(512, Result) :-
      prob_parse([ si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), si('Henri-Lévy', npp-nam, 'Henri-Lévy', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Odessa', npp-nam, 'Odessa', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(513, Result) :-
      prob_parse([ si('Bernard', npp-nam, 'Bernard', [dr(0,np,np)-1]), si('Henry-Lévy', npp-nam, 'Henry-Lévy', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(sic, npp-abr, sic, [np-1]), si(')', ponct-pun, ')', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(photographier, vinf-ver:infi, photographier, [dr(0,dl(0,np,s_inf),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(décor, nc-nom, décor, [n-1]), si(falsifié, vpp-ver:pper, falsifier, [dl(0,n,n)-1]), si(monté, vpp-ver:pper, monter, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(studio, nc-nom, studio, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(croire, vinf-ver:infi, croire, [dr(0,dl(0,np,s_inf),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(photographe, nc-nom, photographe, [n-1]), si(pirate, adj-adj, pirate, [dl(0,n,n)-1]), si(photographie, v-ver:pres, photographier, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(studio, nc-nom, studio, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(déroule, v-ver:pres, dérouler, [dr(0,dl(0,cl_r,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(montage, nc-nom, montage, [n-1]), si('!', ponct-pun, '!', [dl(0,s,txt)-1])], Result).
sent(514, Result) :-
      prob_parse([ si('Emeric', npp-nam, 'Emeric', [dr(0,np,np)-1]), si('Fohlen', npp-nam, 'Fohlen', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('J\'ai', cls-prp:det, 'J\'ai', [np-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s_ppart),np)-1]), si(photo, nc-nom, photo, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(cette, det-pro:dem, ce, [dr(0,dl(0,n,n),np)-1]), si(mise, nc-nom, mise, [dr(0,np,n)-1]), si(en, p-prp, en, [n-1]), si(scène, nc-nom, scène, [dr(0,dl(0,n,n),n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(détournée, vpp-ver:pper, détourner, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(par, p-prp, par, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(des, det-prp:det, un, [dr(0,pp_par,np)-1]), si(sites, nc-nom, site, [dr(0,np,n)-1]), si(divers, adj-adj, divers, [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(variés, vpp-ver:pper, varier, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(pour, p-prp, pour, [dl(0,n,n)-1]), si(affirmer, vinf-ver:infi, affirmer, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s_inf),s_q)-1]), si(ce, cls-pro:dem, ce, [dr(0,s_q,s)-1]), si(serait, v-ver:cond, être, [np-1]), si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(montage, nc-nom, montage, [dr(0,np,n)-1]), si(studio, adj-adj, studio, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(515, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(photographe, nc-nom, photographe, [n-1]), si('Emeric', npp-nam, 'Emeric', [dl(0,n,n)-1]), si('Fohlen', npp-nam, 'Fohlen', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(manipulée, vpp-ver:pper, manipuler, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(516, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Wali', nc-nam, 'Wali', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tireur, nc-nom, tireur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(élite, nc-nom, élite, [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si(minutes, nc-nom, minute, [n-1]), si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(action, nc-nom, action, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(oppose, v-ver:pres, opposer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(fin, nc-nom, fin, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(300, det-num, 300, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(subsaharienne, adj-adj, subsaharien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(517, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(sniper, nc-nom, sniper, [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Wali', npp-nam, 'Wali', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dl(0,np,s_ppart),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(518, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(300, det-num, 300, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(subsaharienne, adj-adj, subsaharien, [dl(0,n,n)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sniper, nc-nom, sniper, [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Wali', npp-nam, 'Wali', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(front, nc-nom, front, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(519, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Wali', nc-nam, 'Wali', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vivant, vpr-ver:ppre, vivant, [dl(0,n,n)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(apparition, nc-nom, apparition, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(rumeurs, nc-nom, rumeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(page, nc-nom, page, [n-1]), si('Facebook', npp-abr, 'Facebook', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(interviews, nc-nom, interview, [n-1]), si(vidéos, adj-adj, vidéo, [dl(0,n,n)-1]), si(données, vpp-ver:pper, donner, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(différents, adj-adj, différent, [dr(0,n,n)-1]), si(médias, nc-nom, média, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(520, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Wali', nc-nam, 'Wali', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(membre, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(bataillon, nc-nom, bataillon, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Royal', npp-nam, 'Royal', [dr(0,n,n)-1]), si('22e', adj-num, '22e', [dr(0,n,n)-1]), si('Régiment', nc-nam, 'Régiment', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entré, vpp-ver:pper, entrer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(battre, vinf-ver:infi, battre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(côtés, nc-nom, côté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(521, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Wali', nc-nam, 'Wali', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tireur, nc-nom, tireur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(élite, nc-nom, élite, [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si(minutes, nc-nom, minute, [n-1]), si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(action, nc-nom, action, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(oppose, v-ver:pres, opposer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(fin, nc-nom, fin, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(300, det-num, 300, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(subsaharienne, adj-adj, subsaharien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(522, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Wali', npp-nam, 'Wali', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(interviews, nc-nom, interview, [n-1]), si(vidéos, nc-nom, vidéo, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(une, pro-num, un, [np-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), si(média, nc-nom, média, [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si('CBC', npp-abr, 'CBC', [dl(0,n,n)-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(22, adj-num, 22, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(réaffirme, v-ver:pres, réaffirmer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(vivant, adj-adj, vivant, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(523, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(affirmé, vpp-ver:pper, affirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dl(0,np,s_ppart),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(524, Result) :-
      prob_parse([ si('D\'après', p-prp, 'D\'après', [dr(0,dr(0,s,s),pp)-1]), si(cette, det-pro:dem, ce, [dr(0,pp,np)-1]), si(publication, nc-nom, publication, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(on, cls-pro:per, on, [let-1]), si(situe, v-ver:pres, situer, [np-1]), si(le, det-det:art, le, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(décès, nc-nom, décès, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(soldat, nc-nom, soldat, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('Wali', npp-nam, 'Wali', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(à, p-prp, à, [let-1]), si('Marioupol', npp-nam, 'Marioupol', [dr(0,pp_a,np)-1]), si(',', ponct-pun, ',', [np-1]), si(port, nc-nom, port, [dr(0,dl(0,np,np),n)-1]), si(stratégique, adj-adj, stratégique, [n-1]), si(assiégé, vpp-ver:pper, assiéger, [dl(0,n,n)-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(pilonné, vpp-ver:pper, pilonner, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), si('l\'', det-det:art, 'l\'', [dr(0,pp_par,np)-1]), si(armée, nc-nom, armée, [dr(0,np,n)-1]), si(russe, adj-adj, russe, [n-1]), si(depuis, p-prp, depuis, [dl(0,n,n)-1]), si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [dr(0,n,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(525, Result) :-
      prob_parse([ si('Certaines', pro-pro:ind, 'Certaines', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(publications, nc-nom, publication, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(nous, cls-pro:per, nous, [np-1]), si(vérifions, v-ver:pres, vérifier, [dr(0,dl(0,np,s),np)-1]), si(attribuent, v-ver:pres, attribuer, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Wali', npp-nam, 'Wali', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(sniper, nc-nom, sniper, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(526, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(sniper, nc-nom, sniper, [n-1]), si('Canadien', adj-adj, 'Canadien', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Wali', npp-nam, 'Wali', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(réfute, v-ver:pres, réfuter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(tireur, nc-nom, tireur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(élite, nc-nom, élite, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(prétendent, v-ver:pres, prétendre, [dr(0,dr(0,s,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(527, Result) :-
      prob_parse([ si('Olivier', npp-nam, 'Olivier', [dr(0,np,np)-1]), si('Lavigne-Ortiz', npp-nam, 'Lavigne-Ortiz', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vrai, adj-adj, vrai, [dr(0,n,n)-1]), si(nom, nc-nom, nom, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(0,np,np),s)-1]), si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(précise, v-ver:pres, préciser, [dr(0,dr(0,s,np),np)-1]), si('France24', npp-nam, 'France24', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(caractérisation, nc-nom, caractérisation, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(sniper, nc-nom, sniper, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(confusion, nc-nom, confusion, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(détenteur, nc-nom, détenteur, [n-1]), si(anonyme, adj-adj, anonyme, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(macabre, adj-adj, macabre, [dr(0,n,n)-1]), si(record, nc-nom, record, [n-1]), si(consistant, vpr-ver:ppre, consister, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(abattu, vpp-ver:pper, abattre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(combattant, nc-nom, combattant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('État', nc-nam, 'État', [n-1]), si(islamique, adj-adj, islamique, [dl(0,n,n)-1]), si(à, p-prp, à, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(distance, nc-nom, distance, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Kurdistan', npp-nam, 'Kurdistan', [n-1]), si(irakien, adj-adj, irakien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(528, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(pompiers, nc-nom, pompier, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(portent, v-ver:pres, porter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vestes, nc-nom, veste, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(lire, vinf-ver:infi, lire, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(529, Result) :-
      prob_parse([ si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), si(vestes, nc-nom, veste, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(envoyées, vpp-ver:pper, envoyer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(association, nc-nom, association, [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(pompiers, nc-nom, pompier, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(530, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(association, nc-nom, association, [n-1]), si('Firefighter', npp-nam, 'Firefighter', [dl(0,n,n)-1]), si('Aid', npp-nam, 'Aid', [dl(0,n,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si(',', ponct-pun, ',', [let-1]), si(envoie, v-ver:pres, envoyer, [dr(0,dl(0,np,s),np)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(récupéré, vpp-ver:pper, récupérer, [dl(0,n,n)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(services, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(secours, nc-nom, secours, [n-1]), si(locaux, adj-adj, local, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pompiers, nc-nom, pompier, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(531, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(équipement, nc-nom, équipement, [n-1]), si(aperçu, vpp-ver:pper, apercevoir, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(provient, v-ver:pres, provenir, [dr(0,dl(0,np,s),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Services', nc-nam, 'Services', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(secours, nc-nom, secours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pompiers, nc-nom, pompier, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dépôt, nc-nom, dépôt, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carburant, nc-nom, carburant, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si(récemment, adv-adv, récemment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(532, Result) :-
      prob_parse([ si('Récemment', adv-adv, 'Récemment', [dr(0,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(déroulée, vpp-ver:pper, dérouler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(dépôt, nc-nom, dépôt, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carburant, nc-nom, carburant, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(533, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(visible, adj-adj, visible, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(photographies, nc-nom, photographie, [n-1]), si(prises, vpp-ver:pper, prendre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Lviv', npp-nam, 'Lviv', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(534, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(géolocalisé, vpp-ver:pper, géolocaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Lviv', npp-nam, 'Lviv', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(photographies, nc-nom, photographie, [n-1]), si(prises, vpp-ver:pper, prendre, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(place, nc-nom, place, [n-1]), si(confirment, v-ver:pres, confirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(scène, nc-nom, scène, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(535, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('après-midi', nc-nom, 'après-midi', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(installation, nc-nom, installation, [n-1]), si(industrielle, adj-adj, industriel, [dl(0,n,n)-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), si(on, cls-pro:per, on, [np-1]), si(stocke, v-ver:pres, stocker, [dr(0,dl(0,np,s),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(carburant, nc-nom, carburant, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(maire, nc-nom, maire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Andriy', npp-nam, 'Andriy', [dr(0,np,np)-1]), si('Sadovy', npp-nam, 'Sadovy', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Telegram', npp-nam, 'Telegram', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(536, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lviv', npp-nam, 'Lviv', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouest, nc-nom, ouest, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(dépôt, nc-nom, dépôt, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carburants, nc-nom, carburant, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(blessés, nc-nom, blessé, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(537, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(partagée, vpp-ver:pper, partager, [dr(0,dl(0,n,n),pp)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si('mi-mars', npp-nom, 'mi-mars', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(montre, v-ver:pres, montre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), si(chanter, vinf-ver:infi, chanter, [dl(0,n,n)-1]), si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(538, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(chante, v-ver:pres, cher, [dl(0,np,s)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(539, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(partagée, vpp-ver:pper, partager, [dr(0,dl(0,n,n),pp)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si('mi-mars', npp-nom, 'mi-mars', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(montre, v-ver:pres, montre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), si('Zelenska', npp-nam, 'Zelenska', [dl(0,n,n)-1]), si(chanter, vinf-ver:infi, chanter, [dl(0,n,n)-1]), si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(540, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(inversée, vpp-ver:pper, inverser, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(grâce, nc-nom, grâce, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(outil, nc-nom, outil, [n-1]), si('InVid', npp-nam, 'InVid', [dl(0,n,n)-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(interprètes, nc-nom, interprète, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(541, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), si(iranien, nc-nom, iranien, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Alireza', npp-nam, 'Alireza', [dr(0,np,np)-1]), si('Firouzja', npp-nam, 'Firouzja', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(champions, nc-nom, champion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(échecs, nc-nom, échec, [n-1]), si(',', ponct-pun, ',', [let-1]), si(devait, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tournoi, nc-nom, tournoi, [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(joueur, nc-nom, joueur, [n-1]), si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(542, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Fédération', nc-nam, 'Fédération', [n-1]), si(iranienne, adj-adj, iranien, [dl(0,n,n)-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(protesté, vpp-ver:pper, protester, [dl(0,np,s_ppart)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(asile, nc-nom, asile, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(543, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(champion, nc-nom, champion, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(échecs, nc-nom, échec, [n-1]), si('Alireza', npp-nam, 'Alireza', [dl(0,n,n)-1]), si('Firouzjaa', npp-nam, 'Firouzjaa', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(asile, nc-nom, asile, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Fédération', nc-nam, 'Fédération', [n-1]), si(iranienne, adj-adj, iranien, [dl(0,n,n)-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interdit, vpp-ver:pper, interdire, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(jouer, vinf-ver:infi, jouer, [dr(0,pp,np)-1]), si(contre, p-prp, contre, [np-1]), si('Israël', npp-nam, 'Israël', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(544, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(interdiction, nc-nom, interdiction, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(joueurs, nc-nom, joueur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(échecs, nc-nom, échec, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(biélorusses, adj-adj, biélorusse, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(compétitions, nc-nom, compétition, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(simplement, adv-adv, simplement, [dl(1,s,s)-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(neutre, adj-adj, neutre, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(sein, nc-nom, sein, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(fédération, nc-nom, fédération, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(545, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Fédération', nc-nam, 'Fédération', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(échecs, nc-nom, échec, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(banni, vpp-ver:pper, bannir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(drapeaux, nc-nom, drapeau, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(hymnes, nc-nom, hymne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(invitant, vpr-ver:ppre, inviter, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(joueurs, nc-nom, joueur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(participer, vinf-ver:infi, participer, [dl(0,np,s_inf)-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(neutre, adj-adj, neutre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(546, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(champion, nc-nom, champion, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(échecs, nc-nom, échec, [n-1]), si('Alireza', npp-nam, 'Alireza', [dl(0,n,n)-1]), si('Firouzjaa', npp-nam, 'Firouzjaa', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, nc-nom, partir, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(installé, vpp-ver:pper, installer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(en, p-prp, en, [dr(0,pp_a,n)-1]), si('France', npp-nam, 'France', [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Fédération', nc-nam, 'Fédération', [n-1]), si(iranienne, adj-adj, iranien, [dl(0,n,n)-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(interdit, vpp-ver:pper, interdire, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),np)-1]), si(affronter, vinf-ver:infi, affronter, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(joueur, nc-nom, joueur, [n-1]), si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(547, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(départ, nc-nom, départ, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alireza', npp-nam, 'Alireza', [dr(0,np,np)-1]), si('Firouzja', npp-nam, 'Firouzja', [np-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attribué, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnaît, v-ver:pres, reconnaître, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(',', ponct-pun, ',', [let-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(joueurs, nc-nom, joueur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(échecs, nc-nom, échec, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(affronter, vinf-ver:infi, affronter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Israéliens', nc-nam, 'Israéliens', [n-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),n)-1]), si(peine, nc-nom, peine, [dr(0,dl(1,s,s),n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(sanctionnés, vpp-ver:pper, sanctionner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(fédération, nc-nom, fédération, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(548, Result) :-
      prob_parse([ si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(visité, vpp-ver:pper, visiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), si('Derusova', npp-nam, 'Derusova', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(médecin, nc-nom, médecin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(blessés, vpp-ver:pper, blesser, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(549, Result) :-
      prob_parse([ si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(visite, nc-nom, visite, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(',', ponct-pun, ',', [let-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(accompagné, vpp-ver:pper, accompagner, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(ce, det-pro:dem, ce, [dr(0,pp_de,n)-1]), si(jour, nc-nom, jour, [n-1]), si('-là', adv-adv, '-là', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Tatiana', npp-nam, 'Tatiana', [dr(0,np,np)-1]), si('Ostashchenko', npp-nam, 'Ostashchenko', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(commandante, nc-nom, commandant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), si('Derusova', npp-nam, 'Derusova', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(550, Result) :-
      prob_parse([ si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(visité, vpp-ver:pper, visiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), si('Derusova', npp-nam, 'Derusova', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(médecin, nc-nom, médecin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(blessés, vpp-ver:pper, blesser, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(551, Result) :-
      prob_parse([ si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), si('Mykolaivna', npp-nam, 'Mykolaivna', [dr(0,np,np)-1]), si('Derusova', npp-nam, 'Derusova', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(février, nc-nom, février, [dr(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Okhtyrka', npp-nam, 'Okhtyrka', [dr(0,dl(1,s,s),np)-1]), si('(', ponct-pun, '(', [np-1]), si('nord-est', nc-nom, 'nord-est', [dr(0,dl(0,np,np),n)-1]), si(')', ponct-pun, ')', [n-1]), si(dans, p-prp, dans, [let-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(bombardement, nc-nom, bombardement, [dr(0,np,n)-1]), si(russe, adj-adj, russe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(sauvé, vpp-ver:pper, sauver, [np-1]), si(plus, adv-adv, plus, [dr(0,pp_de,np)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [n-1]), si(elle, cls-pro:per, lui, [np-1]), si(soignait, v-ver:impf, soigner, [np-1]), si('.', ponct-pun, '.', [dr(0,dl(0,np,s),np)-1])], Result).
sent(552, Result) :-
      prob_parse([ si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), si('Derusova', npp-nam, 'Derusova', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(sergente, nc-nom, sergente, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(infirmière, nc-nom, infirmier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(médecin, nc-nom, médecin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Okhtyrka', npp-nam, 'Okhtyrka', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(oblast, nc-nom, oblast, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Soumy', npp-nam, 'Soumy', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('nord-est', nc-nom, 'nord-est', [dr(0,dl(0,np,np),n)-1]), si(')', ponct-pun, ')', [n-1]), si(et, cc-kon, et, [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tuée, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(lors, adv-adv, lors, [dr(0,pp_de,np)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(frappe, nc-nom, frappe, [n-1]), si('d\'', p-prp, 'd\'', [n-1]), si(artillerie, nc-nom, artillerie, [n-1]), si(peu, adv-adv, peu, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(553, Result) :-
      prob_parse([ si('Inna', npp-nam, 'Inna', [dr(0,np,np)-1]), si('Mykolaivna', npp-nam, 'Mykolaivna', [dr(0,np,np)-1]), si('Derusova', npp-nam, 'Derusova', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(février, nc-nom, février, [dr(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Okhtyrka', npp-nam, 'Okhtyrka', [dr(0,dl(1,s,s),np)-1]), si('(', ponct-pun, '(', [np-1]), si('nord-est', nc-nom, 'nord-est', [dr(0,dl(0,np,np),n)-1]), si(')', ponct-pun, ')', [n-1]), si(dans, p-prp, dans, [let-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(bombardement, nc-nom, bombardement, [dr(0,np,n)-1]), si(russe, adj-adj, russe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(sauvé, vpp-ver:pper, sauver, [np-1]), si(plus, adv-adv, plus, [dr(0,pp_de,np)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [n-1]), si(elle, cls-pro:per, lui, [np-1]), si(soignait, v-ver:impf, soigner, [np-1]), si('.', ponct-pun, '.', [dr(0,dl(0,np,s),np)-1])], Result).
sent(554, Result) :-
      prob_parse([ si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(visite, nc-nom, visite, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dr(0,np,np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(accompagné, vpp-ver:pper, accompagner, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Tatiana', npp-nam, 'Tatiana', [dr(0,np,np)-1]), si('Ostashchenko', npp-nam, 'Ostashchenko', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(générale, adj-adj, générale, [n-1]), si(de, p-prp, de, [n-1]), si(brigade, nc-nom, brigade, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(commandante, nc-nom, commandant, [dr(0,dl(0,n,n),n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(555, Result) :-
      prob_parse([ si('Tatiana', npp-nam, 'Tatiana', [dr(0,np,np)-1]), si('Mikolajivna', npp-nam, 'Mikolajivna', [dr(0,np,np)-1]), si('Ostashchenko', npp-nam, 'Ostashchenko', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tête, nc-nom, tête, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(commandements, nc-nom, commandement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,np,s_ppres),dl(0,np,s_pass))-1]), si(promue, vpp-ver:pper, promouvoir, [dr(0,dl(0,np,s_pass),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(rang, nc-nom, rang, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(générale, nc-nom, générale, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(brigade, nc-nom, brigade, [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(556, Result) :-
      prob_parse([ si('Seuls', adv-adv, 'Seuls', [dr(0,np,np)-1]), si('1,9', det-num, '1,9', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(déplacés, nc-nom, déplacé, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('(', ponct-pun, '(', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(435, pro-num, 435, [np-1]), si(')', ponct-pun, ')', [let-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(franchi, vpp-ver:pper, franchir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hexagone, nc-nom, hexagone, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(détiennent, v-ver:pres, détenir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passeport, nc-nom, passeport, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tiers, nc-nom, tiers, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(557, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(5000, adj-num, 5000, [dr(0,n,n)-1]), si(arrivées, nc-nom, arrivée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(recensées, vpp-ver:pper, recenser, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tiers, nc-nom, tiers, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(réfugiés, nc-nom, réfugié, [n-1]), si(entrés, vpp-ver:pper, entrer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('France', npp-nam, 'France', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(nationalité, nc-nom, nationalité, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(originaires, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Maghreb', npp-nam, 'Maghreb', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(subsaharienne, adj-adj, subsaharien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(558, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(quinzaine, nc-num, quinzaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('non-Ukrainiens', nc-nom, 'non-Ukrainiens', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(fuyaient, v-ver:impf, fuir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(refoulés, vpp-ver:pper, refouler, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(essentiellement, adv-adv, essentiellement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si('franco-italienne', adj-adj, 'franco-italienne', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(559, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(préfecture, nc-nom, préfecture, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('Alpes-Maritimes', npp-nam, 'Alpes-Maritimes', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('non-admis', vpp-ver:pper, 'non-admis', [dr(0,dl(0,np,s_ppart),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(ressortissants, nc-nom, ressortissant, [n-1]), si(pakistanais, adj-adj, pakistanais, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(nigérians, adj-adj, nigérian, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(quinzaine, nc-nom, quinzaine, [n-1]), si(')', ponct-pun, ')', [let-1]), si(présentant, vpr-ver:ppre, présenter, [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bande, nc-nom, bande, [n-1]), si(frontalière, adj-adj, frontalier, [dl(0,n,n)-1]), si('franco-italienne', adj-adj, 'franco-italienne', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(titres, nc-nom, titre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(séjour, nc-nom, séjour, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(560, Result) :-
      prob_parse([ si('Barbara', npp-nam, 'Barbara', [dr(0,np,np)-1]), si('Pompili', npp-nam, 'Pompili', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invitée, nc-nom, invité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(matinale, nc-nom, matinale, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('RTL', npp-abr, 'RTL', [dl(0,n,n)-1]), si('MATIN', npp-nam, 'MATIN', [dl(0,n,n)-1]), si('7H', nc-abr, '7H', [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si('9H30', npp-num, '9H30', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Yves', npp-nam, 'Yves', [dr(0,np,np)-1]), si('Calvi', npp-nam, 'Calvi', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(561, Result) :-
      prob_parse([ si('Yves', npp-nam, 'Yves', [dr(0,np,np)-1]), si('Calvi', npp-nam, 'Calvi', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Transition', nc-nom, 'Transition', [n-1]), si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), si('Barbara', npp-nam, 'Barbara', [dl(0,n,n)-1]), si('Pompili', npp-nam, 'Pompili', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(matinale, nc-nom, matinale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('RTL', npp-nam, 'RTL', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(562, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Transition', nc-nom, 'Transition', [n-1]), si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), si('Barbara', npp-nam, 'Barbara', [dl(0,n,n)-1]), si('Pompili', npp-nam, 'Pompili', [dl(0,n,n)-1]), si(incite, v-ver:pres, inciter, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(foyers, nc-nom, foyer, [n-1]), si(européens, adj-adj, européen, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(logement, nc-nom, logement, [n-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dépendance, nc-nom, dépendance, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(importations, nc-nom, importation, [n-1]), si(énergétiques, adj-adj, énergétique, [dl(0,n,n)-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(563, Result) :-
      prob_parse([ si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), si('Pompili', npp-nam, 'Pompili', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(foyers, nc-nom, foyer, [n-1]), si(européens, adj-adj, européen, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(baisser, vinf-ver:infi, baisser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(logement, nc-nom, logement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(degré, nc-nom, degré, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(importations, nc-nom, importation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(564, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Transition', nc-nom, 'Transition', [n-1]), si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Barbara', npp-nam, 'Barbara', [dr(0,np,np)-1]), si('Pompili', npp-nam, 'Pompili', [np-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(incité, vpp-ver:pper, inciter, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Français', nc-nam, 'Français', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(douche, nc-nom, douche, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(importations, nc-nom, importation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(propos, nc-nom, propos, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(détournés, vpp-ver:pper, détourner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(565, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Transition', nc-nom, 'Transition', [n-1]), si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), si('Barbara', npp-nam, 'Barbara', [dl(0,n,n)-1]), si('Pompili', npp-nam, 'Pompili', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Français', nc-nam, 'Français', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(doucher, vinf-ver:infi, doucher, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(une, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(fois, nc-nom, fois, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(ça, pro-pro:dem, cela, [np-1]), si(ferait, v-ver:cond, faire, [dr(0,dl(0,np,s),np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(importations, nc-nom, importation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(moins, adv-adv, moins, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(566, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(information, nc-nom, information, [n-1]), si(ordonnant, vpr-ver:ppre, ordonner, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Fifa', npp-abr, 'Fifa', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(totalement, adv-adv, totalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(fausse, adj-adj, faux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(567, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Tribunal', nc-nam, 'Tribunal', [n-1]), si(arbitral, adj-adj, arbitral, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sport, nc-nom, sport, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('TAS', npp-abr, 'TAS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Fifa', npp-abr, 'Fifa', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réintégrer, vinf-ver:infi, réintégrer, [dr(0,dl(0,np,s_inf),np)-1]), si(immédiatement, adv-adv, immédiatement, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(568, Result) :-
      prob_parse([ si('Fin', nc-nom, 'Fin', [dr(0,dr(0,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(quatre, det-num, quatre, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(lancée, vpp-ver:pper, lancer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Uefa', npp-nam, 'Uefa', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Fifa', npp-nam, 'Fifa', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(exclure, vinf-ver:infi, exclure, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prochaine, adj-adj, prochain, [dr(0,n,n)-1]), si('Coupe', nc-nom, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Qatar', npp-nam, 'Qatar', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2022, pro-num, 2022, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),np)-1]), si(de, p-prp, de, [dr(0,dr(0,np,np),n)-1]), si(manière, nc-nom, manière, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(clubs, nc-nom, club, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(sélections, nc-nom, sélection, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(compétitions, nc-nom, compétition, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(569, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(quatre, det-num, quatre, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fédération, nc-nom, fédération, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(foot, nc-nom, foot, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(banni, vpp-ver:pper, bannir, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(équipes, nc-nom, équipe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(compétitions, nc-nom, compétition, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(570, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),dl(0,np,s_ppres))-1]), si(attendant, vpr-ver:ppre, attendre, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Fifa', npp-abr, 'Fifa', [n-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(tranché, vpp-ver:pper, trancher, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fond, nc-nom, fond, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(prendra, v-ver:futu, prendre, [dr(0,dl(0,np,s),np)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(minimum, nc-nom, minimum, [n-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('TAS', npp-abr, 'TAS', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(suspendre, vinf-ver:infi, suspendre, [dr(0,dl(0,np,s_inf),np)-1]), si(provisoirement, adv-adv, provisoirement, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(décisions, nc-nom, décision, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(instances, nc-nom, instance, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(équipes, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(reprendre, vinf-ver:infi, reprendre, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(compétitions, nc-nom, compétition, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(571, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(décisions, nc-nom, décision, [n-1]), si(rendues, vpp-ver:pper, rendre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('TAS', npp-abr, 'TAS', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(préjugent, v-ver:pres, préjuger, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(future, adj-adj, futur, [dr(0,n,n)-1]), si(sentence, nc-nom, sentence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(justice, nc-nom, justice, [n-1]), si(sportive, adj-adj, sportif, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fond, nc-nom, fond, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(litige, nc-nom, litige, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(attendue, vpp-ver:pper, attendre, [dl(0,np,s_pass)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(572, Result) :-
      prob_parse([ si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), si(politiciens, nc-nom, politicien, [n-1]), si(tenant, vpr-ver:ppre, tenir, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(renversé, vpp-ver:pper, renverser, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bouteille, nc-nom, bouteille, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(brandit, v-ver:simp, brandir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(parlementaires, nc-nom, parlementaire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(manifestations, nc-nom, manifestation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(573, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(parlementaires, nc-nom, parlementaire, [n-1]), si(slovaques, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vidé, vpp-ver:pper, vider, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bouteille, nc-nom, bouteille, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(574, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(députés, nc-nom, député, [n-1]), si(slovaques, adj-adj, slovaque, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(réunis, vpp-ver:pper, réunir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(session, nc-nom, session, [n-1]), si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),dl(0,n,n)),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coopération, nc-nom, coopération, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(défense, nc-nom, défense, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('DCA', npp-abr, 'DCA', [n-1]), si(')', ponct-pun, ')', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(devait, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(discuté, vpp-ver:pper, discuter, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(voté, vpp-ver:pper, voter, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(575, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(bilatéral, adj-adj, bilatéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coopération, nc-nom, coopération, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(discuté, vpp-ver:pper, discuter, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(576, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(577, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Slovaques', nc-nam, 'Slovaques', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(unis, vpp-ver:pper, unir, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(condamner, vinf-ver:infi, condamner, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(actions, nc-nom, action, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(578, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(emballé, vpp-ver:pper, emballer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(sac, nc-nom, sac, [n-1]), si(noir, adj-adj, noir, [dl(0,n,n)-1]), si(fume, v-ver:pres, fumer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(cigarette, nc-nom, cigarette, [n-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(couché, vpp-ver:pper, coucher, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(camion, nc-nom, camion, [n-1]), si(rempli, vpp-ver:pper, remplir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(longs, adj-adj, long, [dr(0,n,n)-1]), si(sacs, nc-nom, sac, [n-1]), si(sombres, adj-adj, sombre, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(semblent, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(contenir, vinf-ver:infi, contenir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(579, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(camion, nc-nom, camion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(couleur, nc-nom, couleur, [n-1]), si(orange, adj-adj, orange, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(rempli, vpp-ver:pper, remplir, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(formes, nc-nom, forme, [n-1]), si(empaquetées, vpp-ver:pper, empaqueter, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sacs, nc-nom, sac, [n-1]), si(noirs, adj-adj, noir, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(580, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(unités, nc-nom, unité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(franchi, vpp-ver:pper, franchir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fleuve, nc-nom, fleuve, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2017, adj-num, 2017, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(amphibies, adj-adj, amphibie, [dl(0,n,n)-1]), si('M3', npp-nam, 'M3', [dl(0,n,n)-1]), si('Amphibious', npp-nam, 'Amphibious', [dl(0,n,n)-1]), si('Rigs', npp-nam, 'Rigs', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Rukla', npp-nam, 'Rukla', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Saber', npp-nam, 'Saber', [dr(0,n,n)-1]), si('Strike', npp-nam, 'Strike', [n-1]), si(17, adj-num, 17, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(581, Result) :-
      prob_parse([ si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exercice, nc-nom, exercice, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2017, pro-num, 2017, [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Lituanie', npp-nam, 'Lituanie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(chars, nc-nom, char, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(déployés, vpp-ver:pper, déployer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pont, nc-nom, pont, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(rivière, nc-nom, rivière, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(permettant, vpr-ver:ppre, permettre, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(traverser, vinf-ver:infi, traverser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cours, nc-nom, cours, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(582, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(transformé, vpp-ver:pper, transformer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(pont, nc-nom, pont, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(remplacer, vinf-ver:infi, remplacer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(infrastructures, nc-nom, infrastructure, [n-1]), si(sabotées, vpp-ver:pper, saboter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(583, Result) :-
      prob_parse([ si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(transforme, v-ver:pres, transformer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(pont, nc-nom, pont, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(pallier, vinf-ver:infi, pallier, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(destruction, nc-nom, destruction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ponts, nc-nom, pont, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ralentir, vinf-ver:infi, ralentir, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(584, Result) :-
      prob_parse([ si('Petro', npp-nam, 'Petro', [dr(0,np,np)-1]), si('Porochenko', npp-nam, 'Porochenko', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(menacé, vpp-ver:pper, menacer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(populations, nc-nom, population, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(discours, nc-nom, discours, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(585, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ex-président', nc-nom, 'ex-président', [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Petro', npp-nam, 'Petro', [dl(0,n,n)-1]), si('Porochenko', npp-nam, 'Porochenko', [dl(0,n,n)-1]), si(menace, v-ver:pres, menacer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(populations, nc-nom, population, [n-1]), si(russophones, adj-adj, russophone, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Donbass', npp-nam, 'Donbass', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(discours, nc-nom, discours, [n-1]), si(tenu, vpp-ver:pper, tenir, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2014, pro-num, 2014, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(586, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(camps, nc-nom, camp, [n-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(constamment, adv-adv, constamment, [dl(1,s,s)-1]), si(usage, nc-nom, usage, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(armes, nc-nom, arme, [n-1]), si(lourdes, adj-adj, lourd, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(zones, nc-nom, zone, [n-1]), si(construites, vpp-ver:pper, construire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(587, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(parties, nc-nom, party, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(attaques, nc-nom, attaque, [n-1]), si(aveugles, adj-adj, aveugle, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(délibérées, vpp-ver:pper, délibéré, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(construites, vpp-ver:pper, construire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisées, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fins, nc-nom, fin, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(588, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si('TGCOM24', npp-nam, 'TGCOM24', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(tirée, vpp-ver:pper, tirer, [dr(0,dl(0,n,n),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(film, nc-nom, film, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si('Deep', npp-nam, 'Deep', [dr(0,np,np)-1]), si('Impact', npp-nam, 'Impact', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fuite, nc-nom, fuite, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(589, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(mère, nc-nom, mèr, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('TGCOM24', npp-nam, 'TGCOM24', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démenti, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(diffusion, nc-nom, diffusion, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(tirée, vpp-ver:pper, tirer, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(film, nc-nom, film, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Deep', npp-nam, 'Deep', [dr(0,np,np)-1]), si('Impact', npp-nam, 'Impact', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contexte, nc-nom, contexte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(590, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Deep', npp-nam, 'Deep', [dr(0,np,np)-1]), si('Impact', npp-nam, 'Impact', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(catastrophe, nc-nom, catastroph, [dl(0,n,n)-1]), si(sorti, vpp-ver:pper, sortir, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1998, pro-num, 1998, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(met, v-ver:pres, mettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(scène, nc-nom, scène, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(comète, nc-nom, comète, [n-1]), si(fonçant, vpr-ver:ppre, foncer, [dr(0,dl(0,n,n),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(menaçant, vpr-ver:ppre, menacer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Humanité', npp-nam, 'Humanité', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(591, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Deep', npp-nam, 'Deep', [dr(0,np,np)-1]), si('Impact', npp-nam, 'Impact', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(tentent, v-ver:pres, tenter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fuir, vinf-ver:infi, fuir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(comète, nc-nom, comète, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(592, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('Africains', nc-nam, 'Africains', [n-1]), si(fuyant, vpr-ver:ppre, fuir, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(victimes, nc-nom, victimer, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(tirs, nc-nom, tir, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(balles, nc-nom, balle, [n-1]), si(réelles, adj-adj, réel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(polonaise, adj-adj, polonais, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(parmi, p-prp, parmi, [dr(0,dr(0,s,s),np)-1]), si(eux, pro-pro:per, lui, [np-1]), si(certains, pro-pro:ind, certain, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tués, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(593, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(polonaise, adj-adj, polonais, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réfugiés, nc-nom, réfugié, [n-1]), si(fuyant, vpr-ver:ppre, fuir, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(africains, adj-adj, africain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(594, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('Africains', nc-nam, 'Africains', [n-1]), si(fuyant, vpr-ver:ppre, fuir, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(victimes, nc-nom, victimer, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(tirs, nc-nom, tir, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(balles, nc-nom, balle, [n-1]), si(réelles, adj-adj, réel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(polonaise, adj-adj, polonais, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(parmi, p-prp, parmi, [dr(0,dr(0,s,s),np)-1]), si(eux, pro-pro:per, lui, [np-1]), si(certains, pro-pro:ind, certain, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tués, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(595, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(polonaise, adj-adj, polonais, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tiré, vpp-ver:pper, tirer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(balle, nc-nom, balle, [n-1]), si(réelle, adj-adj, réel, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Africains', nc-nam, 'Africains', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(tentent, v-ver:pres, tenter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(trouver, vinf-ver:infi, trouver, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(refuge, nc-nom, refuge, [np-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(596, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(jeunes, adj-adj, jeune, [dr(0,n,n)-1]), si('Africains', nc-nam, 'Africains', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morts, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si(blessés, nc-nom, blessé, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(597, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(racisme, nc-nom, racisme, [n-1]), si(envers, p-prp, envers, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Africains', nc-nam, 'Africains', [n-1]), si(fuyant, vpr-ver:ppre, fuir, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signalés, vpp-ver:pper, signaler, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(relayés, vpp-ver:pper, relayer, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(médias, nc-nom, média, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(598, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Fondation', nc-nam, 'Fondation', [n-1]), si('Helsinki', npp-nam, 'Helsinki', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(organisation, nc-nom, organisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(présente, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1989, pro-num, 1989, [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(traitements, nc-nom, traitement, [n-1]), si(inégaux, adj-adj, inégal, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réfugiés, nc-nom, réfugié, [n-1]), si(originaires, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(autres, adj-adj, autre, [dr(0,dr(0,n,s_q),n)-1]), si(pays, nc-nom, pays, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(599, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(racisme, nc-nom, racisme, [n-1]), si(envers, p-prp, envers, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Africains', nc-nam, 'Africains', [n-1]), si(fuyant, vpr-ver:ppre, fuir, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signalés, vpp-ver:pper, signaler, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(relayés, vpp-ver:pper, relayer, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(médias, nc-nom, média, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(600, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(presse, nc-nom, presse, [n-1]), si(polonaise, adj-adj, polonais, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(relayé, vpp-ver:pper, relayer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(racisme, nc-nom, racisme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(violences, nc-nom, violence, [n-1]), si(physiques, adj-adj, physique, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(601, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vague, nc-nom, vague, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réfugiés, nc-nom, réfugié, [n-1]), si(déclenchée, vpp-ver:pper, déclencher, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Fédération', nc-nam, 'Fédération', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(policiers, nc-nom, policier, [n-1]), si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(seule, adj-adj, seul, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(602, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(polonaise, adj-adj, polonais, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tiré, vpp-ver:pper, tirer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(balle, nc-nom, balle, [n-1]), si(réelle, adj-adj, réel, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Africains', nc-nam, 'Africains', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(tentent, v-ver:pres, tenter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(trouver, vinf-ver:infi, trouver, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(refuge, nc-nom, refuge, [np-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(603, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(jeunes, adj-adj, jeune, [dr(0,n,n)-1]), si('Africains', nc-nam, 'Africains', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morts, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si(blessés, nc-nom, blessé, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(604, Result) :-
      prob_parse([ si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(migrants, nc-nom, migrant, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrivés, vpp-ver:pper, arriver, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(espagnole, adj-adj, espagnol, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Melilla', npp-nam, 'Melilla', [np-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(terre, nc-nom, terre, [n-1]), si(africaine, adj-adj, africain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(605, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(3, adj-num, 3, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(entrée, nc-nom, entrée, [n-1]), si(massive, adj-adj, massif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(migrants, nc-nom, migrant, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enclave, nc-nom, enclave, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Melilla', npp-nam, 'Melilla', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(606, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('3,2', det-num, '3,2', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fui, vpp-ver:pper, fuir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(déclenchés, vpp-ver:pper, déclencher, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allées, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si(',', ponct-pun, ',', [dl(0,s,txt)-1])], Result).
sent(607, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(routes, nc-nom, route, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exil, nc-nom, exil, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(608, Result) :-
      prob_parse([ si('L\'Ukraine', npp-nam, 'L\'Ukraine', [dr(0,np,n)-1]), si(a, v-ver:pres, avoir, [n-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [dl(0,np,s_ppart)-1]), si(avec, p-prp, avec, [let-1]), si(les, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(en, p-prp, en, [let-1]), si(2021, pro-num, 2021, [dr(0,dl(1,s,s),np)-1]), si(contre, p-prp, contre, [np-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(projet, nc-nom, projet, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(résolution, nc-nom, résolution, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Assemblée', nc-nam, 'Assemblée', [dr(0,np,n)-1]), si(générale, adj-adj, général, [n-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si('Nations', nc-nam, 'Nations', [dr(0,dl(0,n,n),n)-1]), si(unies, vpp-ver:pper, uni, [n-1]), si(soutenu, vpp-ver:pper, soutenir, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), si(la, det-det:art, le, [dr(0,pp_par,np)-1]), si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), si(et, cc-kon, et, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(condamner, vinf-ver:infi, condamner, [let-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s_inf),np)-1]), si(glorification, nc-nom, glorification, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(nazisme, nc-nom, nazisme, [dr(0,dl(0,n,n),n)-1]), si(et, cc-kon, et, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(néonazisme, nc-nom, néonazisme, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(609, Result) :-
      prob_parse([ si('L\'Ukraine', npp-nam, 'L\'Ukraine', [dr(0,np,n)-1]), si(a, v-ver:pres, avoir, [n-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(contre, p-prp, contre, [dr(0,dl(0,np,s_ppart),pp)-1]), si(une, det-det:art, un, [dr(0,pp,np)-1]), si(résolution, nc-nom, résolution, [dr(0,np,n)-1]), si(russe, adj-adj, russe, [n-1]), si(à, p-prp, à, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('ONU', npp-abr, 'ONU', [dr(0,np,n)-1]), si(visant, vpr-ver:ppre, viser, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(condamner, vinf-ver:infi, condamner, [let-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s_inf),np)-1]), si(glorification, nc-nom, glorification, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(nazisme, nc-nom, nazisme, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(610, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eux, pro-pro:per, lui, [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,dl(1,s,s))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(611, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(voter, vinf-ver:infi, voter, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(proposée, vpp-ver:pper, proposer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(motivée, vpp-ver:pper, motiver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sympathie, nc-nom, sympathie, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(idéologie, nc-nom, idéologie, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nazis', nc-nam, 'Nazis', [n-1]), si(actifs, adj-adj, actif, [dl(0,n,n)-1]), si(historiques, adj-adj, historique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(génocidaires, adj-adj, génocidaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(612, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(vraiment, adv-adv, vraiment, [dl(1,s,s)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sympathie, nc-nom, sympathie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élite, nc-nom, élite, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nazis, nc-nom, nazi, [n-1]), si(historiques, adj-adj, historique, [dl(0,n,n)-1]), si(génocidaires, adj-adj, génocidaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(613, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si('2021,130', det-num, '2021,130', [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(texte, nc-nom, texte, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glorification, nc-nom, glorification, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nazisme, nc-nom, nazisme, [n-1]), si(soumis, vpp-ver:pper, soumettre, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(49, pro-num, 49, [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(abstenus, vpp-ver:pper, abstenir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquels, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intégralité, nc-nom, intégralité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(incluant, vpr-ver:ppre, inclure, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(614, Result) :-
      prob_parse([ si('Deux', pro-num, 'Deux', [np-1]), si(',', ponct-pun, ',', [let-1]), si(enfin, adv-adv, enfin, [dl(0,np,np)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dl(0,np,s_ppart)-1]), si(contre, p-prp, contre, [pp-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(615, Result) :-
      prob_parse([ si('L\'Ukraine', npp-nam, 'L\'Ukraine', [dr(0,np,n)-1]), si(et, cc-kon, et, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [dr(0,np,n)-1]), si(sont, v-ver:pres, être, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(seuls, adj-adj, seul, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [dr(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(contre, p-prp, contre, [dr(0,dl(0,np,s_ppart),pp)-1]), si(le, det-det:art, le, [dr(0,pp,np)-1]), si(texte, nc-nom, texte, [dr(0,np,n)-1]), si(intitulé, vpp-ver:pper, intituler, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si(lutte, nc-nom, lutte, [let-1]), si(contre, p-prp, contre, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(glorification, nc-nom, glorification, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(nazisme, nc-nom, nazisme, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(présenté, vpp-ver:pper, présenter, [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),pp_a)-1]), si('l\'', det-det:art, 'l\'', [dr(0,pp_a,np)-1]), si('ONU', nc-abr, 'ONU', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(616, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(élimination, nc-nom, élimination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Juifs', nc-nom, 'Juifs', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(nazie, adj-adj, nazi, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(617, Result) :-
      prob_parse([ si('Pendant', p-prp, 'Pendant', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si(durant, p-prp, durer, [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(occupation, nc-nom, occupation, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(juives, adj-adj, juif, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tuées, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('quasi-totalité', nc-nom, 'quasi-totalité', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(communauté, nc-nom, communauté, [n-1]), si(juive, adj-adj, juif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déportée, vpp-ver:pper, déporter, [dl(0,np,s_pass)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(camps, nc-nom, camp, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(travaux, nc-nom, travail, [n-1]), si(forcés, vpp-ver:pper, forcer, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(concentration, nc-nom, concentration, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(élimination, nc-nom, élimination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(618, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(terme, nc-nom, terme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nazi, nc-nom, nazi, [n-1]), si(renvoie, v-ver:pres, renvoyer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(événements, nc-nom, événement, [n-1]), si(auxquels, p+pro-pro:rel, auxquels, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Russes', nc-nam, 'Russes', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(sensibles, adj-adj, sensible, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pertes, nc-nom, perte, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(lourdes, adj-adj, lourd, [dl(0,n,n)-1]), si(subies, vpp-ver:pper, subir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(619, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(terme, nc-nom, terme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nazi, nc-nom, nazi, [n-1]), si(touche, v-ver:pres, toucher, [dr(0,dl(0,np,s),np)-1]), si(volontairement, adv-adv, volontairement, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(corde, nc-nom, corde, [n-1]), si(sensible, adj-adj, sensible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(620, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), si('Gates', npp-nam, 'Gates', [np-1]), si(profitent, v-ver:pres, profiter, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(distrait, vpp-ver:pper, distraire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(19, adj-num, 19, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('(', ponct-pun, '(', [let-1]), si(s, nc-abr, s, [cl_r-1]), si(')', ponct-pun, ')', [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si(a, v-ver:pres, à, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si(constitution, nc-nom, constitution, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(621, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(profite, v-ver:pres, profiter, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(622, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(recommandation, nc-nom, recommandation, [n-1]), si(officielle, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(invite, v-ver:pres, invite, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(généraliser, vinf-ver:infi, généraliser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(623, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(émis, vpp-ver:pper, émettre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(certain, adj-adj, certain, [dr(0,n,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recommandations, nc-nom, recommandation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(parmi, p-prp, parmi, [dr(0,dr(0,np,np),np)-1]), si(elles, pro-pro:per, lui, [np-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(recommandation, nc-nom, recommandation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(généraliser, vinf-ver:infi, généraliser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(624, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(contraire, adj-adj, contraire, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(fonctionnement, nc-nom, fonctionnement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(volonté, nc-nom, volonté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernier, nc-nom, dernier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(625, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(gré, nc-nom, gré, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(626, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(délégations, nc-nom, délégation, [n-1]), si(réunies, vpp-ver:pper, réunir, [dl(0,n,n)-1]), si(votent, v-ver:pres, voter, [dl(0,np,s)-1]), si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(adopter, vinf-ver:infi, adopter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(normes, nc-nom, norme, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(domaine, nc-nom, domaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(627, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', npp-nam, 'Santé', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(discussions, nc-nom, discussion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(consensus, nc-nom, consensus, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(domaine, nc-nom, domaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(628, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(adopter, vinf-ver:infi, adopter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(normes, nc-nom, norme, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(domaine, nc-nom, domaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(consensus, nc-nom, consensus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(629, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(restent, v-ver:pres, rester, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(souverains, adj-adj, souverain, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(décider, vinf-ver:infi, décider, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(implémenter, vinf-ver:infi, implémenter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(recommandations, nc-nom, recommandation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(630, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(application, nc-nom, application, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(recommandation, nc-nom, recommandation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(reste, v-ver:pres, reste, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(discrétion, nc-nom, discrétion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États', nc-nam, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(631, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(19, adj-num, 19, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Constitution', nc-nom, 'Constitution', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(632, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(adopter, vinf-ver:infi, adopter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(conventions, nc-nom, convention, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(accords, nc-nom, accord, [n-1]), si(internationaux, adj-adj, international, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(biais, nc-nom, biais, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(19, adj-num, 19, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Assemblées', nc-nam, 'Assemblées', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(633, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(souhaitent, v-ver:pres, souhaiter, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(634, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(traités, nc-nom, traité, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(signe, v-ver:pres, signe, [dr(0,dl(0,np,s),np)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(contraignantes, adj-adj, contraignant, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(635, Result) :-
      prob_parse([ si('CNN', npp-abr, 'CNN', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(diffusé, vpp-ver:pper, diffuser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fournie, vpp-ver:pper, fournir, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(apparaît, v-ver:pres, apparaître, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(date, nc-nom, date, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(636, Result) :-
      prob_parse([ si('CNN', npp-abr, 'CNN', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(diffusé, vpp-ver:pper, diffuser, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(datant, vpr-ver:ppre, dater, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2015, pro-num, 2015, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(637, Result) :-
      prob_parse([ si('CNN', npp-abr, 'CNN', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(diffusé, vpp-ver:pper, diffuser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fournie, vpp-ver:pper, fournir, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(638, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(fournie, vpp-ver:pper, fournir, [dr(0,dl(0,n,n),pp_par)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bureau, nc-nom, bureau, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(semble, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(tôt, adv-adv, tôt, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(jeudi, nc-nom, jeudi, [dr(0,dl(1,s,s),n)-1]), si(matin, nc-nom, matin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(639, Result) :-
      prob_parse([ si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(activités, nc-nom, activité, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(décennies, nc-nom, décennie, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrivée, nc-nom, arrivée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(politique, nc-nom, politique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(640, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(multinationale, nc-nom, multinationale, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(activités, nc-nom, activité, [n-1]), si(gazières, adj-adj, gazier, [dl(0,n,n)-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entrée, nc-nom, entrée, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(politique, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(641, Result) :-
      prob_parse([ si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(installé, vpp-ver:pper, installer, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(qualité, nc-nom, qualité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Economie', nc-nam, 'Economie', [n-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(642, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dl(0,n,n)-1]), si('Macron', npp-nam, 'Macron', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(implanté, vpp-ver:pper, implanter, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(ministre, nc-nom, ministre, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Economie', nc-nom, 'Economie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(643, Result) :-
      prob_parse([ si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(suit, v-ver:pres, suivre, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(stratégie, nc-nom, stratégie, [n-1]), si(commerciale, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(revêt, v-ver:pres, revêtir, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(dimension, nc-nom, dimension, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(644, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(mégaprojets, nc-nom, mégaprojet, [n-1]), si(menés, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp_par)-1]), si(récemment, adv-adv, récemment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(découlent, v-ver:pres, découler, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(partenariat, nc-nom, partenariat, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(noué, vpp-ver:pper, nouer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2011, pro-num, 2011, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(stratégie, nc-nom, stratégie, [n-1]), si(propre, adj-adj, propre, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si(revêtent, v-ver:pres, revêtir, [dr(0,dl(0,np,s),np)-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dl(1,s,s)-1]), si(dimension, nc-nom, dimension, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(645, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(multinationale, nc-nom, multinationale, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1991, pro-num, 1991, [np-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(646, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(implantation, nc-nom, implantation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Total', npp-nam, 'Total', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(remonte, v-ver:pres, remonter, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(647, Result) :-
      prob_parse([ si('Total', npp-nam, 'Total', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(trentaine, nc-num, trentaine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(648, Result) :-
      prob_parse([ si('Monsieur', nc-abr, 'Monsieur', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(chef, nc-nom, chef, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si('-là', adv-adv, '-là', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Total', npp-nam, 'Total', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(façon, nc-nom, façon, [n-1]), si(constante, adj-adj, constant, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(649, Result) :-
      prob_parse([ si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(installé, vpp-ver:pper, installer, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(qualité, nc-nom, qualité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(650, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Macron', npp-nam, 'Macron', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(effet, nc-nom, effet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(celui, pro-pro:dem, celui, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Total', npp-nam, 'Total', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(651, Result) :-
      prob_parse([ si('Total', npp-nam, 'Total', [np-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,n,n),np)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(fil, nc-nom, fil, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(investisseur, nc-nom, investisseur, [n-1]), si(étranger, adj-adj, étranger, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(652, Result) :-
      prob_parse([ si('Loin', adv-adv, 'Loin', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(devant, p-prp, devant, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Nigéria', npp-nam, 'Nigéria', [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(source, nc-nom, source, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(production, nc-nom, production, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Total', npp-nam, 'Total', [np-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(653, Result) :-
      prob_parse([ si('Total', npp-nam, 'Total', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(entièrement, adv-adv, entièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(privé, vpp-ver:pper, priver, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(suit, v-ver:pres, suivre, [dr(0,dl(0,np,s),np)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(tout, pro-pro:ind, tout, [np-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(stratégie, nc-nom, stratégie, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(répond, v-ver:pres, répondre, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(intérêts, nc-nom, intérêt, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(forcément, adv-adv, forcément, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aligné, vpp-ver:pper, aligner, [dr(0,dl(0,np,s_pass),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(654, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(taille, nc-nom, taille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Total', npp-nam, 'Total', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(importance, nc-nom, importance, [n-1]), si(stratégique, adj-adj, stratégique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(diplomatie, nc-nom, diplomatie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(655, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), si(dépit, nc-nom, dépit, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(brutal, adj-adj, brutal, [dr(0,n,n)-1]), si(refroidissement, nc-nom, refroidissement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(relations, nc-nom, relation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(consécutif, adj-adj, consécutif, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(continue, v-ver:pres, continuer, [dr(0,dl(0,np,s),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(activités, nc-nom, activité, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(imité, vpp-ver:pper, imiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(concurrents, nc-nom, concurrent, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Shell', npp-nam, 'Shell', [np-1]), si(ou, cc-kon, ou, [np-1]), si('BP', npp-abr, 'BP', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(656, Result) :-
      prob_parse([ si('Contrairement', adv-adv, 'Contrairement', [dr(0,dr(0,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(certains, pro-pro:ind, certain, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(concurrents, nc-nom, concurrent, [n-1]), si(',', ponct-pun, ',', [let-1]), si('TotalEnergies', npp-nam, 'TotalEnergies', [np-1]), si(maintient, v-ver:pres, maintenir, [dr(0,dl(0,np,s),np)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(instant, nc-nom, instant, [n-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(activités, nc-nom, activité, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(657, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(séquences, nc-nom, séquence, [n-1]), si(vidéo, adj-nom, vidéo, [dl(0,n,n)-1]), si(amateurs, adj-adj, amateur, [dl(0,n,n)-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('BMP', nc-abr, 'BMP', [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(brisant, vpr-ver:ppre, briser, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(barricades, nc-nom, barricade, [n-1]), si(construites, vpp-ver:pper, construire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2014, adj-num, 2014, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(658, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(barricade, nc-nom, barricade, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(démolie, vpp-ver:pper, démolir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('BMP', npp-abr, 'BMP', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si('Ndlr', npp-nam, 'Ndlr', [np-1]), si(')', ponct-pun, ')', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2014, adj-num, 2014, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(659, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2014, adj-num, 2014, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(parlait, v-ver:impf, parler, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(vingt, det-num, vingt, [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(affrontements, nc-nom, affrontement, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(séparatistes, nc-nom, séparatiste, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(660, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(affrontements, nc-nom, affrontement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2014, adj-num, 2014, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vingtaine, nc-num, vingtaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suivis, vpp-ver:pper, suivre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(anarchie, nc-nom, anarchie, [n-1]), si(marqués, vpp-ver:pper, marquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pillages, nc-nom, pillage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(magasins, nc-nom, magasin, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(vols, nc-nom, vol, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(661, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(théâtrale, adj-adj, théâtral, [dl(0,n,n)-1]), si(éphémère, adj-adj, éphémère, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si('Royal', npp-nam, 'Royal', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Luxe', npp-nam, 'Luxe', [np-1]), si(mettant, vpr-ver:ppre, mettre, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(scène, nc-nom, scène, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(explorateurs, nc-nom, explorateur, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(contrée, nc-nom, contrée, [n-1]), si(glaciale, adj-adj, glacial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(installé, vpp-ver:pper, installer, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(toit, nc-nom, toit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nantes', npp-nam, 'Nantes', [np-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(662, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(installation, nc-nom, installation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(igloo, nc-nom, igloo, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(trappeurs, nc-nom, trappeur, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(toit, nc-nom, toit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Nantes', npp-nam, 'Nantes', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(autre, adj-adj, autre, [dr(0,dl(0,n,n),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(scène, nc-nom, scène, [n-1]), si(artistique, adj-adj, artistique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si('Royal', npp-nam, 'Royal', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Luxe', npp-nam, 'Luxe', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Nantes', npp-nam, 'Nantes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(663, Result) :-
      prob_parse([ si('Jean-Luc', npp-nam, 'Jean-Luc', [dr(0,np,np)-1]), si('Courcoult', npp-nam, 'Courcoult', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(peuple, nc-nom, peuple, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(monter, vinf-ver:infi, monter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(installation, nc-nom, installation, [n-1]), si(artistique, adj-adj, artistique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(toit, nc-nom, toit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Nantes', npp-nam, 'Nantes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(664, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(hissé, vpp-ver:pper, hisser, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(toit, nc-nom, toit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Nantes', npp-nam, 'Nantes', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(signe, nc-nom, signe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(peuple, nc-nom, peuple, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(665, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(journalistes, nc-nom, journaliste, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(filmé, vpp-ver:pper, filmer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(théâtrale, adj-adj, théâtral, [dl(0,n,n)-1]), si(éphémère, adj-adj, éphémère, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(toit, nc-nom, toit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nantes', npp-nam, 'Nantes', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(campement, nc-nom, campement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(666, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(journalistes, nc-nom, journaliste, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(filmé, vpp-ver:pper, filmer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(camp, nc-nom, camp, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(toit, nc-nom, toit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nantes', npp-nam, 'Nantes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(667, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(antichars, adj-adj, antichar, [dl(0,n,n)-1]), si(présentées, vpp-ver:pper, présenter, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(partie, nc-nom, partie, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arsenal, nc-nom, arsenal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(668, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(antichars, adj-adj, antichar, [dl(0,n,n)-1]), si(appartenant, vpr-ver:ppre, appartenir, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(illustrant, vpr-ver:ppre, illustrer, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(puissance, nc-nom, puissance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(669, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(arme, nc-nom, arme, [n-1]), si(antichar, npp-adj, antichar, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vraie, adj-adj, vrai, [dr(0,n,n)-1]), si(arme, nc-nom, arme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(juste, adv-adv, juste, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(concept, nc-nom, concept, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ingénierie, nc-nom, ingénierie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(670, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(animation, nc-nom, animation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('3D', nc-abr, '3D', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(date, v-ver:pres, date, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2016, pro-num, 2016, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créée, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(toutes, det-pro:ind, tout, [dr(0,np,n)-1]), si(pièces, nc-nom, pièce, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(671, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(publiée, vpp-ver:pper, publier, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('Dahir', npp-nam, 'Dahir', [dl(0,n,n)-1]), si('Insaat', npp-nam, 'Insaat', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2016, pro-num, 2016, [np-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('YouTube', npp-nam, 'YouTube', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(672, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(impressionnantes, adj-adj, impressionnant, [dr(0,n,n)-1]), si(armes, nc-nom, arme, [n-1]), si(antichars, adj-adj, antichar, [dl(0,n,n)-1]), si(relayée, vpp-ver:pper, relayer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,n)-1]), si(internet, pro-abr, internet, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(exercice, nc-nom, exercice, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(créativité, nc-nom, créativité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dr(0,s,np),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(futur, nc-nom, futur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(673, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(antichars, adj-adj, antichar, [dl(0,n,n)-1]), si(impressionnantes, adj-adj, impressionnant, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(animation, nc-nom, animation, [n-1]), si(imaginant, vpr-ver:ppre, imaginer, [dr(0,dl(0,n,n),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(pourraient, v-ver:pres, pouvoir, [dr(0,dr(0,s,np),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(futur, nc-nom, futur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(674, Result) :-
      prob_parse([ si('Dirigeant', vpr-ver:ppre, 'Dirigeant', [dr(0,dl(0,np,s_ppres),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(turque, adj-adj, turc, [dl(0,n,n)-1]), si('Dahir', npp-nam, 'Dahir', [dl(0,n,n)-1]), si('Insaat', npp-nam, 'Insaat', [dl(0,n,n)-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(créée, vpp-ver:pper, créer, [dr(0,dl(0,np,s_ppart),np)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Dahir', npp-nam, 'Dahir', [dr(0,np,np)-1]), si('Semenov', npp-nam, 'Semenov', [np-1]), si(conçoit, v-ver:pres, concevoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(engins, nc-nom, engin, [n-1]), si(futuristes, adj-adj, futuriste, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(imagine, v-ver:pres, imaginer, [dr(0,dl(0,np,s),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(travers, nc-nom, travers, [n-1]), si(ses, det-det:pos, son, [n-1]), si(créations, nc-nom, création, [dr(0,np,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(futur, nc-nom, futur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(675, Result) :-
      prob_parse([ si('Dahir', npp-nam, 'Dahir', [dr(0,np,np)-1]), si('Semenov', npp-nam, 'Semenov', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(grandi, vpp-ver:pper, grandir, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(créée, vpp-ver:pper, créer, [dr(0,dl(0,np,s_ppart),np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(676, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(antichars, adj-adj, antichar, [dl(0,n,n)-1]), si(appartenant, vpr-ver:ppre, appartenir, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(illustrant, vpr-ver:ppre, illustrer, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(puissance, nc-nom, puissance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(677, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(production, nc-nom, production, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(certainement, adv-adv, certainement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(utilisées, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(678, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(impressionnantes, adj-adj, impressionnant, [dr(0,n,n)-1]), si(armes, nc-nom, arme, [n-1]), si(antichars, adj-adj, antichar, [dl(0,n,n)-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(illustre, v-ver:pres, illustre, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(679, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(impressionnantes, adj-adj, impressionnant, [dr(0,n,n)-1]), si(armes, nc-nom, arme, [n-1]), si(antichars, adj-adj, antichar, [dl(0,n,n)-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(680, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(acteurs, nc-nom, acteur, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(payés, vpp-ver:pper, payer, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(jouer, vinf-ver:infi, jouer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(victimes, nc-nom, victime, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(681, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(victimes, nc-nom, victime, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(réels, adj-adj, réel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), si(acteurs, nc-nom, acteur, [n-1]), si(jouant, vpr-ver:ppre, jouer, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(victimes, nc-nom, victime, [n-1]), si('Ukrainiens', adj-nam, 'Ukrainiens', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(682, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(appliquer, vinf-ver:infi, appliquer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(liquide, nc-nom, liquide, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si(semblable, adj-adj, semblable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(sang, nc-nom, sang, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si(',', ponct-pun, ',', [let-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(rit, v-ver:pres, rire, [dl(0,np,s)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(blonde, adj-adj, blond, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(683, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(maquiller, vinf-ver:infi, maquiller, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(sang, nc-nom, sang, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appui, nc-nom, appui, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(684, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(séquence, nc-nom, séquence, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(identique, adj-adj, identique, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(publiée, vpp-ver:pper, publier, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Daria', npp-nam, 'Daria', [dr(0,np,np)-1]), si('Driuchenko', npp-nam, 'Driuchenko', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(supprimée, vpp-ver:pper, supprimer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(685, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(séquence, nc-nom, séquence, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(antérieure, adj-adj, antérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(686, Result) :-
      prob_parse([ si('Daria', npp-nam, 'Daria', [dr(0,np,np)-1]), si('Driuchenko', npp-nam, 'Driuchenko', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(productrice, nc-nom, producteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(films, nc-nom, film, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(précisé, vpp-ver:pper, préciser, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(proviennent, v-ver:pres, provenir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(tournage, nc-nom, tournage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(nommée, vpp-ver:pper, nommer, [dr(0,dl(0,n,n),np)-1]), si('Contamin', npp-nam, 'Contamin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(687, Result) :-
      prob_parse([ si('Daria', npp-nam, 'Daria', [dr(0,np,np)-1]), si('Driuchenko', npp-nam, 'Driuchenko', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(2, adj-num, 2, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(filmées, vpp-ver:pper, filmer, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(tournage, nc-nom, tournage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(épisode, nc-nom, épisode, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Contamin', npp-nam, 'Contamin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(688, Result) :-
      prob_parse([ si('Daria', npp-nam, 'Daria', [dr(0,np,np)-1]), si('Driuchenko', npp-nam, 'Driuchenko', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(propriétaire, nc-nom, propriétaire, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(compte, nc-nom, compte, [n-1]), si('TikTok', npp-nam, 'TikTok', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(séquence, nc-nom, séquence, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(publiée, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(2, adj-num, 2, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(filmée, vpp-ver:pper, filmer, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(tournage, nc-nom, tournage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(épisode, nc-nom, épisode, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Contamin', npp-nam, 'Contamin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(689, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistrée, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2020, pro-num, 2020, [np-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tournage, nc-nom, tournage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(télévisée, vpp-ver:pper, télévisé, [dl(0,n,n)-1]), si('Contamin', npp-nam, 'Contamin', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(690, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(concernée, vpp-ver:pper, concerner, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistrée, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tournage, nc-nom, tournage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(télévisée, vpp-ver:pper, télévisé, [dl(0,n,n)-1]), si('Contamin', npp-nam, 'Contamin', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(partagée, vpp-ver:pper, partager, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(691, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(concernée, vpp-ver:pper, concerner, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistrée, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(692, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(autoriser, vinf-ver:infi, autoriser, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(ressortissants, nc-nom, ressortissant, [n-1]), si(syriens, adj-adj, syrien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(porter, vinf-ver:infi, porter, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), si(volontaires, adj-adj, volontaire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(combattre, vinf-ver:infi, combattre, [dl(0,np,s_inf)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(693, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(volontaires, nc-nom, volontaire, [n-1]), si(autorisés, vpp-ver:pper, autoriser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(combattre, vinf-ver:infi, combattre, [dl(0,np,s_inf)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(ressortissants, nc-nom, ressortissant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Proche-Orient', npp-nam, 'Proche-Orient', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si('Syriens', nc-nam, 'Syriens', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(694, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Première', adj-num, 'Première', [dr(0,n,n)-1]), si(dame, nc-nom, dame, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(femme, nc-nom, femme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), si('Zelenska', npp-nam, 'Zelenska', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sous, p-prp, sou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(soleil, nc-nom, soleil, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Nice', npp-nam, 'Nice', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(vendredi, nc-nom, vendredi, [dr(0,n,n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(695, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Zelensky', npp-nam, 'Zelensky', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(repérée, vpp-ver:pper, repérer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Nice', npp-nam, 'Nice', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(696, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(vendredi, nc-nom, vendredi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Première', adj-num, 'Première', [dr(0,n,n)-1]), si(dame, nc-nom, dame, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(femme, nc-nom, femme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), si('Zelenska', npp-nam, 'Zelenska', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sous, p-prp, sou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(soleil, nc-nom, soleil, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Nice', npp-nam, 'Nice', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(697, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), si('Zelenska', npp-nam, 'Zelenska', [np-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si('Kimberley', npp-nam, 'Kimberley', [dr(0,np,np)-1]), si('Garner', npp-nam, 'Garner', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Eden', npp-nam, 'Eden', [n-1]), si('Roc', npp-nam, 'Roc', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Antibes', npp-nam, 'Antibes', [np-1]), si(le, det-det:art, le, [np-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(698, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(fin, nc-nom, fin, [dr(0,dl(0,n,n),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('MiG-29', nc-abr, 'MiG-29', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(abat, v-ver:pres, abattre, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si('Su-35', npp-nam, 'Su-35', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Kyiv', npp-nam, 'Kyiv', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(699, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(fin, nc-nom, fin, [dr(0,dl(0,n,n),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(abat, v-ver:pres, abattre, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(700, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(impressionnant, adj-adj, impressionnant, [dr(0,n,n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(relayé, vpp-ver:pper, relayer, [dl(0,n,n)-1]), si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(provient, v-ver:pres, provenir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('DCS', npp-abr, 'DCS', [dr(0,np,np)-1]), si('World', npp-nam, 'World', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(simulateur, nc-nom, simulateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(suisse, adj-adj, suisse, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(jeux, nc-nom, jeu, [n-1]), si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), si('Eagle', npp-nam, 'Eagle', [dl(0,n,n)-1]), si('Dynamics', npp-nam, 'Dynamics', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(701, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(scène, nc-nom, scène, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(générée, vpp-ver:pper, générer, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('Digital', npp-nam, 'Digital', [dr(0,np,np)-1]), si('Combat', npp-nam, 'Combat', [dr(0,np,np)-1]), si('Simulator', npp-nam, 'Simulator', [dr(0,np,np)-1]), si('World', npp-nam, 'World', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('DCS', npp-abr, 'DCS', [dr(0,np,np)-1]), si('World', npp-nam, 'World', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(jeu, nc-nom, jeu, [n-1]), si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(simulation, nc-nom, simulation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(702, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(séquence, nc-nom, séquence, [n-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(détruisant, vpr-ver:ppre, détruire, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(appareil, nc-nom, appareil, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(occupants, nc-nom, occupant, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(relayée, vpp-ver:pper, relayer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Twitter', npp-nam, 'Twitter', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(défense, nc-nom, défense, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si('Facebook', npp-nam, 'Facebook', [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(703, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(détruit, v-ver:pres, détruire, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(partagée, vpp-ver:pper, partager, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(comptes, nc-nom, compte, [n-1]), si(officiels, adj-adj, officiel, [dl(0,n,n)-1]), si(représentant, vpr-ver:ppre, représenter, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(704, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(cours, nc-nom, cours, [n-1]), si(duquel, p+pro-pro:rel, duquel, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(détruit, v-ver:pres, détruire, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(capté, vpp-ver:pper, capter, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(fin, nc-nom, fin, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(705, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(censée, adj-adj, censer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(captée, vpp-ver:pper, capter, [dl(0,np,s_pass)-1]), si(fin, nc-nom, fin, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(éditée, vpp-ver:pper, éditer, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jeu, nc-nom, jeu, [n-1]), si('DCS', npp-nam, 'DCS', [dl(0,n,n)-1]), si('World', npp-nam, 'World', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Eagle', npp-nam, 'Eagle', [dr(0,np,np)-1]), si('Dynamics', npp-nam, 'Dynamics', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(706, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(fin, nc-nom, fin, [dr(0,dl(0,n,n),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('MiG-29', nc-abr, 'MiG-29', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(abat, v-ver:simp, abattre, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si('Su-35', npp-nam, 'Su-35', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Kyiv', npp-nam, 'Kyiv', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(707, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(avions, nc-nom, avion, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(apparaissent, v-ver:pres, apparaître, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(combat, nc-nom, combat, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('MiG-29', npp-abr, 'MiG-29', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Su-27', nc-nom, 'Su-27', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(708, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(internaute, nc-nom, internaute, [n-1]), si(congolais, adj-adj, congolais, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(blog, nc-nom, blog, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),pp)-1]), si(comme, adv-adv, comme, [dr(0,pp,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(point, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vue, nc-nom, vue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(raisons, nc-nom, raison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(709, Result) :-
      prob_parse([ si('Dès', p-prp, 'Dès', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(introduction, nc-nom, introduction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(précisé, vpp-ver:pper, préciser, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mots, nc-nom, mot, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(710, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(adressée, vpp-ver:pper, adresser, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), si(correspondance, nc-nom, correspondance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Président', nc-nom, 'Président', [n-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(711, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(internaute, nc-nom, internaute, [n-1]), si(congolais, adj-adj, congolais, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(blog, nc-nom, blog, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),pp)-1]), si(comme, adv-adv, comme, [dr(0,pp,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(point, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vue, nc-nom, vue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(raisons, nc-nom, raison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(712, Result) :-
      prob_parse([ si('Dès', p-prp, 'Dès', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(introduction, nc-nom, introduction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(précisé, vpp-ver:pper, préciser, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mots, nc-nom, mot, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(713, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(adressée, vpp-ver:pper, adresser, [dr(0,dl(0,n,n),pp_a)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(contient, v-ver:pres, contenir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mots, nc-nom, mot, [n-1]), si(exacts, adj-adj, exact, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Président', nc-nom, 'Président', [n-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(714, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lettre, nc-nom, lettre, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(détaillé, vpp-ver:pper, détailler, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(raisons, nc-nom, raison, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(715, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lettre, nc-nom, lettre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dirigeant, nc-nom, dirigeant, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(analyse, v-ver:pres, analyse, [dr(0,dl(0,np,s),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(raisons, nc-nom, raison, [n-1]), si(géopolitiques, adj-adj, géopolitique, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(offensive, nc-nom, offensive, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('2.000', det-num, '2.000', [dr(0,np,n)-1]), si(mots, nc-nom, mot, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(716, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(dite, vpp-ver:pper, dire, [dr(0,dl(0,n,n),pp)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dirigeant, nc-nom, dirigeant, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(analyse, v-ver:pres, analyse, [dr(0,dl(0,np,s),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(raisons, nc-nom, raison, [n-1]), si(géopolitiques, adj-adj, géopolitique, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(offensive, nc-nom, offensive, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('2.000', det-num, '2.000', [dr(0,np,n)-1]), si(mots, nc-nom, mot, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(717, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(dite, vpp-ver:pper, dire, [dr(0,dl(0,n,n),pp)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(écrite, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Merseign', npp-nam, 'Merseign', [dr(0,np,np)-1]), si('Luzonzo', npp-nam, 'Luzonzo', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(auteur, nc-nom, auteur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('Wordpress', npp-nam, 'Wordpress', [dl(0,n,n)-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('République', npp-nam, 'République', [n-1]), si('Démocratique', adj-nam, 'Démocratique', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Congo', npp-nam, 'Congo', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('RDC', npp-abr, 'RDC', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(718, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(émise, vpp-ver:pper, émettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(rédigée, vpp-ver:pper, rédiger, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(français, nc-nom, français, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(russe, nc-nom, russe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(719, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(partagée, vpp-ver:pper, partager, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(français, nc-nom, français, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(russe, nc-nom, russe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(renvoyer, vinf-ver:infi, renvoyer, [dr(0,dl(0,np,s_inf),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sources, nc-nom, source, [n-1]), si(officielles, adj-adj, officiel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(émise, vpp-ver:pper, émettre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(720, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(présentatrice, nc-nom, présentateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télévision, nc-nom, télévision, [n-1]), si('France', npp-nam, 'France', [dl(0,n,n)-1]), si(24, adj-num, 24, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interviewé, vpp-ver:pper, interviewer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Gabon', npp-nam, 'Gabon', [n-1]), si('Ali', npp-nam, 'Ali', [dl(0,n,n)-1]), si('Bongo', npp-nam, 'Bongo', [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(721, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('France', npp-nam, 'France', [dl(0,n,n)-1]), si(24, adj-num, 24, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), si('[n\'avait]', ponct-pun, '[n\'avait]', [let-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(depuis, p-prp, depuis, [let-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déclenchement, nc-nom, déclenchement, [dl(0,np,s_pass)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(722, Result) :-
      prob_parse([ si('France', npp-nam, 'France', [np-1]), si(24, adj-num, 24, [dl(0,np,np)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), si('Ali', npp-nam, 'Ali', [dl(0,n,n)-1]), si('Bongo', npp-nam, 'Bongo', [dl(0,n,n)-1]), si('Ondimba', npp-nam, 'Ondimba', [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(723, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Gabon', npp-nam, 'Gabon', [n-1]), si('Ali', npp-nam, 'Ali', [dl(0,n,n)-1]), si('Bongo', npp-nam, 'Bongo', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('France', npp-nam, 'France', [np-1]), si(24, adj-num, 24, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(724, Result) :-
      prob_parse([ si('Ali', npp-nam, 'Ali', [dr(0,np,np)-1]), si('Bongo', npp-nam, 'Bongo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(menacé, vpp-ver:pper, menacer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(attaquer, vinf-ver:infi, attaquer, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(retirait, v-ver:impf, retirer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envahi, vpp-ver:pper, envahir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(rage, nc-nom, rage, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(725, Result) :-
      prob_parse([ si('Ali', npp-nam, 'Ali', [dr(0,np,np)-1]), si('Bongo', npp-nam, 'Bongo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(dit, v-ver:pres, dire, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,n,n))-1]), si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si('ATTAQUER', vinf-ver:infi, 'ATTAQUER', [dr(0,dl(0,np,s_inf),np)-1]), si('LA', det-det:art, 'LA', [dr(0,np,n)-1]), si('RUSSIE', npp-nom, 'RUSSIE', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(recule, v-ver:pres, reculer, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(726, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(interview, nc-nom, interview, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(menacé, vpp-ver:pper, menacer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(retirait, v-ver:impf, retirer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(727, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voix, nc-nom, voix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(qualifié, vpp-ver:pper, qualifier, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(rumeur, nc-nom, rumeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(menace, nc-nom, menace, [n-1]), si(contra, et-ver:pres, contrer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(prétendue, adj-adj, prétendre, [dr(0,n,n)-1]), si(interview, nc-nom, interview, [n-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(fake, et-nom, fake, [dr(0,n,n)-1]), si(news, nc-nom, news, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(728, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Gabon', npp-nam, 'Gabon', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(membre, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si('Unies', vpp-ver:pper, 'Unies', [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(venir, vinf-ver:infi, venir, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(condamnant, vpr-ver:ppre, condamner, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(agression, nc-nom, agression, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(commise, vpp-ver:pper, commettre, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(729, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(gabonais, adj-adj, gabonais, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(exprimé, vpp-ver:pper, exprimer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(expliquant, vpr-ver:ppre, expliquer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Gabon', npp-nam, 'Gabon', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(attaché, vpp-ver:pper, attacher, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intégrité, nc-nom, intégrité, [n-1]), si(territoriale, adj-adj, territorial, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(730, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(lendemain, nc-nom, lendemain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrasé, vpp-ver:pper, écraser, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(autant, adv-adv, autant, [np-1]), si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passager, nc-nom, passager, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(731, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tank, nc-nom, tank, [n-1]), si(roule, v-ver:pres, roule, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(allure, nc-nom, allure, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(route, nc-nom, route, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(résidentiel, adj-adj, résidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(croise, v-ver:pres, croiser, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(route, nc-nom, route, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(roule, v-ver:pres, roule, [dl(0,np,s)-1]), si('par-dessus', adv-adv, 'par-dessus', [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(732, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(conducteur, nc-nom, conducteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(survécu, vpp-ver:pper, survivre, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(733, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(accident, nc-nom, accident, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(soldat, nc-nom, soldat, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(bord, nc-nom, bord, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(734, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(écrase, v-ver:pres, écraser, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(civile, adj-adj, civil, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nord, nc-nom, nord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(735, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(lendemain, nc-nom, lendemain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrasé, vpp-ver:pper, écraser, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(autant, adv-adv, autant, [np-1]), si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passager, nc-nom, passager, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(736, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(passager, nc-nom, passager, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vivant, adj-ver:ppre, vivant, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrasé, vpp-ver:pper, écraser, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(737, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(lendemain, nc-nom, lendemain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(écraser, vinf-ver:infi, écraser, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(autant, adv-adv, autant, [np-1]), si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passager, nc-nom, passager, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(738, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(passager, nc-nom, passager, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrasé, vpp-ver:pper, écraser, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(739, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(accident, nc-nom, accident, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('9K35', npp-abr, '9K35', [dr(0,n,n)-1]), si('Strela-10', npp-nam, 'Strela-10', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(char, nc-nom, char, [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(740, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accident, nc-nom, accident, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(identifié, vpp-ver:pper, identifier, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(741, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(accident, nc-nom, accident, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(soldat, nc-nom, soldat, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(bord, nc-nom, bord, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(fuyant, vpr-ver:ppre, fuir, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(camion, nc-nom, camion, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(saboteurs, nc-nom, saboteur, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(742, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(conducteur, nc-nom, conducteur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(camion, nc-nom, camion, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(saboteur, nc-nom, saboteur, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(bien, adv-adv, bien, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(soldat, nc-nom, soldat, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(bord, nc-nom, bord, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(percuté, vpp-ver:pper, percuter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(accident, nc-nom, accident, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(fuyant, vpr-ver:ppre, fuir, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(743, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(accident, nc-nom, accident, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Obolon', npp-nam, 'Obolon', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(soldat, nc-nom, soldat, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(bord, nc-nom, bord, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(fuyant, vpr-ver:ppre, fuir, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(camion, nc-nom, camion, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(saboteurs, nc-nom, saboteur, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(744, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(char, nc-nom, char, [n-1]), si(impliqué, vpp-ver:pper, impliquer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accident, nc-nom, accident, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Obolono', npp-nam, 'Obolono', [np-1]), si(semble, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(perturbé, vpp-ver:pper, perturber, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrivée, nc-nom, arrivée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(camion, nc-nom, camion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(745, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(camion, nc-nom, camion, [n-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(saboteurs, nc-nom, saboteur, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(746, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(pilote, nc-nom, pilote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chasse, nc-nom, chasse, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Natasha', npp-nam, 'Natasha', [dr(0,np,np)-1]), si('Perakov', npp-nam, 'Perakov', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(747, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(pilote, nc-adj, pilote, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Nadia', npp-nam, 'Nadia', [dr(0,np,np)-1]), si('Savtchenko', npp-nam, 'Savtchenko', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(',', ponct-pun, ',', [let-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(active, adj-adj, actif, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(748, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(pilote, nc-nom, pilote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chasse, nc-nom, chasse, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(749, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(pilote, adj-adj, pilote, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(',', ponct-pun, ',', [let-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(active, adj-adj, actif, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(source, nc-nom, source, [n-1]), si(annonçant, vpr-ver:ppre, annoncer, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(éventuel, adj-adj, éventuel, [dr(0,n,n)-1]), si(décès, nc-nom, décès, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(750, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(pilote, nc-nom, pilote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chasse, nc-nom, chasse, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Natasha', npp-nam, 'Natasha', [dr(0,np,np)-1]), si('Perakov', npp-nam, 'Perakov', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédée, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(751, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(pilote, nc-nom, pilote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appelle, v-ver:pres, appeler, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si('Nadia', npp-nam, 'Nadia', [dr(0,np,np)-1]), si('Savtchenko', npp-nam, 'Savtchenko', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(752, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(pilote, adj-adj, pilote, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appelle, v-ver:pres, appeler, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si('Nadia', npp-nam, 'Nadia', [dr(0,np,np)-1]), si('Savtchenko', npp-nam, 'Savtchenko', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(753, Result) :-
      prob_parse([ si('Nadia', npp-nam, 'Nadia', [dr(0,np,np)-1]), si('Savtchenko', npp-nam, 'Savtchenko', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(accusée, vpp-ver:pper, accuser, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(journalistes, nc-nom, journaliste, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(754, Result) :-
      prob_parse([ si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Xi', npp-nam, 'Xi', [dr(0,np,np)-1]), si('Jinping', npp-nam, 'Jinping', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Rumen', npp-nam, 'Rumen', [dr(0,np,np)-1]), si('Radev', npp-nam, 'Radev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Nikol', npp-nam, 'Nikol', [dr(0,np,np)-1]), si('Pashinyan', npp-nam, 'Pashinyan', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Pellegrini', npp-nam, 'Pellegrini', [np-1]), si(',', ponct-pun, ',', [let-1]), si(faisaient, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(personnalités, nc-nom, personnalité, [n-1]), si(présentes, vpp-ver:pper, présent, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Forum', nc-nam, 'Forum', [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si(instar, nc-nom, instar, [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('António', npp-nam, 'António', [dr(0,np,np)-1]), si('Guterres', npp-nam, 'Guterres', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si(secrétaire, nc-nom, secrétaire, [dr(0,np,n)-1]), si(général, adj-adj, général, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', npp-nam, 'Organisation', [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(nations, nc-nom, nation, [dr(0,dl(0,n,n),n)-1]), si(unies, adj-adj, uni, [dr(0,dl(0,n,n),n)-1]), si('(', ponct-pun, '(', [n-1]), si('ONU', npp-abr, 'ONU', [let-1]), si(')', ponct-pun, ')', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(755, Result) :-
      prob_parse([ si('António', npp-nam, 'António', [dr(0,np,np)-1]), si('Guterres', npp-nam, 'Guterres', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(participé, vpp-ver:pper, participer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(édition, nc-nom, édition, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Forum', nc-nam, 'Forum', [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(756, Result) :-
      prob_parse([ si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(mention, nc-nom, mention, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élection, nc-nom, élection, [n-1]), si(présidentielle, adj-adj, présidentiel, [dl(0,n,n)-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2022, pro-num, 2022, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(propos, nc-nom, propos, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échange, nc-nom, échange, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(élections, nc-nom, élection, [n-1]), si(présidentielles, adj-adj, présidentiel, [dl(0,n,n)-1]), si(françaises, adj-adj, français, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(757, Result) :-
      prob_parse([ si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(avis, nc-nom, avis, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élection, nc-nom, élection, [n-1]), si(présidentielle, adj-adj, présidentiel, [dl(0,n,n)-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2022, pro-num, 2022, [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(échange, nc-nom, échange, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(758, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si(parodique, adj-adj, parodique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accolé, vpp-ver:pper, accoler, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('sous-titres', nc-nom, 'sous-titres', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(français, nc-nom, français, [n-1]), si(erronés, vpp-ver:pper, erroné, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(images, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(datant, vpr-ver:ppre, dater, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(édition, nc-nom, édition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('Forum', nc-nam, 'Forum', [n-1]), si(économique, adj-adj, économique, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(759, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('sous-titres', nc-nom, 'sous-titres', [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mots, nc-nom, mot, [n-1]), si(injurieux, adj-adj, injurieux, [dl(0,n,n)-1]), si(ajoutés, vpp-ver:pper, ajouter, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(propos, nc-nom, propos, [n-1]), si(tenus, vpp-ver:pper, tenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(date, v-ver:pres, date, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(édition, nc-nom, édition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forum, nc-nom, forum, [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Saint-Pétersbourg', npp-nam, 'Saint-Pétersbourg', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(parodiques, adj-adj, parodique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(760, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(position, nc-nom, position, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(qui, prorel-pro:rel, qui, [cl_r-1]), si(soutenir, vinf-ver:infi, soutenir, [dl(0,np,s_inf)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prochaine, adj-adj, prochain, [dr(0,n,n)-1]), si(élection, nc-nom, élection, [n-1]), si(présidentielle, adj-adj, présidentiel, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(761, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Français', nc-nam, 'Français', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(voter, vinf-ver:infi, voter, [dr(0,dl(0,np,s_inf),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avril, nc-nom, avril, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(762, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(média, nc-nom, média, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(état, nc-nom, état, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quelconque, adj-adj, quelconque, [dr(0,n,n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(homologue, nc-nom, homologue, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(perspective, nc-nom, perspective, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, adj-adj, présidentielle, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(763, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(envoyés, nc-nom, envoyé, [n-1]), si(spéciaux, adj-adj, spécial, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(pas, adv-adv, pas, [dr(0,dr(0,np,np),dr(0,np,np))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(médias, nc-nom, média, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(état, nc-nom, état, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quelconque, adj-adj, quelconque, [dr(0,n,n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(vue, nc-nom, vue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(764, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(flashes, nc-nom, flash, [n-1]), si(lumineux, adj-adj, lumineux, [dl(0,n,n)-1]), si(déchirant, vpr-ver:ppre, déchirer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ciel, nc-nom, ciel, [n-1]), si(',', ponct-pun, ',', [let-1]), si(accompagnés, vpp-ver:pper, accompagner, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(grondements, nc-nom, grondement, [n-1]), si(sourds, adj-adj, sourd, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(observés, vpp-ver:pper, observer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(quelques, det-pro:ind, quelque, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(heures, nc-nom, heure, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(orage, nc-nom, orage, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(765, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(flashes, nc-nom, flash, [n-1]), si(lumineux, adj-adj, lumineux, [dl(0,n,n)-1]), si(déchirant, vpr-ver:ppre, déchirer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ciel, nc-nom, ciel, [n-1]), si(',', ponct-pun, ',', [let-1]), si(accompagnés, vpp-ver:pper, accompagner, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(grondements, nc-nom, grondement, [n-1]), si(sourds, adj-adj, sourd, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(provoqués, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si(',', ponct-pun, ',', [let-1]), si(quelques, det-pro:ind, quelque, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), si(heures, nc-nom, heure, [n-1]), si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(766, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(allongés, vpp-ver:pper, allonger, [dr(0,dl(0,n,n),pp)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(terre, nc-nom, terre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sacs, nc-nom, sac, [n-1]), si(sombres, adj-adj, sombre, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(protesté, vpp-ver:pper, protester, [dr(0,dl(0,np,s_ppart),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Autriche', npp-nam, 'Autriche', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(767, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(protesté, vpp-ver:pper, protester, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(autrichienne, adj-adj, autrichien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chancellerie', nc-nam, 'Chancellerie', [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(768, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(allongés, vpp-ver:pper, allonger, [dr(0,dl(0,n,n),pp)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(terre, nc-nom, terre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sacs, nc-nom, sac, [n-1]), si(sombres, adj-adj, sombre, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(protesté, vpp-ver:pper, protester, [dr(0,dl(0,np,s_ppart),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Autriche', npp-nam, 'Autriche', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(769, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(uniquement, adv-adv, uniquement, [dr(0,pp,pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(770, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si(tués, vpp-ver:pper, tuer, [dr(0,dl(0,n,n),pp_par)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(771, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(filmé, vpp-ver:pper, filmer, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(direct, nc-nom, direct, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(772, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(action, nc-nom, action, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Fridays', npp-nam, 'Fridays', [np-1]), si('For', et-nam, 'For', [dr(0,dl(0,np,np),np)-1]), si('Future', npp-nam, 'Future', [np-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,np,np)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(militants, nc-nom, militant, [n-1]), si(gisaient, v-ver:impf, gésir, [dl(0,np,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(morts, nc-nom, mort, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chancellerie, nc-nom, chancellerie, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Vienne', npp-nam, 'Vienne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(773, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(symbolisent, v-ver:pres, symboliser, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(mourront, v-ver:pres, mourir, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échec, nc-nom, échec, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(774, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(militants, nc-nom, militant, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(gisaient, v-ver:impf, gésir, [dl(0,np,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(morts, nc-nom, mort, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chancellerie, nc-nom, chancellerie, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Vienne', npp-nam, 'Vienne', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(conçus, vpp-ver:pper, concevoir, [dl(0,np,s_pass)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(symbole, nc-nom, symbole, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(vrais, adj-adj, vrai, [dr(0,n,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(775, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(allongés, vpp-ver:pper, allonger, [dr(0,dl(0,n,n),pp)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(terre, nc-nom, terre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sacs, nc-nom, sac, [n-1]), si(sombres, adj-adj, sombre, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Vienne', npp-nam, 'Vienne', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(protesté, vpp-ver:pper, protester, [dr(0,dl(0,np,s_ppart),pp)-1]), si(uniquement, adv-adv, uniquement, [dr(0,pp,pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Autriche', npp-nam, 'Autriche', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(776, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(allongés, vpp-ver:pper, allonger, [dr(0,dl(0,n,n),pp)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(terre, nc-nom, terre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sacs, nc-nom, sac, [n-1]), si(sombres, adj-adj, sombre, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Vienne', npp-nam, 'Vienne', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(protesté, vpp-ver:pper, protester, [dr(0,dl(0,np,s_ppart),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(777, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1991, pro-num, 1991, [np-1]), si(',', ponct-pun, ',', [let-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(déclassifié, vpp-ver:pper, déclassifier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(prouve, v-ver:pres, prouver, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rupture, nc-nom, rupture, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(accord, nc-nom, accord, [n-1]), si(écrit, vpp-ver:pper, écrire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Soviétiques', nc-nam, 'Soviétiques', [n-1]), si(promettant, vpr-ver:ppre, promettre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(élargir, vinf-ver:infi, élargir, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alliance, nc-nom, alliance, [n-1]), si('politico-militaire', adj-adj, 'politico-militaire', [dl(0,n,n)-1]), si('au-delà', p-prp, 'au-delà', [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(réunifiée, vpp-ver:pper, réunifier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(778, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rompu, vpp-ver:pper, rompre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(passé, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(prévoyant, vpr-ver:ppre, prévoir, [dr(0,dl(0,n,n),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étendrait, v-ver:impf, étendre, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(779, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1991, pro-num, 1991, [np-1]), si(',', ponct-pun, ',', [let-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(déclassifié, vpp-ver:pper, déclassifier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(prouve, v-ver:pres, prouver, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rupture, nc-nom, rupture, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(accord, nc-nom, accord, [n-1]), si(écrit, vpp-ver:pper, écrire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Soviétiques', nc-nam, 'Soviétiques', [n-1]), si(promettant, vpr-ver:ppre, promettre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(élargir, vinf-ver:infi, élargir, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alliance, nc-nom, alliance, [n-1]), si('politico-militaire', adj-adj, 'politico-militaire', [dl(0,n,n)-1]), si('au-delà', p-prp, 'au-delà', [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(réunifiée, vpp-ver:pper, réunifier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(780, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(datant, vpr-ver:ppre, dater, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1991, pro-num, 1991, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(classé, vpp-ver:pper, classer, [dr(0,dl(0,n,n),np)-1]), si('\'', ponct-pun:cit, '\'', [np-1]), si('secret\'', npp-nom, 'secret\'', [let-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(déclassifié, vpp-ver:pper, déclassifier, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(781, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Alliance', nc-nam, 'Alliance', [n-1]), si('nord-atlantique', adj-adj, 'nord-atlantique', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(violé, vpp-ver:pper, violer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(passé, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sortie, nc-nom, sortie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('URSS', npp-abr, 'URSS', [n-1]), si(prévoyant, vpr-ver:ppre, prévoir, [dr(0,dl(0,n,n),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étende, v-ver:pres, étendre, [dr(0,dl(0,np,s),np)-1]), si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(782, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rompu, vpp-ver:pper, rompre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(promesse, nc-nom, promesse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étendre, vinf-ver:infi, étendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(',', ponct-pun, ',', [let-1]), si(actée, vpp-ver:pper, acter, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunification, nc-nom, réunification, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [let-1]), si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chute, nc-nom, chute, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mur, nc-nom, mur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(783, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(juridiquement, adv-adv, juridiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(contraignant, adj-adj, contraignant, [dl(0,n,n)-1]), si(passé, vpp-ver:pper, passer, [dr(0,dl(0,n,n),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(permet, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(démarcation, nc-nom, démarcation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(784, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), si(suivant, vpr-ver:ppre, suivre, [dr(0,dl(0,np,s_ppres),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(passé, vpp-ver:pper, passer, [dr(0,dl(0,n,n),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(naissante, adj-adj, naissant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(démarcation, nc-nom, démarcation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(785, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(accord, nc-nom, accord, [n-1]), si(écrit, vpp-ver:pper, écrire, [dl(0,n,n)-1]), si(contraignant, adj-adj, contraignant, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signé, vpp-ver:pper, signer, [dl(0,np,s_pass)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(interdit, v-ver:pres, interdire, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(élargir, vinf-ver:infi, élargir, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(786, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(juridiquement, adv-adv, juridiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(contraignant, adj-adj, contraignant, [dl(0,n,n)-1]), si(permet, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(démarcation, nc-nom, démarcation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(787, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(engagements, nc-nom, engagement, [n-1]), si(verbaux, adj-adj, verbal, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(rassurer, vinf-ver:infi, rassurer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Soviétiques', nc-nam, 'Soviétiques', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunification, nc-nom, réunification, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(adhésion, nc-nom, adhésion, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alliance', nc-nam, 'Alliance', [n-1]), si('nord-atlantique', adj-adj, 'nord-atlantique', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(788, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(engagement, nc-nom, engagement, [n-1]), si(oral, adj-adj, oral, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(émise, vpp-ver:pper, émettre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si('Soviétique', adj-nam, 'Soviétique', [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(789, Result) :-
      prob_parse([ si('L\'OTAN', npp-abr, 'L\'OTAN', [dr(0,np,n)-1]), si(affirme, v-ver:pres, affirmer, [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,np,s),s_q)-1]), si(équivoque, nc-nom, équivoque, [dr(0,dl(1,s,s),n)-1]), si('qu\'', cs-kon, 'qu\'', [n-1]), si(il, cls-pro:per, il, [dr(0,s_q,s)-1]), si('n\'', adv-adv, 'n\'', [np-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aura, v-ver:futu, avoir, [cl_y-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,np,pp_de)-1]), si(expansion, nc-nom, expansion, [dr(0,pp_de,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(territoire, nc-nom, territoire, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('OTAN', npp-abr, 'OTAN', [dr(0,np,n)-1]), si(vers, p-prp, vers, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Est', npp-nam, 'Est', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si('c\'', cls-pro:dem, 'c\'', [let-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [np-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,dl(0,dl(1,s,s),dl(1,s,s))),dl(1,s,s))-1]), si(près, adv-adv, près, [dr(0,pp,pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_a,pp_de)-1]), si(frontières, nc-nom, frontière, [dr(0,pp_de,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Union', npp-nam, 'Union', [dr(0,np,n)-1]), si(soviétique, adj-adj, soviétique, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [let-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dl(1,s,dl(0,np,s_ppart))-1]), si(ministre, nc-nom, ministre, [dr(0,np,n)-1]), si(allemand, adj-adj, allemand, [n-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si('Affaires', nc-nom, 'Affaires', [dr(0,dl(0,n,n),n)-1]), si(étrangères, adj-adj, étranger, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si('Hans-Dietrich', npp-nam, 'Hans-Dietrich', [dr(0,dl(0,np,np),np)-1]), si('Genscher', npp-nam, 'Genscher', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si(lors, adv-adv, lors, [let-1]), si('d\'', p-prp, 'd\'', [let-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),pp_de)-1]), si(discours, nc-nom, discours, [dr(0,pp_de,np)-1]), si(prononcé, vpp-ver:pper, prononcer, [dr(0,np,n)-1]), si(en, p-prp, en, [n-1]), si(janvier, nc-nom, janvier, [dl(0,n,n)-1]), si(1990, adj-num, 1990, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(790, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('\'', ponct-pun:cit, '\'', [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si(expansion, nc-nom, expansion, [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si('OTAN\'', npp-abr, 'OTAN\'', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(discuté, vpp-ver:pper, discuter, [dl(0,np,s_pass)-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(tout, nc-nom, tout, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(évoqué, vpp-ver:pper, évoquer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, adv-adv, avant, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(791, Result) :-
      prob_parse([ si('Pas', adv-adv, 'Pas', [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(soulevé, vpp-ver:pper, soulever, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(question, nc-nom, question, [n-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(792, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(793, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('comptes-rendus', nc-nom, 'comptes-rendus', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entretiens, nc-nom, entretien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chefs, nc-nom, chef, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nam, 'État', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Ministres', nc-nom, 'Ministres', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si('Étrangères', adj-adj, 'Étrangères', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(commencent, v-ver:pres, commencer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(publiés, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),np),dl(0,np,s_inf))-1]), si(apparaître, vinf-ver:infi, apparaître, [dl(0,np,s_inf)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(engagements, nc-nom, engagement, [n-1]), si(oraux, adj-adj, oral, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(entendu, vpp-ver:pper, entendre, [dl(0,n,n)-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étendre, vinf-ver:infi, étendre, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(794, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(garanties, nc-nom, garantie, [n-1]), si(orales, adj-adj, oral, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(émises, vpp-ver:pper, émettre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(795, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(mémorandum, nc-nom, mémorandum, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Budapest', npp-nam, 'Budapest', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(signé, vpp-ver:pper, signer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1994, pro-num, 1994, [np-1]), si(',', ponct-pun, ',', [let-1]), si(engageait, v-ver:impf, engager, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(signataires, nc-nom, signataire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(existantes, adj-adj, existant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(abstenir, vinf-ver:infi, abstenir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(menace, nc-nom, menace, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intégrité, nc-nom, intégrité, [n-1]), si(territoriale, adj-adj, territorial, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(796, Result) :-
      prob_parse([ si('Toutefois', adv-adv, 'Toutefois', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(respecté, vpp-ver:pper, respecter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(recouru, vpp-ver:pper, recourir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(intégrité, nc-nom, intégrité, [n-1]), si(territoriale, adj-adj, territorial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(envahissant, vpr-ver:ppre, envahir, [dr(0,dl(0,np,s_ppres),np)-1]), si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(797, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(enfreint, vpp-ver:pper, enfreindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(promesse, nc-nom, promesse, [n-1]), si(écrite, vpp-ver:pper, écrire, [dl(0,n,n)-1]), si(passée, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(mémorandum, nc-nom, mémorandum, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Budapest', npp-nam, 'Budapest', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(798, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('13.000', det-num, '13.000', [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tués, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Donbass', npp-nam, 'Donbass', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(799, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Donbass', npp-nam, 'Donbass', [np-1]), si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(huit, adj-num, huit, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si('13.000', det-num, '13.000', [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si(tués, vpp-ver:pper, tuer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(800, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, être, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épicentre, nc-nom, épicentre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(éclaté, vpp-ver:pper, éclater, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(annexion, nc-nom, annexion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(péninsule, nc-nom, péninsule, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Crimée', npp-nam, 'Crimée', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(801, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(confrontée, vpp-ver:pper, confronter, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(annexion, nc-nom, annexion, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(péninsule, nc-nom, péninsule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Crimée', npp-nam, 'Crimée', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(802, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2015, pro-num, 2015, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(diminué, vpp-ver:pper, diminuer, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(intensité, nc-nom, intensité, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(signature, nc-nom, signature, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(accords, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(803, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(intensité, nc-nom, intensité, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(année, nc-nom, année, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('cessez-le-feu', nc-nom, 'cessez-le-feu', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(signé, vpp-ver:pper, signer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [n-1]), si(2015, adj-num, 2015, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(804, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('13.000', adj-num, '13.000', [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Donbass', npp-nam, 'Donbass', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(toutes, adv-adv, tout, [dl(1,s,s)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(805, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('13.000', adj-num, '13.000', [dr(0,n,n)-1]), si(morts, nc-nom, mort, [n-1]), si(',', ponct-pun, ',', [let-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('10.000', pro-num, '10.000', [np-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(combattants, nc-nom, combattant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(parties, nc-nom, party, [n-1]), si(prenantes, vpr-ver:ppre, prenant, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(806, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Donbass', npp-nam, 'Donbass', [np-1]), si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), si('13.000', det-num, '13.000', [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si(tués, vpp-ver:pper, tuer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(807, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si('2014-2021', adj-num, '2014-2021', [dl(0,n,n)-1]), si(couvrant, vpr-ver:ppre, couvrir, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Onu', npp-nam, 'Onu', [n-1]), si(estime, v-ver:pres, estime, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('14.200', pro-num, '14.200', [np-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquels, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), si('3.400', det-num, '3.400', [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(808, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si(décédés, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(cours, nc-nom, cours, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('14.200', pro-num, '14.200', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(809, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si('2014-2021', adj-num, '2014-2021', [dl(0,n,n)-1]), si(couvrant, vpr-ver:ppre, couvrir, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Onu', npp-nam, 'Onu', [n-1]), si(estime, v-ver:pres, estime, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('14.200', pro-num, '14.200', [np-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquels, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), si('3.400', det-num, '3.400', [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(810, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si(décédés, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(cours, nc-nom, cours, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('3.400', pro-num, '3.400', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(811, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(responsabilités, nc-nom, responsabilité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(partagées, vpp-ver:pper, partager, [dr(0,dl(0,np,s_pass),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(pénale, adj-adj, pénal, [dl(0,n,n)-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CPI', npp-abr, 'CPI', [n-1]), si(')', ponct-pun, ')', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2020, pro-num, 2020, [np-1]), si(',', ponct-pun, ',', [let-1]), si(évoquant, vpr-ver:ppre, évoquer, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(armé, vpp-ver:pper, armé, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(camps, nc-nom, camp, [n-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(constamment, adv-adv, constamment, [dl(1,s,s)-1]), si(usage, nc-nom, usage, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(armes, nc-nom, arme, [n-1]), si(lourdes, adj-adj, lourd, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(zones, nc-nom, zone, [n-1]), si(construites, vpp-ver:pper, construire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(812, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(différents, adj-adj, différent, [dr(0,n,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(publiés, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(dressent, v-ver:pres, dresser, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tableau, nc-nom, tableau, [n-1]), si(nuancé, vpp-ver:pper, nuancer, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(responsabilité, nc-nom, responsabilité, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(camps, nc-nom, camp, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(813, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(responsabilités, nc-nom, responsabilité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(partagées, vpp-ver:pper, partager, [dl(0,np,s_pass)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [let-1]), si(abonde, v-ver:pres, abonder, [dr(0,dl(1,s,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(pénale, adj-adj, pénal, [dl(0,n,n)-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CPI', npp-abr, 'CPI', [n-1]), si(')', ponct-pun, ')', [let-1]), si(évoquant, vpr-ver:ppre, évoquer, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(armé, vpp-ver:pper, armé, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(camps, nc-nom, camp, [n-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(constamment, adv-adv, constamment, [dl(1,s,s)-1]), si(usage, nc-nom, usage, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(armes, nc-nom, arme, [n-1]), si(lourdes, adj-adj, lourd, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(zones, nc-nom, zone, [n-1]), si(construites, vpp-ver:pper, construire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(814, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(exactions, nc-nom, exaction, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(imputables, adj-adj, imputable, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(camps, nc-nom, camp, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si(seulement, adv-adv, seulement, [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CPI', npp-abr, 'CPI', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(815, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(large, adj-adj, large, [dr(0,n,n)-1]), si(éventail, nc-nom, éventail, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(comportements, nc-nom, comportement, [n-1]), si(constitutifs, adj-adj, constitutif, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(relevant, vpr-ver:ppre, relever, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compétence, nc-nom, compétence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(pénale, adj-adj, pénal, [dl(0,n,n)-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CPI', npp-abr, 'CPI', [n-1]), si(')', ponct-pun, ')', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(commis, vpp-ver:pper, commettre, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contexte, nc-nom, contexte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(armé, vpp-ver:pper, armer, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(816, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(constaté, vpp-ver:pper, constater, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(817, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(redoutable, adj-adj, redoutable, [dr(0,n,n)-1]), si(arme, nc-nom, arme, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(capable, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(piétiner, vinf-ver:infi, piétiner, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(818, Result) :-
      prob_parse([ si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(donnerait, v-ver:cond, donner, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capacité, nc-nom, capacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(secondes, nc-nom, seconde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(819, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(redoutable, adj-adj, redoutable, [dr(0,n,n)-1]), si(arme, nc-nom, arme, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(capable, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(piétiner, vinf-ver:infi, piétiner, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(820, Result) :-
      prob_parse([ si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(puissant, adj-adj, puissant, [dr(0,n,n)-1]), si(missile, nc-nom, missile, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(821, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si('RS-28', npp-nam, 'RS-28', [dl(0,n,n)-1]), si('Sarmat', npp-nam, 'Sarmat', [dl(0,n,n)-1]), si(surnommé, vpp-ver:pper, surnommer, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(service, nc-nom, service, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(822, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tout, adv-adv, tout, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(missile, nc-nom, missile, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(existe, v-ver:pres, exister, [dl(0,np,s)-1]), si(bel, adj-adj, bel, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(encore, adv-adv, encore, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(service, nc-nom, service, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(823, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tout, adv-adv, tout, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(missile, nc-nom, missile, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(existe, v-ver:pres, exister, [dl(0,np,s)-1]), si(bel, adj-adj, bel, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(encore, adv-adv, encore, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(service, nc-nom, service, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(824, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si('Topol', npp-nam, 'Topol', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(exact, adj-adj, exact, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('RT-2PM2', npp-nam, 'RT-2PM2', [np-1]), si(',', ponct-pun, ',', [let-1]), si(existe, v-ver:pres, exister, [dl(0,np,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(service, nc-nom, service, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contrairement, adv-adv, contrairement, [dr(0,dl(1,s,s),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(missile, nc-nom, missile, [n-1]), si('Satan', npp-nam, 'Satan', [dl(0,n,n)-1]), si(2, adj-num, 2, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(825, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('Topol', npp-nam, 'Topol', [dl(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('RT-2PM2', npp-nam, 'RT-2PM2', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1997, pro-num, 1997, [np-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si(balistiques, adj-adj, balistique, [dl(0,n,n)-1]), si(intercontinentaux, adj-adj, intercontinental, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(propergol, nc-nom, propergol, [n-1]), si(solide, adj-adj, solide, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(portée, nc-nom, portée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('11.000', det-num, '11.000', [dr(0,np,n)-1]), si(km, nc-abr, kilomètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(826, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si('Topol', npp-nam, 'Topol', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(exact, adj-adj, exact, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('RT-2PM2', npp-nam, 'RT-2PM2', [np-1]), si(',', ponct-pun, ',', [let-1]), si(existe, v-ver:pres, exister, [dl(0,np,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(service, nc-nom, service, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contrairement, adv-adv, contrairement, [dr(0,dl(1,s,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(missile, nc-nom, missile, [n-1]), si('Satan', npp-nam, 'Satan', [dl(0,n,n)-1]), si(2, adj-num, 2, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(827, Result) :-
      prob_parse([ si('Sans', p-prp, 'Sans', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(préciser, vinf-ver:infi, préciser, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(quel, prowh-pro:rel, quel, [dr(0,s_whq,dr(0,s,dia(1,box(1,dl(0,n,n)))))-1]), si(était, v-ver:impf, être, [dr(0,dr(0,s,dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(exact, adj-adj, exact, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(missile, nc-nom, missile, [n-1]), si('R-36', npp-nam, 'R-36', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Pavel', npp-nam, 'Pavel', [dr(0,np,np)-1]), si('Korsun', npp-nam, 'Korsun', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agissait, v-ver:impf, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Satan', npp-nam, 'Satan', [n-1]), si(2, adj-num, 2, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(bien, adv-adv, bien, [dr(0,pp,pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(antérieur, adj-adj, antérieur, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(828, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si('R-36', npp-nam, 'R-36', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(modèle, nc-nom, modèle, [n-1]), si('Satan', npp-nam, 'Satan', [dl(0,n,n)-1]), si(2, adj-num, 2, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(829, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si('RS-28', npp-nam, 'RS-28', [dl(0,n,n)-1]), si('Sarmart', npp-nam, 'Sarmart', [dl(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('SS-X-30', npp-nam, 'SS-X-30', [dl(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si('Satan', npp-nam, 'Satan', [np-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(néanmoins, adv-adv, néanmoins, [dl(1,s,s)-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(néant, nc-nom, néant, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(taille, nc-nom, taille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('puisqu\'il', cls-pro:rel, 'puisqu\'il', [dr(0,dl(0,s,s),s)-1]), si(est, v-ver:pres, être, [np-1]), si(capable, adj-adj, capable, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(transporter, vinf-ver:infi, transporter, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,dl(0,np,s_inf),np)-1]), si(dizaine, nc-num, dizaine, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ogives, nc-nom, ogive, [dr(0,dl(0,n,n),n)-1]), si(nucléaires, adj-adj, nucléaire, [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(830, Result) :-
      prob_parse([ si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(donnerait, v-ver:cond, donner, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capacité, nc-nom, capacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(secondes, nc-nom, seconde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(831, Result) :-
      prob_parse([ si('RS-28', npp-abr, 'RS-28', [dr(0,np,np)-1]), si('Sarmart', npp-nam, 'Sarmart', [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si('Satan', npp-nam, 'Satan', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(balistique, adj-adj, balistique, [dl(0,n,n)-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(donnerait, v-ver:cond, donner, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capacité, nc-nom, capacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(secondes, nc-nom, seconde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(832, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('RS-28', npp-abr, 'RS-28', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(balistique, adj-adj, balistique, [dl(0,n,n)-1]), si(intercontinental, adj-adj, intercontinental, [dl(0,n,n)-1]), si(avancé, vpp-ver:pper, avancé, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('ICBM', npp-abr, 'ICBM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(conçu, vpp-ver:pper, concevoir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(échapper, vinf-ver:infi, échapper, [dr(0,dl(0,np,s_inf),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(défenses, nc-nom, défense, [n-1]), si(ennemies, adj-adj, ennemi, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(833, Result) :-
      prob_parse([ si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si('900.000', det-num, '900.000', [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(actif, adj-adj, actif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(équipée, vpp-ver:pper, équiper, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(armes, nc-nom, arme, [n-1]), si(dernier, adj-adj, dernier, [dr(0,dl(0,n,n),n)-1]), si(cri, nc-nom, cri, [n-1]), si(telles, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(systèmes, nc-nom, système, [n-1]), si(antiaériens, adj-adj, antiaérien, [dl(0,n,n)-1]), si('S-400', npp-nam, 'S-400', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(croisière, nc-nom, croisière, [n-1]), si('Kalibr', npp-nam, 'Kalibr', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(834, Result) :-
      prob_parse([ si('S-400', npp-nam, 'S-400', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Kalibr', npp-nam, 'Kalibr', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(partie, nc-nom, partie, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arsenal, nc-nom, arsenal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(835, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(portait, v-ver:impf, porter, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(épaules, nc-nom, épaule, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si(côtés, nc-nom, côté, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(arborant, vpr-ver:ppre, arborer, [dr(0,dl(0,n,n),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,np,np),n)-1]), si(couleurs, nc-nom, couleur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(836, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(portait, v-ver:impf, porter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(accompagné, vpp-ver:pper, accompagner, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(837, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(appuyant, vpr-ver:ppre, appuyer, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(front, nc-nom, front, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(épaules, nc-nom, épaule, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(existait, v-ver:impf, exister, [dl(0,np,s)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(838, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(cliché, nc-nom, cliché, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(couple, nc-nom, couple, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(drapeaux, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(pris, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(839, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(appuyant, vpr-ver:ppre, appuyer, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(front, nc-nom, front, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(épaules, nc-nom, épaule, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(existait, v-ver:impf, exister, [dl(0,np,s)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(840, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(cliché, nc-nom, cliché, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(couple, nc-nom, couple, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(drapeaux, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(marge, nc-nom, marge, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(concert, nc-nom, concert, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(841, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(couple, nc-nom, couple, [n-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(drapeaux, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(illustré, vpp-ver:pper, illustrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(journal, nc-nom, journal, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('The', et-nam, 'The', [dr(0,dl(0,n,n),n)-1]), si('Washington', npp-nam, 'Washington', [n-1]), si('Post', npp-nam, 'Post', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(842, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(drapeaux, nc-nom, drapeau, [n-1]), si(portés, vpp-ver:pper, porter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(couple, nc-nom, couple, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Washington', npp-nam, 'Washington', [dr(0,n,n)-1]), si('Post', npp-nam, 'Post', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(843, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(couple, nc-nom, couple, [n-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(drapeaux, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(illustré, vpp-ver:pper, illustrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(journal, nc-nom, journal, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('The', et-nam, 'The', [dr(0,dl(0,n,n),n)-1]), si('Washington', npp-nam, 'Washington', [n-1]), si('Post', npp-nam, 'Post', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(844, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Washington', npp-nam, 'Washington', [dr(0,n,n)-1]), si('Post', npp-nam, 'Post', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(illustration, nc-nom, illustration, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(couple, nc-nom, couple, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(drapeaux, nc-nom, drapeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(845, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(condamnant, vpr-ver:ppre, condamner, [dr(0,dl(0,n,n),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(violations, nc-nom, violation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(846, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(votée, vpp-ver:pper, voter, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(violations, nc-nom, violation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(commises, vpp-ver:pper, commettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(847, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(convoquant, vpr-ver:ppre, convoquer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(réunit, v-ver:pres, réunir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(193, adj-num, 193, [dr(0,n,n)-1]), si('Etats', nc-nam, 'Etats', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('elle-même', pro-pro:per, 'elle-même', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(prononce, v-ver:pres, prononcer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(ensuite, adv-adv, ensuite, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(condamnant, vpr-ver:ppre, condamner, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(demandant, vpr-ver:ppre, demander, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(troupes, nc-nom, troupe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(848, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(convoqué, vpp-ver:pper, convoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(prononcent, v-ver:pres, prononcer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(exigeant, vpr-ver:ppre, exiger, [dr(0,dl(0,np,s_ppres),np)-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(fois, nc-nom, fois, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(849, Result) :-
      prob_parse([ si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(salué, vpp-ver:pper, saluer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(résolution, nc-nom, résolution, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(votée, vpp-ver:pper, voter, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(violations, nc-nom, violation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(commises, vpp-ver:pper, commettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(850, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('Macron', npp-nam, 'Macron', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(référait, v-ver:impf, référer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(851, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(résolutions, nc-nom, résolution, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(papier, nc-nom, papier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contraignantes, adj-ver:ppre, contraignant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(852, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(violations, nc-nom, violation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(commises, vpp-ver:pper, commettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [let-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(contraignante, vpr-ver:ppre, contraignant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(853, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(résolutions, nc-nom, résolution, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(papier, nc-nom, papier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contraignantes, adj-ver:ppre, contraignant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(854, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(violations, nc-nom, violation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(commises, vpp-ver:pper, commettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [let-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(contraignante, adj-adj, contraignant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(855, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(proposée, vpp-ver:pper, proposer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Albanie', npp-nam, 'Albanie', [n-1]), si(condamnant, vpr-ver:ppre, condamner, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retoquée, vpp-ver:pper, retoquer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Sécurité', npp-nam, 'Sécurité', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(856, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fallu, vpp-ver:pper, falloir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(aucun, pro-pro:ind, aucun, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(membres, nc-nom, membre, [n-1]), si(permanents, adj-adj, permanent, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Sécurité', npp-nam, 'Sécurité', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vote, v-ver:pres, vote, [dl(0,np,s)-1]), si(contre, p-prp, contre, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(857, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Sécurité', npp-nam, 'Sécurité', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(858, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rejetée, vpp-ver:pper, rejeter, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(y, clo-pro:per, y, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,cl_r,dl(0,np,s)),dia(1,box(1,pp_a))))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(opposée, vpp-ver:pper, opposer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(859, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(condamner, vinf-ver:infi, condamner, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(validé, vpp-ver:pper, valider, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tenue, nc-nom, tenue, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(860, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(convoqué, vpp-ver:pper, convoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(861, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(convoqué, vpp-ver:pper, convoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(862, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(astuce, nc-nom, astuce, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(votant, vpr-ver:ppre, voter, [dr(0,dl(0,np,s_ppres),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(convoquant, vpr-ver:ppre, convoquer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(863, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(2, adj-num, 2, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(extraordinaire, adj-adj, extraordinaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_ppart),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(massif, adj-adj, massif, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(exigé, vpp-ver:pper, exiger, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(contraignante, adj-adj, contraignant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(864, Result) :-
      prob_parse([ si('L\'Assemblée', nc-nom, 'L\'Assemblée', [dr(0,np,n)-1]), si(générale, adj-adj, général, [n-1]), si(a, v-ver:pres, avoir, [dl(0,n,n)-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(très, adv-adv, très, [dr(0,np,n)-1]), si(forte, adj-adj, fort, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(majorité, nc-nom, majorité, [dr(0,n,n)-1]), si(une, det-det:art, un, [n-1]), si(résolution, nc-nom, résolution, [dr(0,np,n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(exige, v-ver:pres, exiger, [let-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s),s_q)-1]), si(la, det-det:art, le, [dr(0,s_q,s)-1]), si('Russie', npp-nam, 'Russie', [dr(0,np,n)-1]), si(cesse, v-ver:pres, cesser, [n-1]), si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dl(1,s,s)-1]), si(invasion, nc-nom, invasion, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Ukraine', npp-nam, 'Ukraine', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(865, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(2, adj-num, 2, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(extraordinaire, adj-adj, extraordinaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_ppart),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(massif, adj-adj, massif, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(exigé, vpp-ver:pper, exiger, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(contraignante, adj-adj, contraignant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(866, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(condamne, v-ver:pres, condamner, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(politiquement, adv-adv, politiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(fort, adj-adj, fort, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(juridiquement, adv-adv, juridiquement, [dr(0,s,s)-1]), si(ça, pro-pro:dem, cela, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(contraint, v-ver:pres, contraindre, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(867, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('Canadian', npp-nam, 'Canadian', [dl(0,n,n)-1]), si('National', npp-nam, 'National', [dl(0,n,n)-1]), si('Railway', npp-nam, 'Railway', [dl(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('CN', npp-abr, 'CN', [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assuré, vpp-ver:pper, assurer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(disposait, v-ver:impf, disposer, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(train, nc-nom, train, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(868, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(improbable, adj-adj, improbable, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(locomotives, nc-nom, locomotive, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Canadian', npp-nam, 'Canadian', [dr(0,np,np)-1]), si('National', npp-nam, 'National', [dr(0,n,n)-1]), si('Railway', npp-nam, 'Railway', [dr(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(transport, nc-nom, transport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(869, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('Canadian', npp-nam, 'Canadian', [dl(0,n,n)-1]), si('National', npp-nam, 'National', [dl(0,n,n)-1]), si('Railway', npp-nam, 'Railway', [dl(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('CN', npp-abr, 'CN', [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assuré, vpp-ver:pper, assurer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(disposait, v-ver:impf, disposer, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(train, nc-nom, train, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(870, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Canadian', npp-nam, 'Canadian', [dr(0,n,n)-1]), si('National', npp-nam, 'National', [dr(0,n,n)-1]), si('Railway', npp-nam, 'Railway', [dr(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(transporter, vinf-ver:infi, transporter, [dr(0,dl(0,np,s_inf),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(871, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(dirige, v-ver:pres, diriger, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(ravitailler, vinf-ver:infi, ravitailler, [dr(0,dl(0,np,s_inf),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(armes, nc-nom, arme, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(872, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(transporte, v-ver:pres, transporter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(chars, nc-nom, char, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(873, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(dirige, v-ver:pres, diriger, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(ravitailler, vinf-ver:infi, ravitailler, [dr(0,dl(0,np,s_inf),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(armes, nc-nom, arme, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(874, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fret, nc-nom, fret, [n-1]), si('Canadian', npp-nam, 'Canadian', [dl(0,n,n)-1]), si('National', npp-nam, 'National', [dr(0,n,n)-1]), si('Railway', npp-nam, 'Railway', [dr(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CN', npp-abr, 'CN', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(875, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(établis, vpp-ver:pper, établir, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(financés, vpp-ver:pper, financer, [dr(0,dl(0,n,n),pp_par)-1]), si(exclusivement, adv-adv, exclusivement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(département, nc-nom, département, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(défense, nc-nom, défense, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(premières, adj-num, premier, [dr(0,n,n)-1]), si(cibles, nc-nom, cible, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(876, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(opérés, vpp-ver:pper, opérer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(financés, vpp-ver:pper, financer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(877, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(défense, nc-nom, défense, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si(biologique, adj-adj, biologique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(assure, v-ver:pres, assurer, [dr(0,dl(1,s,s),np)-1]), si('Andrew', npp-nam, 'Andrew', [dr(0,np,np)-1]), si('Weber', npp-nam, 'Weber', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(programmes, nc-nom, programme, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défenses, nc-nom, défense, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(chimique, adj-adj, chimique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(biologique, adj-adj, biologique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,s,txt)-1])], Result).
sent(878, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(biolabs, nc-nom, biolab, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(exclusifs, adj-adj, exclusif, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(financés, vpp-ver:pper, financer, [dl(0,np,s_pass)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si(frais, nc-nom, frais, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(département, nc-nom, département, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(défense, nc-nom, défense, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(879, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(établis, vpp-ver:pper, établir, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(financés, vpp-ver:pper, financer, [dr(0,dl(0,n,n),pp_par)-1]), si(exclusivement, adv-adv, exclusivement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(département, nc-nom, département, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(défense, nc-nom, défense, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(premières, adj-num, premier, [dr(0,n,n)-1]), si(cibles, nc-nom, cible, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(880, Result) :-
      prob_parse([ si(9, det-num, 9, [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(détruits, vpp-ver:pper, détruire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si('Iskander', npp-nam, 'Iskander', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(881, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(partenariat, nc-nom, partenariat, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(vise, v-ver:pres, viser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(destruction, nc-nom, destruction, [n-1]), si(massive, adj-adj, massif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(882, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(visent, v-ver:pres, viser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(financés, vpp-ver:pper, financer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(883, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réduction, nc-nom, réduction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(menaces, nc-nom, menace, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(association, nc-nom, association, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(travaille, v-ver:pres, travailler, [dl(0,np,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(sécuriser, vinf-ver:infi, sécuriser, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(agents, nc-nom, agent, [n-1]), si(pathogènes, adj-adj, pathogène, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(884, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(travaille, v-ver:pres, travailler, [dl(0,np,s)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(veiller, vinf-ver:infi, veiller, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(puisse, vs-ver:subp, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(signaler, vinf-ver:infi, signaler, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(agents, nc-nom, agent, [n-1]), si(pathogènes, adj-adj, pathogène, [dl(0,n,n)-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(menace, nc-nom, menace, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(885, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(détenir, vinf-ver:infi, détenir, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(biologique, adj-adj, biologique, [dl(0,n,n)-1]), si(financé, vpp-ver:pper, financer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(886, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(affirmations, nc-nom, affirmation, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si(permettant, vpr-ver:ppre, permettre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(allégations, nc-nom, allégation, [n-1]), si(trompeuses, adj-adj, trompeur, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(désinformation, nc-nom, désinformation, [n-1]), si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(887, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(participent, v-ver:pres, participer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si(établis, vpp-ver:pper, établir, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(888, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(visent, v-ver:pres, viser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(épidémies, nc-nom, épidémie, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(889, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Convention', npp-nam, 'Convention', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(interdiction, nc-nom, interdiction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(890, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(renonce, v-ver:pres, renoncer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(tous, det-pro:ind, tout, [dr(0,np,n)-1]), si(types, nc-nom, type, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(891, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(soutiennent, v-ver:pres, soutenir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(désactivation, nc-nom, désactivation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(agents, nc-nom, agent, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(travail, nc-nom, travail, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(vise, v-ver:pres, viser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(épidémies, nc-nom, épidémie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(892, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(visent, v-ver:pres, viser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(épidémies, nc-nom, épidémie, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(biologiques, adj-adj, biologique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(893, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(visité, vpp-ver:pper, visiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tenue, nc-nom, tenue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(camouflage, nc-nom, camouflage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(gilet, nc-nom, gilet, [n-1]), si('pare-balles', adj-adj, 'pare-balles', [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(séparatiste, adj-adj, séparatiste, [dl(0,n,n)-1]), si('pro-russe', adj-adj, 'pro-russe', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Donbass', npp-nam, 'Donbass', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(894, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(visité, vpp-ver:pper, visiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(positions, nc-nom, position, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(première, adj-num, premier, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Donbass', npp-nam, 'Donbass', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(895, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(visité, vpp-ver:pper, visiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tenue, nc-nom, tenue, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Donbass', npp-nam, 'Donbass', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étais, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), si('lui-même', pro-pro:per, 'lui-même', [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(batailles, nc-nom, bataille, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(896, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(uniforme, nc-nom, uniforme, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(patrie, nc-nom, patrie, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(897, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Donbass', npp-nam, 'Donbass', [n-1]), si(englobe, v-ver:pres, englober, [dr(0,dl(0,np,s),np)-1]), si('Donetsk', npp-nam, 'Donetsk', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Louhansk', npp-nam, 'Louhansk', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(républiques, nc-nom, république, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(séparatistes, adj-adj, séparatiste, [dl(0,n,n)-1]), si(soutenues, vpp-ver:pper, soutenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(898, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('Volodymyr', npp-nam, 'Volodymyr', [dl(0,n,n)-1]), si('Zelensky', npp-nam, 'Zelensky', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(visité, vpp-ver:pper, visiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tenue, nc-nom, tenue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(camouflage, nc-nom, camouflage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(gilet, nc-nom, gilet, [n-1]), si('pare-balles', adj-ver:ppre, 'pare-balles', [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(séparatiste, adj-adj, séparatiste, [dl(0,n,n)-1]), si('pro-russe', adj-adj, 'pro-russe', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Donbass', npp-nam, 'Donbass', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(899, Result) :-
      prob_parse([ si('Bild', npp-nam, 'Bild', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(tabloïd, nc-nom, tabloïd, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(lu, vpp-ver:pper, lire, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(emprunté, vpp-ver:pper, emprunter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photographie, nc-nom, photographie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conséquences, nc-nom, conséquence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(900, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(diffusées, vpp-ver:pper, diffuser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(média, nc-nom, média, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prises, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déclenchement, nc-nom, déclenchement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si('russo-ukrainienne', adj-adj, 'russo-ukrainienne', [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(901, Result) :-
      prob_parse([ si('Bild', npp-nam, 'Bild', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(tabloïd, nc-nom, tabloïd, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(lu, vpp-ver:pper, lire, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(emprunté, vpp-ver:pper, emprunter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photographie, nc-nom, photographie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conséquences, nc-nom, conséquence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(902, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tabloïd, nc-nom, tabloïd, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photographie, nc-nom, photographie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(survenue, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2018, pro-num, 2018, [np-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(causés, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bombardement, nc-nom, bombardement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(903, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tabloïd, nc-nom, tabloïd, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photographie, nc-nom, photographie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(survenue, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2018, pro-num, 2018, [np-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(causés, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bombardement, nc-nom, bombardement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(904, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photographie, nc-nom, photographie, [n-1]), si(utilisée, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(média, nc-nom, média, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prise, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déclenchement, nc-nom, déclenchement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si('russo-ukrainienne', adj-adj, 'russo-ukrainienne', [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(905, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(média, nc-nom, média, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fausses, adj-adj, faux, [dr(0,n,n)-1]), si(images, nc-nom, image, [n-1]), si(provenant, vpr-ver:ppre, provenir, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(survenue, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2018, pro-num, 2018, [np-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(illustrer, vinf-ver:infi, illustrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(causés, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bombardement, nc-nom, bombardement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(906, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(quotidien, nc-nom, quotidien, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(accusé, vpp-ver:pper, accuser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(véhiculé, vpp-ver:pper, véhiculer, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(fausses, adj-adj, faux, [dr(0,n,n)-1]), si(images, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(bombardement, nc-nom, bombardement, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(907, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(photographies, nc-nom, photographie, [n-1]), si(diffusées, vpp-ver:pper, diffuser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(quotidien, nc-nom, quotidien, [n-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prises, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(908, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(photographies, nc-nom, photographie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(apparues, vpp-ver:pper, apparaître, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(quotidien, nc-nom, quotidien, [n-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prises, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2018, pro-num, 2018, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(909, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photographie, nc-nom, photographie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tête, nc-nom, tête, [n-1]), si(bandée, vpp-ver:pper, bander, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si(couvert, vpp-ver:pper, couvrir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(sang, nc-nom, sang, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Anadolu', npp-nam, 'Anadolu', [np-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(910, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(journal, nc-nom, journal, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(appelée, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si('Olena', npp-nam, 'Olena', [dr(0,np,np)-1]), si('Kurilo', npp-nam, 'Kurilo', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(911, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(photojournaliste, nc-nom, photojournaliste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si('Anadolu', npp-nam, 'Anadolu', [dl(0,n,n)-1]), si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), si('Schwan', npp-nam, 'Schwan', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(clichés, nc-nom, cliché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si(blessés, vpp-ver:pper, blesser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(912, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(',', ponct-pun, ',', [let-1]), si(celle, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignante, nc-nom, enseignant, [n-1]), si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), si('Kurilo', npp-nam, 'Kurilo', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(images, nc-nom, image, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(marquantes, adj-adj, marquant, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(913, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(journal, nc-nom, journal, [n-1]), si('Bild', npp-nam, 'Bild', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bel, adj-adj, bel, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(blessée, vpp-ver:pper, blesser, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(914, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(identité, nc-nom, identité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(journal, nc-nom, journal, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(blessé, vpp-ver:pper, blesser, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(inconnue, adj-adj, inconnu, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(915, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(photojournaliste, nc-nom, photojournaliste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si('Anadolu', npp-nam, 'Anadolu', [dl(0,n,n)-1]), si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), si('Schwan', npp-nam, 'Schwan', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(clichés, nc-nom, cliché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si(blessés, vpp-ver:pper, blesser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(916, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(',', ponct-pun, ',', [let-1]), si(celle, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignante, nc-nom, enseignant, [n-1]), si('Olena', npp-nam, 'Olena', [dl(0,n,n)-1]), si('Kurilo', npp-nam, 'Kurilo', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(images, nc-nom, image, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(marquantes, adj-adj, marquant, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(917, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(prise, vpp-ver:pper, prendre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si('Anadolu', npp-nam, 'Anadolu', [dl(0,n,n)-1]), si('[...]', ponct-pun, '[...]', [let-1]), si(a, v-ver:pres, avoir, [let-1]), si(fait, vpp-ver:pper, faire, [let-1]), si(les, det-det:art, le, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(gros, adj-adj, gros, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(titres, nc-nom, titre, [dr(0,np,n)-1]), si(de, p-prp, de, [dr(0,n,n)-1]), si(la, det-det:art, le, [n-1]), si(presse, nc-nom, presse, [dr(0,dl(0,n,n),np)-1]), si(internationale, adj-adj, international, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(918, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(photojournaliste, nc-nom, photojournaliste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si('Anadolu', npp-nam, 'Anadolu', [dl(0,n,n)-1]), si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), si('Schwan', npp-nam, 'Schwan', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(clichés, nc-nom, cliché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(civils, nc-nom, civil, [n-1]), si(blessés, vpp-ver:pper, blesser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(919, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(image, nc-nom, image, [n-1]), si(inversée, vpp-ver:pper, inverser, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Google', npp-nam, 'Google', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(permis, vpp-ver:pper, permettre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(identifier, vinf-ver:infi, identifier, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Anadolu', npp-nam, 'Anadolu', [np-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(920, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(façade, nc-nom, façade, [n-1]), si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(détruit, vpp-ver:pper, détruire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(ravagé, vpp-ver:pper, ravager, [dr(0,dl(0,np,np),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2018, adj-num, 2018, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(921, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(immeuble, nc-nom, immeuble, [n-1]), si(détruit, vpp-ver:pper, détruire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2018, pro-num, 2018, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bâtiment, nc-nom, bâtiment, [n-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(bombardements, nc-nom, bombardement, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(excepté, cc-prp, excepté, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(apparence, nc-nom, apparence, [n-1]), si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(922, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(propagation, nc-nom, propagation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fausses, adj-adj, faux, [dr(0,n,n)-1]), si(informations, nc-nom, information, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(intensifie, v-ver:pres, intensifier, [dl(0,cl_r,dl(0,np,s))-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(jours, nc-nom, jour, [n-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(meurtriers, adj-adj, meurtrier, [dl(0,n,n)-1]), si(opposent, v-ver:pres, opposer, [dr(0,dl(0,np,s),np)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(forces, nc-nom, force, [np-1]), si(armées, adj-adj, armé, [dl(0,np,np)-1]), si(russes, adj-adj, russe, [dl(0,np,np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(923, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(désinformation, nc-nom, désinformation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(intensifie, v-ver:pres, intensifier, [dl(0,cl_r,dl(0,np,s))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(rythme, nc-nom, rythme, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tensions, nc-nom, tension, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(924, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(internationalement, adv-adv, internationalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnues, vpp-ver:pper, reconnaître, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(besoin, nc-nom, besoin, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(925, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(généralement, adv-adv, généralement, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, adj-adj, uni, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(926, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(généralement, adv-adv, généralement, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, adj-adj, uni, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(927, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commis, vpp-ver:pper, commettre, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(violation, nc-nom, violation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(envahissant, vpr-ver:ppre, envahir, [dr(0,dl(0,np,s_ppres),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dû, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(928, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(internationalement, adv-adv, internationalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnues, vpp-ver:pper, reconnaître, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),dl(1,s,s))-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(929, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si('Ban', npp-nam, 'Ban', [dl(0,n,n)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existait, v-ver:impf, exister, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,n)-1]), si('Etat', nc-nom, 'Etat', [n-1]), si(souverain, adj-adj, souverain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(930, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(internationalement, adv-adv, internationalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnues, vpp-ver:pper, reconnaître, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),dl(1,s,s))-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(931, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(intégrité, nc-nom, intégrité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(reconnues, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,n)-1]), si(différents, adj-adj, différent, [dr(0,n,n)-1]), si(traités, nc-nom, traité, [n-1]), si(internationaux, adj-adj, international, [dl(0,n,n)-1]), si(consultables, adj-adj, consultable, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n))),dl(1,dl(0,n,n),dl(0,n,n)))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),dl(1,s,s))-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(932, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(933, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(experte, nc-nom, experte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(relations, nc-nom, relation, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(934, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(directement, adv-adv, directement, [dl(1,s,s)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(935, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(experte, nc-nom, experte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(relations, nc-nom, relation, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(936, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(experte, nc-nom, experte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(relations, nc-nom, relation, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(937, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(938, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si('07.04.2014', nc-num, '07.04.2014', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(étonnante, adj-adj, étonnant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(comme, adv-adv, comme, [dr(0,dr(0,np,np),n)-1]), si(conclusion, nc-nom, conclusion, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(1991, adj-num, 1991, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(939, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si('Ban', npp-nam, 'Ban', [dl(0,n,n)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existait, v-ver:impf, exister, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(souverain, adj-adj, souverain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(940, Result) :-
      prob_parse([ si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(secrétaire, nc-nom, secrétaire, [np-1]), si(général, adj-adj, général, [dl(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(2007, pro-num, 2007, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(2016, pro-num, 2016, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(941, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si('07.04.2014', nc-num, '07.04.2014', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(étonnante, adj-adj, étonnant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(comme, adv-adv, comme, [dr(0,dr(0,np,np),n)-1]), si(conclusion, nc-nom, conclusion, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(1991, adj-num, 1991, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(942, Result) :-
      prob_parse([ si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(secrétaire, nc-nom, secrétaire, [np-1]), si(général, adj-adj, général, [dl(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(2007, pro-num, 2007, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(2016, pro-num, 2016, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(943, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si('20.03.2005', nc-num, '20.03.2005', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(étonnante, adj-adj, étonnant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(comme, adv-adv, comme, [dr(0,dr(0,np,np),n)-1]), si(conclusion, nc-nom, conclusion, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(1991, adj-num, 1991, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(944, Result) :-
      prob_parse([ si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouvait, v-ver:impf, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Rwanda', npp-nam, 'Rwanda', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(2014, adj-num, 2014, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(945, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(prise, nc-nom, prise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(parole, nc-nom, parole, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(événement, nc-nom, événement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(nulle, det-pro:ind, nul, [dr(0,dl(1,s,s),n)-1]), si(part, nc-nom, part, [n-1]), si(mention, nc-nom, mention, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(946, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si('07.04.2014', nc-num, '07.04.2014', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(1991, adj-num, 1991, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(947, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(constituait, v-ver:impf, constituer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coeur, nc-nom, coeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('07.04.2014', nc-num, '07.04.2014', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(948, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agenda, nc-nom, agenda, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réunions, nc-nom, réunion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(résolutions, nc-nom, résolution, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(réunie, vpp-ver:pper, réunir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(2014, adj-num, 2014, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(949, Result) :-
      prob_parse([ si('Aucune', pro-pro:ind, 'Aucune', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(déclarations, nc-nom, déclaration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(hauts, adj-adj, haut, [dr(0,n,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2014, pro-num, 2014, [np-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remettait, v-ver:impf, remettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(question, nc-nom, question, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(950, Result) :-
      prob_parse([ si('Elles', cls-pro:per, 'Elles', [np-1]), si(appelaient, v-ver:impf, appeler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(contraire, nc-nom, contraire, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(préserver, vinf-ver:infi, préserver, [dr(0,dl(0,np,s_inf),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(menaces, nc-nom, menace, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(951, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si('Ban', npp-nam, 'Ban', [dl(0,n,n)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(',', ponct-pun, ',', [let-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnues, vpp-ver:pper, reconnaître, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(952, Result) :-
      prob_parse([ si('Aucune', pro-pro:ind, 'Aucune', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(déclarations, nc-nom, déclaration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(hauts, adj-adj, haut, [dr(0,n,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remettait, v-ver:impf, remettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(question, nc-nom, question, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(953, Result) :-
      prob_parse([ si('Elles', cls-pro:per, 'Elles', [np-1]), si(appelaient, v-ver:impf, appeler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(contraire, nc-nom, contraire, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(préserver, vinf-ver:infi, préserver, [dr(0,dl(0,np,s_inf),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(menaces, nc-nom, menace, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(954, Result) :-
      prob_parse([ si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réitéré, vpp-ver:pper, réitérer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(appel, nc-nom, appel, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(respect, nc-nom, respect, [n-1]), si(absolu, adj-adj, absolu, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(préservation, nc-nom, préservation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(intégrité, nc-nom, intégrité, [n-1]), si(territoriale, adj-adj, territorial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(955, Result) :-
      prob_parse([ si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réitéré, vpp-ver:pper, réitérer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(appel, nc-nom, appel, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(respect, nc-nom, respect, [n-1]), si(absolu, adj-adj, absolu, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(préservation, nc-nom, préservation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(intégrité, nc-nom, intégrité, [n-1]), si(territoriale, adj-adj, territorial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(956, Result) :-
      prob_parse([ si('Ban', npp-nam, 'Ban', [dr(0,np,np)-1]), si('Ki-moon', npp-nam, 'Ki-moon', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parties, nc-nom, party, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), si(pleinement, adv-adv, pleinement, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intégrité, nc-nom, intégrité, [n-1]), si(territoriale, adj-adj, territorial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(957, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(dialogue, v-ver:pres, dialogue, [dr(0,dl(0,np,s),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(acteurs, nc-nom, acteur, [n-1]), si(clés, adj-adj, clé, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(désamorcer, vinf-ver:infi, désamorcer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(exhortant, vpr-ver:ppre, exhorter, [dr(0,dl(0,np,s_ppres),pp_a)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(cesse, nc-nom, cesse, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(dialogue, nc-nom, dialogue, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(bon, adj-adj, bon, [dr(0,n,n)-1]), si(suivi, nc-nom, suivi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(958, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(exhorte, v-ver:pres, exhorter, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(responsabilités, nc-nom, responsabilité, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(désamorcer, vinf-ver:infi, désamorcer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tensions, nc-nom, tension, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(encourage, v-ver:pres, encourager, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parties, nc-nom, party, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(exprimer, vinf-ver:infi, exprimer, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(pacifiquement, adv-adv, pacifiquement, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(apaiser, vinf-ver:infi, apaiser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(959, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si(exhorte, v-ver:pres, exhorter, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(responsabilités, nc-nom, responsabilité, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(désamorcer, vinf-ver:infi, désamorcer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tensions, nc-nom, tension, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(encourage, v-ver:pres, encourager, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parties, nc-nom, party, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(exprimer, vinf-ver:infi, exprimer, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(pacifiquement, adv-adv, pacifiquement, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(apaiser, vinf-ver:infi, apaiser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(960, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(restent, v-ver:pres, rester, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(attachés, vpp-ver:pper, attacher, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rechercher, vinf-ver:infi, rechercher, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(solution, nc-nom, solution, [n-1]), si(pacifique, adj-adj, pacifique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(cesse, v-ver:pres, cesser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(aggraver, vinf-ver:infi, aggraver, [dl(0,cl_r,dl(0,np,s_inf))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(961, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistrées, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(962, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(traités, nc-nom, traité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(eux, pro-pro:per, lui, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(102, adj-num, 102, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(963, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(964, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistrées, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(965, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(traités, nc-nom, traité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(eux, pro-pro:per, lui, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(102, adj-num, 102, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Charte', npp-nam, 'Charte', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(966, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, adj-adj, uni, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(')', ponct-pun, ')', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(967, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(absence, nc-nom, absence, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enregistrement, nc-nom, enregistrement, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(cause, nc-nom, cause, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(invalidité, nc-nom, invalidité, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pleinement, adv-adv, pleinement, [dl(1,s,s)-1]), si(force, nc-nom, force, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(loi, nc-nom, loi, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(968, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(passées, vpp-ver:pper, passer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistrées, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(cela, pro-pro:dem, celer, [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(invalides, adj-adj, invalide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(969, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Boris', npp-nam, 'Boris', [dl(0,n,n)-1]), si('Eltsine', npp-nam, 'Eltsine', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si('2ème', adj-num, '2ème', [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(1991, adj-num, 1991, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(970, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1997, pro-num, 1997, [np-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), si(sein, nc-nom, sein, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Traité', nc-nam, 'Traité', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(amitié, nc-nom, amitié, [n-1]), si(signé, vpp-ver:pper, signer, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(de, p-prp, de, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),n)-1]), si(nouveau, adj-adj, nouveau, [n-1]), si(reconnues, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(971, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2003, adj-num, 2003, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(commune, adj-adj, commun, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(972, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(reprises, nc-nom, reprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(973, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(1, adj-num, 1, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Mémorandum', nc-nom, 'Mémorandum', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Budapest', npp-nam, 'Budapest', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(signataires, nc-nom, signataire, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(accordent, v-ver:pres, accorder, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(existantes, vpr-ver:ppre, existant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(974, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Mémorandum', nc-nom, 'Mémorandum', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Budapest', npp-nam, 'Budapest', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dispose, v-ver:pres, disposer, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(tout, nc-nom, tout, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(975, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(détruite, vpp-ver:pper, détruire, [dl(0,n,n)-1]), si(circulent, v-ver:pres, circuler, [dl(0,np,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(976, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(photos, nc-nom, photo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(détruite, vpp-ver:pper, détruire, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(977, Result) :-
      prob_parse([ si('Trois', pro-num, 'Trois', [np-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,np,np),n)-1]), si(quatre, adj-num, quatre, [dr(0,n,n)-1]), si(photos, nc-nom, photo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(partagées, vpp-ver:pper, partager, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prises, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('russo-ukrainien', adj-adj, 'russo-ukrainien', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(éclaté, vpp-ver:pper, éclater, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(soulèvement, nc-nom, soulèvement, [n-1]), si('pro-européen', adj-adj, 'pro-européen', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(concentré, vpp-ver:pper, concentrer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(place, nc-nom, place, [n-1]), si('Maïdan', npp-nam, 'Maïdan', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2014, adj-num, 2014, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(978, Result) :-
      prob_parse([ si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(quatre, nc-num, quatre, [n-1]), si(contenues, vpp-ver:pper, contenir, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(datent, v-ver:impf, dater, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(février, nc-nom, février, [n-1]), si(2014, adj-num, 2014, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(soulèvement, nc-nom, soulèvement, [n-1]), si('pro-européen', adj-adj, 'pro-européen', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(épicentre, nc-nom, épicentre, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(place, nc-nom, place, [n-1]), si('Maïdan', npp-nam, 'Maïdan', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(979, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morts, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(héros, nc-nom, héros, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si(jeudi, nc-nom, jeudi, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(980, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', nc-nam, 'Serpents', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(vivants, adj-adj, vivant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(981, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(13, adj-num, 13, [dr(0,n,n)-1]), si('gardes-frontières', nc-nom, 'gardes-frontières', [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(serpents, nc-nom, serpent, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Mer', nc-nam, 'Mer', [n-1]), si(noire, adj-adj, noir, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(final, adj-adj, final, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(aller, vinf-ver:infi, aller, [cl_r-1]), si(se, clr-pro:per, se, [cl_r-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), si('foutre\'.', adv-adv, 'foutre\'.', [let-1])], Result).
sent(982, Result) :-
      prob_parse([ si('\'Allez', vimp-ver:impe, '\'Allez', [let-1]), si('-vous', clo-pro:per, '-vous', [dr(0,s,dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [cl_r-1]), si('foutre\'', nc-adv, 'foutre\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(été, vpp-ver:pper, être, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(les, det-det:art, le, [dr(0,dl(0,np,s_ppart),np)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(mots, nc-nom, mot, [dr(0,n,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(13, adj-num, 13, [dr(0,n,n)-1]), si('gardes-frontières', nc-nom, 'gardes-frontières', [dr(0,n,n)-1]), si(ukrainiens, adj-adj, ukrainien, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(sommations, nc-nom, sommation, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(île, nc-nom, île, [dr(0,np,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(serpents, nc-nom, serpent, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(983, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(information, nc-nom, information, [n-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', nc-nam, 'Serpents', [n-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédés, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(démentie, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(camps, nc-nom, camp, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(984, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(appelée, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si(île, nc-nom, île, [dr(0,np,np)-1]), si('Zmiïnyï', npp-nam, 'Zmiïnyï', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),n)-1]), si(île, nc-nom, île, [n-1]), si('Zmeïny', npp-nam, 'Zmeïny', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chute, nc-nom, chute, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('URSS', npp-abr, 'URSS', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1991, pro-num, 1991, [np-1]), si(',', ponct-pun, ',', [let-1]), si(se, clr-pro:per, se, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(situe, v-ver:pres, situer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(petite, adj-adj, petit, [dr(0,n,n)-1]), si(cinquantaine, nc-num, cinquantaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(côtes, nc-nom, côte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,pp_de,np)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(300, det-num, 300, [dr(0,np,n)-1]), si(km, nc-abr, kilomètre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Crimée', npp-nam, 'Crimée', [n-1]), si(',', ponct-pun, ',', [n-1]), si(région, nc-nom, région, [dr(0,dl(0,n,n),pp_par)-1]), si(annexée, vpp-ver:pper, annexer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2014, pro-num, 2014, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(985, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(information, nc-nom, information, [n-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', nc-nam, 'Serpents', [n-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédés, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(démentie, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(camps, nc-nom, camp, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(986, Result) :-
      prob_parse([ si('Tentant', vpr-ver:ppre, 'Tentant', [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(défendre, vinf-ver:infi, défendre, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédés, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(987, Result) :-
      prob_parse([ si('Anton', npp-nam, 'Anton', [dr(0,np,np)-1]), si('Herashchenko', npp-nam, 'Herashchenko', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(conseiller, nc-nom, conseiller, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Intérieur', nc-nom, 'Intérieur', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(présenté, vpp-ver:pper, présenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(enregistrement, nc-nom, enregistrement, [n-1]), si(audio, adj-adj, audio, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(témoignant, vpr-ver:ppre, témoigner, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(paroles, nc-nom, parole, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(soldats, nc-nom, soldat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(988, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(enregistrement, nc-nom, enregistrement, [n-1]), si(sonore, adj-adj, sonore, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(capturé, vpp-ver:pper, capturer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(paroles, nc-nom, parole, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(prétendument, adv-adv, prétendument, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(décédés, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(989, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('garde-frontières', nc-nom, 'garde-frontières', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Zmiïnyï', npp-nam, 'Zmiïnyï', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morts, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(héroïquement, adv-adv, héroïquement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(la, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(défendant, vpr-ver:ppre, défendre, [dr(0,dl(0,np,s_ppres),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(bout, nc-nom, bout, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(990, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(recevront, v-ver:futu, recevoir, [dr(0,dl(0,np,s),np)-1]), si(tous, adv-adv, tout, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(titre, nc-nom, titre, [n-1]), si(posthume, adj-adj, posthume, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Héros', nc-nam, 'Héros', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(991, Result) :-
      prob_parse([ si('Tentant', vpr-ver:ppre, 'Tentant', [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(défendre, vinf-ver:infi, défendre, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Zmiïnyï', npp-nam, 'Zmiïnyï', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morts, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(héros, nc-nom, héros, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(jeudi, nc-nom, jeudi, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(992, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('garde-frontières', nc-nom, 'garde-frontières', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Zmiïnyï', npp-nam, 'Zmiïnyï', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morts, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(héroïquement, adv-adv, héroïquement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(la, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(défendant, vpr-ver:ppre, défendre, [dr(0,dl(0,np,s_ppres),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(bout, nc-nom, bout, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(993, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(recevront, v-ver:futu, recevoir, [dr(0,dl(0,np,s),np)-1]), si(tous, adv-adv, tout, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(titre, nc-nom, titre, [n-1]), si(posthume, adj-adj, posthume, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Héros', nc-nam, 'Héros', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(994, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('garde-frontières', nc-nom, 'garde-frontières', [n-1]), si(présumés, adj-adj, présumer, [dl(0,n,n)-1]), si(morts, adj-adj, mort, [dl(0,n,n)-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Zmiïnyï', npp-nam, 'Zmiïnyï', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(vie, nc-nom, vie, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(995, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(communiquées, vpp-ver:pper, communiquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retour, nc-nom, retour, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(82, adj-num, 82, [dr(0,n,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(arrivés, vpp-ver:pper, arriver, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Sébastopol', npp-nam, 'Sébastopol', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(diffusées, vpp-ver:pper, diffuser, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(chaînes, nc-nom, chaîne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télévision, nc-nom, télévision, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(996, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(communiqué, vpp-ver:pper, communiquer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retour, nc-nom, retour, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(82, adj-num, 82, [dr(0,n,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(terre, nc-nom, terre, [n-1]), si(ferme, adj-adj, ferme, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(997, Result) :-
      prob_parse([ si(82, det-num, 82, [dr(0,np,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', nc-nam, 'Serpents', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Noire', npp-nam, 'Noire', [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(volontairement, adv-adv, volontairement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(rendus, vpp-ver:pper, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(998, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', nc-nam, 'Serpents', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déposé, vpp-ver:pper, déposer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(999, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(navales, adj-adj, naval, [dl(0,n,n)-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(communiqué, nc-nom, communiqué, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(vie, nc-nom, vie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(détenus, vpp-ver:pper, détenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1000, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(emprisonnés, vpp-ver:pper, emprisonner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1001, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(marines, nc-nom, marine, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('gardes-frontières', nc-nom, 'gardes-frontières', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(faits, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), si(prisonniers, nc-nom, prisonnier, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(envahisseurs, nc-nom, envahisseur, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1002, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(emprisonnés, vpp-ver:pper, emprisonner, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1003, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(épisode, nc-nom, épisode, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(reprises, nc-nom, reprise, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Internet', npp-nam, 'Internet', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(mêlant, vpr-ver:ppre, mêler, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(propagande, nc-nom, propagande, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('contre-propagande', nc-nom, 'contre-propagande', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(camps, nc-nom, camp, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(tout, pro-pro:ind, tout, [np-1]), si(représentatif, adj-adj, représentatif, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(brouillard, nc-nom, brouillard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(informations, nc-nom, information, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1004, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(rebondissements, nc-nom, rebondissement, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épisode, nc-nom, épisode, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', nc-nam, 'Serpents', [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(illustrent, v-ver:pres, illustrer, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(brouillard, nc-nom, brouillard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(informations, nc-nom, information, [n-1]), si(dû, vpp-ver:pper, devoir, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(désir, nc-nom, désir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(propagande, nc-nom, propagande, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(camps, nc-nom, camp, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1005, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quelques, det-pro:ind, quelque, [dr(0,dl(1,s,s),n)-1]), si(jours, nc-nom, jour, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tard, adv-adv, tard, [dl(1,s,s)-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(heureuses, adj-adj, heureux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', npp-nam, 'Serpents', [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), si(vivants, adj-adj, vivant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1006, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(ukrainiennes, adj-adj, ukrainien, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ravis, vpp-ver:pper, ravir, [dr(0,dl(0,np,s_pass),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Serpents', nc-nam, 'Serpents', [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(vivants, adj-adj, vivant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1007, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(',', ponct-pun, ',', [let-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intermédiaire, nc-nom, intermédiaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(',', ponct-pun, ',', [let-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tiendrait, v-ver:impf, tenir, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,n,n))-1]), si(prête, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(importe, v-ver:pres, importer, [dl(0,np,s)-1]), si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1008, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Tan', npp-nam, 'Tan', [dr(0,np,np)-1]), si('Kefei', npp-nam, 'Kefei', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(importe, v-ver:pres, importer, [dl(0,np,s)-1]), si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(prêts, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(voudraient, v-ver:impf, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(intervenir, vinf-ver:infi, intervenir, [dl(0,np,s_inf)-1]), si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1009, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Tan', npp-nam, 'Tan', [dr(0,np,np)-1]), si('Kefei', npp-nam, 'Kefei', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(importe, v-ver:pres, importer, [dl(0,np,s)-1]), si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(prêts, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(voudraient, v-ver:impf, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(intervenir, vinf-ver:infi, intervenir, [dl(0,np,s_inf)-1]), si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1010, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(',', ponct-pun, ',', [let-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intermédiaire, nc-nom, intermédiaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(',', ponct-pun, ',', [let-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tiendrait, v-ver:impf, tenir, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,n,n))-1]), si(prête, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(importe, v-ver:pres, importer, [dl(0,np,s)-1]), si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1011, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Tan', npp-nam, 'Tan', [dr(0,np,np)-1]), si('Kefei', npp-nam, 'Kefei', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(importe, v-ver:pres, importer, [dl(0,np,s)-1]), si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(prêts, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(voudraient, v-ver:impf, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(intervenir, vinf-ver:infi, intervenir, [dl(0,np,s_inf)-1]), si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1012, Result) :-
      prob_parse([ si('Tan', npp-nam, 'Tan', [dr(0,np,np)-1]), si('Kefei', npp-nam, 'Kefei', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1013, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(média, nc-nom, média, [n-1]), si(couvrant, vpr-ver:ppre, couvrir, [dr(0,dl(0,n,n),np)-1]), si(habituellement, adv-adv, habituellement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conférences, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mentionner, vinf-ver:infi, mentionner, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(phrase, nc-nom, phrase, [n-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1014, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(seule, adj-adj, seul, [dr(0,n,n)-1]), si(retranscription, nc-nom, retranscription, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(propos, nc-nom, propos, [n-1]), si(disponible, adj-adj, disponible, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(internet, nc-nom, internet, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(retrouve, v-ver:pres, retrouver, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(phrase, nc-nom, phrase, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1015, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(trace, nc-nom, trace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(prêtée, vpp-ver:pper, prêter, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(',', ponct-pun, ',', [let-1]), si(que, cs-kon, que, [dr(0,dl(1,s,s),s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1016, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prononcé, vpp-ver:pper, prononcer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(répondu, vpp-ver:pper, répondre, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1017, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(importe, v-ver:pres, importer, [dl(0,np,s)-1]), si(où, advwh-pro:rel, où, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(prêts, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(voudraient, v-ver:cond, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(intervenir, vinf-ver:infi, intervenir, [dr(0,dl(0,np,s_inf),pp)-1]), si(militairement, adv-adv, militairement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1018, Result) :-
      prob_parse([ si('L\'ambassadeur', nc-nom, 'L\'ambassadeur', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Chine', npp-nam, 'Chine', [dr(0,dl(0,n,n),n)-1]), si(à, p-prp, à, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('ONU', nc-abr, 'ONU', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si('Zhang', npp-nam, 'Zhang', [dr(0,dl(0,np,np),np)-1]), si('Jun', npp-nam, 'Jun', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si(a, v-ver:pres, avoir, [let-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,s_q,s)-1]), si(monde, nc-nom, monde, [dr(0,np,n)-1]), si('n\'', adv-adv, 'n\'', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s),np)-1]), si(rien, pro-pro:ind, rien, [let-1]), si(à, p-prp, à, [np-1]), si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_inf),np)-1]), si('d\'', p-prp, 'd\'', [let-1]), si(une, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,np,n)-1]), si('Guerre', nc-nam, 'Guerre', [dr(0,n,n)-1]), si(froide, adj-adj, froid, [n-1]), si(lors, adv-adv, lors, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),pp_de)-1]), si(une, det-det:art, un, [dr(0,pp_de,np)-1]), si(session, nc-nom, session, [dr(0,np,n)-1]), si(extraordinaire, adj-adj, extraordinaire, [n-1]), si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), si(urgence, nc-nom, urgence, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Assemblée', nc-nam, 'Assemblée', [dr(0,np,n)-1]), si(générale, adj-adj, général, [n-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si('Nations', nc-nam, 'Nations', [dr(0,dl(0,n,n),n)-1]), si(unies, vpp-ver:pper, uni, [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1019, Result) :-
      prob_parse([ si('Zhang', npp-nam, 'Zhang', [dr(0,np,np)-1]), si('Jun', npp-nam, 'Jun', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(affirmé, vpp-ver:pper, affirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tribune, nc-nom, tribune, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(tout, adv-adv, tout, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(perdre, vinf-ver:infi, perdre, [dl(0,np,s_inf)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(retour, nc-nom, retour, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mentalité, nc-nom, mentalité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guerre', nc-nom, 'Guerre', [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(confrontation, nc-nom, confrontation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(blocs, nc-nom, bloc, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1020, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si('Wang', npp-nam, 'Wang', [dl(0,n,n)-1]), si('Wenbin', npp-nam, 'Wenbin', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(belligérants, nc-nom, belligérant, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(calme, adj-adj, calme, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(preuve, nc-nom, preuve, [np-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(retenue, nc-nom, retenue, [n-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(escalade, nc-nom, escalade, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1021, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(désescalade, nc-nom, désescalade, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voix, nc-nom, voix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si('Wang', npp-nam, 'Wang', [dl(0,n,n)-1]), si('Wenbin', npp-nam, 'Wenbin', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1022, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(prise, vpp-ver:pper, prendre, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dos, nc-nom, dos, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(regardant, vpr-ver:ppre, regarder, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(chars, nc-nom, char, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(passer, vinf-ver:infi, passer, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1023, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(figure, v-ver:pres, figurer, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(album, nc-nom, album, [n-1]), si(photos, nc-nom, photo, [dl(0,n,n)-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(22, adj-num, 22, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2016, adj-num, 2016, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1024, Result) :-
      prob_parse([ si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(garçon, nc-nom, garçon, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fusil, nc-nom, fusil, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dos, nc-nom, dos, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(soeur, nc-nom, soeur, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(lapin, nc-nom, lapin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(peluche, nc-nom, peluche, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(main, nc-nom, main, [n-1]), si(',', ponct-pun, ',', [let-1]), si(saluent, v-ver:pres, saluer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(chars, nc-nom, char, [n-1]), si(arborant, vpr-ver:ppre, arborer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(drapeau, nc-nom, drapeau, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1025, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(fille, nc-nom, fille, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(lapin, nc-nom, lapin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(peluche, nc-nom, peluche, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(main, nc-nom, main, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(soeur, nc-nom, soeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(garçon, nc-nom, garçon, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fusil, nc-nom, fusil, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dos, nc-nom, dos, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1026, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si('Bernie', npp-nam, 'Bernie', [dl(0,n,n)-1]), si('Gores', npp-nam, 'Gores', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(exécuté, vpp-ver:pper, exécuter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Kaboul', npp-nam, 'Kaboul', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si('Talibans', adj-nam, 'Talibans', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1027, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si('Bernie', npp-nam, 'Bernie', [dl(0,n,n)-1]), si('Gores', npp-nam, 'Gores', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(posée, vpp-ver:pper, poser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(séparatistes, nc-nom, séparatiste, [n-1]), si(soutenus, vpp-ver:pper, soutenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1028, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(citoyen, nc-nom, citoyen, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(travaillait, v-ver:impf, travailler, [dr(0,dl(0,np,s),np)-1]), si(comm, p+d-prp:det, comm, [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(posée, vpp-ver:pper, poser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(séparatistes, nc-nom, séparatiste, [n-1]), si(soutenus, vpp-ver:pper, soutenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1029, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(posée, vpp-ver:pper, poser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(séparatistes, nc-nom, séparatiste, [n-1]), si(soutenus, vpp-ver:pper, soutenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(travaillait, v-ver:impf, travailler, [dl(0,np,s)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(youtubeur, nc-nom, youtubeur, [n-1]), si(adepte, nc-nom, adept, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(jeux, nc-nom, jeu, [n-1]), si(vidéos, nc-nom, vidéo, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1030, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(youtubeur, nc-nom, youtubeur, [n-1]), si(adepte, adj-adj, adept, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(jeux, nc-nom, jeu, [n-1]), si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(',', ponct-pun, ',', [let-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jordie', npp-nam, 'Jordie', [dr(0,np,np)-1]), si('Jordan', npp-nam, 'Jordan', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(posée, vpp-ver:pper, poser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(séparatistes, nc-nom, séparatiste, [n-1]), si(soutenus, vpp-ver:pper, soutenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1031, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(donné, vpp-ver:pper, donner, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(mort, nc-nom, mort, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(ni, cc-kon, ni, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(activiste, nc-nom, activiste, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1032, Result) :-
      prob_parse([ si('CNN', npp-abr, 'CNN', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(comptes, nc-nom, compte, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si('Afghan', npp-nam, 'Afghan', [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si('CNNUKR', npp-nam, 'CNNUKR', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(média, nc-nom, média, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(adoptant, vpr-ver:ppre, adopter, [dr(0,dl(0,np,s_ppres),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(codes, nc-nom, code, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(authentiques, adj-adj, authentique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1033, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(comptes, nc-nom, compte, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), si('Afghan', npp-nam, 'Afghan', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si('CNNUKR', npp-nam, 'CNNUKR', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(comptes, nc-nom, compte, [n-1]), si(officiels, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1034, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(comptes, nc-nom, compte, [n-1]), si('Twitter', npp-nam, 'Twitter', [dl(0,n,n)-1]), si(officiels, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(comportent, v-ver:pres, comporter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(badge, nc-nom, badge, [n-1]), si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(indique, v-ver:pres, indique, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(authenticité, nc-nom, authenticité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1035, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('Twitter', adj-nam, 'Twitter', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), si('Afghan', npp-nam, 'Afghan', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(comporte, v-ver:pres, comporte, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(badge, nc-nom, badge, [n-1]), si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1036, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1037, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(comptes, nc-nom, compte, [n-1]), si('Twitter', npp-nam, 'Twitter', [dl(0,n,n)-1]), si(officiels, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(comportent, v-ver:pres, comporter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(badge, nc-nom, badge, [n-1]), si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(indique, v-ver:pres, indique, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(authenticité, nc-nom, authenticité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1038, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('Twitter', adj-nam, 'Twitter', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), si('Afghan', npp-nam, 'Afghan', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(comporte, v-ver:pres, comporte, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(badge, nc-nom, badge, [n-1]), si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1039, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1040, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(comptes, nc-nom, compte, [n-1]), si('Twitter', npp-nam, 'Twitter', [dl(0,n,n)-1]), si(officiels, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(comportent, v-ver:pres, comporter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(badge, nc-nom, badge, [n-1]), si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(indique, v-ver:pres, indique, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(authenticité, nc-nom, authenticité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1041, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si('Twitter', adj-nam, 'Twitter', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), si('Afghan', npp-nam, 'Afghan', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(comporte, v-ver:pres, comporte, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(badge, nc-nom, badge, [n-1]), si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1042, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(compte, nc-nom, compte, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1043, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(couverture, nc-nom, couverture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(édition, nc-nom, édition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(grimé, vpp-ver:pper, grimer, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(nez, nc-nom, nez, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moustache, nc-nom, moustache, [n-1]), si(caractéristiques, nc-nom, caractéristique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1044, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(une, nc-num, une, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(magazine, nc-nom, magazine, [n-1]), si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), si(datée, vpp-ver:pper, dater, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), si(garçon, nc-nom, garçon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(onze, det-num, onze, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Orion', npp-nam, 'Orion', [dr(0,np,np)-1]), si('James', npp-nam, 'James', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1045, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(couverture, nc-nom, couverture, [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(grimé, vpp-ver:pper, grimer, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(nez, nc-nom, nez, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moustache, nc-nom, moustache, [n-1]), si(caractéristiques, nc-nom, caractéristique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Adolf', npp-nam, 'Adolf', [dr(0,np,np)-1]), si('Hitler', npp-nam, 'Hitler', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1046, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(couverture, nc-nom, couverture, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Time', npp-nam, 'Time', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(portrait, nc-nom, portrait, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1047, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(une, nc-num, une, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(magazine, nc-nom, magazine, [n-1]), si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), si(garçon, nc-nom, garçon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(onze, det-num, onze, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Orion', npp-nam, 'Orion', [dr(0,np,np)-1]), si('James', npp-nam, 'James', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1048, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Une', npp-nam, 'Une', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Time', npp-nam, 'Time', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(portrait, nc-nom, portrait, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1049, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('France', npp-nam, 'France', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si(évoque, v-ver:pres, évoquer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déploiement, nc-nom, déploiement, [n-1]), si(prochain, adj-adj, prochain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(500, det-num, 500, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si('Bucarest', npp-nam, 'Bucarest', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1050, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('France', npp-nam, 'France', [np-1]), si(2, adj-num, 2, [dl(0,np,np)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(mention, nc-nom, mention, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(déploiement, nc-nom, déploiement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1051, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(détachement, nc-nom, détachement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(250, det-num, 250, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('27e', adj-num, '27e', [dr(0,n,n)-1]), si(bataillon, nc-nom, bataillon, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chasseurs, nc-nom, chasseur, [n-1]), si(alpins, adj-adj, alpin, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Annecy', npp-nam, 'Annecy', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(direction, nc-nom, direction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Bouches-du-Rhône', npp-nam, 'Bouches-du-Rhône', [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(embarqueront, v-ver:futu, embarquer, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(afin, adv-adv, afin, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(renforcer, vinf-ver:infi, renforcer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dispositif, nc-nom, dispositif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-nam, 'Otan', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1052, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opérations, nc-nom, opération, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Otan', npp-abr, 'Otan', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1053, Result) :-
      prob_parse([ si(500, det-num, 500, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(mentionnés, vpp-ver:pper, mentionner, [dl(0,n,n)-1]), si(partent, v-ver:pres, partir, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1054, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(troupe, nc-nom, troupe, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(engagée, vpp-ver:pper, engager, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1055, Result) :-
      prob_parse([ si(500, det-num, 500, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si('Français', adj-nam, 'Français', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(route, nc-nom, route, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1056, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('Français', nc-nam, 'Français', [n-1]), si(vont, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aval, nc-nom, aval, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Légion', nc-nam, 'Légion', [n-1]), si(étrangère, adj-adj, étranger, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1057, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Légion', nc-nam, 'Légion', [n-1]), si(étrangère, adj-adj, étranger, [dl(0,n,n)-1]), si(vont, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aval, nc-nom, aval, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1058, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(discours, nc-nom, discours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(annonçant, vpr-ver:ppre, annoncer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(diffusée, vpp-ver:pper, diffuser, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(diffusion, nc-nom, diffusion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1059, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(allocution, nc-nom, allocution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(datent, v-ver:pres, dater, [dr(0,dl(0,np,s),pp)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1060, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(discours, nc-nom, discours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(annonçant, vpr-ver:ppre, annoncer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(diffusée, vpp-ver:pper, diffuser, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(diffusion, nc-nom, diffusion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1061, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(allocution, nc-nom, allocution, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(annonçant, vpr-ver:ppre, annoncer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(diffusée, vpp-ver:pper, diffuser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Kremlin', npp-nam, 'Kremlin', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(filmée, vpp-ver:pper, filmer, [dl(0,np,s_pass)-1]), si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1062, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(discours, nc-nom, discours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(annonçant, vpr-ver:ppre, annoncer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(diffusée, vpp-ver:pper, diffuser, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(diffusion, nc-nom, diffusion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1063, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), si(vérifiant, vpr-ver:ppre, vérifier, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(discours, nc-nom, discours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(lundi, nc-nom, lundi, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1064, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), si(regardant, vpr-ver:ppre, regarder, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(internet, nc-nom, internet, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Kremlin', npp-nam, 'Kremlin', [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(vérifier, vinf-ver:infi, vérifier, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(discours, nc-nom, discours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(lundi, nc-nom, lundi, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1065, Result) :-
      prob_parse([ si('Lorsqu\'', cs-kon, 'Lorsqu\'', [dr(0,dr(0,s,s),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fichier, nc-nom, fichier, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(publié, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(récupérer, vinf-ver:infi, récupérer, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(indiquer, vinf-ver:infi, indiquer, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(quelle, detwh-pro:rel, quel, [dr(0,dr(0,dl(0,dr(0,pp,np),s_whq),s),n)-1]), si(date, nc-nom, date, [n-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(pris, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1066, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(indiquent, v-ver:pres, indiquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si(officielle, adj-adj, officiel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fichier, nc-nom, fichier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(date, v-ver:pres, date, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nuit, nc-nom, nuit, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('3h35', det-num, '3h35', [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1067, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistrée, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1068, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(facilement, adv-adv, facilement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(manipulables, adj-adj, manipulable, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(postdatées, vpp-ver:pper, postdater, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(altérer, vinf-ver:infi, altérer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(date, nc-nom, date, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(enregistrement, nc-nom, enregistrement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1069, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(tirées, vpp-ver:pper, tirer, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(formelle, adj-adj, formel, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(date, nc-nom, date, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enregistrement, nc-nom, enregistrement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1070, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fichier, nc-nom, fichier, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(relayé, vpp-ver:pper, relayer, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si('Twitter', npp-nam, 'Twitter', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Instagram', npp-nam, 'Instagram', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('WhatsApp', npp-abr, 'WhatsApp', [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(automatiquement, adv-adv, automatiquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistrées, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(conservées, vpp-ver:pper, conserver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(plateformes, nc-nom, plateforme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1071, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(réseau, nc-nom, réseau, [n-1]), si(social, adj-adj, social, [dl(0,n,n)-1]), si('Telegram', npp-nam, 'Telegram', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(efface, v-ver:pres, effacer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si(diffusées, vpp-ver:pper, diffuser, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(plateforme, nc-nom, plateforme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1072, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fichier, nc-nom, fichier, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(relayé, vpp-ver:pper, relayer, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si('Twitter', npp-nam, 'Twitter', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Instagram', npp-nam, 'Instagram', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('WhatsApp', npp-abr, 'WhatsApp', [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(automatiquement, adv-adv, automatiquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(effacées, vpp-ver:pper, effacer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(plateformes, nc-nom, plateforme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1073, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(réseau, nc-nom, réseau, [n-1]), si(social, adj-adj, social, [dl(0,n,n)-1]), si('Instagram', npp-abr, 'Instagram', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(efface, v-ver:pres, effacer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(métadonnées, nc-nom, métadonnée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si(diffusées, vpp-ver:pper, diffuser, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(plateforme, nc-nom, plateforme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1074, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(prières, nc-nom, prière, [n-1]), si(collectives, adj-adj, collectif, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tiennent, v-ver:pres, tenir, [dl(0,cl_r,dl(0,np,s))-1]), si(tous, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2014, pro-num, 2014, [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kharkiv', npp-nam, 'Kharkiv', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1075, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(prières, nc-nom, prière, [n-1]), si(collectives, adj-adj, collectif, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(organisent, v-ver:pres, organiser, [dl(0,cl_r,dl(0,np,s))-1]), si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kharkiv', npp-nam, 'Kharkiv', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1076, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('Chrétiens', nc-nom, 'Chrétiens', [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(emmitouflées, vpp-ver:pper, emmitoufler, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(manteaux, nc-nom, manteau, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(agenouillées, vpp-ver:pper, agenouiller, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(neige, nc-nom, neige, [n-1]), si(',', ponct-pun, ',', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tiennent, v-ver:pres, tenir, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mains, nc-nom, main, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(priant, vpr-ver:ppre, prier, [dr(0,dl(0,np,s_ppres),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1077, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('Chrétiens', nc-nom, 'Chrétiens', [n-1]), si('Ukrainiens', adj-nam, 'Ukrainiens', [dl(0,n,n)-1]), si(prient, v-ver:impf, prier, [dl(0,np,s)-1]), si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(genoux, nc-nom, genou, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(neige, nc-nom, neige, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1078, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(moments, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recueillement, nc-nom, recueillement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(organisés, vpp-ver:pper, organiser, [dl(0,n,n)-1]), si(régulièrement, adv-adv, régulièrement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(initiative, nc-nom, initiative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pasteurs, nc-nom, pasteur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(évangéliques, adj-adj, évangélique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fidèles, nc-nom, fidèle, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(appelés, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prier, vinf-ver:infi, prier, [dr(0,dl(0,np,s_inf),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1079, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(moments, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recueillement, nc-nom, recueillement, [n-1]), si(destinés, vpp-ver:pper, destiner, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(fidèles, nc-nom, fidèle, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(organisés, vpp-ver:pper, organiser, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(initiative, nc-nom, initiative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1080, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(annonce, nc-nom, annonce, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(avions, nc-nom, avion, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(volé, vpp-ver:pper, voler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ciel, nc-nom, ciel, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1081, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(avions, nc-nom, avion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(bombardiers, nc-nom, bombardier, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(survolé, vpp-ver:pper, survoler, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(juste, adv-adv, juste, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(annonce, nc-nom, annonce, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1082, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(parade, nc-nom, parade, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(organisée, vpp-ver:pper, organiser, [dl(0,np,s_pass)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1083, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(jour, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(célébré, vpp-ver:pper, célébrer, [dl(0,np,s_pass)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(parade, nc-nom, parade, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(nazie, adj-adj, nazi, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1084, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(jour, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(célébré, vpp-ver:pper, célébrer, [dl(0,np,s_pass)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(parade, nc-nom, parade, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(nazie, adj-adj, nazi, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1085, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(parade, nc-nom, parade, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(organisée, vpp-ver:pper, organiser, [dl(0,np,s_pass)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(commémorer, vinf-ver:infi, commémorer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dissolution, nc-nom, dissolution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('URSS', npp-abr, 'URSS', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1086, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(du, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(24, det-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tirs, nc-nom, tir, [n-1]), si(nocturnes, adj-adj, nocturne, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tirs, nc-nom, tir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si('Gaza', npp-nam, 'Gaza', [np-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1087, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(du, p-ver:pper, de, [dr(0,dl(0,n,n),n)-1]), si(24, det-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(lancement, nc-nom, lancement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1088, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(explosions, nc-nom, explosion, [n-1]), si(attribuées, vpp-ver:pper, attribuer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(entendues, vpp-ver:pper, entendre, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Kiev', npp-nam, 'Kiev', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Kramatorsk', npp-nam, 'Kramatorsk', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Kharkiv', npp-nam, 'Kharkiv', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(est, nc-nom, est, [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Odessa', npp-nam, 'Odessa', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(sud, nc-nom, sud, [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(à, p-prp, à, [np-1]), si('Marioupol', npp-nam, 'Marioupol', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1089, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(attaqué, vpp-ver:pper, attaquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si('Kiev', npp-nam, 'Kiev', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(villes, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1090, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fermé, vpp-ver:pper, fermer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(espace, nc-nom, espace, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aviation, nc-nom, aviation, [n-1]), si(civile, adj-adj, civil, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1091, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vols, nc-nom, vol, [n-1]), si(civils, adj-adj, civil, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(annulés, vpp-ver:pper, annuler, [dl(0,np,s_pass)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(aéroports, nc-nom, aéroport, [n-1]), si(ukrainiens, adj-adj, ukrainien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1092, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fermé, vpp-ver:pper, fermer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(espace, nc-nom, espace, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aviation, nc-nom, aviation, [n-1]), si(civile, adj-adj, civil, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1093, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vols, nc-nom, vol, [n-1]), si(civils, adj-adj, civil, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(espace, nc-nom, espace, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1094, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(du, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(24, det-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tirs, nc-nom, tir, [n-1]), si(nocturnes, adj-adj, nocturne, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tirs, nc-nom, tir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si('Gaza', npp-nam, 'Gaza', [np-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1095, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(du, p-ver:pper, de, [dr(0,dl(0,n,n),n)-1]), si(24, det-num, 24, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(frappes, nc-nom, frappe, [n-1]), si(massives, adj-adj, massif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1096, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chiffres, nc-nom, chiffre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1097, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(statistiques, nc-nom, statistique, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hospitalisés, nc-nom, hospitaliser, [n-1]), si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existent, v-ver:pres, exister, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1098, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(mortes, adj-adj, mourir, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(hospitalisées, vpp-ver:pper, hospitaliser, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1099, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chiffres, nc-nom, chiffre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1100, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('CADA', npp-abr, 'CADA', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(statistique, nc-nom, statistique, [n-1]), si(relative, adj-adj, relatif, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(statistique, nc-nom, statistique, [n-1]), si(relative, adj-adj, relatif, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1101, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cada', npp-nam, 'Cada', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(statistiques, nc-nom, statistique, [n-1]), si(demandées, vpp-ver:pper, demander, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existent, v-ver:pres, exister, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1102, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('DREES', npp-abr, 'DREES', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(répondu, vpp-ver:pper, répondre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existait, v-ver:impf, exister, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(routine, nc-nom, routine, [n-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(toutes, det-adv, tout, [dr(0,dl(0,n,n),n)-1]), si(causes, nc-nom, cause, [n-1]), si(confondues, vpp-ver:pper, confondre, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1103, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(revanche, nc-nom, revanche, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('DREES', npp-abr, 'DREES', [n-1]), si(dispose, v-ver:pres, disposer, [dr(0,dl(0,np,s),pp)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(données, nc-nom, donnée, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1104, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(fichier, nc-nom, fichier, [n-1]), si(global, adj-adj, global, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(recense, v-ver:pres, recenser, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(hospitalisées, vpp-ver:pper, hospitaliser, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('France', npp-nam, 'France', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(seulement, adv-adv, seulement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(des, det-prp:det, un, [dr(0,pp_de,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(testées, vpp-ver:pper, tester, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(positives, adj-adj, positif, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1105, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(statistiques, nc-nom, statistique, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(statuts, nc-nom, statut, [n-1]), si(vaccinaux, adj-adj, vaccinal, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(malades, nc-nom, malade, [n-1]), si(',', ponct-pun, ',', [let-1]), si(existent, v-ver:pres, exister, [dl(0,np,s)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1106, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(statistiques, nc-nom, statistique, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hospitalisés, nc-nom, hospitaliser, [n-1]), si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existent, v-ver:pres, exister, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1107, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(statistiques, nc-nom, statistique, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(statuts, nc-nom, statut, [n-1]), si(vaccinaux, adj-adj, vaccinal, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(malades, nc-nom, malade, [n-1]), si(',', ponct-pun, ',', [let-1]), si(existent, v-ver:pres, exister, [dl(0,np,s)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1108, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(mortes, adj-adj, mourir, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(hospitalisées, vpp-ver:pper, hospitaliser, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1109, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(suivi, nc-nom, suivi, [n-1]), si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(testées, vpp-ver:pper, tester, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(positives, adj-adj, positif, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(hospitalisées, vpp-ver:pper, hospitaliser, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(désormais, adv-adv, désormais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(publié, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(semaine, nc-nom, semaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1110, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(statistiques, nc-nom, statistique, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(testées, vpp-ver:pper, tester, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(positives, adj-adj, positif, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(hospitalisées, vpp-ver:pper, hospitaliser, [dl(0,n,n)-1]), si(selon, p-prp, selon, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(publiées, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rythme, nc-nom, rythme, [n-1]), si(hebdomadaires, adj-adj, hebdomadaire, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1111, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('DREES', npp-abr, 'DREES', [n-1]), si(dispose, v-ver:pres, disposer, [dr(0,dl(0,np,s),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(données, nc-nom, donnée, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(permis, vpp-ver:pper, permettre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(démontrer, vinf-ver:infi, démontrer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1112, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(publiées, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(fur, nc-nom, fur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n))),dl(1,dl(0,n,n),dl(0,n,n)))-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(mesure, nc-nom, mesure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(statut, nc-nom, statut, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(confirment, v-ver:pres, confirmer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1113, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(visuel, nc-nom, visuel, [n-1]), si(relayé, vpp-ver:pper, relayer, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(13, adj-num, 13, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(logo, nc-nom, logo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ARS', npp-abr, 'ARS', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('PACA', npp-nam, 'PACA', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Région', npp-nam, 'Région', [n-1]), si('Sud', npp-nam, 'Sud', [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(détournement, nc-nom, détournement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ARS', npp-abr, 'ARS', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(grippe, nc-nom, grippe, [dl(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1114, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(montage, nc-nom, montage, [n-1]), si(détourne, v-ver:pres, détourner, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(visuel, nc-nom, visuel, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(logo, nc-nom, logo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ARS', npp-abr, 'ARS', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('PACA', npp-nam, 'PACA', [np-1]), si(datant, vpr-ver:ppre, dater, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1115, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(autorisée, vpp-ver:pper, autoriser, [dl(0,np,s_pass)-1]), si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(âgés, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1116, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(âgés, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1117, Result) :-
      prob_parse([ si('Rien', pro-pro:ind, 'Rien', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permet, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(outrepasser, vinf-ver:infi, outrepasser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souveraineté, nc-nom, souveraineté, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(santé, nc-nom, santé, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passe, nc-nom, passe, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(ailleurs, adv-adv, ailleurs, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1118, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(textes, nc-nom, texte, [n-1]), si(adoptés, vpp-ver:pper, adopter, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(permettent, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(remplacer, vinf-ver:infi, remplacer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réponses, nc-nom, réponse, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(pandémies, nc-nom, pandémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(donc, adv-adv, donc, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(instaurer, vinf-ver:infi, instaurer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passe, nc-nom, passe, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1119, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(confie, v-ver:pres, confier, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(von, npp-nam, von, [dr(0,np,np)-1]), si(der, et-prp, der, [dr(0,np,np)-1]), si('Leyen', npp-nam, 'Leyen', [np-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pouvoir, nc-nom, pouvoir, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(instaurer, vinf-ver:infi, instaurer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passe, nc-nom, passe, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1120, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Ursula', npp-nam, 'Ursula', [np-1]), si(von, et-abr, von, [dr(0,dl(0,np,np),np)-1]), si(der, et-abr, der, [dr(0,np,np)-1]), si('Leyen', npp-nam, 'Leyen', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avenir, nc-nom, avenir, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(décidera, v-ver:cond, décider, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passe, nc-nom, passe, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1121, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(règlements, nc-nom, règlement, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(capacités, nc-nom, capacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réagir, vinf-ver:infi, réagir, [dl(0,np,s_inf)-1]), si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(futures, adj-adj, futur, [dr(0,n,n)-1]), si(pandémies, nc-nom, pandémie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1122, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlements, nc-nom, règlement, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptés, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1123, Result) :-
      prob_parse([ si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coordination, nc-nom, coordination, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(consultation, nc-nom, consultation, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expertise, nc-nom, expertise, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avis, nc-nom, avis, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recommandation, nc-nom, recommandation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(rechercher, vinf-ver:infi, rechercher, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cohérence, nc-nom, cohérence, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1124, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(que, adv-adv, que, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(concerter, vinf-ver:infi, concerter, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(coordonner, vinf-ver:infi, coordonner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1125, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(reçoit, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tâche, nc-nom, tâche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(coordonner, vinf-ver:infi, coordonner, [dr(0,dl(0,np,s_inf),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(définir, vinf-ver:infi, définir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(paramètres, nc-nom, paramètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(instruments, nc-nom, instrument, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(épidémiologique, adj-adj, épidémiologique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coordination, nc-nom, coordination, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1126, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(prévues, vpp-ver:pper, prévoir, [dl(0,n,n)-1]), si(face, nc-nom, face, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(essentiellement, adv-adv, essentiellement, [dr(0,pp,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(épidémiologique, adj-adj, épidémiologique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(coordination, nc-nom, coordination, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1127, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(adopté, vpp-ver:pper, adopter, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(reçoit, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tâche, nc-nom, tâche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(coordonner, vinf-ver:infi, coordonner, [dr(0,dl(0,np,s_inf),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(définir, vinf-ver:infi, définir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(paramètres, nc-nom, paramètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(épidémiologique, adj-adj, épidémiologique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(instruments, nc-nom, instrument, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coordination, nc-nom, coordination, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(rien, pro-pro:ind, rien, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),np))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('États', nc-nam, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(certainement, adv-adv, certainement, [dr(0,dr(0,np,np),dr(0,np,np))-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passe, nc-nom, passe, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1128, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(adoption, nc-nom, adoption, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faculté, nc-nom, faculté, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passe, nc-nom, passe, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('États', nc-nam, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1129, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(prononcée, vpp-ver:pper, prononcer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(',', ponct-pun, ',', [let-1]), si(mardi, nc-nom, mardi, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(employés, nc-nom, employé, [n-1]), si(licenciés, vpp-ver:pper, licencier, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(refusé, vpp-ver:pper, refuser, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(conformer, vinf-ver:infi, conformer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(faite, vpp-ver:pper, faire, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(fonctionnaires, nc-nom, fonctionnaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1130, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(devaient, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(salaire, nc-nom, salaire, [n-1]), si(rétroactif, adj-adj, rétroactif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1131, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réintégrer, vinf-ver:infi, réintégrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(agents, nc-nom, agent, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(municipaux, adj-adj, municipal, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(arriérés, nc-nom, arriéré, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(salaire, nc-nom, salaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1132, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(ordonnant, vpr-ver:ppre, ordonner, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(employés, nc-nom, employé, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(celle, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(propreté, nc-nom, propreté, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1133, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réintégrer, vinf-ver:infi, réintégrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(agents, nc-nom, agent, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(municipaux, adj-adj, municipal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1134, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ordonnance, nc-nom, ordonnance, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1135, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déposé, vpp-ver:pper, déposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(juge, nc-nom, juge, [n-1]), si('Porzio', npp-nam, 'Porzio', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1136, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(appel, nc-nom, appel, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(juge, nc-nom, juge, [n-1]), si('Porzio', npp-nam, 'Porzio', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1137, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(requérants, nc-nom, requérant, [n-1]), si(individuels, adj-adj, individuel, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1138, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(travailleurs, nc-nom, travailleur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(procédure, nc-nom, procédure, [n-1]), si(judiciaire, adj-adj, judiciaire, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1139, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(fonction, nc-nom, fonction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1140, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fonctionnaires, nc-nom, fonctionnaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(enseignants, nc-nom, enseignant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(soignants, nc-nom, soignant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(policiers, nc-nom, policier, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('pompiers...', nc-nom, 'pompiers...', [n-1]), si(')', ponct-pun, ')', [let-1]), si(le, det-det:art, le, [let-1]), si('1er', adj-num, '1er', [dr(0,dl(1,s,s),n)-1]), si(novembre, nc-nom, novembre, [dr(0,n,n)-1]), si(2021, adj-num, 2021, [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1141, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ordonnance, nc-nom, ordonnance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),n)-1]), si(part, nc-nom, part, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(requérants, nc-nom, requérant, [n-1]), si(individuels, adj-adj, individuel, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1142, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnels, nc-nom, personnel, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),n)-1]), si(paiement, nc-nom, paiement, [n-1]), si(rétroactif, adj-adj, rétroactif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(salaires, nc-nom, salaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1143, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(ordonnant, vpr-ver:ppre, ordonner, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(employés, nc-nom, employé, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(celle, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(propreté, nc-nom, propreté, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1144, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(juge, nc-nom, juge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si(municipaux, adj-adj, municipal, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soignants, nc-nom, soignant, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(agents, nc-nom, agent, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(municipaux, adj-adj, municipal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1145, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cours', npp-nam, 'Cours', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(impact, nc-nom, impact, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(employés, nc-nom, employé, [n-1]), si(municipaux, adj-adj, municipal, [dl(0,n,n)-1]), si(soumis, vpp-ver:pper, soumettre, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,np,s_ppres),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(appel, nc-nom, appel, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(suspendue, vpp-ver:pper, suspendre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1146, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déposé, vpp-ver:pper, déposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(juge, nc-nom, juge, [n-1]), si('Porzio', npp-nam, 'Porzio', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(bloquant, vpr-ver:ppre, bloquer, [dr(0,dl(0,n,n),np)-1]), si(automatiquement, adv-adv, automatiquement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réintégrer, vinf-ver:infi, réintégrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si(licenciés, vpp-ver:pper, licencier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1147, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cours', npp-nam, 'Cours', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si('d\'', det-prp, 'd\'', [dr(0,pp_de,n)-1]), si(impact, nc-nom, impact, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(employés, nc-nom, employé, [n-1]), si(municipaux, adj-adj, municipal, [dl(0,n,n)-1]), si(soumis, vpp-ver:pper, soumettre, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,np,s_ppres),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(appel, nc-nom, appel, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réintégration, nc-nom, réintégration, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(suspendue, vpp-ver:pper, suspendre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1148, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(travailleurs, nc-nom, travailleur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(procédure, nc-nom, procédure, [n-1]), si(judiciaire, adj-adj, judiciaire, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1149, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(experts, nc-nom, expert, [n-1]), si(éreintent, v-ver:pres, éreinter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(variant, nc-nom, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mortalité, nc-nom, mortalité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('80%.', nc-num, '80%.', [dr(0,np,n)-1])], Result).
sent(1150, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(variant, nc-nom, variant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(létalité, nc-nom, létalité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('80%.', pro-num, '80%.', [dr(0,np,n)-1])], Result).
sent(1151, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(experts, nc-nom, expert, [n-1]), si(éreintent, v-ver:pres, éreinter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(variant, vpr-ver:ppre, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mortalité, nc-nom, mortalité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(souris, nc-nom, souris, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1152, Result) :-
      prob_parse([ si('Huit', pro-num, 'Huit', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(dix, adj-num, dix, [dr(0,n,n)-1]), si(souris, nc-nom, souris, [n-1]), si(infectées, vpp-ver:pper, infecter, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(variant, nc-nom, variant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(créé, vpp-ver:pper, créer, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1153, Result) :-
      prob_parse([ si('Huit', pro-num, 'Huit', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(dix, adj-num, dix, [dr(0,n,n)-1]), si(souris, nc-nom, souris, [n-1]), si(infectées, vpp-ver:pper, infecter, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(variant, nc-nom, variant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(créé, vpp-ver:pper, créer, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1154, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(expériences, nc-nom, expérience, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(variant, nc-nom, variant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', nc-nam, 'Homme', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1155, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),n)-1]), si(forme, nc-nom, forme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(prépublication, nc-nom, prépublication, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('(', ponct-pun, '(', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,dl(1,s,s),dl(1,s,s))),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),n)-1]), si(évaluation, nc-nom, évaluation, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pairs, nc-nom, pair, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(éventuelle, adj-adj, éventuel, [dr(0,n,n)-1]), si(publication, nc-nom, publication, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1156, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(menées, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(phase, nc-nom, phase, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prépublication, nc-nom, prépublication, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1157, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),n)-1]), si(forme, nc-nom, forme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(prépublication, nc-nom, prépublication, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('(', ponct-pun, '(', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,dl(1,s,s),dl(1,s,s))),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),n)-1]), si(évaluation, nc-nom, évaluation, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pairs, nc-nom, pair, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(éventuelle, adj-adj, éventuel, [dr(0,n,n)-1]), si(publication, nc-nom, publication, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1158, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(évalués, vpp-ver:pper, évaluer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pairs, nc-nom, pair, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1159, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(analysant, vpr-ver:ppre, analyser, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conclu, vpp-ver:pper, conclure, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('SARS-CoV-2', nc-abr, 'SARS-CoV-2', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(transmis, vpp-ver:pper, transmettre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(animaux, nc-nom, animal, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(humains, nc-nom, humain, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Wuhan', npp-nam, 'Wuhan', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(en, p-prp, en, [n-1]), si('Chine', npp-nam, 'Chine', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1160, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(estimé, vpp-ver:pper, estimer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(animale, adj-adj, animal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1161, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(parallèle, nc-nom, parallèle, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(questions, nc-nom, question, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tranchées, vpp-ver:pper, trancher, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1162, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(question, nc-nom, question, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('SARS-CoV-2', nc-abr, 'SARS-CoV-2', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(définitivement, adv-adv, définitivement, [dl(1,s,s)-1]), si(tranchée, vpp-ver:pper, trancher, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1163, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(créé, vpp-ver:pper, créer, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(spike, et-nom, spike, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souche, nc-nom, souche, [n-1]), si(originelle, adj-adj, originel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sars-CoV-2', npp-abr, 'Sars-CoV-2', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('WT', npp-abr, 'WT', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1164, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réplication, nc-nom, réplication, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(dangereuse, adj-adj, dangereux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1165, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(élaboré, vpp-ver:pper, élaborer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(',', ponct-pun, ',', [let-1]), si(menées, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(souris, nc-nom, souris, [n-1]), si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vulnérables, adj-adj, vulnérable, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(virus, nc-nom, virus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(mortel, adj-adj, mortel, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souche, nc-nom, souche, [n-1]), si(originelle, adj-adj, originel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1166, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(créé, vpp-ver:pper, créer, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(bostoniens, adj-adj, bostonien, [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(considéré, vpp-ver:pper, considérer, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souche, nc-nom, souche, [n-1]), si(originelle, adj-adj, originel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(préliminaires, adj-adj, préliminaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1167, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(gain, nc-nom, gain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si(suscite, v-ver:pres, susciter, [dr(0,dl(0,np,s),np)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(critiques, nc-nom, critique, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(controverses, nc-nom, controverse, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1168, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(débat, nc-nom, débat, [n-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(expériences, nc-nom, expérience, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gain, nc-nom, gain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1169, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(épidémiologistes, nc-nom, épidémiologiste, [n-1]), si(considèrent, v-ver:pres, considérer, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(menées, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(gain, nc-nom, gain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1170, Result) :-
      prob_parse([ si('L\'université', nc-nom, 'L\'université', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Boston', npp-nam, 'Boston', [dr(0,dl(0,n,n),np)-1]), si(a, v-ver:pres, avoir, [np-1]), si(démenti, vpp-ver:pper, démentir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(les, det-det:art, le, [dr(0,s_q,s)-1]), si(recherches, nc-nom, recherche, [dr(0,np,n)-1]), si(réalisées, vpp-ver:pper, réaliser, [n-1]), si(dans, p-prp, dans, [dl(0,n,n)-1]), si(son, det-det:pos, son, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(laboratoire, nc-nom, laboratoire, [dr(0,np,n)-1]), si(puissent, vs-ver:subp, pouvoir, [n-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(considérées, vpp-ver:pper, considérer, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(des, det-prp:det, un, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(gains, nc-nom, gain, [let-1]), si(de, p-prp, de, [n-1]), si(fonction, nc-nom, fonction, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(1171, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), si(ivermectine, et-nom, ivermectine, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(92, det-num, 92, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1172, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prouvée, vpp-ver:pper, prouver, [dl(0,np,s_pass)-1]), si(scientifiquement, adv-adv, scientifiquement, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1173, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(désormais, adv-adv, désormais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prouvée, vpp-ver:pper, prouver, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1174, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(demontrée, vpp-ver:pper, demontrer, [dl(0,np,s_pass)-1]), si(scientifiquement, adv-adv, scientifiquement, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1175, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), si(ivermectine, et-nom, ivermectine, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(92, det-num, 92, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1176, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(médicament, nc-nom, médicament, [n-1]), si('-', ponct-pun, '-', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(usage, nc-nom, usage, [n-1]), si(vétérinaire, adj-adj, vétérinaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(humain, adj-adj, humain, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(parasites, nc-nom, parasite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1177, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(étude, nc-nom, étude, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('92%.', nc-num, '92%.', [dr(0,np,n)-1])], Result).
sent(1178, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(92, det-num, 92, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1179, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('AEM', npp-abr, 'AEM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déconseillé, vpp-ver:pper, déconseiller, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), si(ivermectine, npp-nom, ivermectine, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1180, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AEM', npp-abr, 'AEM', [n-1]), si(recommandent, v-ver:pres, recommander, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1181, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(insuffisante, adj-adj, insuffisant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1182, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(utilisée, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(elle, pro-pro:per, lui, [np-1]), si(seule, adj-adj, seul, [dl(0,np,np)-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1183, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Haut', adj-adj, 'Haut', [dr(0,n,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si('Publique', adj-adj, 'Publique', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(recommande, v-ver:pres, recommander, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('COVID-19', npp-nam, 'COVID-19', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1184, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Haut', adj-adj, 'Haut', [dr(0,n,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si('Publique', adj-adj, 'Publique', [dl(0,n,n)-1]), si(recommande, v-ver:pres, recommander, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(traiter, vinf-ver:infi, traiter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1185, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(centres, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(')', ponct-pun, ')', [let-1]), si(vont, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(obligatoire, adj-adj, obligatoire, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1186, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(recommandent, v-ver:pres, recommander, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(compétents, adj-adj, compétent, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(la, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1187, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('CDC', nc-abr, 'CDC', [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(recommandent, v-ver:pres, recommander, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1188, Result) :-
      prob_parse([ si('Rendre', vinf-ver:infi, 'Rendre', [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(compétence, nc-nom, compétence, [n-1]), si(relative, adj-adj, relatif, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('États', nc-nam, 'États', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1189, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(centres, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(')', ponct-pun, ')', [let-1]), si(vont, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(obligatoire, adj-adj, obligatoire, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1190, Result) :-
      prob_parse([ si('Rendre', vinf-ver:infi, 'Rendre', [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(compétence, nc-nom, compétence, [n-1]), si(relative, adj-adj, relatif, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('États', nc-nam, 'États', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1191, Result) :-
      prob_parse([ si('Rendre', vinf-ver:infi, 'Rendre', [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(compétence, nc-nom, compétence, [n-1]), si(relative, adj-adj, relatif, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('États', nc-nam, 'États', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1192, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(établissent, v-ver:pres, établir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(exigences, nc-nom, exigence, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ACIP', npp-abr, 'ACIP', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1193, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ACIP', npp-abr, 'ACIP', [n-1]), si(vote, v-ver:pres, vote, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ajout, nc-nom, ajout, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(calendrier, nc-nom, calendrier, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(devront, v-ver:futu, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [cl_r-1]), si(vacciner, vinf-ver:infi, vacciner, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(scolarisés, vpp-ver:pper, scolariser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1194, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ACIP', npp-abr, 'ACIP', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(unanimité, nc-nom, unanimité, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ajout, nc-nom, ajout, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(calendrier, nc-nom, calendrier, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccinations, nc-nom, vaccination, [n-1]), si(recommandées, vpp-ver:pper, recommander, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1195, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(devront, v-ver:futu, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,np,s_inf),np)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(scolarisés, vpp-ver:pper, scolariser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1196, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ACIP', npp-abr, 'ACIP', [n-1]), si(vote, v-ver:pres, vote, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ajout, nc-nom, ajout, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(calendrier, nc-nom, calendrier, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(devront, v-ver:futu, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [cl_r-1]), si(vacciner, vinf-ver:infi, vacciner, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(scolarisés, vpp-ver:pper, scolariser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1197, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ACIP', npp-abr, 'ACIP', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(unanimité, nc-nom, unanimité, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ajout, nc-nom, ajout, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(calendrier, nc-nom, calendrier, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccinations, nc-nom, vaccination, [n-1]), si(recommandées, vpp-ver:pper, recommander, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1198, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(pourront, v-ver:futu, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(scolarisés, vpp-ver:pper, scolariser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,np,s_inf),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1199, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(composées, vpp-ver:pper, composer, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(centres, nc-nom, centre, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(recommandations, nc-nom, recommandation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1200, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ACIP', npp-abr, 'ACIP', [n-1]), si(contribue, v-ver:pres, contribuer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élaboration, nc-nom, élaboration, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(recommandations, nc-nom, recommandation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinations, nc-nom, vaccination, [n-1]), si(infantiles, adj-adj, infantile, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1201, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(recommandations, nc-nom, recommandation, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(exigences, nc-nom, exigence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(fréquenter, vinf-ver:infi, fréquenter, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(déterminées, vpp-ver:pper, déterminer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(juridictions, nc-nom, juridiction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Etats', nc-nam, 'Etats', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(localement, adv-adv, localement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1202, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(fixent, v-ver:pres, fixer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(exigences, nc-nom, exigence, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1203, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(processus, nc-nom, processus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(recommandations, nc-nom, recommandation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1204, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(fixent, v-ver:pres, fixer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(exigences, nc-nom, exigence, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1205, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(processus, nc-nom, processus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(recommandations, nc-nom, recommandation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1206, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(établissent, v-ver:pres, établir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(exigences, nc-nom, exigence, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(écoliers, nc-nom, écolier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ACIP', npp-abr, 'ACIP', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1207, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(bavarois, adj-adj, bavarois, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déclenché, vpp-ver:pper, déclencher, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si(face, nc-nom, face, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1208, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(bavarois, adj-adj, bavarois, [dl(0,n,n)-1]), si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(activé, vpp-ver:pper, activer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1209, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Bavière', npp-nam, 'Bavière', [n-1]), si('Markus', npp-nam, 'Markus', [dl(0,n,n)-1]), si('Söder', npp-nam, 'Söder', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclenché, vpp-ver:pper, déclencher, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mobiliser, vinf-ver:infi, mobiliser, [dr(0,dl(0,np,s_inf),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(personnel, nc-nom, personnel, [n-1]), si(soignant, vpr-ver:ppre, soignant, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(face, nc-nom, face, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vague, nc-nom, vague, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(infections, nc-nom, infection, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1210, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(bavarois, adj-adj, bavarois, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déclenché, vpp-ver:pper, déclencher, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Markus', npp-nam, 'Markus', [dr(0,np,np)-1]), si('Söder', npp-nam, 'Söder', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(face, nc-nom, face, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1211, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(activé, vpp-ver:pper, activer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(',', ponct-pun, ',', [let-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mobilisation, nc-nom, mobilisation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnel, nc-nom, personnel, [n-1]), si(soignant, vpr-ver:ppre, soignant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(soignés, vpp-ver:pper, soigner, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(tout, adv-adv, tout, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(pouvant, vpr-ver:ppre, pouvoir, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(accueillir, vinf-ver:infi, accueillir, [dr(0,dl(0,np,s_inf),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(patients, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,s),pp)-1]), si(souffrent, v-ver:pres, souffrir, [dr(0,pp_de,n)-1]), si(de, p-prp, de, [n-1]), si(maladies, nc-nom, maladie, [n-1]), si(cardiaques, adj-adj, cardiaque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cancer, nc-nom, cancer, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(besoin, nc-nom, besoin, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [n-1]), si(lit, nc-nom, lit, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1212, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(activé, vpp-ver:pper, activer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(accueillir, vinf-ver:infi, accueillir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(cardiaques, adj-adj, cardiaque, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cancer, nc-nom, cancer, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1213, Result) :-
      prob_parse([ si('Markus', npp-nam, 'Markus', [dr(0,np,np)-1]), si('Söder', npp-nam, 'Söder', [np-1]), si(parle, v-ver:pres, parler, [dr(0,dl(0,np,s),pp)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(communiqué, nc-nom, communiqué, [n-1]), si(',', ponct-pun, ',', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(accueillir, vinf-ver:infi, accueillir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(atteintes, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1214, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(communiqué, nc-nom, communiqué, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Markus', npp-nam, 'Markus', [dr(0,np,np)-1]), si('Söder', npp-nam, 'Söder', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(nulle, det-pro:ind, nul, [dr(0,dl(1,s,s),n)-1]), si(part, nc-nom, part, [n-1]), si(mention, nc-nom, mention, [np-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(devant, vpr-ver:ppre, devoir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(accueillies, vpp-ver:pper, accueillir, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1215, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(tout, adv-adv, tout, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Land', npp-nam, 'Land', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Bavière', npp-nam, 'Bavière', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déclenché, vpp-ver:pper, déclencher, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(dynamique, adj-adj, dynamique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(infections, nc-nom, infection, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1216, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contexte, nc-nom, contexte, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(infections, nc-nom, infection, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(développent, v-ver:pres, développer, [dl(0,cl_r,dl(0,np,s))-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(dynamique, adj-adj, dynamique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Bavière', npp-nam, 'Bavière', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1217, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(phase, nc-nom, phase, [n-1]), si('III', adj-num, 'III', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(menés, vpp-ver:pper, mener, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fabricants, nc-nom, fabricant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2020, pro-num, 2020, [np-1]), si(que, cs-kon, que, [dr(0,dl(1,s,s),s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si('BioNTech', npp-nam, 'BioNTech', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('Moderna', npp-nam, 'Moderna', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avaient, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(innocuité, nc-nom, innocuité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(protectrice, adj-adj, protecteur, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dr(0,dl(0,n,n),n)-1]), si(du, p+d-prp:det, de, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1218, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(avérait, v-ver:impf, avérer, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mieux, adv-adv, mieux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ça, pro-pro:dem, cela, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(développement, nc-nom, développement, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1219, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mesurer, vinf-ver:infi, mesurer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(symptomatiques, adj-adj, symptomatique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmissibilité, nc-nom, transmissibilité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1220, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(phase, nc-nom, phase, [n-1]), si('III', adj-num, 'III', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(menés, vpp-ver:pper, mener, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fabricants, nc-nom, fabricant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2020, pro-num, 2020, [np-1]), si(que, cs-kon, que, [dr(0,dl(1,s,s),s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si('BioNTech', npp-nam, 'BioNTech', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('Moderna', npp-nam, 'Moderna', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avaient, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(innocuité, nc-nom, innocuité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(protectrice, adj-adj, protecteur, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dr(0,dl(0,n,n),n)-1]), si(du, p+d-prp:det, de, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1221, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(avérait, v-ver:impf, avérer, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mieux, adv-adv, mieux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ça, pro-pro:dem, cela, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(développement, nc-nom, développement, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1222, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(développement, nc-nom, développement, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mesurer, vinf-ver:infi, mesurer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmissibilité, nc-nom, transmissibilité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1223, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(facteur, nc-nom, facteur, [n-1]), si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(complexe, adj-adj, complexe, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mesurer, vinf-ver:infi, mesurer, [dr(0,dl(0,np,s_inf),np)-1]), si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(contribué, vpp-ver:pper, contribuer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(alimenter, vinf-ver:infi, alimenter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(controverses, nc-nom, controverse, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passe, nc-nom, passe, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1224, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(essai, nc-nom, essai, [n-1]), si(clinique, adj-adj, clinique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mesurer, vinf-ver:infi, mesurer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(complexe, adj-adj, complexe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1225, Result) :-
      prob_parse([ si('Limiter', vinf-ver:infi, 'Limiter', [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(dépend, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(multiples, adj-adj, multiple, [dr(0,n,n)-1]), si(facteurs, nc-nom, facteur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1226, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(dépend, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(facteurs, nc-nom, facteur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1227, Result) :-
      prob_parse([ si('Interrogée', vpp-ver:pper, 'Interrogée', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élu, nc-nom, élu, [n-1]), si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Roos', npp-nam, 'Roos', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(',', ponct-pun, ',', [let-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(testé, vpp-ver:pper, tester, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1228, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avouer, vinf-ver:infi, avouer, [dr(0,dl(0,np,s_inf),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(introduction, nc-nom, introduction, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(testé, vpp-ver:pper, tester, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(capacité, nc-nom, capacité, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(stopper, vinf-ver:infi, stopper, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1229, Result) :-
      prob_parse([ si('L\'eurodéputé', nc-nom, 'L\'eurodéputé', [dr(0,np,n)-1]), si(néerlandais, adj-adj, néerlandais, [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Roos', npp-nam, 'Roos', [dl(0,n,n)-1]), si(affirme, v-ver:pres, affirmer, [dl(0,n,n)-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(des, det-prp:det, un, [dr(0,dl(0,np,s_ppart),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(révélations, nc-nom, révélation, [let-1]), si('"', ponct-pun:cit, '"', [n-1]), si(de, p-prp, de, [let-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(part, nc-nom, part, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(une, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), si(représentante, nc-nom, représentant, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Pfizer', npp-nam, 'Pfizer', [dr(0,dl(0,n,n),np)-1]), si(sur, p-prp, sur, [np-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(essais, nc-nom, essai, [dr(0,np,n)-1]), si(cliniques, adj-adj, clinique, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(son, det-det:pos, son, [dr(0,dl(0,n,n),np)-1]), si(vaccin, nc-nom, vaccin, [dr(0,np,n)-1]), si(contre, p-prp, contre, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1230, Result) :-
      prob_parse([ si('Contrairement', adv-adv, 'Contrairement', [dr(0,dr(0,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dr(0,s,np),np)-1]), si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), si('Roos', npp-nam, 'Roos', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(voit, v-ver:pres, voir, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(propos, nc-nom, propos, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(représentante, nc-nom, représentant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(alerte, nc-nom, alerte, [n-1]), si(info, nc-nom, info, [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(airs, nc-nom, air, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(scandale, nc-nom, scandale, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(révélations, nc-nom, révélation, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(représentante, nc-nom, représentant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1231, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(audience, nc-nom, audience, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(savait, v-ver:impf, savoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(circulation, nc-nom, circulation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(permettait, v-ver:impf, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(empêcher, vinf-ver:infi, empêcher, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1232, Result) :-
      prob_parse([ si('Savions', vimp-nom, 'Savions', [dr(0,dr(0,s,s_q),np)-1]), si('-nous', cls-pro:per, '-nous', [np-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(permettait, v-ver:impf, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(stopper, vinf-ver:infi, stopper, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(commercialisation, nc-nom, commercialisation, [n-1]), si('?', ponct-pun, '?', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1233, Result) :-
      prob_parse([ si('Non', adv-adv, 'Non', [s-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(répondu, vpp-ver:pper, répondre, [dl(1,s,dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(audience, nc-nom, audience, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1234, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(audience, nc-nom, audience, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prouvé, vpp-ver:pper, prouver, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(empêcher, vinf-ver:infi, empêcher, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(commercialisé, vpp-ver:pper, commercialiser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1235, Result) :-
      prob_parse([ si('Savions', vimp-ver:impe, 'Savions', [dr(0,dr(0,s,s_q),np)-1]), si('-nous', cls-pro:per, '-nous', [np-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(stopper, vinf-ver:infi, stopper, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(commercialisation, nc-nom, commercialisation, [n-1]), si('?', ponct-pun, '?', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1236, Result) :-
      prob_parse([ si('Non', adv-adv, 'Non', [s-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(répondu, vpp-ver:pper, répondre, [dl(1,s,dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(audience, nc-nom, audience, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1237, Result) :-
      prob_parse([ si('L\'emploi', nc-nom, 'L\'emploi', [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(mot, nc-nom, mot, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(immunisation, nc-nom, immunisation, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(',', ponct-pun, ',', [let-1]), si(utilisé, vpp-ver:pper, utiliser, [let-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), si(erreur, nc-nom, erreur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(à, p-prp, à, [n-1]), si(la, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(place, nc-nom, place, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(terme, nc-nom, terme, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(transmission, nc-nom, transmission, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [let-1]), si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(lapsus, nc-nom, lapsus, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Janine', npp-nam, 'Janine', [dr(0,dl(0,n,n),np)-1]), si('Small', npp-nam, 'Small', [dr(0,np,np)-1]), si(dans, p-prp, dans, [np-1]), si(son, det-det:pos, son, [dr(0,dl(1,s,s),np)-1]), si(propos, nc-nom, propos, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1238, Result) :-
      prob_parse([ si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), si('Small', npp-nam, 'Small', [np-1]), si(voulait, v-ver:impf, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),np)-1]), si('\'', ponct-pun:cit, '\'', [let-1]), si('transmission\'', nc-nom, 'transmission\'', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), si(non, adv-adv, non, [dr(0,n,n)-1]), si('‘immunisation\'', nc-nom, '‘immunisation\'', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [let-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(propos, nc-nom, propos, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1239, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dossier, nc-nom, dossier, [n-1]), si(déposé, vpp-ver:pper, déposer, [dr(0,dr(0,dl(0,n,n),pp_par),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(pointait, v-ver:impf, pointer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(évaluée, vpp-ver:pper, évaluer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(absolument, adv-adv, absolument, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(choqué, vpp-ver:pper, choquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(françaises, adj-adj, français, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1240, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(françaises, adj-adj, français, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(choquées, vpp-ver:pper, choquer, [dr(0,dl(0,np,s_pass),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dossier, nc-nom, dossier, [n-1]), si(déposé, vpp-ver:pper, déposer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(pointe, v-ver:pres, pointe, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(évaluée, vpp-ver:pper, évaluer, [dl(0,np,s_pass)-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(tout, nc-nom, tout, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1241, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Haute', adj-adj, 'Haute', [dr(0,n,n)-1]), si('Autorité', nc-nam, 'Autorité', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('HAS', npp-abr, 'HAS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(objectifs, nc-nom, objectif, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(programme, nc-nom, programme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(définir, vinf-ver:infi, définir, [dr(0,dl(0,np,s_inf),np)-1]), si(compte, nc-nom, compte, [np-1]), si(tenu, vpp-ver:pper, tenir, [dr(0,dl(0,np,dl(1,s,s)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(épidémiologique, adj-adj, épidémiologique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrivée, nc-nom, arrivée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appuyant, vpr-ver:ppre, appuyer, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(circulation, nc-nom, circulation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('SARS-CoV-2', npp-abr, 'SARS-CoV-2', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(connaissances, nc-nom, connaissance, [n-1]), si(épidémiologiques, adj-adj, épidémiologique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(infection, nc-nom, infection, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('SARS-CoV-2', npp-abr, 'SARS-CoV-2', [n-1]), si(et, cc-kon, et, [n-1]), si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sa, det-det:pos, son, [dr(0,dl(0,n,n),np)-1]), si(transmission, nc-nom, transmission, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [n-1]), si(spécificités, nc-nom, spécificité, [n-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(ainsi, adv-kon, ainsi, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,dl(0,np,np),s_q)-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),s_q)-1]), si(les, det-det:art, le, [dr(0,s_q,pp)-1]), si(caractéristiques, nc-nom, caractéristique, [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(candidats, nc-nom, candidat, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(développés, vpp-ver:pper, développer, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(en, p-prp, en, [n-1]), si(particulier, nc-nom, particulier, [n-1]), si(leur, det-det:pos, son, [dl(0,n,n)-1]), si(capacité, nc-nom, capacité, [dr(0,np,n)-1]), si(soit, cc-kon, être, [n-1]), si(à, p-prp, à, [n-1]), si(protéger, vinf-ver:infi, protéger, [n-1]), si(contre, p-prp, contre, [n-1]), si('l\'', det-det:art, 'l\'', [np-1]), si(infection, nc-nom, infection, [n-1]), si(soit, cc-kon, être, [n-1]), si(à, p-prp, à, [n-1]), si(diminuer, vinf-ver:infi, diminuer, [n-1]), si(la, det-det:art, le, [n-1]), si(sévérité, nc-nom, sévérité, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(la, det-det:art, le, [dr(0,pp,np)-1]), si(maladie, nc-nom, maladie, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(leur, det-det:pos, son, [n-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(et, cc-kon, et, [n-1]), si(leurs, det-det:pos, leur, [dr(0,dl(0,np,np),np)-1]), si(conditions, nc-nom, condition, [n-1]), si(de, p-prp, de, [n-1]), si(mise, nc-nom, mise, [n-1]), si(à, p-prp, à, [n-1]), si(disposition, nc-nom, disposition, [n-1]), si('.', ponct-pun, '.', [dr(0,dl(0,n,n),n)-1])], Result).
sent(1242, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Haute', adj-adj, 'Haute', [dr(0,n,n)-1]), si('Autorité', nc-nam, 'Autorité', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('HAS', npp-abr, 'HAS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(prioriser, vinf-ver:infi, prioriser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capacité, nc-nom, capacité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(infection, nc-nom, infection, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1243, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(protocoles, nc-nom, protocole, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(études, nc-nom, étude, [n-1]), si(enregistrées, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(phase, nc-nom, phase, [n-1]), si('III', adj-num, 'III', [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(conçus, vpp-ver:pper, concevoir, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('vis-à-vis', p-prp, 'vis-à-vis', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1244, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(essai, nc-nom, essai, [n-1]), si(clinique, adj-adj, clinique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(phase, nc-nom, phase, [n-1]), si('III', adj-num, 'III', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(publié, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(conçu, vpp-ver:pper, concevoir, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('SARS-CoV-2', nc-abr, 'SARS-CoV-2', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1245, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(conclusions, nc-nom, conclusion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(menés, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permettent, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), si('[...]', ponct-pun, '[...]', [let-1]), si(si, cs-kon, si, [let-1]), si(le, det-det:art, le, [let-1]), si(vaccin, nc-nom, vaccin, [dr(0,s_whq,s)-1]), si(protège, v-ver:pres, protéger, [dr(0,np,n)-1]), si(contre, p-prp, contre, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,np,s),pp)-1]), si(formes, nc-nom, forme, [dr(0,pp,np)-1]), si(asymptomatiques, adj-adj, asymptomatique, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dl(0,n,n)-1]), si(maladie, nc-nom, maladie, [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [dr(0,np,n)-1]), si(ni, cc-kon, ni, [n-1]), si('s\'', cs-kon, 's\'', [let-1]), si(il, cls-pro:per, il, [dr(0,dl(0,s,s),s)-1]), si(agit, v-ver:pres, agir, [dr(0,s_whq,s)-1]), si(sur, p-prp, sur, [np-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s),pp)-1]), si(transmission, nc-nom, transmission, [dr(0,pp,np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1246, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conclusions, nc-nom, conclusion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(protège, v-ver:pres, protéger, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(particulier, nc-nom, particulier, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(individus, nc-nom, individu, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(infection, nc-nom, infection, [n-1]), si(asymptomatique, adj-adj, asymptomatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1247, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(vaccinologie, nc-nom, vaccinologie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(placé, vpp-ver:pper, placer, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protection, nc-nom, protection, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protection, nc-nom, protection, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(choix, nc-nom, choix, [n-1]), si(normal, adj-adj, normal, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(fait, vpp-ver:pper, faire, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(santé, nc-nom, santé, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fait, vpp-ver:pper, faire, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1248, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(vaccinologie, nc-nom, vaccinologie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(choix, nc-nom, choix, [n-1]), si(normal, adj-adj, normal, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(fait, vpp-ver:pper, faire, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(santé, nc-nom, santé, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(placer, vinf-ver:infi, placer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protection, nc-nom, protection, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(tout, pro-pro:ind, tout, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1249, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(suggèrent, v-ver:pres, suggérer, [dr(0,dl(0,np,s),s_q)-1]), si(fortement, adv-adv, fortement, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(limitation, nc-nom, limitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(la, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(chiffrer, vinf-ver:infi, chiffrer, [dr(0,dl(0,np,s_inf),np)-1]), si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(quasi, adv-adv, quasi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1250, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1251, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contribuent, v-ver:pres, contribuer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(',', ponct-pun, ',', [let-1]), si(elles, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(empêchent, v-ver:pres, empêcher, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1252, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contribuent, v-ver:pres, contribuer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(',', ponct-pun, ',', [let-1]), si(calculer, vinf-ver:infi, calculer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chiffre, nc-nom, chiffre, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(compliqué, adj-adj, compliqué, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1253, Result) :-
      prob_parse([ si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(était, v-ver:impf, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(connu, vpp-ver:pper, connaître, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(empêchaient, v-ver:impf, empêcher, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(personnalités, nc-nom, personnalité, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(déclarations, nc-nom, déclaration, [n-1]), si(hasardeuses, adj-adj, hasardeux, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(contribué, vpp-ver:pper, contribuer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(semer, vinf-ver:infi, semer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(confusion, nc-nom, confusion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1254, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(connu, vpp-ver:pper, connaître, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(public, adj-adj, public, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(personnalités, nc-nom, personnalité, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(raccourcis, nc-nom, raccourci, [n-1]), si(hasardeux, adj-adj, hasardeux, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1255, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(pleinement, adv-adv, pleinement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), si(tout, pro-pro:ind, tout, [np-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(infectées, vpp-ver:pper, infecter, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1256, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(chance, nc-nom, chance, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1257, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('non-vaccinées', vpp-ver:pper, 'non-vaccinées', [dl(0,n,n)-1]), si(contribuent, v-ver:pres, contribuer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(façon, nc-nom, façon, [n-1]), si(disproportionnée, adj-adj, disproportionné, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('non-vaccinée', vpp-ver:pper, 'non-vaccinée', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(12, det-num, 12, [dr(0,dr(0,np,np),n)-1]), si(fois, nc-nom, fois, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('SARS-CoV-2', npp-abr, 'SARS-CoV-2', [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(vaccinée, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1258, Result) :-
      prob_parse([ si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(réduit, v-ver:pres, réduire, [dr(0,dl(0,np,s),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(douze, pro-num, douze, [np-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contamination, nc-nom, contamination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1259, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(présentent, v-ver:pres, présenter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(symptomatiques, adj-adj, symptomatique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1260, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réduction, nc-nom, réduction, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(grave, adj-adj, grave, [dl(0,np,np)-1]), si(confirmé, vpp-ver:pper, confirmer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1261, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(si, cs-kon, si, [dr(0,dl(1,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(amenuisée, vpp-ver:pper, amenuiser, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(variants, nc-nom, variant, [n-1]), si(successifs, adj-adj, successif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(confirmée, vpp-ver:pper, confirmer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(travers, nc-nom, travers, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(campagnes, nc-nom, campagne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1262, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(globale, adj-adj, global, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('-sur', p-prp, '-sur', [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(contagion, nc-nom, contagion, [n-1]), si('-', ponct-pun, '-', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(amoindrie, vpp-ver:pper, amoindrir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(fil, nc-nom, fil, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(variants, nc-nom, variant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1263, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(avéré, vpp-ver:pper, avérer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(moins, adv-adv, moins, [n-1]), si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(efficace, adj-adj, efficace, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(mesure, nc-nom, mesure, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(variants, nc-nom, variant, [n-1]), si(apparaissaient, v-ver:impf, apparaître, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1264, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(globale, adj-adj, global, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('-sur', p-prp, '-sur', [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(contagion, nc-nom, contagion, [n-1]), si('-', ponct-pun, '-', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(amoindrie, vpp-ver:pper, amoindrir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(fil, nc-nom, fil, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(variants, nc-nom, variant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1265, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(globale, adj-adj, global, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('-sur', p-prp, '-sur', [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(contagion, nc-nom, contagion, [n-1]), si('-', ponct-pun, '-', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(amoindrie, vpp-ver:pper, amoindrir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(fil, nc-nom, fil, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(variants, nc-nom, variant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1266, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(avéré, vpp-ver:pper, avérer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [np-1]), si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(efficace, adj-adj, efficace, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(mesure, nc-nom, mesure, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(variants, nc-nom, variant, [n-1]), si(apparaissaient, v-ver:impf, apparaître, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1267, Result) :-
      prob_parse([ si('L\'immunité', nc-nom, 'L\'immunité', [dr(0,np,n)-1]), si(dite, vpp-ver:pper, dire, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(effective, adj-adj, effectif, [let-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [let-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dl(1,s,s)-1]), si(contamination, nc-nom, contamination, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(organisme, nc-nom, organisme, [dr(0,np,n)-1]), si(par, p-prp, par, [n-1]), si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), si(virus, nc-nom, virus, [dr(0,np,n)-1]), si(ni, cc-kon, ni, [n-1]), si(sa, det-det:pos, son, [dr(0,dl(0,np,np),np)-1]), si(multiplication, nc-nom, multiplication, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(mais, cc-kon, mais, [let-1]), si(elle, cls-pro:per, lui, [dr(0,dl(0,s,s),s)-1]), si(préviendra, v-ver:futu, prévenir, [np-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(développement, nc-nom, développement, [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(principaux, adj-adj, principal, [dr(0,dl(0,n,n),n)-1]), si(symptômes, nc-nom, symptôme, [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(maladie, nc-nom, maladie, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1268, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(effective, adj-adj, effectif, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévient, v-ver:pres, prévenir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(symptômes, nc-nom, symptôme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1269, Result) :-
      prob_parse([ si('L\'immunité', nc-nom, 'L\'immunité', [dr(0,np,n)-1]), si(dite, vpp-ver:pper, dire, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(effective, adj-adj, effectif, [let-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [let-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dl(1,s,s)-1]), si(contamination, nc-nom, contamination, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(organisme, nc-nom, organisme, [dr(0,np,n)-1]), si(par, p-prp, par, [n-1]), si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), si(virus, nc-nom, virus, [dr(0,np,n)-1]), si(ni, cc-kon, ni, [n-1]), si(sa, det-det:pos, son, [dr(0,dl(0,np,np),np)-1]), si(multiplication, nc-nom, multiplication, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(mais, cc-kon, mais, [let-1]), si(elle, cls-pro:per, lui, [dr(0,dl(0,s,s),s)-1]), si(préviendra, v-ver:futu, prévenir, [np-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(développement, nc-nom, développement, [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(principaux, adj-adj, principal, [dr(0,dl(0,n,n),n)-1]), si(symptômes, nc-nom, symptôme, [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(maladie, nc-nom, maladie, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1270, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(effective, adj-adj, effectif, [dl(0,n,n)-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(seulement, adv-adv, seulement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévient, v-ver:pres, prévenir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(symptômes, nc-nom, symptôme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(contamination, nc-nom, contamination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(organisme, nc-nom, organisme, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1271, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(dite, vpp-ver:pper, dire, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(stérilisante, adj-adj, stérilisant, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réponse, nc-nom, réponse, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(engendrée, vpp-ver:pper, engendrer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(éliminer, vinf-ver:infi, éliminer, [dr(0,dl(0,np,s_inf),np)-1]), si(entièrement, adv-adv, entièrement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(organisme, nc-nom, organisme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1272, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(variole, nc-nom, variole, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1273, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(variole, nc-nom, variole, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(dite, vpp-ver:pper, dire, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(effective, adj-adj, effectif, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1274, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,n,n)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,dl(0,n,n),dl(0,n,n))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(induisent, v-ver:pres, induire, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(effective, adj-adj, effectif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1275, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(induisent, v-ver:pres, induire, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(effective, adj-adj, effectif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1276, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,n,n)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,dl(0,n,n),dl(0,n,n))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(induisent, v-ver:pres, induire, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(effective, adj-adj, effectif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1277, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(variole, nc-nom, variole, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(quant, adv-adv, quant, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(exemple, nc-nom, exemple, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(dite, vpp-ver:pper, dire, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(stérilisante, adj-adj, stérilisant, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1278, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(exemple, nc-nom, exemple, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(stérilisante, adj-adj, stérilisant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1279, Result) :-
      prob_parse([ si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(exposé, vpp-ver:pper, exposer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(virus, nc-nom, virus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [n-1]), si('(', ponct-pun, '(', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(contagiosité, nc-nom, contagiosité, [n-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(elle, cls-pro:per, lui, [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,dl(1,s,s))-1]), si(diminuée, vpp-ver:pper, diminuer, [dl(0,np,dl(1,s,s))-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1280, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vacciné, adj-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1281, Result) :-
      prob_parse([ si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(exposé, vpp-ver:pper, exposer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(virus, nc-nom, virus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [n-1]), si('(', ponct-pun, '(', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(contagiosité, nc-nom, contagiosité, [n-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(elle, cls-pro:per, lui, [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,dl(1,s,s))-1]), si(diminuée, vpp-ver:pper, diminuer, [dl(0,np,dl(1,s,s))-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1282, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vacciné, adj-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1283, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(transfuser, vinf-ver:infi, transfuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(vaccinée, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(receveur, nc-nom, receveur, [n-1]), si('non-vacciné', adj-adj, 'non-vacciné', [dl(0,n,n)-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernier, nc-nom, dernier, [n-1]), si(recevrait, v-ver:impf, recevoir, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(dangereuses, adj-adj, dangereux, [dr(0,n,n)-1]), si(protéines, nc-nom, protéine, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(étude, nc-nom, étude, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appui, nc-nom, appui, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1284, Result) :-
      prob_parse([ si('Interrogée', vpp-ver:pper, 'Interrogée', [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Croix', nc-nam, 'Croix', [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réaffirmé, vpp-ver:pper, réaffirmer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(effet, nc-nom, effet, [n-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(distinction, nc-nom, distinction, [n-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transfusion, nc-nom, transfusion, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(receveurs, nc-nom, receveur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si(donneurs, nc-nom, donneur, [n-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(précisant, vpr-ver:ppre, préciser, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('FDA', npp-abr, 'FDA', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicament, nc-nom, médicament, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [let-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(requiert, v-ver:pres, requérir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1285, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Croix', nc-nam, 'Croix', [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(précise, v-ver:pres, préciser, [dr(0,dl(0,np,s),s_q)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1286, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(transfuser, vinf-ver:infi, transfuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(vaccinée, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(receveur, nc-nom, receveur, [n-1]), si('non-vacciné', adj-adj, 'non-vacciné', [dl(0,n,n)-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernier, nc-nom, dernier, [n-1]), si(recevrait, v-ver:impf, recevoir, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(dangereuses, adj-adj, dangereux, [dr(0,n,n)-1]), si(protéines, nc-nom, protéine, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(étude, nc-nom, étude, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appui, nc-nom, appui, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1287, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(que, adv-adv, que, [dr(0,pp,pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(essai, nc-nom, essai, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(faudra, v-ver:futu, falloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(délai, nc-nom, délai, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(28, det-num, 28, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(précisait, v-ver:impf, préciser, [dr(0,dl(1,s,s),np)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etablissement', nc-nam, 'Etablissement', [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('EFS', npp-abr, 'EFS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1288, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(transfuser, vinf-ver:infi, transfuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(vaccinée, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(receveur, nc-nom, receveur, [n-1]), si('non-vacciné', adj-adj, 'non-vacciné', [dl(0,n,n)-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernier, nc-nom, dernier, [n-1]), si(recevrait, v-ver:impf, recevoir, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(dangereuses, adj-adj, dangereux, [dr(0,n,n)-1]), si(protéines, nc-nom, protéine, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(étude, nc-nom, étude, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(appui, nc-nom, appui, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1289, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(principe, nc-nom, principe, [n-1]), si(même, adj-adj, même, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(exprimer, vinf-ver:infi, exprimer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(immuniser, vinf-ver:infi, immuniser, [dl(0,np,s_inf)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(protéine, nc-nom, protéine, [n-1]), si(virale, adj-adj, viral, [dl(0,n,n)-1]), si('post-vaccination', nc-nom, 'post-vaccination', [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(transfusion, nc-nom, transfusion, [n-1]), si(sanguine, adj-adj, sanguin, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(professeur, nc-nom, professeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hématologie, nc-nom, hématologie, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('Georges', npp-nam, 'Georges', [dl(0,n,n)-1]), si('Pompidou', npp-nam, 'Pompidou', [dl(0,n,n)-1]), si('David', npp-nam, 'David', [dl(0,n,n)-1]), si('Smadja', npp-nam, 'Smadja', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1290, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(94, det-num, 94, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(présentaient, v-ver:pres, présenter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(agrégation, nc-nom, agrégation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(globules, nc-nom, globule, [n-1]), si(rouges, adj-adj, rouge, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(particules, nc-nom, particule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(formes, nc-nom, forme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(tailles, nc-nom, taille, [n-1]), si(diverses, adj-adj, divers, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1291, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnue, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(source, nc-nom, source, [n-1]), si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1292, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(94, det-num, 94, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(présentaient, v-ver:pres, présenter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(agrégation, nc-nom, agrégation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(globules, nc-nom, globule, [n-1]), si(rouges, adj-adj, rouge, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(particules, nc-nom, particule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(formes, nc-nom, forme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(tailles, nc-nom, taille, [n-1]), si(diverses, adj-adj, divers, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1293, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(révèle, v-ver:pres, révéler, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(94, det-num, 94, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si(présentent, v-ver:pres, présenter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(formations, nc-nom, formation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(caillots, nc-nom, caillot, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(particules, nc-nom, particule, [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1294, Result) :-
      prob_parse([ si('L\'AEM', npp-abr, 'L\'AEM', [dr(0,np,n)-1]), si(a, v-ver:pres, avoir, [n-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [let-1]), si(lien, nc-nom, lien, [dr(0,np,n)-1]), si(possible, adj-adj, possible, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(entre, p-prp, entrer, [let-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(vaccins, nc-nom, vaccin, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [np-1]), si('Johnson', npp-nam, 'Johnson', [dr(0,dl(0,np,np),np)-1]), si('&', ponct-kon, '&', [np-1]), si('Johnson', npp-nam, 'Johnson', [dr(0,dl(0,np,np),np)-1]), si(et, cc-kon, et, [np-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si(de, det-prp, de, [let-1]), si(très, adv-adv, très, [dr(0,np,n)-1]), si(rares, adj-adj, rare, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(cas, nc-nom, cas, [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si(caillots, nc-nom, caillot, [dr(0,dl(0,n,n),n)-1]), si(sanguins, adj-adj, sanguin, [n-1]), si(inhabituels, adj-adj, inhabituel, [dl(0,n,n)-1]), si(associés, vpp-ver:pper, associer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),pp_a)-1]), si(des, det-prp:det, un, [dr(0,pp_a,np)-1]), si(plaquettes, nc-nom, plaquette, [dr(0,np,n)-1]), si(sanguines, adj-adj, sanguin, [n-1]), si(basses, adj-adj, bas, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(1295, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(rares, adj-adj, rare, [dr(0,n,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(caillots, nc-nom, caillot, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1296, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(94, det-num, 94, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(présentaient, v-ver:pres, présenter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(agrégation, nc-nom, agrégation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(globules, nc-nom, globule, [n-1]), si(rouges, adj-adj, rouge, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(particules, nc-nom, particule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(formes, nc-nom, forme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(tailles, nc-nom, taille, [n-1]), si(diverses, adj-adj, divers, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1297, Result) :-
      prob_parse([ si('L\'étude', nc-nam, 'L\'étude', [dr(0,np,n)-1]), si(a, v-ver:pres, avoir, [n-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s_ppart),s_q)-1]), si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), si(après, p-prp, après, [let-1]), si(la, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), si(vaccination, nc-nom, vaccination, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si('ARNm', nc-abr, 'ARNm', [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [np-1]), si(il, cls-pro:per, il, [let-1]), si(y, clo-pro:per, y, [np-1]), si(avait, v-ver:impf, avoir, [cl_y-1]), si(948, det-num, 948, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(sujets, nc-nom, sujet, [dr(0,np,n)-1]), si('(', ponct-pun, '(', [n-1]), si(94, det-num, 94, [dr(0,dl(0,np,np),np)-1]), si('%', nc-sym, '%', [dr(0,np,n)-1]), si(')', ponct-pun, ')', [n-1]), si(dont, prorel-pro:rel, dont, [let-1]), si(le, det-det:art, le, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(sang, nc-nom, sang, [dr(0,np,n)-1]), si(présentait, v-ver:impf, présenter, [n-1]), si(une, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(agrégation, nc-nom, agrégation, [dr(0,np,n)-1]), si(inhabituelle, adj-adj, inhabituel, [n-1]), si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), si(érythrocytes, nc-nom, érythrocyte, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si(ou, cc-kon, ou, [let-1]), si(globules, nc-nom, globule, [dr(0,dl(0,n,n),n)-1]), si(rouges, adj-adj, rouge, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(et, cc-kon, et, [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), si(sang, nc-nom, sang, [dr(0,np,n)-1]), si(on, cls-pro:per, on, [n-1]), si(observait, v-ver:impf, observer, [np-1]), si(des, det-prp:det, un, [dr(0,dl(0,np,s),np)-1]), si(particules, nc-nom, particule, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(différentes, adj-adj, différents, [dr(0,dl(0,n,n),n)-1]), si(formes, nc-nom, forme, [dr(0,n,n)-1]), si(et, cc-kon, et, [n-1]), si(tailles, nc-nom, taille, [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1298, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('International', npp-nam, 'International', [dr(0,n,n)-1]), si('Journal', npp-nam, 'Journal', [n-1]), si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), si('Vaccine', npp-nam, 'Vaccine', [dr(0,n,n)-1]), si('Theory', npp-nam, 'Theory', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Practice', npp-nam, 'Practice', [n-1]), si(',', ponct-pun, ',', [let-1]), si(and, et-kon, and, [dr(0,dl(0,n,n),n)-1]), si('Research', npp-nam, 'Research', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(respecte, v-ver:pres, respecter, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1299, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(figurent, v-ver:pres, figurer, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('International', npp-nam, 'International', [dr(0,n,n)-1]), si('Journal', npp-nam, 'Journal', [n-1]), si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), si('Vaccine', npp-nam, 'Vaccine', [dr(0,n,n)-1]), si('Theory', npp-nam, 'Theory', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Practice', npp-nam, 'Practice', [n-1]), si(',', ponct-pun, ',', [let-1]), si(and, et-kon, and, [dl(0,n,n)-1]), si('Research', npp-nam, 'Research', [let-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s),np)-1]), si(respectent, v-ver:pres, respecter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1300, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(contrôle, v-ver:pres, contrôle, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si(groupe, nc-nom, groupe, [np-1]), si(témoin, nc-nom, témoin, [dl(0,np,np)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(individus, nc-nom, individu, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reçoivent, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(testé, vpp-ver:pper, tester, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(expérience, nc-nom, expérience, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1301, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(contrôle, v-ver:pres, contrôler, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(témoin, nc-nom, témoin, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1302, Result) :-
      prob_parse([ si('L\'étude', nc-nam, 'L\'étude', [dr(0,np,n)-1]), si(a, v-ver:pres, avoir, [n-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s_ppart),s_q)-1]), si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [let-1]), si(mois, nc-nom, mois, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(après, p-prp, après, [n-1]), si(la, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), si(vaccination, nc-nom, vaccination, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si('ARNm', nc-nom, 'ARNm', [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [np-1]), si(il, cls-pro:per, il, [let-1]), si(y, clo-pro:per, y, [np-1]), si(avait, v-ver:impf, avoir, [cl_y-1]), si(948, det-num, 948, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(sujets, nc-nom, sujet, [dr(0,np,n)-1]), si('(', ponct-pun, '(', [n-1]), si(94, det-num, 94, [dr(0,dl(0,np,np),np)-1]), si('%', nc-sym, '%', [dr(0,np,n)-1]), si(')', ponct-pun, ')', [n-1]), si(dont, prorel-pro:rel, dont, [let-1]), si(le, det-det:art, le, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(sang, nc-nom, sang, [dr(0,np,n)-1]), si(présentait, v-ver:impf, présenter, [n-1]), si(une, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(agrégation, nc-nom, agrégation, [dr(0,np,n)-1]), si(inhabituelle, adj-adj, inhabituel, [n-1]), si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), si(érythrocytes, nc-nom, érythrocyte, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si(ou, cc-kon, ou, [let-1]), si(globules, nc-nom, globule, [dr(0,dl(0,n,n),n)-1]), si(rouges, adj-adj, rouge, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(et, cc-kon, et, [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), si(sang, nc-nom, sang, [dr(0,np,n)-1]), si(on, cls-pro:per, on, [n-1]), si(observait, v-ver:impf, observer, [np-1]), si(des, det-prp:det, un, [dr(0,dl(0,np,s),np)-1]), si(particules, nc-nom, particule, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(différentes, adj-adj, différents, [dr(0,dl(0,n,n),n)-1]), si(formes, nc-nom, forme, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(tailles, nc-nom, taille, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1303, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(agrégation, nc-nom, agrégation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(globules, nc-nom, globule, [n-1]), si(rouges, adj-adj, rouge, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(particules, nc-nom, particule, [n-1]), si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(mois, nc-nom, mois, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(94, det-num, 94, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(sujets, nc-nom, sujet, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1304, Result) :-
      prob_parse([ si('L\'étude', nc-nam, 'L\'étude', [dr(0,np,n)-1]), si(a, v-ver:pres, avoir, [n-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s_ppart),s_q)-1]), si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [let-1]), si(mois, nc-nom, mois, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(après, p-prp, après, [n-1]), si(la, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), si(vaccination, nc-nom, vaccination, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si('ARNm', nc-nom, 'ARNm', [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [np-1]), si(il, cls-pro:per, il, [let-1]), si(y, clo-pro:per, y, [np-1]), si(avait, v-ver:impf, avoir, [cl_y-1]), si(948, det-num, 948, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(sujets, nc-nom, sujet, [dr(0,np,n)-1]), si('(', ponct-pun, '(', [n-1]), si(94, det-num, 94, [dr(0,dl(0,np,np),np)-1]), si('%', nc-sym, '%', [dr(0,np,n)-1]), si(')', ponct-pun, ')', [n-1]), si(dont, prorel-pro:rel, dont, [let-1]), si(le, det-det:art, le, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(sang, nc-nom, sang, [dr(0,np,n)-1]), si(présentait, v-ver:impf, présenter, [n-1]), si(une, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(agrégation, nc-nom, agrégation, [dr(0,np,n)-1]), si(inhabituelle, adj-adj, inhabituel, [n-1]), si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), si(érythrocytes, nc-nom, érythrocyte, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si(ou, cc-kon, ou, [let-1]), si(globules, nc-nom, globule, [dr(0,dl(0,n,n),n)-1]), si(rouges, adj-adj, rouge, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(et, cc-kon, et, [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), si(sang, nc-nom, sang, [dr(0,np,n)-1]), si(on, cls-pro:per, on, [n-1]), si(observait, v-ver:impf, observer, [np-1]), si(des, det-prp:det, un, [dr(0,dl(0,np,s),np)-1]), si(particules, nc-nom, particule, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(différentes, adj-adj, différents, [dr(0,dl(0,n,n),n)-1]), si(formes, nc-nom, forme, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(tailles, nc-nom, taille, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1305, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(agrégation, nc-nom, agrégation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(globules, nc-nom, globule, [n-1]), si(rouges, adj-adj, rouge, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(particules, nc-nom, particule, [n-1]), si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(ans, nc-nom, an, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(94, det-num, 94, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(sujets, nc-nom, sujet, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1306, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(fiabilité, nc-nom, fiabilité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(images, nc-nom, image, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(microscope, nc-nom, microscope, [n-1]), si(incluses, vpp-ver:pper, inclure, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Dr', nc-abr, 'Dr', [n-1]), si('Vähä-Koskela', npp-nam, 'Vähä-Koskela', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1307, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Dr', nc-abr, 'Dr', [n-1]), si('Vähä-Koskela', npp-nam, 'Vähä-Koskela', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(émis, vpp-ver:pper, émettre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(doutes, nc-nom, doute, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fiabilité, nc-nom, fiabilité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(images, nc-nom, image, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1308, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(auteurs, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(technique, nc-nom, technique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(microscopie, nc-nom, microscopie, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(champ, nc-nom, champ, [n-1]), si(sombre, adj-adj, sombre, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(échantillons, nc-nom, échantillon, [n-1]), si(prélevés, vpp-ver:pper, prélever, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1309, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(auteurs, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(technique, nc-nom, technique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(microscopie, nc-nom, microscopie, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(fond, nc-nom, fond, [n-1]), si(noir, adj-adj, noir, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si(microscope, nc-nom, microscope, [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si(champ, nc-nom, champ, [n-1]), si(sombre, adj-adj, sombre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(échantillons, nc-nom, échantillon, [n-1]), si(prélevés, vpp-ver:pper, prélever, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1310, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(caillots, nc-nom, caillot, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(figurent, v-ver:pres, figurer, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rares, adj-adj, rare, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('&', ponct-kon, '&', [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Janssen', npp-nam, 'Janssen', [dr(0,dl(0,np,np),np)-1]), si(en, p-prp, en, [np-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1311, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(caillots, nc-nom, caillot, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rare, adj-adj, rare, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Janssen', npp-nam, 'Janssen', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1312, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(caillots, nc-nom, caillot, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(figurent, v-ver:pres, figurer, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rares, adj-adj, rare, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('&', ponct-kon, '&', [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Janssen', npp-nam, 'Janssen', [dr(0,dl(0,np,np),np)-1]), si(en, p-prp, en, [np-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1313, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(caillots, nc-nom, caillot, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), si(fréquent, adj-adj, fréquent, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('&', ponct-kon, '&', [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(1314, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('AEM', npp-abr, 'AEM', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', npp-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(recommandent, v-ver:pres, recommander, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(néanmoins, adv-adv, néanmoins, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('Johnson', npp-nam, 'Johnson', [dl(0,n,n)-1]), si('&', ponct-sym, '&', [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(jugeant, vpr-ver:ppre, juger, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si(supérieurs, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(risques, nc-nom, risque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1315, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si('AEM', npp-abr, 'AEM', [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conclu, vpp-ver:pper, conclure, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(continuaient, v-ver:pres, continuer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(emporter, vinf-ver:infi, emporter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(risques, nc-nom, risque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1316, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(indication, nc-nom, indication, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(suspecter, vinf-ver:infi, suspecter, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(thromboses, nc-nom, thrombose, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1317, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(donnée, nc-nom, donnée, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(constate, v-ver:pres, constater, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(thrombose, nc-nom, thrombose, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1318, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(indication, nc-nom, indication, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Moderna', npp-nam, 'Moderna', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(thromboses, nc-nom, thrombose, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1319, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(thromboses, nc-nom, thrombose, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rares, adj-adj, rare, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('&', ponct-sym, '&', [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1320, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(adénovirus, nc-nom, adénovirus, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si('&', ponct-sym, '&', [dr(0,dl(0,np,np),np)-1]), si('Johnson', npp-nam, 'Johnson', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [let-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(indésirables, adj-adj, indésirable, [dl(0,n,n)-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(caillots, nc-nom, caillot, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(restaient, v-ver:impf, rester, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rares, adj-adj, rare, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1321, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(caillots, nc-nom, caillot, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rare, adj-adj, rare, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Janssen', npp-nam, 'Janssen', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1322, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(testés, vpp-ver:pper, tester, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(que, cs-kon, que, [dr(0,pp,pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(8, det-num, 8, [dr(0,np,n)-1]), si(souris, nc-nom, souris, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(précédent, nc-nom, précédent, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(européennes, adj-adj, européen, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(françaises, adj-adj, français, [dl(0,n,n)-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvés, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1323, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(approuvés, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sanitaires, nc-nom, sanitaire, [n-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(européennes, adj-adj, européen, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(françaises, adj-adj, français, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1324, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(variant, vpr-ver:ppre, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(testés, vpp-ver:pper, tester, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(approuvés, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1325, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(menés, vpp-ver:pper, mener, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(variant, nc-nom, variant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1326, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('sous-variant', nc-nom, 'sous-variant', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(recommandés, vpp-ver:pper, recommander, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('France', npp-nam, 'France', [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(testés, vpp-ver:pper, tester, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1327, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(menés, vpp-ver:pper, mener, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('sous-variant', nc-nom, 'sous-variant', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1328, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('sous-variant', nc-nom, 'sous-variant', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(tests, nc-nom, test, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(indiquent, v-ver:pres, indiquer, [dr(0,dr(0,s,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(agences, nc-nom, agence, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicament, nc-nom, médicament, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1329, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('sous-variant', nc-nom, 'sous-variant', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(testés, vpp-ver:pper, tester, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1330, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(proposé, vpp-ver:pper, proposer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si('BioNTech', npp-nam, 'BioNTech', [np-1]), si(',', ponct-pun, ',', [let-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si('sous-variants', nc-nom, 'sous-variants', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(testé, vpp-ver:pper, tester, [dl(0,np,s_pass)-1]), si(que, adv-adv, que, [dr(0,dl(1,s,s),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si('pré-clinique', adj-adj, 'pré-clinique', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rongeurs, nc-nom, rongeur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(similaire, adj-adj, similaire, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(précédents, adj-adj, précédent, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(autres, adj-adj, autre, [dr(0,dl(0,n,n),np)-1]), si('sous-variants', nc-nom, 'sous-variants', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1331, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(version, nc-nom, version, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(quasiment, adv-adv, quasiment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(semblable, adj-adj, semblable, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si('sous-variants', nc-nom, 'sous-variants', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(émergé, vpp-ver:pper, émerger, [dl(0,np,s_ppart)-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tard, adv-adv, tard, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(testée, vpp-ver:pper, tester, [dl(0,np,s_pass)-1]), si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si('pré-cliniques', adj-adj, 'pré-cliniques', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rongeurs, nc-nom, rongeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1332, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(procédé, nc-nom, procédé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(développement, nc-nom, développement, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('sous-variants', nc-nom, 'sous-variants', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(inédit, adj-adj, inédit, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1333, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(rappels, nc-nom, rappel, [n-1]), si(annuels, adj-adj, annuel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-grippal', adj-adj, 'anti-grippal', [dl(0,n,n)-1]), si(suivent, v-ver:pres, suivre, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(processus, nc-nom, processus, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(développement, nc-nom, développement, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('sous-variants', nc-nom, 'sous-variants', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1334, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('sous-variants', nc-nom, 'sous-variants', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(développés, vpp-ver:pper, développer, [dl(0,np,s_pass)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(façon, nc-nom, façon, [n-1]), si(semblable, adj-adj, semblable, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-grippaux', adj-adj, 'anti-grippaux', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1335, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(rappels, nc-nom, rappel, [n-1]), si(annuels, adj-adj, annuel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-grippal', adj-adj, 'anti-grippal', [dl(0,n,n)-1]), si(suivent, v-ver:pres, suivre, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(processus, nc-nom, processus, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(développement, nc-nom, développement, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('sous-variants', nc-nom, 'sous-variants', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1336, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(groupes, nc-nom, groupe, [n-1]), si(pharmaceutiques, adj-adj, pharmaceutique, [dl(0,n,n)-1]), si(adaptent, v-ver:pres, adapter, [dr(0,dl(0,np,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(mieux, adv-adv, mieux, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(mutations, nc-nom, mutation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sars-CoV-2', nc-abr, 'Sars-CoV-2', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(emergé, vpp-ver:pper, emerger, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1337, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(groupes, nc-nom, groupe, [n-1]), si(pharmaceutiques, adj-adj, pharmaceutique, [dl(0,n,n)-1]), si(adaptent, v-ver:pres, adapter, [dr(0,dl(0,np,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d‘argent', adv-adj, 'd‘argent', [dr(0,pp_de,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1338, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(quadrivalents, adj-adj, quadrivalent, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1339, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(dits, vpp-ver:pper, dire, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(bivalents, adj-adj, bivalent, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(conçus, vpp-ver:pper, concevoir, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(but, nc-nom, but, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1340, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bivalents, adj-adj, bivalent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1341, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Haute', adj-adj, 'Haute', [dr(0,n,n)-1]), si(autorité, nc-nom, autorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('HAS', npp-abr, 'HAS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(feu, nc-nom, feu, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Moderna', npp-nam, 'Moderna', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autre, pro-pro:ind, autre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si('BioNTech', npp-nam, 'BioNTech', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ciblant, vpr-ver:ppre, cibler, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souche, nc-nom, souche, [n-1]), si(originale, adj-adj, original, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(variant, nc-nom, variant, [n-1]), si('BA.1', npp-nam, 'BA.1', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [dr(0,dl(0,n,n),np)-1]), si('/', ponct-sym, '/', [np-1]), si('BioNTech', npp-nam, 'BioNTech', [dr(0,dl(0,np,np),np)-1]), si(ciblant, vpr-ver:ppre, cibler, [dr(0,np,n)-1]), si(la, det-det:art, le, [n-1]), si(souche, nc-nom, souche, [n-1]), si(originale, adj-adj, original, [dl(0,n,n)-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si('sous-variants', nc-nom, 'sous-variants', [dr(0,dl(0,np,np),np)-1]), si('BA.4', npp-nam, 'BA.4', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('BA.5', npp-nam, 'BA.5', [dr(0,dl(0,np,np),np)-1]), si('d\'', p-prp, 'd\'', [np-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(1342, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Haute', adj-adj, 'Haute', [dr(0,n,n)-1]), si(autorité, nc-nom, autorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('HAS', npp-abr, 'HAS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(feu, nc-nom, feu, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Moderna', npp-nam, 'Moderna', [np-1]), si(ciblant, vpr-ver:ppre, cibler, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(souche, nc-nom, souche, [n-1]), si(originale, adj-adj, original, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('sous-variants', nc-nom, 'sous-variants', [n-1]), si('BA.4', npp-nam, 'BA.4', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('BA.5', npp-nam, 'BA.5', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1343, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(',', ponct-pun, ',', [let-1]), si(menée, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(adultes, nc-nom, adulte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(55, det-num, 55, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [np-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(précédemment, adv-adv, précédemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(doses, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Comirnaty', npp-nam, 'Comirnaty', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(inclus, vpp-ver:pper, inclure, [dr(0,np,pp_de)-1]), si(plus, adv-adv, plus, [dr(0,pp_de,np)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('1.800', det-num, '1.800', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquels, prorel-pro:rel, lequel, [np-1]), si(300, pro-num, 300, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si('Comirnaty', npp-nam, 'Comirnaty', [dr(0,np,np)-1]), si('Original', npp-nam, 'Original', [dl(0,np,np)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si('BA.1', npp-abr, 'BA.1', [dr(0,dl(0,np,np),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(bivalent, adj-adj, bivalent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1344, Result) :-
      prob_parse([ si('1.800', det-num, '1.800', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(bivalent, adj-adj, bivalent, [dl(0,n,n)-1]), si('Comirnaty', npp-nam, 'Comirnaty', [dl(0,n,n)-1]), si('Original', npp-nam, 'Original', [dl(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si('BA.1', npp-nam, 'BA.1', [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1345, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('BioNTech', npp-nam, 'BioNTech', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(menée, vpp-ver:pper, mener, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(600, det-num, 600, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(âgés, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(18, det-num, 18, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1346, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('BioNTech', npp-nam, 'BioNTech', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(inclus, vpp-ver:pper, inclure, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(mineurs, adj-adj, mineur, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1347, Result) :-
      prob_parse([ si('\'Comirnaty', npp-nam, '\'Comirnaty', [let-1]), si('Original', npp-nam, 'Original', [dr(0,np,np)-1]), si('/', ponct-sym, '/', [np-1]), si('Omicron', npp-nam, 'Omicron', [dr(0,dl(0,np,np),np)-1]), si('BA.4-5\'', npp-nam, 'BA.4-5\'', [dr(0,np,np)-1]), si(et, cc-kon, et, [np-1]), si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,np,np),np)-1]), si('Comirnaty', npp-nam, 'Comirnaty', [dr(0,np,np)-1]), si('Original', npp-nam, 'Original', [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si('Omicron', npp-nam, 'Omicron', [dr(0,dl(0,np,np),np)-1]), si('BA.1\'', npp-abr, 'BA.1\'', [dr(0,np,np)-1]), si(ont, v-ver:pres, avoir, [np-1]), si(la, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si(même, adj-adj, même, [dr(0,np,n)-1]), si(composition, nc-nom, composition, [dr(0,n,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1348, Result) :-
      prob_parse([ si('\'Comirnaty', npp-nam, '\'Comirnaty', [let-1]), si('Original', npp-nam, 'Original', [dr(0,np,np)-1]), si('/', ponct-sym, '/', [np-1]), si('Omicron', npp-nam, 'Omicron', [dr(0,dl(0,np,np),np)-1]), si('BA.4-5\'', npp-nam, 'BA.4-5\'', [dr(0,np,np)-1]), si(a, v-ver:pres, avoir, [np-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(même, adj-adj, même, [dr(0,np,n)-1]), si(composition, nc-nom, composition, [dr(0,dr(0,n,s_q),n)-1]), si(que, cs-kon, que, [n-1]), si('\'', ponct-pun:cit, '\'', [dr(0,s_q,np)-1]), si('Comirnaty', npp-nam, 'Comirnaty', [dr(0,np,np)-1]), si('Original', npp-nam, 'Original', [np-1]), si('/', ponct-sym, '/', [np-1]), si('Omicron', npp-nam, 'Omicron', [dr(0,dl(0,np,np),np)-1]), si('BA.1\'.', npp-abr, 'BA.1\'.', [np-1])], Result).
sent(1349, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(européennes, adj-adj, européen, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(françaises, adj-adj, français, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(recommandé, vpp-ver:pper, recommander, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(internautes, nc-nom, internaute, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(inquiètent, v-ver:pres, inquiéter, [dl(0,cl_r,dl(0,np,s))-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(assurant, vpr-ver:ppre, assurer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(testés, vpp-ver:pper, tester, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si('"', ponct-pun:cit, '"', [dr(0,pp,pp)-1]), si(que, cs-kon, que, [dr(0,pp,pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(8, det-num, 8, [dr(0,np,n)-1]), si(souris, nc-nom, souris, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(précédent, nc-nom, précédent, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1350, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(menés, vpp-ver:pper, mener, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(humains, nc-nom, humain, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(adapté, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('sous-variant', nc-nom, 'sous-variant', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1351, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(essentiellement, adv-adv, essentiellement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('sous-variant', nc-nom, 'sous-variant', [n-1]), si('BA.5', npp-nam, 'BA.5', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(domine, v-ver:pres, dominer, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1352, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('BA.5', npp-abr, 'BA.5', [np-1]), si(représentait, v-ver:impf, représenter, [dr(0,dl(0,np,s),np)-1]), si(93, det-num, 93, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('sous-lignages', nc-nom, 'sous-lignages', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(variant, vpr-ver:ppre, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(variant, vpr-ver:ppre, variant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(circulant, vpr-ver:ppre, circuler, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(métropole, nc-nom, métropole, [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(date, nc-nom, date, [n-1]), si(')', ponct-pun, ')', [let-1]), si(détectés, vpp-ver:pper, détecter, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Santé', nc-nam, 'Santé', [dr(0,np,np)-1]), si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), si('France', npp-nam, 'France', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1353, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(conclusions, nc-nom, conclusion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rappel, nc-nom, rappel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Spikevax', npp-nam, 'Spikevax', [dr(0,np,np)-1]), si(bivalent, v-ver:pres, bivalent, [np-1]), si('Original', npp-nam, 'Original', [dl(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si('BA.1', npp-abr, 'BA.1', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(induit, vpp-ver:pper, induire, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réponse, nc-nom, réponse, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(importante, adj-adj, important, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Sars-CoV-2', npp-abr, 'Sars-CoV-2', [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,np,n)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('sous-variant', nc-nom, 'sous-variant', [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [np-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si('BA.1', npp-nam, 'BA.1', [np-1]), si(',', ponct-pun, ',', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(comparaison, nc-nom, comparaison, [dr(0,dl(0,n,n),n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(un, det-det:art, un, [n-1]), si(rappel, nc-nom, rappel, [n-1]), si(de, p-prp, de, [n-1]), si('Spikevax', npp-nam, 'Spikevax', [dr(0,dl(0,n,n),np)-1]), si(original, adj-adj, original, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(',', ponct-pun, ',', [let-1]), si(indique, v-ver:pres, indique, [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avis, nc-nom, avis, [n-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [let-1]), si('EMA', npp-abr, 'EMA', [n-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1354, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(menés, vpp-ver:pper, mener, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(adaptés, vpp-ver:pper, adapter, [dl(0,n,n)-1]), si('[au', p+d-prp:det, '[au', [let-1]), si('sous-variant', nc-nom, 'sous-variant', [dr(0,dl(0,n,n),n)-1]), si('BA', npp-abr, 'BA', [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1355, Result) :-
      prob_parse([ si(1, pro-num, 1, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(',', ponct-pun, ',', [let-1]), si('NDLR]', ponct-pun, 'NDLR]', [dl(0,np,np)-1]), si(permettent, v-ver:pres, permettre, [let-1]), si(de, p-prp, de, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(une, det-det:art, un, [dr(0,dl(0,np,s_inf),np)-1]), si(quantité, nc-nom, quantité, [dr(0,np,n)-1]), si(supérieure, adj-adj, supérieur, [n-1]), si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), si(anticorps, nc-nom, anticorps, [dr(0,dl(0,n,n),n)-1]), si(capables, adj-adj, capable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(neutraliser, vinf-ver:infi, neutraliser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s_inf),np)-1]), si(variant, nc-nom, variant, [dr(0,np,n)-1]), si('Omicron', npp-nam, 'Omicron', [n-1]), si('BA.1', npp-nam, 'BA.1', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(par, p-prp, par, [let-1]), si(rapport, nc-nom, rapport, [dr(0,dl(1,s,s),n)-1]), si(aux, p+d-prp:det, à, [dr(0,n,pp_a)-1]), si(actuels, adj-adj, actuel, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [dr(0,n,n)-1]), si(monovalents, adj-adj, monovalent, [n-1]), si(actuels, adj-adj, actuel, [dl(0,n,n)-1]), si(basés, vpp-ver:pper, baser, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),pp)-1]), si(la, det-det:art, le, [dr(0,pp,np)-1]), si(souche, nc-nom, souche, [dr(0,np,n)-1]), si(originale, adj-adj, original, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(résume, v-ver:pres, résumer, [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), si('EMA', npp-abr, 'EMA', [dr(0,np,n)-1]), si(dans, p-prp, dans, [n-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(communiqué, nc-nom, communiqué, [dr(0,np,n)-1]), si(publié, vpp-ver:pper, publier, [n-1]), si(le, det-det:art, le, [dl(0,n,n)-1]), si(8, adj-num, 8, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(septembre, nc-nom, septembre, [dr(0,n,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1356, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARNm', nc-nom, 'ARNm', [n-1]), si(bivalents, adj-adj, bivalent, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(adaptés, vpp-ver:pper, adapter, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(souches, nc-nom, souche, [n-1]), si(circulantes, adj-adj, circulant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(instar, nc-nom, instar, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si(saisonnière, adj-adj, saisonnier, [dl(0,n,n)-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(actualisation, nc-nom, actualisation, [n-1]), si(annuelle, adj-adj, annuel, [dl(0,n,n)-1]), si(tient, v-ver:pres, tenir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(compte, nc-nom, compte, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(virus, nc-nom, virus, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(susceptibles, adj-adj, susceptible, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(préconisations, nc-nom, préconisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(note, v-ver:pres, note, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('HAS', npp-abr, 'HAS', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(avis, nc-nom, avis, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1357, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(bivalents, adj-adj, bivalent, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(conduit, vpp-ver:pper, conduire, [dl(0,np,s_pass)-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(courant, adj-adj, courant, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(saisonniers, adj-adj, saisonnier, [dl(0,n,n)-1]), si(quadrivalents, adj-adj, quadrivalent, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(détaille, v-ver:pres, détailler, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Genève', npp-nam, 'Genève', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), si(spécialiste, nc-nom, spécialiste, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(épidémiologie, nc-nom, épidémiologie, [n-1]), si('Antoine', npp-nam, 'Antoine', [dl(0,n,n)-1]), si('Flahault', npp-nam, 'Flahault', [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1358, Result) :-
      prob_parse([ si('Ursula', npp-nam, 'Ursula', [np-1]), si(von, npp-nam, von, [dr(0,dl(0,np,np),np)-1]), si(der, et-nam, der, [dr(0,np,np)-1]), si('Leyen', npp-nam, 'Leyen', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(présidente, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partagé, vpp-ver:pper, partager, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(comment, advwh-adv, comment, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(économiser, vinf-ver:infi, économiser, [dr(0,dl(0,np,s_inf),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(lavant, vpr-ver:ppre, laver, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mains, nc-nom, main, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1359, Result) :-
      prob_parse([ si('Ursula', npp-nam, 'Ursula', [np-1]), si(von, npp-nam, von, [dr(0,dl(0,np,np),np)-1]), si(der, et-nam, der, [dr(0,np,np)-1]), si('Leyen', npp-nam, 'Leyen', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(diffusé, vpp-ver:pper, diffuser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(message, nc-nom, message, [n-1]), si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(attirer, vinf-ver:infi, attirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attention, nc-nom, attention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(importance, nc-nom, importance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(lavage, nc-nom, lavage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mains, nc-nom, main, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(point, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vue, nc-nom, vue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hugiène, nc-nom, hugiène, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(milieu, nc-nom, milieu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1360, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(généralement, adv-adv, généralement, [dl(1,s,s)-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(coagulation, nc-nom, coagulation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(regardant, vpr-ver:ppre, regarder, [dr(0,dl(0,np,s_ppres),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(caillot, nc-nom, caillot, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1361, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cause, nc-nom, cause, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(caillot, nc-nom, caillot, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1362, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(embaumeurs, nc-nom, embaumeur, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(effectuent, v-ver:pres, effectuer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(prélèvements, nc-nom, prélèvement, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(défunts, nc-nom, défunt, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1363, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(attributions, nc-nom, attribution, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(embaumeurs, nc-nom, embaumeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(prélèvements, nc-nom, prélèvement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1364, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(embaumeurs, nc-nom, embaumeur, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(effectuent, v-ver:pres, effectuer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(prélèvements, nc-nom, prélèvement, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(défunts, nc-nom, défunt, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1365, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(embaumeurs, nc-nom, embaumeur, [n-1]), si(prélèvent, v-ver:pres, prélever, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1366, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(autopsie, nc-nom, autopsie, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cadavre, nc-nom, cadavre, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pratiquée, vpp-ver:pper, pratiquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(seulement, adv-adv, seulement, [dr(0,pp,pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(médecin, nc-nom, médecin, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(servir, vinf-ver:infi, servir, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(particulier, nc-nom, particulier, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(causes, nc-nom, cause, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1367, Result) :-
      prob_parse([ si('Cela', pro-pro:dem, 'Cela', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(distinguer, vinf-ver:infi, distinguer, [dr(0,dl(0,np,s_inf),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(soins, nc-nom, soin, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(défunts, nc-nom, défunt, [n-1]), si(pratiqués, vpp-ver:pper, pratiquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(thanatopracteurs, nc-nom, thanatopracteur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1368, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autopsies, nc-nom, autopsie, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cadavres, nc-nom, cadavre, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pratiqués, vpp-ver:pper, pratiquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(thanatopracteurs, nc-nom, thanatopracteur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1369, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(présentées, vpp-ver:pper, présenter, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AEMPS', npp-abr, 'AEMPS', [n-1]), si(incluent, v-ver:pres, inclure, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(notifications, nc-nom, notification, [n-1]), si(reçues, vpp-ver:pper, recevoir, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(événements, nc-nom, événement, [n-1]), si(indésirables, adj-adj, indésirable, [dl(0,n,n)-1]), si(survenus, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('COVID-19', npp-abr, 'COVID-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(452, pro-num, 452, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(issue, nc-nom, issue, [n-1]), si(fatale, adj-adj, fatal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(considérées, vpp-ver:pper, considérer, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(indésirables, adj-adj, indésirable, [dl(0,n,n)-1]), si(dus, vpp-ver:pper, du, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(tant, adv-adv, tant, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(relation, nc-nom, relation, [n-1]), si(causale, adj-adj, causal, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(administration, nc-nom, administration, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(confirmée, vpp-ver:pper, confirmer, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), si(ajoute, v-ver:pres, ajouter, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1370, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avoué, vpp-ver:pper, avouer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(452, det-num, 452, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(tuées, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(19, adj-num, 19, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(relayée, vpp-ver:pper, relayer, [dr(0,dl(0,n,n),pp_par)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1371, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(médicament, nc-nom, médicament, [n-1]), si('-', ponct-pun, '-', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(usage, nc-nom, usage, [n-1]), si(vétérinaire, adj-adj, vétérinaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(humain, adj-adj, humain, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(parasites, nc-nom, parasite, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gale, nc-nom, gale, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cécité, nc-nom, cécité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(rivières, nc-nom, rivière, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(onchocercose, nc-nom, onchocercose, [n-1]), si(')', ponct-pun, ')', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(encore, adv-adv, encore, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(poux, nc-nom, pou, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1372, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(coûteuse, adj-adj, coûteux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avantage, nc-nom, avantage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(effets, nc-nom, effet, [n-1]), si(indésirables, adj-adj, indésirable, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(très, adv-adv, très, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utilisée, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(zones, nc-nom, zone, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(touchées, vpp-ver:pper, toucher, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(infestations, nc-nom, infestation, [n-1]), si(parasitaires, adj-adj, parasitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1373, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(messages, nc-nom, message, [n-1]), si(partagés, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(début, nc-nom, début, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('NIH', npp-abr, 'NIH', [n-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ajouté, vpp-ver:pper, ajouter, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(traitements, nc-nom, traitement, [n-1]), si(possibles, adj-adj, possible, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1374, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('plate-forme', nc-nom, 'plate-forme', [n-1]), si('WayBack', npp-nam, 'WayBack', [dl(0,n,n)-1]), si('Machine', npp-nam, 'Machine', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(conserve, v-ver:pres, conserve, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(historiques, nc-nom, historique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contenu, nc-nom, contenu, [n-1]), si('Web', npp-nam, 'Web', [dl(0,n,n)-1]), si(archivés, vpp-ver:pper, archiver, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,dr(0,s,s),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), si(date, nc-nom, date, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(ancienne, adj-adj, ancien, [dr(0,n,n)-1]), si(sauvegarde, nc-nom, sauvegarde, [n-1]), si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(thérapies, nc-nom, thérapie, [n-1]), si(antivirales, adj-adj, antiviral, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('NIH', npp-abr, 'NIH', [n-1]), si(comportait, v-ver:impf, comporter, [dr(0,dl(0,np,s),np)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(onglet, nc-nom, onglet, [n-1]), si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), si(dédié, vpp-ver:pper, dédier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(précisait, v-ver:impf, préciser, [dr(0,dl(0,np,s),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), si(époque, nc-nom, époque, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(est, v-ver:pres, être, [n-1]), si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(médicament, nc-nom, médicament, [dr(0,np,n)-1]), si(antiparasitaire, adj-adj, antiparasitaire, [n-1]), si(en, p-prp, en, [dl(0,n,n)-1]), si(cours, nc-nom, cours, [dr(0,dl(0,n,n),n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(évaluation, nc-nom, évaluation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(traiter, vinf-ver:infi, traiter, [dr(0,np,n)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('COVID-19', nc-abr, 'COVID-19', [n-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1375, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(messages, nc-nom, message, [n-1]), si(partagés, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(début, nc-nom, début, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('NIH', npp-abr, 'NIH', [n-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ajouté, vpp-ver:pper, ajouter, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(traitements, nc-nom, traitement, [n-1]), si(possibles, adj-adj, possible, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1376, Result) :-
      prob_parse([ si('L\'ivermectine', nc-nam, 'L\'ivermectine', [dr(0,np,n)-1]), si('n\'', adv-adv, 'n\'', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(approuvée, vpp-ver:pper, approuver, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(par, p-prp, par, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(la, det-det:art, le, [dr(0,pp_par,np)-1]), si('FDA', npp-abr, 'FDA', [dr(0,np,n)-1]), si('[agence', ponct-nam, '[agence', [n-1]), si(américaine, adj-adj, américain, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(réglementation, nc-nom, réglementation, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('NDLR]', ponct-pun, 'NDLR]', [n-1]), si(pour, p-prp, pour, [let-1]), si(le, det-det:art, le, [np-1]), si(traitement, nc-nom, traitement, [let-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(infection, nc-nom, infection, [n-1]), si(virale, adj-adj, viral, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(indique, v-ver:pres, indique, [dl(0,n,n)-1]), si(la, det-det:art, le, [let-1]), si(page, nc-nom, page, [let-1]), si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), si(dont, prorel-pro:rel, dont, [dr(0,np,n)-1]), si(la, det-det:art, le, [n-1]), si(dernière, adj-adj, dernier, [let-1]), si(mise, nc-nom, mise, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(à, p-prp, à, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [dr(0,n,n)-1]), si(date, v-ver:pres, date, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(29, adj-num, 29, [n-1]), si(avril, nc-nom, avril, [dr(0,dl(0,np,s),pp)-1]), si(2022, adj-num, 2022, [dr(0,pp_de,n)-1]), si('.', ponct-pun, '.', [dr(0,n,n)-1])], Result).
sent(1377, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(messages, nc-nom, message, [n-1]), si(partagés, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(début, nc-nom, début, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('NIH', npp-abr, 'NIH', [n-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ajouté, vpp-ver:pper, ajouter, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(traitements, nc-nom, traitement, [n-1]), si(possibles, adj-adj, possible, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1378, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('NIH', npp-abr, 'NIH', [n-1]), si(',', ponct-pun, ',', [let-1]), si(contactés, vpp-ver:pper, contacter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [let-1]), si(précisent, v-ver:pres, préciser, [dr(0,dl(0,np,s),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inclusion, nc-nom, inclusion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(directives, nc-nom, directive, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(traitement, nc-nom, traitement, [n-1]), si('n\'', adv-adv, 'n\'', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(nouvelle, adj-adj, nouveau, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(rajoutant, vpr-ver:ppre, rajouter, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s),s_q)-1]), si(il, cls-pro:per, il, [dr(0,s_q,s)-1]), si(est, v-ver:pres, être, [let-1]), si('"', ponct-pun:cit, '"', [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(important, adj-adj, important, [let-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(noter, vinf-ver:infi, noter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s_inf),s_q)-1]), si(le, det-det:art, le, [dr(0,s_q,s)-1]), si(comité, nc-nom, comité, [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(directives, nc-nom, directive, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(traitement, nc-nom, traitement, [dr(0,dl(0,n,n),n)-1]), si('COVID-19', npp-abr, 'COVID-19', [n-1]), si(recommande, v-ver:pres, recommander, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('l\'', det-det:art, 'l\'', [dl(1,s,s)-1]), si(ivermectine, nc-nom, ivermectine, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,np,n)-1]), si(le, det-det:art, le, [n-1]), si(traitement, nc-nom, traitement, [let-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si('COVID-19', npp-abr, 'COVID-19', [n-1]), si('"', ponct-pun:cit, '"', [n-1]), si(',', ponct-pun, ',', [n-1]), si(se, clr-pro:per, se, [n-1]), si(référant, vpr-ver:ppre, référer, [cl_r-1]), si(à, p-prp, à, [cl_r-1]), si(ce, det-pro:dem, ce, [cl_r-1]), si(lien, nc-nom, lien, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si('.', ponct-pun, '.', [dr(0,pp_a,np)-1])], Result).
sent(1379, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(circule, v-ver:pres, circuler, [dl(0,np,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), si(internet, nc-nom, internet, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(chirurgicale, adj-adj, chirurgical, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(extraire, vinf-ver:infi, extraire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(caillot, nc-nom, caillot, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1380, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(chirurgicale, adj-adj, chirurgical, [dl(0,n,n)-1]), si(filmée, vpp-ver:pper, filmer, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1381, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(exiger, vinf-ver:infi, exiger, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(demander, vinf-ver:infi, demander, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(covid, adj-adj, covid, [dl(0,n,n)-1]), si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1382, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(illégal, adj-adj, illégal, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(hospitaliers, adj-adj, hospitalier, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(demander, vinf-ver:infi, demander, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(covid, et-adj, covid, [dl(0,n,n)-1]), si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1383, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médecins, nc-nom, médecin, [n-1]), si(interrogés, vpp-ver:pper, interroger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(connaissances, nc-nom, connaissance, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(change, v-ver:pres, changer, [dl(0,np,s)-1]), si(',', ponct-pun, ',', [let-1]), si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(greffe, nc-nom, greffe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(moelle, nc-nom, moelle, [n-1]), si(osseuse, adj-adj, osseux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1384, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(début, nc-nom, début, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(note, nc-nom, note, [n-1]), si(vocale, adj-adj, vocal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(minute, nc-nom, minute, [n-1]), si(trente, adj-num, trente, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(partagée, vpp-ver:pper, partager, [dr(0,dl(0,n,n),pp)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(180, det-num, 180, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(',', ponct-pun, ',', [let-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(3, det-num, 3, [dr(0,np,n)-1]), si(doses, nc-nom, dose, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(apparemment, adv-adv, apparemment, [dr(0,s,s)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(rhésus, nc-nom, rhésus, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(changé, vpp-ver:pper, changer, [dl(0,np,s_ppart)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1385, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médecins, nc-nom, médecin, [n-1]), si(interrogés, vpp-ver:pper, interroger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(connaissances, nc-nom, connaissance, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(change, v-ver:pres, changer, [dl(0,np,s)-1]), si(',', ponct-pun, ',', [let-1]), si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(greffe, nc-nom, greffe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(moelle, nc-nom, moelle, [n-1]), si(osseuse, adj-adj, osseux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1386, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('On', cls-pro:per, 'On', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prélevé, vpp-ver:pper, prélever, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('20.000', det-num, '20.000', [dr(0,np,n)-1]), si(groupes, nc-nom, groupe, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(je, cls-pro:per, je, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ai, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(modification, nc-nom, modification, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rhésus, nc-nom, rhésus, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(vaccinée, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(ajouté, vpp-ver:pper, ajouter, [dl(1,s,dl(0,np,s_ppart))-1]), si('Véronique', npp-nam, 'Véronique', [dr(0,np,np)-1]), si('Deneys', npp-nam, 'Deneys', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(hématologue, nc-nom, hématologue, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cliniques, nc-nom, clinique, [n-1]), si(universitaires, adj-adj, universitaire, [dl(0,n,n)-1]), si('Saint-Luc', npp-nam, 'Saint-Luc', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(interrogée, vpp-ver:pper, interroger, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1387, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médecins, nc-nom, médecin, [n-1]), si(interrogés, vpp-ver:pper, interroger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(connaissances, nc-nom, connaissance, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(change, v-ver:pres, changer, [dl(0,np,s)-1]), si(',', ponct-pun, ',', [let-1]), si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(greffe, nc-nom, greffe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(moelle, nc-nom, moelle, [n-1]), si(osseuse, adj-adj, osseux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1388, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(constat, nc-nom, constat, [n-1]), si(partagé, vpp-ver:pper, partager, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Nicolas', npp-nam, 'Nicolas', [dr(0,np,np)-1]), si('Gendron', npp-nam, 'Gendron', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(hématologue, nc-nom, hématologue, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('Georges-Pompidou', adj-nam, 'Georges-Pompidou', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(interrogé, vpp-ver:pper, interroger, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(plaquettes, nc-nom, plaquette, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(globules, nc-nom, globule, [n-1]), si(rouges, adj-adj, rouge, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(globules, nc-nom, globule, [n-1]), si(blancs, adj-adj, blanc, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(activation, nc-nom, activation, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1389, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médecins, nc-nom, médecin, [n-1]), si(interrogés, vpp-ver:pper, interroger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(connaissances, nc-nom, connaissance, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(change, v-ver:pres, changer, [dl(0,np,s)-1]), si(',', ponct-pun, ',', [let-1]), si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(greffe, nc-nom, greffe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(moelle, nc-nom, moelle, [n-1]), si(osseuse, adj-adj, osseux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1390, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rhésus, nc-nom, rhésus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(congénital, adj-adj, congénital, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(changer, vinf-ver:infi, changer, [dl(0,np,s_inf)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('Marie-Agnès', npp-nam, 'Marie-Agnès', [dr(0,np,np)-1]), si('Azerad', npp-nam, 'Azerad', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(cheffe, nc-nom, cheffe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hématologie, nc-nom, hématologie, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('CHU', npp-abr, 'CHU', [n-1]), si('Saint-Pierre', npp-nam, 'Saint-Pierre', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1391, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', npp-nam, 'Organisation', [n-1]), si('Mondiale', adj-adj, 'Mondiale', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Tedros', npp-nam, 'Tedros', [dr(0,np,np)-1]), si('Adhanom', npp-nam, 'Adhanom', [dr(0,np,np)-1]), si('Ghebreyesus', npp-nam, 'Ghebreyesus', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(détenu, vpp-ver:pper, détenir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(en, p-prp, en, [dr(0,pp_par,n)-1]), si(prison, nc-nom, prison, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Interpol', npp-nam, 'Interpol', [dr(0,pp_par,np)-1]), si(pour, p-prp, pour, [n-1]), si(crimes, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [dr(0,np,n)-1]), si(et, cc-kon, et, [n-1]), si(génocide, nc-nom, génocide, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1392, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Interpol', npp-nam, 'Interpol', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(crimes, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(génocide, nc-nom, génocide, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1393, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), si(chiffres, nc-nom, chiffre, [n-1]), si(absolus, adj-adj, absolu, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(majoritaires, adj-adj, majoritaire, [dl(0,n,n)-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(parce, adv-kon, parce, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(proportion, nc-nom, proportion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(supérieure, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1394, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', nc-nam, 'Covid', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(majoritairement, adv-adv, majoritairement, [dl(1,s,s)-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1395, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(chiffres, nc-nom, chiffre, [n-1]), si(officiels, adj-adj, officiel, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inefficacité, nc-nom, inefficacité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1396, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chiffres, nc-nom, chiffre, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prouvent, v-ver:pres, prouver, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(inefficaces, adj-adj, inefficace, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1397, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(naissances, nc-nom, naissance, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bébés, nc-nom, bébé, [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(survenues, vpp-ver:pper, survenir, [dl(0,np,s_ppart)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(parents, nc-nom, parent, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1398, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(bébé, nc-nom, bébé, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(parents, nc-nom, parent, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1399, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(uruguayen, adj-adj, uruguayen, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(suspension, nc-nom, suspension, [n-1]), si(immédiate, adj-adj, immédiat, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(auteurs, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(publications, nc-nom, publication, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Twitter', npp-nam, 'Twitter', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(préféré, vpp-ver:pper, préférer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [cl_r-1]), si(se, clr-pro:per, se, [cl_r-1]), si(soustraire, vinf-ver:infi, soustraire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(demandant, vpr-ver:ppre, demander, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(composition, nc-nom, composition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1400, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(présence, nc-nom, présence, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(retiré, vpp-ver:pper, retirer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Uruguay', npp-nam, 'Uruguay', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(opérations, nc-nom, opération, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(poursuivent, v-ver:pres, poursuivre, [dl(0,cl_r,dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(antenne, nc-nom, antenne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Uruguay', npp-nam, 'Uruguay', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1401, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(uruguayen, adj-adj, uruguayen, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(suspension, nc-nom, suspension, [n-1]), si(immédiate, adj-adj, immédiat, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(13, det-num, 13, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attente, nc-nom, attente, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(contrats, nc-nom, contrat, [n-1]), si(passés, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(composition, nc-nom, composition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(substances, nc-nom, substance, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(contenue, vpp-ver:pper, contenir, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(produit, nc-nom, produit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1402, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(uruguayen, adj-adj, uruguayen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dirigé, vpp-ver:pper, diriger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si('Luis', npp-nam, 'Luis', [dl(0,n,n)-1]), si('Lacalle', npp-nam, 'Lacalle', [dl(0,n,n)-1]), si('Pou', npp-nam, 'Pou', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(conformé, vpp-ver:pper, conformer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(judiciaire, adj-adj, judiciaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suspendu, vpp-ver:pper, suspendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(13, det-num, 13, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(appel, nc-nom, appel, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1403, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(uruguayen, adj-adj, uruguayen, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(suspension, nc-nom, suspension, [n-1]), si(immédiate, adj-adj, immédiat, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(13, det-num, 13, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attente, nc-nom, attente, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(contrats, nc-nom, contrat, [n-1]), si(passés, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(composition, nc-nom, composition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(substances, nc-nom, substance, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(contenue, vpp-ver:pper, contenir, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(produit, nc-nom, produit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1404, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si('Recaraya', npp-nam, 'Recaraya', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déformée, vpp-ver:pper, déformer, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(atteinte, nc-nom, atteinte, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(liberté, nc-nom, liberté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [let-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(communiqué, nc-nom, communiqué, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(lendemain, nc-nom, lendemain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(magistrat, nc-nom, magistrat, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(valoir, vinf-ver:infi, valoir, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sentence, nc-nom, sentence, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remettait, v-ver:impf, remettre, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cause, nc-nom, cause, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(validité, nc-nom, validité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1405, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('SADS', npp-abr, 'SADS', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(syndrome, nc-nom, syndrome, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(subite, adj-adj, subit, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(adulte, nc-nom, adulte, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(justifier, vinf-ver:infi, justifier, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(blogs, nc-nom, blog, [n-1]), si(relayés, vpp-ver:pper, relayer, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('mi-juin', nc-nom, 'mi-juin', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1406, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('SADS', npp-abr, 'SADS', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(étudié, vpp-ver:pper, étudier, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(communauté, nc-nom, communauté, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(décennies, nc-nom, décennie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(justifier, vinf-ver:infi, justifier, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(liées, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1407, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(pilotes, nc-nom, pilote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(aérienne, adj-adj, aérien, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('Delta', npp-nam, 'Delta', [dl(0,n,n)-1]), si('Airlines', npp-nam, 'Airlines', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(manifesté, vpp-ver:pper, manifester, [dr(0,dl(0,np,s_ppart),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Atlanta', npp-nam, 'Atlanta', [np-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),n)-1]), si(injection, nc-nom, injection, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1408, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(salariés, nc-nom, salarié, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Delta', npp-nam, 'Delta', [dr(0,np,np)-1]), si('Airlines', npp-nam, 'Airlines', [np-1]), si(protestaient, v-ver:impf, protester, [dr(0,dl(0,np,s),pp)-1]), si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(conditions, nc-nom, condition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(travail, nc-nom, travail, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid-19', adj-adj, 'anti-Covid-19', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1409, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(visionnée, vpp-ver:pper, visionner, [dl(0,n,n)-1]), si(des, p+d-prp:det, un, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Telegram', npp-nam, 'Telegram', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Twitter', npp-nam, 'Twitter', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pilotes, nc-nom, pilote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(aérienne, adj-adj, aérien, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('Southwest', npp-nam, 'Southwest', [dl(0,n,n)-1]), si('Airlines', npp-nam, 'Airlines', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(manifesté, vpp-ver:pper, manifester, [dr(0,dl(0,np,s_ppart),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Dallas', npp-nam, 'Dallas', [np-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(manque, nc-nom, manque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnel, nc-nom, personnel, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1410, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(pilotes, nc-nom, pilote, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(protestaient, v-ver:impf, protester, [dl(0,np,s)-1]), si(uniquement, adv-adv, uniquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(conditions, nc-nom, condition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(travail, nc-nom, travail, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid-19', adj-adj, 'anti-Covid-19', [dl(0,n,n)-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(confirment, v-ver:pres, confirmer, [dr(0,dr(0,s,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(aérienne, adj-adj, aérien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(syndicat, nc-nom, syndicat, [dr(0,n,n)-1]), si('Southwest', npp-nam, 'Southwest', [dr(0,n,n)-1]), si('Airlines', npp-nam, 'Airlines', [dr(0,n,n)-1]), si('Pilots', npp-nam, 'Pilots', [dr(0,n,n)-1]), si('Association', npp-nam, 'Association', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('SWAPA', npp-abr, 'SWAPA', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1411, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si(médicale, adj-adj, médical, [dl(0,n,n)-1]), si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), si('Lancet', npp-nam, 'Lancet', [n-1]), si(confirmerait, v-ver:impf, confirmer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(risque, nc-nom, risque, [n-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si(survenant, vpr-ver:ppre, survenir, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(touchant, vpr-ver:ppre, toucher, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [let-1]), si(prétendent, v-ver:pres, prétendre, [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [dr(0,np,n)-1]), si(virales, adj-adj, viral, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('mi-juin', nc-nom, 'mi-juin', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1412, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(inflammations, nc-nom, inflammation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(muscle, nc-nom, muscle, [n-1]), si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(péricardites, nc-nom, péricardite, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(inflammations, nc-nom, inflammation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(membrane, nc-nom, membrane, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(entoure, v-ver:pres, entourer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coeur, nc-nom, coeur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(causées, vpp-ver:pper, causer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,dr(0,pp,pp),n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(',', ponct-pun, ',', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(infection, nc-nom, infection, [n-1]), si(virale, adj-adj, viral, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(surviennent, v-ver:pres, survenir, [dl(0,np,s)-1]), si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(jeunes, adj-adj, jeune, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1413, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si(médicale, adj-adj, médical, [dl(0,n,n)-1]), si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), si('Lancet', npp-nam, 'Lancet', [n-1]), si(confirmerait, v-ver:impf, confirmer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(risque, nc-nom, risque, [n-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si(survenant, vpr-ver:ppre, survenir, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(touchant, vpr-ver:ppre, toucher, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [let-1]), si(prétendent, v-ver:pres, prétendre, [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [dr(0,np,n)-1]), si(virales, adj-adj, viral, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('mi-juin', nc-nom, 'mi-juin', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1414, Result) :-
      prob_parse([ si(411, det-num, 411, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(péricardites, nc-nom, péricardite, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(enregistrés, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('15.148.369', det-num, '15.148.369', [dr(0,np,n)-1]), si(adultes, nc-nom, adulte, [n-1]), si(vaccinés, vpp-ver:pper, vacciné, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('27.544.270', det-num, '27.544.270', [dr(0,np,n)-1]), si(doses, nc-nom, dose, [n-1]), si(de, p-prp, de, [n-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(administrées, vpp-ver:pper, administrer, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(ce, pro-pro:dem, ce, [dr(0,dl(0,np,np),np)-1]), si(qui, prorel-pro:rel, qui, [np-1]), si(correspond, v-ver:pres, correspondre, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), si(un, det-det:art, un, [dr(0,pp_a,np)-1]), si(signalement, nc-nom, signalement, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(myocardite, nc-nom, myocardite, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(péricardite, nc-nom, péricardite, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(pour, p-prp, pour, [n-1]), si(environ, adv-adv, environ, [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [np-1]), si('67.000', det-num, '67.000', [dr(0,dl(0,n,n),np)-1]), si(doses, nc-nom, dose, [dr(0,np,np)-1]), si(injectées, vpp-ver:pper, injecter, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(un, det-det:art, un, [let-1]), si(cas, nc-nom, cas, [dr(0,dl(0,np,np),np)-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(pour, p-prp, pour, [n-1]), si('36.857', det-num, '36.857', [dr(0,dl(0,np,np),np)-1]), si(personnes, nc-nom, personne, [dr(0,np,n)-1]), si(vaccinées, vpp-ver:pper, vacciner, [n-1]), si('-loin', p+d-prp:det, '-loin', [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(donc, adv-adv, donc, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(10, adj-num, 10, [dl(0,n,n)-1]), si('%', nc-sym, '%', [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [let-1]), si(inflammations, nc-nom, inflammation, [dr(0,np,n)-1]), si(cardiaques, adj-adj, cardiaque, [n-1]), si(recensées, vpp-ver:pper, recenser, [dl(0,n,n)-1]), si(chez, p-prp, chez, [n-1]), si(les, det-det:art, le, [n-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(mises, vpp-ver:pper, mettre, [dl(0,n,n)-1]), si(en, p-prp, en, [dl(0,n,n)-1]), si(avant, nc-nom, aver, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dl(0,n,n)-1]), si(les, det-det:art, le, [dl(0,n,n)-1]), si(réseaux, nc-nom, réseau, [dr(0,dl(0,n,n),pp)-1]), si(sociaux, adj-adj, social, [dr(0,dl(0,n,n),pp)-1]), si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(1415, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si(médicale, adj-adj, médical, [dl(0,n,n)-1]), si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), si('Lancet', npp-nam, 'Lancet', [n-1]), si(confirmerait, v-ver:impf, confirmer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(risque, nc-nom, risque, [n-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si(survenant, vpr-ver:ppre, survenir, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(touchant, vpr-ver:ppre, toucher, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [let-1]), si(prétendent, v-ver:pres, prétendre, [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [dr(0,np,n)-1]), si(virales, adj-adj, viral, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('mi-juin', nc-nom, 'mi-juin', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1416, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(900, nc-num, 900, [dr(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(cas, nc-nom, cas, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('9.000', det-num, '9.000', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(patients, nc-nom, patient, [n-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(avant, nc-nom, avant, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(correspondraient, v-ver:cond, correspondre, [dr(0,dl(0,np,s),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(10, det-num, 10, [dr(0,n,n)-1]), si('%', nc-sym, '%', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si(enregistrées, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si('post-vaccination', nc-nom, 'post-vaccination', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(figurent, v-ver:pres, figurer, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Lancet', npp-nam, 'Lancet', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupement, nc-nom, groupement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si('EPI-PHARE', npp-abr, 'EPI-PHARE', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(méthodologie, nc-nom, méthodologie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(différente, adj-adj, différent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1417, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(sauvé, vpp-ver:pper, sauver, [dr(0,dl(0,np,s_ppart),np)-1]), si(ma, det-det:pos, mon, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(assuré, vpp-ver:pper, assurer, [dl(1,s,dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(star, nc-nom, star, [n-1]), si('Justin', npp-nam, 'Justin', [dl(0,n,n)-1]), si('Bieber', npp-nam, 'Bieber', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(paralysie, nc-nom, paralysie, [n-1]), si(faciale, adj-adj, facial, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(contraint, vpp-ver:pper, contraindre, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(concerts, nc-nom, concert, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1418, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ruiné, vpp-ver:pper, ruiner, [dr(0,dl(0,np,s_ppart),np)-1]), si(ma, det-det:pos, mon, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(assuré, vpp-ver:pper, assurer, [dl(1,s,dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(star, nc-nom, star, [n-1]), si('Justin', npp-nam, 'Justin', [dl(0,n,n)-1]), si('Bieber', npp-nam, 'Bieber', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(accusant, vpr-ver:ppre, accuser, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paralysie, nc-nom, paralysie, [n-1]), si(faciale, adj-adj, facial, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(contraint, vpp-ver:pper, contraindre, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(concerts, nc-nom, concert, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1419, Result) :-
      prob_parse([ si('Justin', npp-nam, 'Justin', [dr(0,np,np)-1]), si('Bieber', npp-nam, 'Bieber', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(souffert, vpp-ver:pper, souffrir, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(forme, nc-nom, forme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paralysie, nc-nom, paralysie, [n-1]), si(faciale, adj-adj, facial, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tôt, adv-adv, tôt, [dl(0,n,n)-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(causée, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(syndrome, nc-nom, syndrome, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Ramsay', npp-nam, 'Ramsay', [dr(0,np,np)-1]), si('Hunt', npp-nam, 'Hunt', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1420, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(syndrome, nc-nom, syndrome, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Ramsay', npp-nam, 'Ramsay', [dr(0,np,np)-1]), si('Hunt', npp-nam, 'Hunt', [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(paralysie, nc-nom, paralysie, [n-1]), si(faciale, adj-adj, facial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1421, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(variole, nc-nom, variole, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(singe, nc-nom, singe, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(confondus, vpp-ver:pper, confondre, [dr(0,dl(0,np,s_pass),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(zona, nc-nom, zona, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(herpès, nc-nom, herpès, [n-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(nécessitent, v-ver:pres, nécessiter, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(confirmés, vpp-ver:pper, confirmer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(biologique, adj-adj, biologique, [dl(0,n,n)-1]), si(permettant, vpr-ver:ppre, permettre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(identifier, vinf-ver:infi, identifier, [dr(0,dl(0,np,s_inf),np)-1]), si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(famille, nc-nom, famille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(différente, adj-adj, différent, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(zona, nc-nom, zona, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(herpès, nc-nom, herpès, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Direction', nc-nam, 'Direction', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1422, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(éruptions, nc-nom, éruption, [n-1]), si(cutanées, adj-adj, cutané, [dl(0,n,n)-1]), si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(associées, vpp-ver:pper, associer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(variole, nc-nom, variole, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(singe, nc-nom, singe, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(réalité, nc-nom, réalité, [n-1]), si(dues, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(zona, nc-nom, zona, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(herpès, nc-nom, herpès, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1423, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(récente, adj-adj, récent, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(variole, nc-nom, variole, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(singe, nc-nom, singe, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(celle, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(incapable, adj-adj, incapable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(déclencher, vinf-ver:infi, déclencher, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1424, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(multiplication, nc-nom, multiplication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(variole, nc-nom, variole, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(singe, nc-nom, singe, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1425, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si('(', ponct-pun, '(', [let-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(')', ponct-pun, ')', [let-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(avéré, vpp-ver:pper, avérer, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1426, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(fonctionne, v-ver:pres, fonctionner, [dl(0,np,s)-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('SARS-Cov-2', nc-abr, 'SARS-Cov-2', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1427, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si('(', ponct-pun, '(', [let-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(')', ponct-pun, ')', [let-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(avéré, vpp-ver:pper, avérer, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1428, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(arguments, nc-nom, argument, [n-1]), si(souvent, adv-adv, souvent, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mentionnés, vpp-ver:pper, mentionner, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permettent, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prouver, vinf-ver:infi, prouver, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1429, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(plainte, nc-nom, plainte, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(crimes, nc-nom, crime, [n-1]), si(mondiaux, adj-adj, mondial, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(portée, vpp-ver:pper, porter, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avocat, nc-nom, avocat, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Reiner', npp-nam, 'Reiner', [dl(0,n,n)-1]), si('Fuellmich', npp-nam, 'Fuellmich', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(acceptée, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haute, adj-adj, haut, [dr(0,n,n)-1]), si(cour, nc-nom, cour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(canadienne, nc-nom, canadien, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1430, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(accepté, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(plainte, nc-nom, plainte, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(crimes, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Reiner', npp-nam, 'Reiner', [dr(0,np,np)-1]), si('Fuellmich', npp-nam, 'Fuellmich', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1431, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(plainte, nc-nom, plainte, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(crimes, nc-nom, crime, [n-1]), si(mondiaux, adj-adj, mondial, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(portée, vpp-ver:pper, porter, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avocat, nc-nom, avocat, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Reiner', npp-nam, 'Reiner', [dl(0,n,n)-1]), si('Fuellmich', npp-nam, 'Fuellmich', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(acceptée, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haute, adj-adj, haut, [dr(0,n,n)-1]), si(cour, nc-nom, cour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(canadienne, nc-nom, canadien, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1432, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(plainte, nc-nom, plainte, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(crimes, nc-nom, crime, [n-1]), si(mondiaux, adj-adj, mondial, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(portée, vpp-ver:pper, porter, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(figure, v-ver:pres, figurer, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(données, nc-nom, donnée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(traitées, vpp-ver:pper, traiter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1433, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(plainte, nc-nom, plainte, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(crimes, nc-nom, crime, [n-1]), si(mondiaux, adj-adj, mondial, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(portée, vpp-ver:pper, porter, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avocat, nc-nom, avocat, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Reiner', npp-nam, 'Reiner', [dl(0,n,n)-1]), si('Fuellmich', npp-nam, 'Fuellmich', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(acceptée, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haute, adj-adj, haut, [dr(0,n,n)-1]), si(cour, nc-nom, cour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(canadienne, nc-nom, canadien, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1434, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plainte, nc-nom, plainte, [n-1]), si('-', ponct-pun, '-', [let-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(lien, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Reiner', npp-nam, 'Reiner', [dr(0,np,np)-1]), si('Fuellmich', npp-nam, 'Fuellmich', [np-1]), si('-', ponct-pun, '-', [let-1]), si(déposée, vpp-ver:pper, déposer, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(auprès, p-prp, auprès, [dr(0,dl(0,np,np),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(organisme, nc-nom, organisme, [n-1]), si(judiciaire, adj-adj, judiciaire, [dl(0,n,n)-1]), si(provincial, adj-adj, provincial, [dl(0,n,n)-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rejetée, vpp-ver:pper, rejeter, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1435, Result) :-
      prob_parse([ si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), si('Schwab', npp-nam, 'Schwab', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Forum', nc-nam, 'Forum', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Davos', npp-nam, 'Davos', [np-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(livre, nc-nom, livre, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(épidémies, nc-nom, épidémie, [n-1]), si(élimineraient, v-ver:cond, éliminer, [dr(0,dl(0,np,s),np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(mangeurs, nc-nom, mangeur, [n-1]), si(inutiles, adj-adj, inutile, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1436, Result) :-
      prob_parse([ si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), si('Schwab', npp-nam, 'Schwab', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(livre, nc-nom, livre, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(allaient, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(périr, vinf-ver:infi, périr, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(épidémies, nc-nom, épidémie, [n-1]), si(organisées, vpp-ver:pper, organiser, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1437, Result) :-
      prob_parse([ si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), si('Schwab', npp-nam, 'Schwab', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Forum', nc-nam, 'Forum', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Davos', npp-nam, 'Davos', [np-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(livre, nc-nom, livre, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(épidémies, nc-nom, épidémie, [n-1]), si(organisées, vpp-ver:pper, organiser, [dl(0,n,n)-1]), si(élimineraient, v-ver:cond, éliminer, [dr(0,dl(0,np,s),np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(mangeurs, nc-nom, mangeur, [n-1]), si(inutiles, adj-adj, inutile, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1438, Result) :-
      prob_parse([ si('\\', ponct-sym, '\\', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Au', p+d-prp:det, 'Au', [let-1]), si(moins, adv-adv, moins, [dr(0,dr(0,np,np),n)-1]), si(4, det-num, 4, [n-1]), si(milliards, nc-nom, milliard, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),n)-1]), si(mangeurs, nc-nom, mangeur, [let-1]), si(inutiles, adj-adj, inutile, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(seront, v-ver:futu, être, [let-1]), si(éliminés, vpp-ver:pper, éliminer, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(ici, adv-adv, ici, [dr(0,dl(1,s,s),n)-1]), si(2050, adj-num, 2050, [n-1]), si(par, p-prp, par, [dl(0,n,n)-1]), si(des, det-prp:det, un, [dr(0,pp_par,np)-1]), si(guerres, nc-nom, guerre, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(épidémies, nc-nom, épidémie, [dr(0,dl(0,n,n),n)-1]), si(organisées, vpp-ver:pper, organiser, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(maladies, nc-nom, maladie, [dr(0,dl(0,n,n),n)-1]), si(mortelles, adj-adj, mortel, [n-1]), si(à, p-prp, à, [dl(0,n,n)-1]), si(action, nc-nom, action, [dr(0,dl(0,n,n),n)-1]), si(rapide, adj-adj, rapide, [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(famine, nc-nom, famine, [dr(0,dl(0,n,n),n)-1]), si('\\', p+d-prp:det, '\\', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [let-1]), si(écrit, vpp-ver:pper, écrire, [let-1]), si('Klaus', npp-nam, 'Klaus', [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si('Schwab', npp-nam, 'Schwab', [dl(1,s,dl(0,np,s_ppart))-1]), si(dans, p-prp, dans, [dr(0,np,np)-1]), si(son, det-det:pos, son, [np-1]), si(livre, nc-nom, livre, [dr(0,dl(1,s,s),np)-1]), si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(1439, Result) :-
      prob_parse([ si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), si('Schwab', npp-nam, 'Schwab', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(livre, nc-nom, livre, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(allaient, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(périr, vinf-ver:infi, périr, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(épidémies, nc-nom, épidémie, [n-1]), si(organisées, vpp-ver:pper, organiser, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1440, Result) :-
      prob_parse([ si('\\', ponct-sym, '\\', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Au', p+d-prp:det, 'Au', [let-1]), si(moins, adv-adv, moins, [dr(0,dr(0,np,np),n)-1]), si(4, det-num, 4, [n-1]), si(milliards, nc-nom, milliard, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),n)-1]), si(mangeurs, nc-nom, mangeur, [let-1]), si(inutiles, adj-adj, inutile, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(seront, v-ver:futu, être, [let-1]), si(éliminés, vpp-ver:pper, éliminer, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(ici, adv-adv, ici, [dr(0,dl(1,s,s),n)-1]), si(2050, adj-num, 2050, [n-1]), si(par, p-prp, par, [dl(0,n,n)-1]), si(des, det-prp:det, un, [dr(0,pp_par,np)-1]), si(guerres, nc-nom, guerre, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(épidémies, nc-nom, épidémie, [dr(0,dl(0,n,n),n)-1]), si(organisées, vpp-ver:pper, organiser, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(maladies, nc-nom, maladie, [dr(0,dl(0,n,n),n)-1]), si(mortelles, adj-adj, mortel, [n-1]), si(à, p-prp, à, [dl(0,n,n)-1]), si(action, nc-nom, action, [dr(0,dl(0,n,n),n)-1]), si(rapide, adj-adj, rapide, [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(famine, nc-nom, famine, [dr(0,dl(0,n,n),n)-1]), si('\\', p+d-prp:det, '\\', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [let-1]), si(écrit, vpp-ver:pper, écrire, [let-1]), si('Klaus', npp-nam, 'Klaus', [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si('Schwab', npp-nam, 'Schwab', [dl(1,s,dl(0,np,s_ppart))-1]), si(dans, p-prp, dans, [dr(0,np,np)-1]), si(son, det-det:pos, son, [np-1]), si(livre, nc-nom, livre, [dr(0,dl(1,s,s),np)-1]), si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(1441, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(apparition, nc-nom, apparition, [n-1]), si(récente, adj-adj, récent, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(variole, nc-nom, variole, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(singe, nc-nom, singe, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(conséquence, nc-nom, conséquence, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('AstraZeneca', npp-nam, 'AstraZeneca', [np-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1442, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(variole, nc-nom, variole, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Astrazeneca', npp-nam, 'Astrazeneca', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1443, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PDG', nc-abr, 'PDG', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Albert', npp-nam, 'Albert', [dr(0,np,np)-1]), si('Bourla', npp-nam, 'Bourla', [np-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(félicité, vpp-ver:pper, féliciter, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(2023, adj-num, 2023, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(offrir, vinf-ver:infi, offrir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1444, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PDG', nc-abr, 'PDG', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(publiquement, adv-adv, publiquement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(réjoui, vpp-ver:pper, réjouir, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(2023, adj-num, 2023, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1445, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('AVC', nc-abr, 'AVC', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(732, det-num, 732, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troubles, nc-nom, trouble, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cycle, nc-nom, cycle, [n-1]), si(menstruel, adj-adj, menstruel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1788, det-num, 1788, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2021, pro-num, 2021, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1446, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(causalité, nc-nom, causalité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(troubles, nc-nom, trouble, [n-1]), si(menstruels, adj-adj, menstruel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('AVC', nc-abr, 'AVC', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2021, pro-num, 2021, [np-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(établi, vpp-ver:pper, établir, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1447, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('AVC', nc-abr, 'AVC', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(732, det-num, 732, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troubles, nc-nom, trouble, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cycle, nc-nom, cycle, [n-1]), si(menstruel, adj-adj, menstruel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1788, det-num, 1788, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2021, pro-num, 2021, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1448, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(troubles, nc-nom, trouble, [n-1]), si(menstruels, adj-adj, menstruel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('AVC', nc-abr, 'AVC', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2021, pro-num, 2021, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(dus, vpp-ver:pper, du, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1449, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(entraînent, v-ver:pres, entraîner, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(stérilité, nc-nom, stérilité, [n-1]), si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1450, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(rendent, v-ver:pres, rendre, [dr(0,dr(0,dl(0,np,s),np),dl(0,n,n))-1]), si(stériles, adj-adj, stérile, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1451, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médecins, nc-nom, médecin, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dénoncé, vpp-ver:pper, dénoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(stérilité, nc-nom, stérilité, [n-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(chez, p-prp, chez, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(femmes, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1452, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(stérilité, nc-nom, stérilité, [n-1]), si(imminente, adj-adj, imminent, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(due, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1453, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(affaiblissent, v-ver:pres, affaiblir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(stimulent, v-ver:pres, stimuler, [dr(0,dl(0,np,s),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inverse, nc-nom, inverse, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(induire, vinf-ver:infi, induire, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(protection, nc-nom, protection, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1454, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(endommagerent, v-ver:pres, endommagerer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1455, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(existantes, adj-adj, existant, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(démontrent, v-ver:pres, démontrer, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(infections, nc-nom, infection, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('SARS-CoV-2', npp-abr, 'SARS-CoV-2', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(facilitées, vpp-ver:pper, faciliter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1456, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(favorisent, v-ver:pres, favoriser, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(infections, nc-nom, infection, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('SARS-CoV-2', nc-abr, 'SARS-CoV-2', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1457, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(différence, nc-nom, différence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coagulation, nc-nom, coagulation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1458, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(responsables, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(davantage, adv-adv, davantage, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(troubles, nc-nom, trouble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(coagulation, nc-nom, coagulation, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1459, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(provoquent, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(toujours, adv-adv, toujours, [dr(0,np,np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(coagulation, nc-nom, coagulation, [n-1]), si(empêchant, vpr-ver:ppre, empêcher, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1460, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dons, nc-nom, don, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acceptés, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(coagulations, nc-nom, coagulation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1461, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dons, nc-nom, don, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acceptés, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etablissement', nc-nam, 'Etablissement', [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1462, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dons, nc-nom, don, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acceptés, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(coagulations, nc-nom, coagulation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1463, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dons, nc-nom, don, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acceptés, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pollution, nc-nom, pollution, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(coagulations, nc-nom, coagulation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1464, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('anti-Covid', nc-nom, 'anti-Covid', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(souffrent, v-ver:pres, souffrir, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(pollution, nc-nom, pollution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(provoquant, vpr-ver:ppre, provoquer, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(coagulations, nc-nom, coagulation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1465, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(confidentiels, adj-adj, confidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(neuf, det-num, neuf, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(enceintes, adj-adj, enceinte, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(dix, pro-num, dix, [np-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,np,np),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(bébé, nc-nom, bébé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1466, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(confidentiels, adj-adj, confidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(mention, nc-nom, mention, [np-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(enceintes, adj-adj, enceinte, [dl(0,n,n)-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1467, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si('BioNTech', npp-nam, 'BioNTech', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(mesure, nc-nom, mesure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(démontrer, vinf-ver:infi, démontrer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(innocuité, nc-nom, innocuité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(produit, nc-nom, produit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1468, Result) :-
      prob_parse([ si('BioNTech', npp-nam, 'BioNTech', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(démontrer, vinf-ver:infi, démontrer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(innocuité, nc-nom, innocuité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1469, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(enceintes, adj-adj, enceinte, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(allaitantes, adj-adj, allaitant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1470, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(alerte, v-ver:pres, alerte, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dangerosité, nc-nom, dangerosité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(enceintes, adj-adj, enceinte, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1471, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(alerte, v-ver:pres, alerte, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dangerosité, nc-nom, dangerosité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(enceintes, adj-adj, enceinte, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1472, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(avant, nc-nom, avant, [n-1]), si(provient, v-ver:pres, provenir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(régulation, nc-nom, régulation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1473, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(enceintes, adj-adj, enceinte, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(allaitantes, adj-adj, allaitant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1474, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(attestent, v-ver:pres, attester, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dangers, nc-nom, danger, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(enceintes, vpp-ver:pper, enceinte, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(allaitantes, adj-adj, allaitant, [dl(0,n,n)-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1475, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(confirme, v-ver:pres, confirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(hépatite, nc-nom, hépatite, [n-1]), si('auto-immune', adj-adj, 'auto-immune', [dl(0,n,n)-1]), si(sévère, adj-adj, sévère, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1476, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étaye, v-ver:pres, étayer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(lien, nc-nom, lien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hépatites, nc-nom, hépatite, [n-1]), si(recensés, vpp-ver:pper, recenser, [dr(0,dl(0,n,n),pp)-1]), si(chez, p-prp, chez, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1477, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(confidentiels, adj-adj, confidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(révèlent, v-ver:pres, révéler, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1478, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(tort, nc-nom, tort, [n-1]), si(présentés, vpp-ver:pper, présenter, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(confidentiels, adj-adj, confidentiel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1479, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(révèlent, v-ver:pres, révéler, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1480, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(disent, v-ver:pres, dire, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(inutiles, adj-adj, inutile, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1481, Result) :-
      prob_parse([ si('Madagascar', npp-nam, 'Madagascar', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(scandale, nc-nom, scandale, [n-1]), si(lié, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1482, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Madagascar', npp-nam, 'Madagascar', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Andry', npp-nam, 'Andry', [dr(0,np,np)-1]), si('Ranoelina', npp-nam, 'Ranoelina', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(exclu, vpp-ver:pper, exclure, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(scandale, nc-nom, scandale, [n-1]), si(lié, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1483, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(malgache, adj-adj, malgache, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(exclure, vinf-ver:infi, exclure, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(scandale, nc-nom, scandale, [n-1]), si(lié, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1484, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(malgache, adj-adj, malgache, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), si(critique, adj-adj, critique, [dr(0,dl(0,n,n),pp)-1]), si(envers, p-prp, envers, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-Organics', npp-nam, 'Covid-Organics', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(boisson, nc-nom, boisson, [n-1]), si(présentée, vpp-ver:pper, présenter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(puissant, adj-adj, puissant, [dr(0,n,n)-1]), si(remède, nc-nom, remède, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Madagascar', npp-nam, 'Madagascar', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1485, Result) :-
      prob_parse([ si('Madagascar', npp-nam, 'Madagascar', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(membre, nc-nom, membre, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),n)-1]), si(décision, nc-nom, décision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Andry', npp-nam, 'Andry', [dl(0,n,n)-1]), si('Ranoelina', npp-nam, 'Ranoelina', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1486, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(bureau, nc-nom, bureau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(certifié, vpp-ver:pper, certifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Madagascar', npp-nam, 'Madagascar', [np-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(membre, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1487, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(justice, nc-nom, justice, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(députés, nc-nom, député, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(prévenant, vpr-ver:ppre, prévenir, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(poursuivis, vpp-ver:pper, poursuivre, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(tentative, nc-nom, tentative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(votaient, v-ver:impf, voter, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1488, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Justice', nc-nam, 'Justice', [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(menacé, vpp-ver:pper, menacer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(députés, nc-nom, député, [n-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(tentative, nc-nom, tentative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(votaient, v-ver:impf, voter, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1489, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(justice, nc-nom, justice, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(députés, nc-nom, député, [n-1]), si(allemands, adj-adj, allemand, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(les, clo-det:art, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(prévenant, vpr-ver:ppre, prévenir, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(poursuivis, vpp-ver:pper, poursuivre, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(tentative, nc-nom, tentative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(votaient, v-ver:impf, voter, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1490, Result) :-
      prob_parse([ si('Cinq', det-num, 'Cinq', [dr(0,np,n)-1]), si(partis, nc-nom, parti, [n-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Bundestag', npp-nam, 'Bundestag', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(justice, nc-nom, justice, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1491, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(justice, nc-nom, justice, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avertir, vinf-ver:infi, avertir, [dr(0,dr(0,dl(0,np,s_inf),s_q),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(députés, nc-nom, député, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(votaient, v-ver:impf, voter, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(poursuivis, vpp-ver:pper, poursuivre, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(tentative, nc-nom, tentative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1492, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Justice', nc-nom, 'Justice', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démenti, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(courrier, nc-nom, courrier, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(voter, vinf-ver:infi, voter, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1493, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(justice, nc-nom, justice, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avertir, vinf-ver:infi, avertir, [dr(0,dr(0,dl(0,np,s_inf),s_q),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(députés, nc-nom, député, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(votaient, v-ver:impf, voter, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(poursuivis, vpp-ver:pper, poursuivre, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(tentative, nc-nom, tentative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1494, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(justice, nc-nom, justice, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(députés, nc-nom, député, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(prévenant, vpr-ver:ppre, prévenir, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(poursuivis, vpp-ver:pper, poursuivre, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(tentative, nc-nom, tentative, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(votaient, v-ver:impf, voter, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1495, Result) :-
      prob_parse([ si('Anthony', npp-nam, 'Anthony', [dr(0,np,np)-1]), si('Fauci', npp-nam, 'Fauci', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(agences, nc-nom, agence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(conseiller, nc-nom, conseiller, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', npp-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(emprisonné, vpp-ver:pper, emprisonner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(spéciales, adj-adj, spécial, [dl(0,n,n)-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1496, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(immunologue, nc-nom, immunologue, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Anthony', npp-nam, 'Anthony', [dl(0,n,n)-1]), si('Fauci', npp-nam, 'Fauci', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(spéciales, adj-adj, spécial, [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1497, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(immunologue, nc-nom, immunologue, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Anthony', npp-nam, 'Anthony', [dl(0,n,n)-1]), si('Fauci', npp-nam, 'Fauci', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(spéciales, adj-adj, spécial, [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si(prétendent, v-ver:pres, prétendre, [dr(0,s,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(blogs, nc-nom, blog, [n-1]), si(partagés, vpp-ver:pper, partager, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1498, Result) :-
      prob_parse([ si('Anthony', npp-nam, 'Anthony', [dr(0,np,np)-1]), si('Fauci', npp-nam, 'Fauci', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(incarcéré, vpp-ver:pper, incarcérer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(spéciales, adj-adj, spécial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1499, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(immunologue, nc-nom, immunologue, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Anthony', npp-nam, 'Anthony', [dl(0,n,n)-1]), si('Fauci', npp-nam, 'Fauci', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(emprisonné, vpp-ver:pper, emprisonner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(début, nc-nom, début, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(spéciales, adj-adj, spécial, [dl(0,n,n)-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1500, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(spéciales, adj-adj, spécial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Anthony', npp-nam, 'Anthony', [dr(0,np,np)-1]), si('Fauci', npp-nam, 'Fauci', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(finalement, adv-adv, finalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(libéré, vpp-ver:pper, libérer, [dl(0,np,s_pass)-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si(après, adv-adv, après, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1501, Result) :-
      prob_parse([ si('Présenter', vinf-ver:infi, 'Présenter', [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(schéma, nc-nom, schéma, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(complet, adj-adj, complet, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(critère, nc-nom, critère, [n-1]), si(nécessaire, adj-adj, nécessaire, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(versement, nc-nom, versement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indemnité, nc-nom, indemnité, [n-1]), si(instaurée, vpp-ver:pper, instaurer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(réponse, nc-nom, réponse, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1502, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(faut, v-ver:pres, falloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(bénéficier, vinf-ver:infi, bénéficier, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(financière, adj-adj, financier, [dl(0,n,n)-1]), si(instaurée, vpp-ver:pper, instaurer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1503, Result) :-
      prob_parse([ si('L\'aide', nc-nam, 'L\'aide', [dr(0,np,n)-1]), si(instaurée, vpp-ver:pper, instaurer, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), si(le, det-det:art, le, [dr(0,pp_par,np)-1]), si(gouvernement, nc-nom, gouvernement, [dr(0,np,n)-1]), si(ukrainien, adj-adj, ukrainien, [n-1]), si(est, v-ver:pres, être, [dl(0,n,n)-1]), si(versée, vpp-ver:pper, verser, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_pass),pp_a)-1]), si(sans, p-prp, sans, [let-1]), si(condition, nc-nom, condition, [dr(0,dl(1,s,s),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(aux, p+d-prp:det, à, [let-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [dr(0,pp_a,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),pp_de)-1]), si(zones, nc-nom, zone, [dr(0,dl(0,n,n),n)-1]), si(touchées, vpp-ver:pper, toucher, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), si(les, det-det:art, le, [dr(0,pp_par,np)-1]), si(combats, nc-nom, combat, [dr(0,np,n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(leur, det-det:pos, son, [dr(0,dl(0,np,s_ppart),np)-1]), si(emploi, nc-nom, emploi, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si(cause, nc-nom, cause, [dr(0,dl(1,s,s),n)-1]), si(du, p+d-prp:det, de, [dr(0,n,pp_de)-1]), si(conflit, nc-nom, conflit, [dr(0,pp_de,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1504, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(instaurée, vpp-ver:pper, instaurer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(versée, vpp-ver:pper, verser, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [n-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(zones, nc-nom, zone, [n-1]), si(touchées, vpp-ver:pper, toucher, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sous, p-prp, sou, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(condition, nc-nom, condition, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1505, Result) :-
      prob_parse([ si('L\'aide', nc-nom, 'L\'aide', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(guerre, nc-nom, guerre, [dr(0,dl(0,n,n),n)-1]), si(instaurée, vpp-ver:pper, instaurer, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), si(le, det-det:art, le, [dr(0,pp_par,np)-1]), si(gouvernement, nc-nom, gouvernement, [dr(0,np,n)-1]), si(ukrainien, adj-adj, ukrainien, [n-1]), si(est, v-ver:pres, être, [dl(0,n,n)-1]), si(versée, vpp-ver:pper, verser, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s_pass),pp_a)-1]), si(sans, p-prp, sans, [let-1]), si(condition, nc-nom, condition, [dr(0,dl(1,s,s),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(aux, p+d-prp:det, à, [let-1]), si('Ukrainiens', nc-nam, 'Ukrainiens', [dr(0,pp_a,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si(zones, nc-nom, zone, [dr(0,dl(0,n,n),n)-1]), si(touchées, vpp-ver:pper, toucher, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),pp_par)-1]), si(les, det-det:art, le, [dr(0,pp_par,np)-1]), si(combats, nc-nom, combat, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1506, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(conditionné, vpp-ver:pper, conditionner, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(versement, nc-nom, versement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1507, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(travail, nc-nom, travail, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(économies, nc-nom, économie, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(pourront, v-ver:futu, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(bénéficier, vinf-ver:infi, bénéficier, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(gouvernementale, adj-adj, gouvernemental, [dl(0,n,n)-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sommes, nc-nom, somme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1508, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(faut, v-ver:pres, falloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(bénéficier, vinf-ver:infi, bénéficier, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(financière, adj-adj, financier, [dl(0,n,n)-1]), si(instaurée, vpp-ver:pper, instaurer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(réponse, nc-nom, réponse, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1509, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(indiquerait, v-ver:impf, indiquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(cause, v-ver:pres, cause, [dr(0,dl(0,np,s),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(parodique, adj-adj, parodique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1510, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(capture, nc-nom, capture, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(écran, nc-nom, écran, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prétendu, adj-adj, prétendre, [dr(0,n,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CNN', npp-abr, 'CNN', [np-1]), si(assurant, vpr-ver:ppre, assurer, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(cause, v-ver:pres, cause, [dr(0,dl(0,np,s),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(montage, nc-nom, montage, [n-1]), si(provenant, vpr-ver:ppre, provenir, [dr(0,dl(0,n,n),pp_de)-1]), si(à, p-prp, à, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(parodique, adj-adj, parodique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1511, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(provoquent, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sida, nc-nom, sida, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1512, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(entraîner, vinf-ver:infi, entraîner, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(effondrement, nc-nom, effondrement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sida, nc-abr, sida, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1513, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(révélant, vpr-ver:ppre, révéler, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(biochimiques, adj-adj, biochimique, [dl(0,n,n)-1]), si(atteste, v-ver:pres, attester, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(géant, nc-nom, géant, [n-1]), si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), si('Moderna', npp-nam, 'Moderna', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1514, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(implique, v-ver:pres, impliquer, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Moderna', npp-nam, 'Moderna', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(responsable, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1515, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(évoqué, vpp-ver:pper, évoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(myocardites, nc-nom, myocardite, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(malades, nc-nom, malade, [n-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(provoquées, vpp-ver:pper, provoquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1516, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(admis, vpp-ver:pper, admettre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédées, vpp-ver:pper, décéder, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(suites, nc-nom, suite, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(myocardite, nc-nom, myocardite, [n-1]), si(induite, vpp-ver:pper, induire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1517, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(altération, nc-nom, altération, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ADN', nc-nom, 'ADN', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('-devenue', vpp-ver:pper, '-devenue', [dl(0,n,n)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(classique, nc-nom, classique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(désinformation, nc-nom, désinformation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si('-', ponct-pun, '-', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(infondée, adj-adj, infondé, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(fausse, adj-adj, faux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(communauté, nc-nom, communauté, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1518, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(intégrer, vinf-ver:infi, intégrer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si('ADN', nc-nom, 'ADN', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(altérer, vinf-ver:infi, altérer, [dr(0,dl(0,np,s_inf),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1519, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(certificat, nc-nom, certificat, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('-qui', p+pro-pro:rel, '-qui', [dl(0,n,n)-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(prolongé, vpp-ver:pper, prolonger, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(assorti, vpp-ver:pper, assortir, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(restrictions, nc-nom, restriction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(libertés, nc-nom, liberté, [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(façon, nc-nom, façon, [n-1]), si(dépendent, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(législations, nc-nom, législation, [n-1]), si(nationales, adj-adj, national, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1520, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(restrictions, nc-nom, restriction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(libertés, nc-nom, liberté, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(dépendent, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(législations, nc-nom, législation, [n-1]), si(nationales, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1521, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(prolongation, nc-nom, prolongation, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(certificat, nc-nom, certificat, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('au-delà', p-prp, 'au-delà', [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(supprimer, vinf-ver:infi, supprimer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(libertés, nc-nom, liberté, [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(forcée, vpp-ver:pper, forcer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1522, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(prépare, v-ver:pres, préparer, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(prolongation, nc-nom, prolongation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(certificat, nc-nom, certificat, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(supprimera, v-ver:futu, supprimer, [dr(0,dl(0,np,s),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(libertés, nc-nom, liberté, [n-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(vous, cls-pro:per, vous, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avez, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(certificat, nc-nom, certificat, [n-1]), si(covid, nc-nom, covid, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ouvrant, vpr-ver:ppre, ouvrir, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voie, nc-nom, voie, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(forcée, vpp-ver:pper, forcer, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1523, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(prolongation, nc-nom, prolongation, [n-1]), si(annoncée, vpp-ver:pper, annoncer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(certificat, nc-nom, certificat, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('au-delà', p-prp, 'au-delà', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(supprimer, vinf-ver:infi, supprimer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(libertés, nc-nom, liberté, [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(forcée, vpp-ver:pper, forcer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1524, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(prépare, v-ver:pres, préparer, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(prolongation, nc-nom, prolongation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(certificat, nc-nom, certificat, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1525, Result) :-
      prob_parse([ si('Profitant', vpr-ver:ppre, 'Profitant', [dr(0,dl(0,np,s_ppres),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(apprête, v-ver:pres, apprêter, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(19, adj-num, 19, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si('Constitution', nc-nom, 'Constitution', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1526, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(profite, v-ver:pres, profiter, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1527, Result) :-
      prob_parse([ si('Profitant', vpr-ver:ppre, 'Profitant', [dr(0,dl(0,np,s_ppres),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(apprête, v-ver:pres, apprêter, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(19, adj-num, 19, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si('Constitution', nc-nom, 'Constitution', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(états, nc-nom, état, [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1528, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), si('Gates', npp-nam, 'Gates', [np-1]), si(profitent, v-ver:pres, profiter, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(distrait, vpp-ver:pper, distraire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(19, adj-num, 19, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(constitution, nc-nom, constitution, [n-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-membres', nc-nom, 'États-membres', [n-1]), si(perdront, v-ver:futu, perdre, [dr(0,dl(0,np,s),np)-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1529, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(profite, v-ver:pres, profiter, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(ukrainien, adj-adj, ukrainien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1530, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), si('Gates', npp-nam, 'Gates', [np-1]), si(profitent, v-ver:pres, profiter, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(distrait, vpp-ver:pper, distraire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(19, adj-num, 19, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(constitution, nc-nom, constitution, [n-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(perdront, v-ver:futu, perdre, [dr(0,dl(0,np,s),np)-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1531, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(divulgué, vpp-ver:pper, divulguer, [dl(0,np,np)-1]), si(répertorie, v-ver:pres, répertorier, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1532, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(liste, v-ver:pres, liste, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1533, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(compile, v-ver:pres, compiler, [dr(0,dl(0,np,s),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(informations, nc-nom, information, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(médicaux, adj-adj, médical, [dl(0,n,n)-1]), si(théoriquement, adv-adv, théoriquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(attribuables, adj-adj, attribuable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), si(a, et-prp, avoir, [dr(0,dl(0,n,n),n)-1]), si(priori, et-adv, priori, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1534, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(liste, v-ver:pres, liste, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1535, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(compile, v-ver:pres, compiler, [dr(0,dl(0,np,s),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(informations, nc-nom, information, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(médicaux, adj-adj, médical, [dl(0,n,n)-1]), si(théoriquement, adv-adv, théoriquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(attribuables, adj-adj, attribuable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), si(a, et-prp, avoir, [dr(0,dl(0,n,n),n)-1]), si(priori, et-adv, priori, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1536, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(répertorie, v-ver:pres, répertorier, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1537, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(compile, v-ver:pres, compiler, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(médicaux, adj-adj, médical, [dl(0,n,n)-1]), si(théoriquement, adv-adv, théoriquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(attribuables, adj-adj, attribuable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(effets, nc-nom, effet, [n-1]), si(indésirables, adj-adj, indésirable, [dl(0,n,n)-1]), si(son, det-det:pos, son, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1538, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(répertorie, v-ver:pres, répertorier, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1539, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1540, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1541, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ayant, vpr-ver:ppre, avoir, [dl(0,n,n)-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1542, Result) :-
      prob_parse([ si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dl(0,n,n)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rappelés, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(variole, nc-nom, variole, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(singe, nc-nom, singe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1543, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ayant, vpr-ver:ppre, avoir, [dl(0,n,n)-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1544, Result) :-
      prob_parse([ si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dl(0,n,n)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rappelés, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1545, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ayant, vpr-ver:ppre, avoir, [dl(0,n,n)-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1546, Result) :-
      prob_parse([ si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dl(0,n,n)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rappelés, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(négatifs, nc-nom, négatif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1547, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ayant, vpr-ver:ppre, avoir, [dl(0,n,n)-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1548, Result) :-
      prob_parse([ si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dl(0,n,n)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rappelés, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vrais, adj-adj, vrai, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1549, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ayant, vpr-ver:ppre, avoir, [dl(0,n,n)-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(positifs, nc-nom, positif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1550, Result) :-
      prob_parse([ si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(doses, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dl(0,n,n)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rappelés, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vrais, adj-adj, vrai, [dr(0,n,n)-1]), si(négatifs, nc-nom, négatif, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1551, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(australien, adj-adj, australien, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suspendu, vpp-ver:pper, suspendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(distribution, nc-nom, distribution, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(administré, vpp-ver:pper, administrer, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1552, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(administré, vpp-ver:pper, administrer, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1553, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(calendrier, nc-nom, calendrier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Direction', nc-nam, 'Direction', [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(prouve, v-ver:pres, prouver, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(livraison, nc-nom, livraison, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(suspendue, vpp-ver:pper, suspendre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(présidentielle, adj-adj, présidentiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1554, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(livraison, nc-nom, livraison, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(interrompue, vpp-ver:pper, interrompre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élection, nc-nom, élection, [n-1]), si(présidentielle, adj-adj, présidentiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1555, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Aztèques', nc-nam, 'Aztèques', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(épidémies, nc-nom, épidémie, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(produites, vpp-ver:pper, produire, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrivée, nc-nom, arrivée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(continent, nc-nom, continent, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1556, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Aztèques', nc-nam, 'Aztèques', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(frappés, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pandémies, nc-nom, pandémie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(',', ponct-pun, ',', [let-1]), si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(arrivait, v-ver:impf, arriver, [dl(0,np,s)-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(sacrifiaient, v-ver:impf, sacrifier, [dr(0,dl(0,np,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1557, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tribus, nc-nom, tribu, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(anciens, adj-adj, ancien, [dr(0,n,n)-1]), si('Aztèques', nc-nam, 'Aztèques', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(sacrifié, vpp-ver:pper, sacrifier, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(chefs, nc-nom, chef, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(dieux, nc-nom, dieu, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(famine, nc-nom, famine, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1558, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Aztèques', nc-nam, 'Aztèques', [n-1]), si(sacrifiaient, v-ver:impf, sacrifier, [dr(0,dl(0,np,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1559, Result) :-
      prob_parse([ si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(hospitalisés, vpp-ver:pper, hospitaliser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(grave, adj-adj, grave, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1560, Result) :-
      prob_parse([ si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(concernent, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1561, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(faits, nc-nom, fait, [n-1]), si(inférieur, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1562, Result) :-
      prob_parse([ si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(hospitalisés, vpp-ver:pper, hospitaliser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(grave, adj-adj, grave, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1563, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(faits, nc-nom, fait, [n-1]), si(inférieur, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1564, Result) :-
      prob_parse([ si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(concernent, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1565, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(hospitalisées, vpp-ver:pper, hospitaliser, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(grave, adj-adj, grave, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(inférieur, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1566, Result) :-
      prob_parse([ si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tel', npp-nam, 'Tel', [dr(0,np,np)-1]), si('Aviv', npp-nam, 'Aviv', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1567, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(reine, nc-nom, reine, [n-1]), si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(malade, nc-nom, malade, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(soigne, v-ver:pres, soigner, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1568, Result) :-
      prob_parse([ si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('II', adj-num, 'II', [np-1]), si(utilise, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(soigner, vinf-ver:infi, soigner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1569, Result) :-
      prob_parse([ si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('II', adj-num, 'II', [np-1]), si(habite, v-ver:pres, habiter, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(forcément, adv-adv, forcément, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utilisée, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1570, Result) :-
      prob_parse([ si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('II', adj-num, 'II', [np-1]), si(utilise, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(traiter, vinf-ver:infi, traiter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1571, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(spike, et-nom, spike, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(produite, vpp-ver:pper, produire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(organisme, nc-nom, organisme, [n-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(sexuellement, adv-adv, sexuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(transmissible, adj-adj, transmissible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1572, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(spike, et-nom, spike, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(induite, vpp-ver:pper, induire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(transmis, vpp-ver:pper, transmettre, [dl(0,np,s_pass)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contact, nc-nom, contact, [n-1]), si(sexuel, adj-adj, sexuel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1573, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(spermatozoïde, nc-nom, spermatozoïde, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(interagir, vinf-ver:infi, interagir, [dr(0,dl(0,np,s_inf),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ARN', npp-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(injecté, vpp-ver:pper, injecter, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(muscle, nc-nom, muscle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épaule, nc-nom, épaule, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), si(porteur, nc-nom, porteur, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si(spike, nc-nom, spik, [dl(0,n,n)-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1574, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(spermatozoïde, nc-nom, spermatozoïde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(muscle, nc-nom, muscle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épaule, nc-nom, épaule, [n-1]), si(',', ponct-pun, ',', [let-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), si(porteur, nc-nom, porteur, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si(spike, nc-nom, spik, [dl(0,n,n)-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1575, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('Mario', npp-nam, 'Mario', [dr(0,np,np)-1]), si('Draghi', npp-nam, 'Draghi', [np-1]), si(reconnaît, v-ver:pres, reconnaître, [dr(0,dl(0,np,s),s_q)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(discours, nc-nom, discours, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2021, pro-num, 2021, [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(restrictions, nc-nom, restriction, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lieux, nc-nom, lieu, [n-1]), si(publics, adj-adj, public, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(déclare, v-ver:pres, déclarer, [dr(0,dl(0,np,s),s_q)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si(normale, adj-adj, normal, [dl(0,n,n)-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(améliorera, v-ver:futu, améliorer, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1576, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(discours, nc-nom, discours, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2021, pro-num, 2021, [np-1]), si(',', ponct-pun, ',', [let-1]), si('MariDraghi', npp-nam, 'MariDraghi', [np-1]), si(déclare, v-ver:pres, déclarer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si(normale, adj-adj, normal, [dl(0,n,n)-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(améliorera, v-ver:futu, améliorer, [dl(0,cl_r,dl(0,np,s))-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnaît, v-ver:pres, reconnaître, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(restrictions, nc-nom, restriction, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lieux, nc-nom, lieu, [n-1]), si(publics, adj-adj, public, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1577, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Moderna', npp-nam, 'Moderna', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(400, det-num, 400, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), si(actions, nc-nom, action, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1578, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(montant, nc-nom, montant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(actions, nc-nom, action, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Moderna', npp-nam, 'Moderna', [np-1]), si(cédées, vpp-ver:pper, céder, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(prévues, vpp-ver:pper, prévoir, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(fixé, vpp-ver:pper, fixer, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(date, nc-nom, date, [n-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(élevait, v-ver:impf, élever, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(6, det-num, 6, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1579, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(traitements, nc-nom, traitement, [n-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(anticorps, nc-nom, anticorps, [n-1]), si(monoclonaux, adj-adj, monoclonal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(première, adj-num, premier, [dr(0,np,n)-1]), si(génération, nc-nom, génération, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(patients, nc-nom, patient, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fonctionnent, v-ver:pres, fonctionner, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(variant, vpr-ver:ppre, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(logique, nc-nom, logique, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-nom, 'ARN', [n-1]), si(message, nc-nom, message, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1580, Result) :-
      prob_parse([ si('Ni', cc-kon, 'Ni', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(traitements, nc-nom, traitement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(anticorps, nc-nom, anticorps, [n-1]), si(monoclonaux, adj-adj, monoclonal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(première, det-num, premier, [dr(0,np,n)-1]), si(génération, nc-nom, génération, [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(marchent, v-ver:pres, marcher, [dl(0,np,s)-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(variant, nc-nom, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1581, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(privées, adj-adj, privé, [dl(0,n,n)-1]), si(impliquées, vpp-ver:pper, impliquer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('TGV', nc-abr, 'TGV', [n-1]), si(médicalisés, vpp-ver:pper, médicaliser, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(évacuer, vinf-ver:infi, évacuer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si('Grand-Est', npp-nam, 'Grand-Est', [dl(0,n,n)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(malades, nc-nom, malade, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(région, nc-nom, région, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(printemps, nc-nom, printemps, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1582, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secteur, nc-nom, secteur, [n-1]), si(privé, adj-adj, priver, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(part, nc-nom, part, [np-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(opérations, nc-nom, opération, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('TGV', nc-abr, 'TGV', [n-1]), si(médicalisés, vpp-ver:pper, médicaliser, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2020, pro-num, 2020, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1583, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), si('Sénat', npp-nam, 'Sénat', [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(intéresse, v-ver:pres, intéresser, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(recours, nc-nom, recours, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('Olivier', npp-nam, 'Olivier', [dr(0,np,np)-1]), si('Véran', npp-nam, 'Véran', [np-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cabinets, nc-nom, cabinet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conseil, nc-nom, conseil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1584, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(question, nc-nom, question, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(place, nc-nom, place, [n-1]), si(accordée, vpp-ver:pper, accorder, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Olivier', npp-nam, 'Olivier', [dr(0,np,np)-1]), si('Véran', npp-nam, 'Véran', [np-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(cabinets, nc-nom, cabinet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conseil, nc-nom, conseil, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(pose, v-ver:pres, pose, [dl(0,cl_r,dl(0,np,s))-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Sénat', npp-nam, 'Sénat', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1585, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-covid', adj-adj, 'anti-covid', [dl(0,n,n)-1]), si(déjà, adv-adv, déjà, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1586, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concernés, vpp-ver:pper, concerner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1587, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(entré, vpp-ver:pper, entrer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(application, nc-nom, application, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-covid', adj-adj, 'anti-covid', [dl(0,n,n)-1]), si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(distribués, vpp-ver:pper, distribuer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1588, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concernés, vpp-ver:pper, concerner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1589, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(entré, vpp-ver:pper, entrer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(application, nc-nom, application, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-covid', adj-adj, 'anti-covid', [dl(0,n,n)-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1590, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-covid', adj-adj, 'anti-covid', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(distribués, vpp-ver:pper, distribuer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1591, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(entré, vpp-ver:pper, entrer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(application, nc-nom, application, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(applique, v-ver:pres, applique, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-covid', adj-adj, 'anti-covid', [dl(0,n,n)-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1592, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entré, vpp-ver:pper, entrer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(application, nc-nom, application, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1593, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gendarmerie, nc-nom, gendarmerie, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(intervenue, vpp-ver:pper, intervenir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Champs-Elysées', npp-nam, 'Champs-Elysées', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(manifestations, nc-nom, manifestation, [n-1]), si('anti-pass', adj-adj, 'anti-pass', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1594, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(opposants, nc-nom, opposant, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(pass, nc-nom, pass, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Champs-Élysées', npp-nam, 'Champs-Élysées', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(déclenchant, vpr-ver:ppre, déclencher, [dr(0,dl(0,np,s_ppres),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intervention, nc-nom, intervention, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1595, Result) :-
      prob_parse([ si('L\'avocat', nc-nom, 'L\'avocat', [dr(0,np,n)-1]), si(allemand, adj-adj, allemand, [n-1]), si('Reiner', npp-nam, 'Reiner', [dl(0,n,n)-1]), si('Fuellmich', npp-nam, 'Fuellmich', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dispose, v-ver:pres, disposer, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s),pp)-1]), si(un, det-det:art, un, [dr(0,pp_de,np)-1]), si(cabinet, nc-nom, cabinet, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(avocats, nc-nom, avocat, [dr(0,dl(0,n,n),n)-1]), si(dans, p-prp, dans, [n-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si(ville, nc-nom, ville, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Göttingen', npp-nam, 'Göttingen', [dr(0,dl(0,n,n),np)-1]), si(',', ponct-pun, ',', [np-1]), si(a, v-ver:pres, avoir, [let-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,s_q,s)-1]), si('Forum', nc-nam, 'Forum', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Davos', npp-nam, 'Davos', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [np-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,np,np),np)-1]), si(scientifiques, nc-nom, scientifique, [dr(0,np,n)-1]), si(avaient, v-ver:impf, avoir, [n-1]), si(planifié, vpp-ver:pper, planifier, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(et, cc-kon, et, [dr(0,dl(0,np,s_ppart),np)-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,pp_a,n)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(monde, nc-nom, monde, [dr(0,pp_a,n)-1]), si(une, det-det:art, un, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(fausse, adj-adj, faux, [let-1]), si(pandémie, nc-nom, pandémie, [dr(0,n,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(1596, Result) :-
      prob_parse([ si('Reiner', npp-nam, 'Reiner', [dr(0,np,np)-1]), si('Fuellmich', npp-nam, 'Fuellmich', [np-1]), si(dispose, v-ver:pres, disposer, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cabinet, nc-nom, cabinet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avocats, nc-nom, avocat, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Davos', npp-nam, 'Davos', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1597, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(invités, vpp-ver:pper, inviter, [dr(0,dr(0,dl(0,np,s_pass),dl(0,np,s_inf)),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('EFS', npp-abr, 'EFS', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1598, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('EFS', npp-abr, 'EFS', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permet, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1599, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(convois, nc-nom, convoi, [n-1]), si(dits, vpp-ver:pper, dire, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(liberté, nc-nom, liberté, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(débuté, vpp-ver:pper, débuter, [dl(0,np,s_ppart)-1]), si(fin, nc-nom, fin, [dr(0,dl(1,s,s),n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Ottawa', npp-nam, 'Ottawa', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(')', ponct-pun, ')', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(inspiré, vpp-ver:pper, inspirer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mouvements, nc-nom, mouvement, [n-1]), si(similaires, adj-adj, similaire, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(européens, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1600, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(convois, nc-nom, convoi, [n-1]), si(dits, vpp-ver:pper, dire, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(liberté, nc-nom, liberté, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(initié, vpp-ver:pper, initier, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étendre, vinf-ver:infi, étendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1601, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),np)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(suicide, nc-nom, suicide, [n-1]), si(assisté, vpp-ver:pper, assister, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(précis, adj-adj, précis, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(malades, nc-nom, malade, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(phase, nc-nom, phase, [n-1]), si(terminale, adj-adj, terminal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1602, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mentionne, v-ver:pres, mentionner, [dr(0,dl(0,np,s),np)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vise, v-ver:pres, viser, [dr(0,dl(0,np,s),np)-1]), si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(malades, nc-nom, malade, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1603, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), si(approuvée, vpp-ver:pper, approuver, [dl(0,n,n)-1]), si(autorise, v-ver:pres, autoriser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(euthanasie, nc-nom, euthanasie, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(précis, adj-adj, précis, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(malades, nc-nom, malade, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(phase, nc-nom, phase, [n-1]), si(terminale, adj-adj, terminal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1604, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),np)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(suicide, nc-nom, suicide, [n-1]), si(assisté, vpp-ver:pper, assister, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(précis, adj-adj, précis, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(malades, nc-nom, malade, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(phase, nc-nom, phase, [n-1]), si(terminale, adj-adj, terminal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1605, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mentionne, v-ver:pres, mentionner, [dr(0,dl(0,np,s),np)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vise, v-ver:pres, viser, [dr(0,dl(0,np,s),np)-1]), si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(malades, nc-nom, malade, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1606, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), si(approuvée, vpp-ver:pper, approuver, [dl(0,n,n)-1]), si(autorise, v-ver:pres, autoriser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(euthanasie, nc-nom, euthanasie, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(faisant, vpr-ver:ppre, faire, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), si(référence, nc-nom, référence, [np-1]), si(spécifiquement, adv-adv, spécifiquement, [dl(1,s,s)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(malades, nc-nom, malade, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1607, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(aérienne, adj-adj, aérien, [dl(0,n,n)-1]), si(australienne, adj-adj, australien, [dl(0,n,n)-1]), si('Qantas', npp-nam, 'Qantas', [dl(0,n,n)-1]), si('Alan', npp-nam, 'Alan', [dl(0,n,n)-1]), si('Joyce', npp-nam, 'Joyce', [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(faite, vpp-ver:pper, faire, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(entarter, vinf-ver:infi, entarter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2017, adj-num, 2017, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(position, nc-nom, position, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouverture, nc-nom, ouverture, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mariage, nc-nom, mariage, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(couples, nc-nom, couple, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(sexe, nc-nom, sexe, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1608, Result) :-
      prob_parse([ si('Alan', npp-nam, 'Alan', [dr(0,np,np)-1]), si('Joyce', npp-nam, 'Joyce', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(faite, vpp-ver:pper, faire, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(entarter, vinf-ver:infi, entarter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2017, adj-num, 2017, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(imposer, vinf-ver:infi, imposer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1609, Result) :-
      prob_parse([ si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), si('Kanalec', npp-nam, 'Kanalec', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(infirmière, nc-nom, infirmier, [n-1]), si(slovène, adj-adj, slovène, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centre, nc-nom, centre, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Ljubljana', npp-nam, 'Ljubljana', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démissionné, vpp-ver:pper, démissionner, [dl(0,np,s_ppart)-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(révélé, vpp-ver:pper, révéler, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(caméras, nc-nom, caméra, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(chacun, pro-pro:ind, chacun, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(déterminant, vpr-ver:ppre, déterminer, [dl(0,n,n)-1]), si(si, cs-kon, si, [dr(0,s_q,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(reçoit, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(placebo, nc-nom, placebo, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cancer, nc-nom, cancer, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1610, Result) :-
      prob_parse([ si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), si('Kanalec', npp-nam, 'Kanalec', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(centre, nc-nom, centre, [n-1]), si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Ljubljana', npp-nam, 'Ljubljana', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('UKCL', npp-abr, 'UKCL', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1611, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(infirmière, nc-nom, infirmier, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centre, nc-nom, centre, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Ljubljana', npp-nam, 'Ljubljana', [dr(0,np,np)-1]), si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), si('Kanalec', npp-nam, 'Kanalec', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(révélé, vpp-ver:pper, révéler, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(caméras, nc-nom, caméra, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-cCovid', npp-nam, 'anti-cCovid', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(chacun, pro-pro:ind, chacun, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(déterminant, vpr-ver:ppre, déterminer, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(si, cs-kon, si, [dr(0,s_q,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(reçoit, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(placebo, nc-nom, placebo, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,s),np)-1]), si(provoque, v-ver:pres, provoquer, [dr(0,np,n)-1]), si(un, det-det:art, un, [n-1]), si(cancer, nc-nom, cancer, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1612, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Ljubljana', npp-nam, 'Ljubljana', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(infirmière, nc-nom, infirmier, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(chef, nc-nom, chef, [n-1]), si('Zdenka', npp-nam, 'Zdenka', [dl(0,n,n)-1]), si('Mrak', npp-nam, 'Mrak', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conformé, vpp-ver:pper, conformer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('que\'ils', p+pro-pro:rel, 'que\'ils', [dr(0,s_q,s)-1]), si(soutiennent, v-ver:pres, soutenir, [np-1]), si(fermement, adv-adv, fermement, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dl(1,s,s)-1]), si(vaccination, nc-nom, vaccination, [dr(0,np,n)-1]), si(contre, p-prp, contre, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(maladie, nc-nom, maladie, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1613, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(provoqueraient, v-ver:impf, provoquer, [dr(0,dl(0,np,s),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(cancer, nc-nom, cancer, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1614, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(chacun, pro-pro:ind, chacun, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(déterminant, vpr-ver:ppre, déterminer, [dr(0,dl(0,n,n),s_q)-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(reçoit, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(placebo, nc-nom, placebo, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cancer, nc-nom, cancer, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1615, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(figurants, nc-nom, figurant, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sacs, nc-nom, sac, [n-1]), si(mortuaires, adj-adj, mortuaire, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(organisée, vpp-ver:pper, organiser, [dr(0,dl(0,n,n),pp_par)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Vienne', npp-nam, 'Vienne', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Fridays', npp-nam, 'Fridays', [dl(0,n,n)-1]), si(for, et-prp, for, [dr(0,dl(0,n,n),n)-1]), si(future, adj-adj, futur, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(symbolisent, v-ver:pres, symboliser, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(causés, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pollution, nc-nom, pollution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', nc-nam, 'Covid-19', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1616, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(figurants, nc-nom, figurant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(organisée, vpp-ver:pper, organiser, [dr(0,dl(0,n,n),pp_par)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Vienne', npp-nam, 'Vienne', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Fridays', npp-nam, 'Fridays', [dl(0,n,n)-1]), si(for, et-prp, for, [dr(0,dl(0,n,n),n)-1]), si(future, adj-adj, futur, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(font, v-ver:pres, faire, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1617, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', nc-nam, 'Covid', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('20-59', adj-num, '20-59', [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(nul, adj-adj, nul, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1618, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(moins, adv-adv, moins, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(0, det-num, 0, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(mourir, vinf-ver:infi, mourir, [dr(0,dl(0,np,s_inf),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(',', ponct-pun, ',', [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(1,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(non, adv-adv, non, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1619, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si('Jan', npp-nam, 'Jan', [dl(0,n,n)-1]), si('Palach', npp-nam, 'Palach', [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(immolé, vpp-ver:pper, immoler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1969, pro-num, 1969, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(feu, nc-nom, feu, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Prague', npp-nam, 'Prague', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(occupation, nc-nom, occupation, [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1620, Result) :-
      prob_parse([ si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), si('Palach', npp-nam, 'Palach', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(immolé, vpp-ver:pper, immoler, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1621, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si('Jan', npp-nam, 'Jan', [dl(0,n,n)-1]), si('Palach', npp-nam, 'Palach', [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(immolé, vpp-ver:pper, immoler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1969, pro-num, 1969, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(feu, nc-nom, feu, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Prague', npp-nam, 'Prague', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(occupation, nc-nom, occupation, [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1622, Result) :-
      prob_parse([ si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), si('Palach', npp-nam, 'Palach', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(immolé, vpp-ver:pper, immoler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Prague', npp-nam, 'Prague', [np-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1623, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si('Jan', npp-nam, 'Jan', [dl(0,n,n)-1]), si('Palach', npp-nam, 'Palach', [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(immolé, vpp-ver:pper, immoler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1969, pro-num, 1969, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(feu, nc-nom, feu, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Prague', npp-nam, 'Prague', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(occupation, nc-nom, occupation, [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1624, Result) :-
      prob_parse([ si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), si('Palach', npp-nam, 'Palach', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(immolé, vpp-ver:pper, immoler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Prague', npp-nam, 'Prague', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(amende, nc-nom, amende, [n-1]), si(reçue, vpp-ver:pper, recevoir, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(défaut, nc-nom, défaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(passeport, nc-nom, passeport, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1625, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(37, det-num, 37, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si('Nadir', npp-nam, 'Nadir', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(immolé, vpp-ver:pper, immoler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(feu, nc-nom, feu, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(amende, nc-nom, amende, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(défaut, nc-nom, défaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(passeport, nc-nom, passeport, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(travail, nc-nom, travail, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(bureau, nc-nom, bureau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1626, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(amende, nc-nom, amende, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(défaut, nc-nom, défaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(passeport, nc-nom, passeport, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(travail, nc-nom, travail, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(bureau, nc-nom, bureau, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(infligée, vpp-ver:pper, infliger, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Nadir', npp-nam, 'Nadir', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1627, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(recette, nc-nom, recette, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(fabriquer, vinf-ver:infi, fabriquer, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si('soi-même', pro-adv, 'soi-même', [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(citrons, nc-nom, citron, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(citrons, nc-nom, citron, [n-1]), si(verts, adj-adj, vert, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(pamplemousses, nc-nom, pamplemousse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1628, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(fabriquée, vpp-ver:pper, fabriquer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(agrumes, nc-nom, agrume, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1629, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(obtenue, vpp-ver:pper, obtenir, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(fruits, nc-nom, fruit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1630, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(fabriquée, vpp-ver:pper, fabriquer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(agrumes, nc-nom, agrume, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1631, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(recette, nc-nom, recette, [n-1]), si(publiée, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(fabriquer, vinf-ver:infi, fabriquer, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si('soi-même', pro-adv, 'soi-même', [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(citrons, nc-nom, citron, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(citrons, nc-nom, citron, [n-1]), si(verts, adj-adj, vert, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(pamplemousses, nc-nom, pamplemousse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1632, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(fabriquée, vpp-ver:pper, fabriquer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(viande, nc-nom, viande, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1633, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(métropolitaine, adj-adj, métropolitain, [dl(0,n,n)-1]), si(londonienne, adj-adj, londonien, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enquête, v-ver:pres, enquête, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1634, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(ouverte, vpp-ver:pper, ouvrir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(métropolitaine, adj-adj, métropolitain, [dl(0,n,n)-1]), si(londonienne, adj-adj, londonien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1635, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(pénale, adj-adj, pénal, [dl(0,n,n)-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CPI', npp-abr, 'CPI', [n-1]), si(')', ponct-pun, ')', [let-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cours, nc-nom, cours, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1636, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CPI', npp-abr, 'CPI', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1637, Result) :-
      prob_parse([ si('Soixante', det-num, 'Soixante', [dr(0,np,n)-1]), si(mille, adj-num, mille, [dr(0,n,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrêt, nc-nom, arrêt, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Déclaration', nc-nam, 'Déclaration', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Great', npp-nam, 'Great', [dr(0,np,np)-1]), si('Barrington', npp-nam, 'Barrington', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1638, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Déclaration', nc-nom, 'Déclaration', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Great', npp-nam, 'Great', [dr(0,np,np)-1]), si('Barrington', npp-nam, 'Barrington', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(demande, v-ver:pres, demande, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrêt, nc-nom, arrêt, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1639, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Déclaration', nc-nom, 'Déclaration', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Great', npp-nam, 'Great', [dr(0,np,np)-1]), si('Barrington', npp-nam, 'Barrington', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(met, v-ver:pres, mettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(garde, nc-nom, garde, [n-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(néfastes, adj-adj, néfaste, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(mises, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(appelle, v-ver:pres, appeler, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(aucunement, adv-adv, aucunement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(contraire, nc-nom, contraire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1640, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Déclaration', nc-nom, 'Déclaration', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Great', npp-nam, 'Great', [dr(0,np,np)-1]), si('Barrington', npp-nam, 'Barrington', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(demande, v-ver:pres, demande, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrêt, nc-nom, arrêt, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1641, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si('PCR', nc-abr, 'PCR', [dl(0,n,n)-1]), si(pratiqués, vpp-ver:pper, pratiquer, [dl(0,n,n)-1]), si(actuellement, adv-adv, actuellement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(détectent, v-ver:pres, détecter, [dr(0,dl(0,np,s),np)-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(spécifiquement, adv-adv, spécifiquement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Sars-Cov-2', nc-abr, 'Sars-Cov-2', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1642, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Sars-Cov-2', npp-nam, 'Sars-Cov-2', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(spécifiques, adj-adj, spécifique, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1643, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Sars-Cov-2', npp-nam, 'Sars-Cov-2', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(spécifiques, adj-adj, spécifique, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1644, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Sars-Cov-2', nc-abr, 'Sars-Cov-2', [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(utilise, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1645, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Gendarmerie', nc-nam, 'Gendarmerie', [n-1]), si(royale, adj-adj, royal, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('GRC', npp-abr, 'GRC', [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dénombré, vpp-ver:pper, dénombrer, [dr(0,dl(0,np,s_ppart),np)-1]), si('2,3', det-num, '2,3', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(participants, nc-nom, participant, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(liées, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Ottawa', npp-nam, 'Ottawa', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1646, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('GRC', npp-abr, 'GRC', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dénombré, vpp-ver:pper, dénombrer, [dr(0,dl(0,np,s_ppart),np)-1]), si('2,3', det-num, '2,3', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Ottawa', npp-nam, 'Ottawa', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1647, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Gendarmerie', nc-nam, 'Gendarmerie', [n-1]), si(royale, adj-adj, royal, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('GRC', npp-abr, 'GRC', [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dénombré, vpp-ver:pper, dénombrer, [dr(0,dl(0,np,s_ppart),np)-1]), si('2,3', det-num, '2,3', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(participants, nc-nom, participant, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(liées, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Ottawa', npp-nam, 'Ottawa', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1648, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('GRC', npp-abr, 'GRC', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dénombré, vpp-ver:pper, dénombrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Ottawa', npp-nam, 'Ottawa', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1649, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(menée, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si('Kowa', npp-nam, 'Kowa', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prouvé, vpp-ver:pper, prouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(variant, nc-nom, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [dr(0,dl(0,n,n),n)-1]), si(dans, p-prp, dans, [n-1]), si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), si(essai, nc-nom, essai, [n-1]), si(de, p-prp, de, [n-1]), si(phase, nc-nom, phase, [n-1]), si('III', adj-num, 'III', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1650, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(essai, nc-nom, essai, [n-1]), si(clinique, adj-adj, clinique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kowa', npp-nam, 'Kowa', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cours, nc-nom, cours, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(démontrée, vpp-ver:pper, démontrer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1651, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(menée, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si('Kowa', npp-nam, 'Kowa', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prouvé, vpp-ver:pper, prouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(antiparasitaire, nc-nom, antiparasitaire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(variant, nc-nom, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [dr(0,dl(0,n,n),n)-1]), si(dans, p-prp, dans, [n-1]), si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), si(essai, nc-nom, essai, [n-1]), si(de, p-prp, de, [n-1]), si(phase, nc-nom, phase, [n-1]), si('III', adj-num, 'III', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1652, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(essai, nc-nom, essai, [n-1]), si(clinique, adj-adj, clinique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kowa', npp-nam, 'Kowa', [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démontré, vpp-ver:pper, démontrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1653, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kowa', npp-nam, 'Kowa', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(antiviral, adj-adj, antiviral, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tubes, nc-nom, tube, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(essai, nc-nom, essai, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1654, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(menée, vpp-ver:pper, mener, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si('Kowa', npp-nam, 'Kowa', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prouvé, vpp-ver:pper, prouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1655, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(empêchent, v-ver:pres, empêcher, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),dia(0,box(0,np))),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),dia(0,box(0,np))))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(propager, vinf-ver:infi, propager, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1656, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(empêchent, v-ver:pres, empêcher, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),dia(0,box(0,np))),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),dia(0,box(0,np))))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(propager, vinf-ver:infi, propager, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1657, Result) :-
      prob_parse([ si('L\'annonce', nc-nom, 'L\'annonce', [dr(0,np,n)-1]), si(par, p-prp, par, [n-1]), si('Florent', npp-nam, 'Florent', [dr(0,dl(0,n,n),np)-1]), si('Pagny', npp-nam, 'Pagny', [dr(0,np,np)-1]), si(de, p-prp, de, [np-1]), si(son, det-det:pos, son, [dr(0,dl(0,n,n),np)-1]), si(cancer, nc-nom, cancer, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(poumon, nc-nom, poumon, [dr(0,dl(0,n,n),n)-1]), si(la, det-det:art, le, [n-1]), si(semaine, nc-nom, semaine, [dr(0,dl(0,n,n),n)-1]), si(dernière, adj-adj, dernier, [n-1]), si(a, v-ver:pres, avoir, [dl(0,n,n)-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ressurgir, vinf-ver:infi, ressurgir, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(des, det-prp:det, un, [dl(0,np,s_inf)-1]), si(rumeurs, nc-nom, rumeur, [dr(0,np,n)-1]), si(sur, p-prp, sur, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(réseaux, nc-nom, réseau, [dr(0,np,n)-1]), si(sociaux, adj-adj, social, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(liens, nc-nom, lien, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(causalité, nc-nom, causalité, [dr(0,dl(0,n,n),n)-1]), si(entre, p-prp, entrer, [n-1]), si(vaccination, nc-nom, vaccination, [dr(0,dl(0,n,n),n)-1]), si('anti-Covid-19', adj-adj, 'anti-Covid-19', [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si(cellules, nc-nom, cellule, [let-1]), si(cancéreuses, adj-adj, cancéreux, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(1658, Result) :-
      prob_parse([ si('Florent', npp-nam, 'Florent', [dr(0,np,np)-1]), si('Pagny', npp-nam, 'Pagny', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(tumeur, nc-nom, tumeur, [n-1]), si(cancéreuse, adj-adj, cancéreux, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(poumon, nc-nom, poumon, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1659, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(larges, adj-adj, large, [dr(0,n,n)-1]), si(manifestations, nc-nom, manifestation, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(effectivement, adv-adv, effectivement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(tenues, vpp-ver:pper, tenir, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(jours, nc-nom, jour, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(récente, adj-adj, récent, [dr(0,n,n)-1]), si(photo, nc-nom, photo, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si('5.000', det-num, '5.000', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prise, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1660, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si('5.000', det-num, '5.000', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(jours, nc-nom, jour, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(manifestations, nc-nom, manifestation, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1661, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(convoi, nc-nom, convoi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(camionneurs, nc-nom, camionneur, [n-1]), si(albertains, adj-adj, albertain, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(venu, vpp-ver:pper, venir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(manifester, vinf-ver:infi, manifester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(instauration, nc-nom, instauration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(taxe, nc-nom, taxe, [n-1]), si(carbone, nc-nom, carbone, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réclamer, vinf-ver:infi, réclamer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(construction, nc-nom, construction, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(oléoducs, nc-nom, oléoduc, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1662, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(convoi, nc-nom, convoi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(camionneurs, nc-nom, camionneur, [n-1]), si(albertains, adj-adj, albertain, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(venu, vpp-ver:pper, venir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(dénoncer, vinf-ver:infi, dénoncer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(franchir, vinf-ver:infi, franchir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si('canado-américaine', adj-adj, 'canado-américaine', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1663, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(admis, vpp-ver:pper, admettre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(endommagent, v-ver:pres, endommager, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(doublement, adv-adv, doublement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1664, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(admis, vpp-ver:pper, admettre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(endommagé, vpp-ver:pper, endommager, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(double, adj-adj, double, [dr(0,n,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1665, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(routiers, nc-nom, routier, [n-1]), si(défilant, vpr-ver:ppre, défiler, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(dénoncer, vinf-ver:infi, dénoncer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(franchir, vinf-ver:infi, franchir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si('canado-américaine', adj-adj, 'canado-américaine', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(record, nc-nom, record, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(convoi, nc-nom, convoi, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(livre, nc-nom, livre, [n-1]), si('Guinness', npp-nam, 'Guinness', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(records, nc-nom, record, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1666, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(record, nc-nom, record, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(convoi, nc-nom, convoi, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Guinness', npp-nam, 'Guinness', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(détenu, vpp-ver:pper, détenir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(convoi, nc-nom, convoi, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(défilé, vpp-ver:pper, défiler, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Égypte', npp-nam, 'Égypte', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2020, pro-num, 2020, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1667, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(prise, nc-nom, prise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(parole, nc-nom, parole, [n-1]), si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(députés, nc-nom, député, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(professeur, nc-nom, professeur, [n-1]), si('Christian', npp-nam, 'Christian', [dl(0,n,n)-1]), si('Perronne', npp-nam, 'Perronne', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(invité, vpp-ver:pper, inviter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(auteurs, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétitions, nc-nom, pétition, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenu, vpp-ver:pper, tenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affirmations, nc-nom, affirmation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(injections, nc-nom, injection, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,s),pp)-1]), si(consistent, v-ver:pres, consister, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1668, Result) :-
      prob_parse([ si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Perronne', npp-nam, 'Perronne', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(parole, nc-nom, parole, [n-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(députés, nc-nom, député, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(invité, vpp-ver:pper, inviter, [dr(0,dr(0,dl(0,np,s_pass),dl(0,np,s_inf)),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(personne, nc-nom, personne, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1669, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(prise, nc-nom, prise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(parole, nc-nom, parole, [n-1]), si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(députés, nc-nom, député, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(professeur, nc-nom, professeur, [n-1]), si('Christian', npp-nam, 'Christian', [dl(0,n,n)-1]), si('Perronne', npp-nam, 'Perronne', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(invité, vpp-ver:pper, inviter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(auteurs, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétitions, nc-nom, pétition, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenu, vpp-ver:pper, tenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affirmations, nc-nom, affirmation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(injections, nc-nom, injection, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,s),pp)-1]), si(consistent, v-ver:pres, consister, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1670, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Perronne', npp-nam, 'Perronne', [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(injections, nc-nom, injection, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1671, Result) :-
      prob_parse([ si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), si(joueurs, nc-nom, joueur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tennis, nc-nom, tennis, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(abandonné, vpp-ver:pper, abandonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tournoi, nc-nom, tournoi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Open', nc-nam, 'Open', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1672, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(trois, adj-num, trois, [dr(0,n,n)-1]), si(joueurs, nc-nom, joueur, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(abandonné, vpp-ver:pper, abandonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tournoi, nc-nom, tournoi, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tient, v-ver:pres, tenir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Melbourne', npp-nam, 'Melbourne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1673, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(trois, adj-num, trois, [dr(0,n,n)-1]), si(joueurs, nc-nom, joueur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tennis, nc-nom, tennis, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(abandonné, vpp-ver:pper, abandonner, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Open', npp-nam, 'Open', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(respiratoires, adj-adj, respiratoire, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1674, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(trois, adj-num, trois, [dr(0,n,n)-1]), si(joueurs, nc-nom, joueur, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(abandonné, vpp-ver:pper, abandonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tournoi, nc-nom, tournoi, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tient, v-ver:pres, tenir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Melbourne', npp-nam, 'Melbourne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1675, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(slovène, nc-nom, slovène, [n-1]), si('Dalila', npp-nam, 'Dalila', [dl(0,n,n)-1]), si('Jakupovic', npp-nam, 'Jakupovic', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(abandonné, vpp-ver:pper, abandonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tournoi, nc-nom, tournoi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Open', nc-nam, 'Open', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tôt, adv-adv, tôt, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1676, Result) :-
      prob_parse([ si('Dalila', npp-nam, 'Dalila', [dr(0,np,np)-1]), si('Jakupovic', npp-nam, 'Jakupovic', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(participé, vpp-ver:pper, participer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(tournoi, nc-nom, tournoi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Open', nc-nam, 'Open', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(bout, nc-nom, bout, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1677, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(constituée, vpp-ver:pper, constituer, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(vue, nc-nom, vue, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(engager, vinf-ver:infi, engager, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(poursuites, nc-nom, poursuite, [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(qualifié, vpp-ver:pper, qualifier, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si('2.0', npp-nam, '2.0', [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1678, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(abus, nc-nom, abus, [n-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créée, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1679, Result) :-
      prob_parse([ si('Ingérer', vinf-ver:infi, 'Ingérer', [dr(0,dl(0,np,s_inf),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(dioxyde, nc-nom, dioxyde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chlore, nc-nom, chlore, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sert, v-ver:pres, servir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1680, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(dioxyde, nc-nom, dioxyde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chlore, nc-nom, chlore, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),dr(0,dl(0,np,s),dl(0,np,s)))-1]), si(seulement, adv-adv, seulement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(inefficace, adj-adj, inefficace, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(dangereux, adj-adj, dangereux, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1681, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(dioxyde, nc-nom, dioxyde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chlore, nc-nom, chlore, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(agir, vinf-ver:infi, agir, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(guérir, vinf-ver:infi, guérir, [dr(0,dl(0,np,s_inf),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1682, Result) :-
      prob_parse([ si('Ingérer', vinf-ver:infi, 'Ingérer', [dr(0,dl(0,np,s_inf),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(dioxyde, nc-nom, dioxyde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chlore, nc-nom, chlore, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sert, v-ver:pres, servir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1683, Result) :-
      prob_parse([ si(75, det-num, 75, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamnés, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prison, nc-nom, prison, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(perpétuité, nc-nom, perpétuité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(commis, vpp-ver:pper, commettre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(crime, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(génocide, nc-nom, génocide, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(autorisant, vpr-ver:ppre, autoriser, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1684, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(incriminées, vpp-ver:pper, incriminer, [dl(0,n,n)-1]), si(figurent, v-ver:pres, figurer, [dr(0,s,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('Ministre', nc-nom, 'Ministre', [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si('Justin', npp-nam, 'Justin', [dl(0,n,n)-1]), si('Trudeau', npp-nam, 'Trudeau', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reine, nc-nom, reine, [n-1]), si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(encore, adv-adv, encore, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pape', npp-nam, 'Pape', [n-1]), si('François', npp-nam, 'François', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1685, Result) :-
      prob_parse([ si(75, det-num, 75, [dr(0,np,n)-1]), si(condamnations, nc-nom, condamnation, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prison, nc-nom, prison, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prononcées, vpp-ver:pper, prononcer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(crime, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(génocide, nc-nom, génocide, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si('Justin', npp-nam, 'Justin', [dr(0,np,np)-1]), si('Trudeau', npp-nam, 'Trudeau', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si('Ministre', nc-nom, 'Ministre', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1686, Result) :-
      prob_parse([ si(75, det-num, 75, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamnés, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prison, nc-nom, prison, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(perpétuité, nc-nom, perpétuité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(commis, vpp-ver:pper, commettre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(crime, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(génocide, nc-nom, génocide, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(autorisant, vpr-ver:ppre, autoriser, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1687, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(dirigeant, nc-nom, dirigeant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(génocide, nc-nom, génocide, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si('anti-Covid-19', adj-adj, 'anti-Covid-19', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1688, Result) :-
      prob_parse([ si(75, det-num, 75, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamnés, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prison, nc-nom, prison, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(perpétuité, nc-nom, perpétuité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(commis, vpp-ver:pper, commettre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(crime, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(génocide, nc-nom, génocide, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(autorisant, vpr-ver:ppre, autoriser, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1689, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(incriminées, vpp-ver:pper, incriminer, [dl(0,n,n)-1]), si(figurent, v-ver:pres, figurer, [dr(0,s,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('Ministre', nc-nom, 'Ministre', [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si('Justin', npp-nam, 'Justin', [dl(0,n,n)-1]), si('Trudeau', npp-nam, 'Trudeau', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reine, nc-nom, reine, [n-1]), si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(encore, adv-adv, encore, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pape', npp-nam, 'Pape', [n-1]), si('François', npp-nam, 'François', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1690, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Pape', npp-nam, 'Pape', [n-1]), si('François', npp-nam, 'François', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prison, nc-nom, prison, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(perpétuité, nc-nom, perpétuité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(crime, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(génocide, nc-nom, génocide, [n-1]), si(médical, adj-adj, médical, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1691, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(port, nc-nom, port, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(masque, nc-nom, masque, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(entraîner, vinf-ver:infi, entraîner, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intoxication, nc-nom, intoxication, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grave, adj-adj, grave, [dr(0,n,n)-1]), si(manque, nc-nom, manque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(oxygène, nc-nom, oxygène, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(lésions, nc-nom, lésion, [n-1]), si(irréversibles, adj-adj, irréversible, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(cerveau, nc-nom, cerveau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1692, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(port, nc-nom, port, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(masque, nc-nom, masque, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(particulier, adj-adj, particulier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1693, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(masque, nc-nom, masque, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grave, adj-adj, grave, [dr(0,n,n)-1]), si(manque, nc-nom, manque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(oxygène, nc-nom, oxygène, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(concentration, nc-nom, concentration, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(pouvant, vpr-ver:ppre, pouvoir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(mener, vinf-ver:infi, mener, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1694, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(masque, nc-nom, masque, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grave, adj-adj, grave, [dr(0,n,n)-1]), si(hypoxie, nc-nom, hypoxie, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intoxication, nc-nom, intoxication, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1695, Result) :-
      prob_parse([ si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Cabrol', npp-nam, 'Cabrol', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(pionnier, nc-nom, pionnier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(greffe, nc-nom, greffe, [n-1]), si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédé, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2017, adj-num, 2017, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1696, Result) :-
      prob_parse([ si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Cabrol', npp-nam, 'Cabrol', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédé, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si(',', ponct-pun, ',', [let-1]), si(prétend, v-ver:pres, prétendre, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si('Facebook', npp-nam, 'Facebook', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1697, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transfusion, nc-nom, transfusion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('CHU', npp-abr, 'CHU', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lille', npp-nam, 'Lille', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(refuse, v-ver:pres, refuser, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dons, nc-nom, don, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('COVID-19', npp-abr, 'COVID-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1698, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('CHU', npp-abr, 'CHU', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lille', npp-nam, 'Lille', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prélever, vinf-ver:infi, prélever, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1699, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('CHU', npp-abr, 'CHU', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lille', npp-nam, 'Lille', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(consignes, nc-nom, consigne, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(don, nc-nom, don, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sang, nc-nom, sang, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1700, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('CHU', npp-abr, 'CHU', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lille', npp-nam, 'Lille', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prélever, vinf-ver:infi, prélever, [dr(0,dl(0,np,s_inf),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(sang, nc-nom, sang, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1701, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(virale, adj-adj, viral, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Côte', nc-nam, 'Côte', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Ivoire', npp-nam, 'Ivoire', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Suisse', npp-nam, 'Suisse', [n-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(admis, vpp-ver:pper, admettre, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1702, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('non-vaccinées', adj-adj, 'non-vaccinées', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(admises, vpp-ver:pper, admettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(ivoiriens, adj-adj, ivoirien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(belges, adj-adj, belge, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(suisses, adj-adj, suisse, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(virale, adj-adj, viral, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1703, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(virale, adj-adj, viral, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Côte', nc-nam, 'Côte', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Ivoire', npp-nam, 'Ivoire', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Suisse', npp-nam, 'Suisse', [n-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(admis, vpp-ver:pper, admettre, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1704, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('non-vaccinées', adj-adj, 'non-vaccinées', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(admises, vpp-ver:pper, admettre, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(grecs, adj-adj, grec, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1705, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permettent, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(affirmer, vinf-ver:infi, affirmer, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(multiplication, nc-nom, multiplication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rappels, nc-nom, rappel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(même, adv-adv, même, [dl(1,s,s)-1]), si(plutôt, adv-adv, plutôt, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inverse, nc-nom, inverse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1706, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(multiplication, nc-nom, multiplication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rappels, nc-nom, rappel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1707, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(augmente, v-ver:pres, augmenter, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1708, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(davantage, adv-adv, davantage, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(risque, nc-nom, risque, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1709, Result) :-
      prob_parse([ si(40, det-num, 40, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(difficultés, nc-nom, difficulté, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accès, nc-nom, accès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1710, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(difficultés, nc-nom, difficulté, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accès, nc-nom, accès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(représentent, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(problème, nc-nom, problème, [n-1]), si(réel, adj-adj, réel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1711, Result) :-
      prob_parse([ si(40, det-num, 40, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(difficultés, nc-nom, difficulté, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accès, nc-nom, accès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1712, Result) :-
      prob_parse([ si(40, det-num, 40, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si(faute, nc-nom, faute, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(accès, nc-nom, accès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1713, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(principale, adj-adj, principal, [dr(0,n,n)-1]), si(agence, nc-nom, agence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(admis, vpp-ver:pper, admettre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(75, det-num, 75, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(dus, vpp-ver:pper, du, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(concernent, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(atteintes, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(comorbidités, nc-nom, comorbidité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(inutile, adj-adj, inutile, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1714, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(confirme, v-ver:pres, confirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(75, det-num, 75, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(comorbidités, nc-nom, comorbidité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1715, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(principale, adj-adj, principal, [dr(0,n,n)-1]), si(agence, nc-nom, agence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(admis, vpp-ver:pper, admettre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(75, det-num, 75, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(dus, vpp-ver:pper, du, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(concernent, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(atteintes, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(comorbidités, nc-nom, comorbidité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(inutile, adj-adj, inutile, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1716, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(confirme, v-ver:pres, confirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(75, det-num, 75, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(zéro, adj-num, zéro, [dr(0,np,n)-1]), si(comorbidités, nc-nom, comorbidité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1717, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(principale, adj-adj, principal, [dr(0,n,n)-1]), si(agence, nc-nom, agence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(admis, vpp-ver:pper, admettre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(75, det-num, 75, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(dus, vpp-ver:pper, du, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(concernent, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(atteintes, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(comorbidités, nc-nom, comorbidité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1718, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(confirme, v-ver:pres, confirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(90, det-num, 90, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(comorbidités, nc-nom, comorbidité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1719, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('95,58', det-num, '95,58', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(recensés, vpp-ver:pper, recenser, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(complètement, adv-adv, complètement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1720, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pourcentage, nc-nom, pourcentage, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(complètement, adv-adv, complètement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1721, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('95,58', det-num, '95,58', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(recensés, vpp-ver:pper, recenser, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(complètement, adv-adv, complètement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1722, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1723, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(officielles, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(variant, nc-nom, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si(indiquent, v-ver:pres, indiquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(entièrement, adv-adv, entièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(développeraient, v-ver:cond, développer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('SIDA', npp-abr, 'SIDA', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1724, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Koch', npp-nam, 'Koch', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Omicron', npp-nam, 'Omicron', [np-1]), si(suggèrent, v-ver:pres, suggérer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(complètement, adv-adv, complètement, [n-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(syndrome, nc-nom, syndrome, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(immunodéficience, nc-nom, immunodéficience, [n-1]), si(acquise, vpp-ver:pper, acquis, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('SIDA', npp-abr, 'SIDA', [n-1]), si(')', ponct-pun, ')', [let-1]), si(induit, vpp-ver:pper, induire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1725, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(certificat, nc-nom, certificat, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(numérique, adj-adj, numérique, [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(bientôt, adv-adv, bientôt, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(conditionné, vpp-ver:pper, conditionner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réalisation, nc-nom, réalisation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rappel, nc-nom, rappel, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(six, det-num, six, [dr(0,dl(0,n,n),n)-1]), si(mois, nc-nom, mois, [n-1]), si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(complète, adj-adj, complet, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(délai, nc-nom, délai, [n-1]), si(supplémentaire, adj-adj, supplémentaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1726, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(certificat, nc-nom, certificat, [n-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(numérique, adj-adj, numérique, [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(valable, adj-adj, valable, [dl(0,n,n)-1]), si(neuf, det-num, neuf, [dr(0,dl(1,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si(faute, nc-nom, faute, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(rappel, nc-nom, rappel, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1727, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(valable, adj-adj, valable, [dl(0,n,n)-1]), si(neuf, det-num, neuf, [dr(0,dl(1,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si(faute, nc-nom, faute, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(rappel, nc-nom, rappel, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1728, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(vaccinal, adj-adj, vaccinal, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(valable, adj-adj, valable, [dl(0,n,n)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1729, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(libres, adj-adj, libre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(désigner, vinf-ver:infi, désigner, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(durée, nc-nom, durée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(validité, nc-nom, validité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1730, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(décide, v-ver:pres, décider, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(durée, nc-nom, durée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(validité, nc-nom, validité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États', nc-nam, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1731, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(cesse, v-ver:pres, cesser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(augmenter, vinf-ver:infi, augmenter, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),n)-1]), si(fin, nc-nom, fin, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(prétendent, v-ver:pres, prétendre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(jugés, vpp-ver:pper, juger, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), si(inefficaces, adj-adj, inefficace, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1732, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(continue, v-ver:pres, continuer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(augmenter, vinf-ver:infi, augmenter, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1733, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(victimes, nc-nom, victime, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(nettement, adv-adv, nettement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(important, adj-adj, important, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1734, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(injections, nc-nom, injection, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(consistent, v-ver:pres, consister, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jumeaux, nc-nom, jumeau, [n-1]), si('Bogdanoff', npp-nam, 'Bogdanoff', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [n-1]), si(majorité, nc-nom, majorité, [n-1]), si(des, p+d-prp:det, un, [n-1]), si(gens, nc-nom, gens, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,n,n),pp_de)-1]), si(victimes, vpp-ver:pper, victime, [np-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,s,s),n)-1]), si(fois, nc-nom, fois, [n-1]), si(dosées, vpp-ver:pper, doser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1735, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(des, p+d-prp:det, un, [dr(0,pp_de,n)-1]), si(obsèques, nc-nom, obsèque, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(frères, nc-nom, frère, [n-1]), si('Bogdanoff', npp-nam, 'Bogdanoff', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(deux, adj-num, deux, [np-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(décédés, vpp-ver:pper, décéder, [dr(0,dl(0,n,n),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chanteur, nc-nom, chanteur, [n-1]), si('Francis', npp-nam, 'Francis', [dl(0,n,n)-1]), si('Lalanne', npp-nam, 'Lalanne', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réaffirmé, vpp-ver:pper, réaffirmer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(choix, nc-nom, choix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(faire, vinf-ver:infi, faire, [cl_r-1]), si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(assurant, vpr-ver:ppre, assurer, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(injections, nc-nom, injection, [n-1]), si(consisteraient, v-ver:impf, consister, [n-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jumeaux, nc-nom, jumeau, [dr(0,np,n)-1]), si(car, cc-kon, car, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,s,s),s)-1]), si(majorité, nc-nom, majorité, [dr(0,np,n)-1]), si(des, p+d-prp:det, un, [n-1]), si(gens, nc-nom, gens, [dr(0,dl(0,n,n),n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(victimes, vpp-ver:pper, victime, [np-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(dosées, vpp-ver:pper, doser, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1736, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(frères, nc-nom, frère, [n-1]), si('Bogdanoff', npp-nam, 'Bogdanoff', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédés, vpp-ver:pper, décéder, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1737, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('non-vaccinées', adj-adj, 'non-vaccinées', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(admises, vpp-ver:pper, admettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(services, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(soins, nc-nom, soin, [n-1]), si(critiques, adj-adj, critique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(nombreuses, adj-adj, nombreux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinées, nc-nom, vacciné, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1738, Result) :-
      prob_parse([ si('Sept', det-num, 'Sept', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(huit, nc-num, huit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(réanimation, nc-nom, réanimation, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1739, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('non-vaccinées', adj-adj, 'non-vaccinées', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(admises, vpp-ver:pper, admettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(services, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(soins, nc-nom, soin, [n-1]), si(critiques, adj-adj, critique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(généralement, adv-adv, généralement, [dl(1,s,s)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(nombreuses, adj-adj, nombreux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinées, nc-nom, vacciner, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1740, Result) :-
      prob_parse([ si('Sept', det-num, 'Sept', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(huit, nc-num, huit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(réanimation, nc-nom, réanimation, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(hospitalier, adj-adj, hospitalier, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Haguenau', npp-nam, 'Haguenau', [np-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(nuit, nc-nom, nuit, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1741, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Centres', nc-nam, 'Centres', [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prévention, nc-nom, prévention, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si(')', ponct-pun, ')', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(neuf, det-num, neuf, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attribués, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si(tous, adv-adv, tout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('Janssen', npp-nam, 'Janssen', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('non-autorisé', vpp-ver:pper, 'non-autorisé', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mineurs, nc-nom, mineur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1742, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('Janssen', npp-nam, 'Janssen', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(autorisé, vpp-ver:pper, autoriser, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mineurs, nc-nom, mineur, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1743, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pharmacovigilance, nc-nom, pharmacovigilance, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('VAERS', npp-abr, 'VAERS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(gérée, vpp-ver:pper, gérer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Centres', nc-nam, 'Centres', [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prévention, nc-nom, prévention, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(état, nc-nom, état, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(9, det-num, 9, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(total, nc-nom, total, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1744, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si('VAERS', npp-abr, 'VAERS', [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(état, nc-nom, état, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('30.500', det-num, '30.500', [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(234, det-num, 234, [dr(0,np,n)-1]), si(situations, nc-nom, situation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(handicap, nc-nom, handicap, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(54, det-num, 54, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mineurs, nc-nom, mineur, [n-1]), si(vaccinés, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1745, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(enceinte, nc-nom, enceint, [dl(0,n,n)-1]), si(infectée, vpp-ver:pper, infecter, [dr(0,dl(0,n,n),pp_par)-1]), si(simultanément, adv-adv, simultanément, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(rapporté, vpp-ver:pper, rapporter, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(israéliens, adj-adj, israélien, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(première, nc-num, premier, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1746, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(double, adj-adj, double, [dr(0,n,n)-1]), si(infection, nc-nom, infection, [n-1]), si(grippe, nc-nom, grippe, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('Covid', npp-nam, 'Covid', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(enceinte, nc-nom, enceint, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(ni, cc-kon, ni, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(inédite, adj-adj, inédit, [dl(0,n,n)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(fusion, nc-nom, fusion, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1747, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(double, adj-adj, double, [dr(0,n,n)-1]), si(infection, nc-nom, infection, [n-1]), si(grippe, nc-nom, grippe, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(surnommée, vpp-ver:pper, surnommer, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(flurona, nc-nom, flurona, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('-', ponct-pun, '-', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(résultat, nc-nom, résultat, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(fusion, nc-nom, fusion, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1748, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(flurona, nc-nom, flurona, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(ni, cc-kon, ni, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(inédite, adj-adj, inédit, [dl(0,n,n)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(fusion, nc-nom, fusion, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1749, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pouvoir, nc-nom, pouvoir, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(souhaité, vpp-ver:pper, souhaiter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(distribuer, vinf-ver:infi, distribuer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entrée, nc-nom, entrée, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(centres, nc-nom, centre, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(bracelets, nc-nom, bracelet, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accès, nc-nom, accès, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(large, adj-adj, large, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(consigne, nc-nom, consigne, [n-1]), si(polémique, adj-adj, polémique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(finalement, adv-adv, finalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(annulée, vpp-ver:pper, annuler, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entrée, nc-nom, entrée, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(vigueur, nc-nom, vigueur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1750, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(consigne, nc-nom, consigne, [n-1]), si(israélienne, adj-adj, israélien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(distribuer, vinf-ver:infi, distribuer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(bracelets, nc-nom, bracelet, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccinés, vpp-nom, vacciné, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(centres, nc-nom, centre, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(supprimée, vpp-ver:pper, supprimer, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entrée, nc-nom, entrée, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(vigueur, nc-nom, vigueur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1751, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(passeport, nc-nom, passeport, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(équivalent, adj-adj, équivalent, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(sein, nc-nom, sein, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centres, nc-nom, centre, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(commerces, nc-nom, commerce, [n-1]), si('non-essentiels', adj-adj, 'non-essentiels', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(superficie, nc-nom, superficie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(supérieure, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1752, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passeport, nc-nom, passeport, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(sein, nc-nom, sein, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centres, nc-nom, centre, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(commerces, nc-nom, commerce, [n-1]), si('non-essentiels', adj-adj, 'non-essentiels', [dl(0,n,n)-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(superficie, nc-nom, superficie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(supérieure, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1753, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(passeport, nc-nom, passeport, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(sein, nc-nom, sein, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centres, nc-nom, centre, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(commerces, nc-nom, commerce, [n-1]), si('non-essentiels', adj-adj, 'non-essentiels', [dl(0,n,n)-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(superficie, nc-nom, superficie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(supérieure, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1754, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passeport, nc-nom, passeport, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(sein, nc-nom, sein, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centres, nc-nom, centre, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si('non-essentiel', adj-adj, 'non-essentiel', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(superficie, nc-nom, superficie, [n-1]), si(200, det-num, 200, [dr(0,dl(0,n,n),n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1755, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(passeport, nc-nom, passeport, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(sein, nc-nom, sein, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centres, nc-nom, centre, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(commerces, nc-nom, commerce, [n-1]), si('non-essentiels', adj-adj, 'non-essentiels', [dl(0,n,n)-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(superficie, nc-nom, superficie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(supérieure, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1756, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passeport, nc-nom, passeport, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(sein, nc-nom, sein, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centres, nc-nom, centre, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(essentiel, adj-adj, essentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(superficie, nc-nom, superficie, [n-1]), si(50, det-num, 50, [dr(0,dl(0,n,n),n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1757, Result) :-
      prob_parse([ si('Tousser', vinf-ver:infi, 'Tousser', [dl(0,np,s_inf)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(éternuer, vinf-ver:infi, éternuer, [dl(0,np,s_inf)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(public, nc-nom, public, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(peu, adv-adv, peu, [n-1]), si(interdit, vpp-ver:pper, interdire, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(puni, vpp-ver:pper, punir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(uniquement, adv-adv, uniquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1758, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(loi, nc-nom, loi, [n-1]), si(australienne, adj-adj, australien, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(punit, v-ver:pres, punir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(éternuent, v-ver:pres, éternuer, [dl(0,np,s)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(toussent, v-ver:pres, tousser, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(public, nc-nom, public, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1759, Result) :-
      prob_parse([ si('L\'interdiction', nc-nom, 'L\'interdiction', [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(éternuer, vinf-ver:infi, éternuer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(ou, cc-kon, ou, [dl(0,np,s_inf)-1]), si(tousser, vinf-ver:infi, tousser, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [dl(0,np,s_inf)-1]), si(volontairement, adv-adv, volontairement, [let-1]), si('"', ponct-pun:cit, '"', [dl(1,s,s)-1]), si(sur, p-prp, sur, [let-1]), si(des, det-prp:det, un, [dr(0,dl(1,s,s),np)-1]), si(autres, adj-adj, autre, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [dr(0,n,n)-1]), si(a, v-ver:pres, avoir, [n-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(en, p-prp, en, [dr(0,dl(0,np,s_pass),pp)-1]), si(place, nc-nom, place, [dr(0,pp,n)-1]), si(dès, p-prp, dès, [n-1]), si(2020, pro-num, 2020, [dr(0,dl(1,s,s),np)-1]), si(en, p-prp, en, [np-1]), si('Australie', npp-nam, 'Australie', [dr(0,dl(1,s,s),n)-1]), si(',', ponct-pun, ',', [n-1]), si(et, cc-kon, et, [let-1]), si(elle, cls-pro:per, lui, [dr(0,dl(0,s,s),s)-1]), si('s\'', clr-pro:per, 's\'', [np-1]), si(applique, v-ver:pres, applique, [cl_r-1]), si(à, p-prp, à, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(tous, pro-pro:ind, tout, [dr(0,pp_a,np)-1]), si(',', ponct-pun, ',', [np-1]), si(vaccinés, vpp-ver:pper, vacciner, [let-1]), si(ou, cc-kon, ou, [dl(0,np,s_pass)-1]), si(non, adv-adv, non, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si('.', ponct-pun, '.', [dl(1,s,s)-1])], Result).
sent(1760, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(australienne, adj-adj, australien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2020, pro-num, 2020, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(punit, v-ver:pres, punir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(éternuent, v-ver:pres, éternuer, [dl(0,np,s)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(toussent, v-ver:pres, tousser, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(public, nc-nom, public, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1761, Result) :-
      prob_parse([ si('L\'interdiction', nc-nom, 'L\'interdiction', [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(éternuer, vinf-ver:infi, éternuer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(ou, cc-kon, ou, [dl(0,np,s_inf)-1]), si(tousser, vinf-ver:infi, tousser, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [dl(0,np,s_inf)-1]), si(volontairement, adv-adv, volontairement, [let-1]), si('"', ponct-pun:cit, '"', [dl(1,s,s)-1]), si(sur, p-prp, sur, [let-1]), si(des, det-prp:det, un, [dr(0,dl(1,s,s),np)-1]), si(autres, adj-adj, autre, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [dr(0,n,n)-1]), si(a, v-ver:pres, avoir, [n-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(en, p-prp, en, [dr(0,dl(0,np,s_pass),pp)-1]), si(place, nc-nom, place, [dr(0,pp,n)-1]), si(dès, p-prp, dès, [n-1]), si(2020, pro-num, 2020, [dr(0,dl(1,s,s),np)-1]), si(en, p-prp, en, [np-1]), si('Australie', npp-nam, 'Australie', [dr(0,dl(1,s,s),n)-1]), si(',', ponct-pun, ',', [n-1]), si(et, cc-kon, et, [let-1]), si(elle, cls-pro:per, lui, [dr(0,dl(0,s,s),s)-1]), si('s\'', clr-pro:per, 's\'', [np-1]), si(applique, v-ver:pres, applique, [cl_r-1]), si(à, p-prp, à, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(tous, pro-pro:ind, tout, [dr(0,pp_a,np)-1]), si(',', ponct-pun, ',', [np-1]), si(vaccinés, vpp-ver:pper, vacciner, [let-1]), si(ou, cc-kon, ou, [dl(0,np,s_pass)-1]), si(non, adv-adv, non, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si('.', ponct-pun, '.', [dl(1,s,s)-1])], Result).
sent(1762, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(tousser, vinf-ver:infi, tousser, [dl(0,np,s_inf)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(éternuer, vinf-ver:infi, éternuer, [dl(0,np,s_inf)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(public, nc-nom, public, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2020, pro-num, 2020, [np-1]), si(interdit, vpp-ver:pper, interdire, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(puni, vpp-ver:pper, punir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(uniquement, adv-adv, uniquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1763, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(lancé, vpp-ver:pper, lancer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(appel, nc-nom, appel, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(contraire, nc-nom, contraire, [n-1]), si(estimé, vpp-ver:pper, estimer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(vu, nc-nom, vu, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(taux, nc-nom, taux, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(incidence, nc-nom, incidence, [n-1]), si(élevés, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(',', ponct-pun, ',', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jeunes, nc-nom, jeune, [n-1]), si(scolarisés, vpp-ver:pper, scolariser, [dl(0,n,n)-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(envisagée, vpp-ver:pper, envisager, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(situations, nc-nom, situation, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(nationales, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1764, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jeunes, nc-nom, jeune, [dr(0,n,n)-1]), si(scolarisés, vpp-ver:pper, scolariser, [dl(0,n,n)-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(envisagée, vpp-ver:pper, envisager, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(situations, nc-nom, situation, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(nationales, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1765, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(confidentiels, adj-adj, confidentiel, [dl(0,n,n)-1]), si(divulgués, vpp-ver:pper, divulguer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('FDA', npp-abr, 'FDA', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicament, nc-nom, médicament, [n-1]), si(',', ponct-pun, ',', [let-1]), si(révèlent, v-ver:pres, révéler, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('Pfizer-BioNTech', npp-nam, 'Pfizer-BioNTech', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('1.200', det-num, '1.200', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si(3, det-num, 3, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(participants, nc-nom, participant, [n-1]), si('-', ponct-pun, '-', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morts, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1766, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(divulgués, vpp-ver:pper, divulguer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('FDA', npp-abr, 'FDA', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(révèlent, v-ver:pres, révéler, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,np,s_ppart),np)-1]), si(3, det-num, 3, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mortalité, nc-nom, mortalité, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si(cliniques, adj-adj, clinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1767, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(gonflent, v-ver:pres, gonfler, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(artificiellement, adv-adv, artificiellement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(réanimation, nc-nom, réanimation, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1768, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(capture, nc-nom, capture, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(écran, nc-nom, écran, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(récente, adj-adj, récent, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('BFMTV', npp-abr, 'BFMTV', [np-1]), si(constitue, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(gonflent, v-ver:pres, gonfler, [dr(0,dl(0,np,s),np)-1]), si(artificiellement, adv-adv, artificiellement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(réanimation, nc-nom, réanimation, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1769, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(première, det-num, premier, [dr(0,np,n)-1]), si(instance, nc-nom, instance, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(jugé, vpp-ver:pper, juger, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,n,n))-1]), si(illégale, adj-adj, illégal, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(application, nc-nom, application, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [dr(0,n,n)-1]), si('Safe', npp-nam, 'Safe', [dr(0,n,n)-1]), si('Ticket', npp-nam, 'Ticket', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Wallonie', npp-nam, 'Wallonie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(conformer, vinf-ver:infi, conformer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),n)-1]), si(peine, nc-nom, peine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(astreinte, nc-nom, astreinte, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1770, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(wallonne, adj-adj, wallon, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamnée, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(corriger, vinf-ver:infi, corriger, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(illégalité, nc-nom, illégalité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [dr(0,n,n)-1]), si('Safe', npp-nam, 'Safe', [dr(0,n,n)-1]), si('Ticket', npp-nam, 'Ticket', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(astreinte, nc-nom, astreinte, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1771, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(première, det-num, premier, [dr(0,np,n)-1]), si(instance, nc-nom, instance, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Wallonie', npp-nam, 'Wallonie', [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [dr(0,n,n)-1]), si('Safe', npp-nam, 'Safe', [dr(0,n,n)-1]), si('Ticket', npp-nam, 'Ticket', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(suspendu, vpp-ver:pper, suspendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(application, nc-nom, application, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(toute, adv-adv, tout, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(suspendu, vpp-ver:pper, suspendre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(que, adv-adv, que, [dr(0,pp,pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(constitutionnelle, adj-adj, constitutionnel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1772, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(première, det-num, premier, [dr(0,np,n)-1]), si(instance, nc-nom, instance, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Wallonie', npp-nam, 'Wallonie', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(toute, adv-adv, tout, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(suspend, v-ver:pres, suspendre, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [dr(0,n,n)-1]), si('Safe', npp-nam, 'Safe', [dr(0,n,n)-1]), si('Ticket', npp-nam, 'Ticket', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(seule, adv-adv, seul, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(constitutionnelle, adj-adj, constitutionnel, [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(suspendre, vinf-ver:infi, suspendre, [dr(0,dl(0,np,s_inf),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passe, nc-nom, passe, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1773, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(bilan, nc-nom, bilan, [n-1]), si(établi, vpp-ver:pper, établir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Santé', nc-nam, 'Santé', [dr(0,np,np)-1]), si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), si('France', npp-nam, 'France', [np-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(état, nc-nom, état, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('120.832', det-num, '120.832', [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('France', npp-nam, 'France', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1774, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si('Santé', nc-nam, 'Santé', [dr(0,np,np)-1]), si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), si('France', npp-nam, 'France', [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('55.000', det-num, '55.000', [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('COVID', npp-abr, 'COVID', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1775, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(bilan, nc-nom, bilan, [n-1]), si(établi, vpp-ver:pper, établir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Santé', nc-nam, 'Santé', [dr(0,np,np)-1]), si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), si('France', npp-nam, 'France', [np-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(état, nc-nom, état, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('120.832', det-num, '120.832', [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('France', npp-nam, 'France', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1776, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si('Santé', npp-nam, 'Santé', [dr(0,np,np)-1]), si('Publique', adj-adj, 'Publique', [dr(0,np,np)-1]), si('France', npp-nam, 'France', [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('55.000', det-num, '55.000', [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('COVID', npp-abr, 'COVID', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1777, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Centre', npp-nam, 'Centre', [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(référence, nc-nom, référence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AVC', nc-abr, 'AVC', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enfant, nc-nom, enfant, [n-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(constaté, vpp-ver:pper, constater, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nombre, nc-nom, nombre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('AVC', nc-abr, 'AVC', [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(adultes, nc-nom, adulte, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(adolescents, nc-nom, adolescent, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1778, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Centre', npp-nam, 'Centre', [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(référence, nc-nom, référence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AVC', nc-abr, 'AVC', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enfant, nc-nom, enfant, [n-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(constaté, vpp-ver:pper, constater, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(baisse, nc-nom, baisse, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nombre, nc-nom, nombre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('AVC', nc-abr, 'AVC', [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(adultes, nc-nom, adulte, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(adolescents, nc-nom, adolescent, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1779, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(injectent, v-ver:pres, injecter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(lames, nc-nom, lame, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rasoir, nc-nom, rasoir, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(flux, nc-nom, flux, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chimiste, nc-nom, chimiste, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avance, v-ver:pres, avancer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(phénomène, nc-nom, phénomène, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(dû, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hydroxyde, nc-nom, hydroxyde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(graphène, nc-nom, graphène, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1780, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(contiennent, v-ver:pres, contenir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(graphène, nc-nom, graphène, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(dérivés, vpp-ver:pper, dérivé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1781, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(molécule, nc-nom, molécule, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hydrocarbure, nc-nom, hydrocarbure, [n-1]), si(aromatique, adj-adj, aromatique, [dl(0,n,n)-1]), si(polycyclique, adj-adj, polycyclique, [dl(0,n,n)-1]), si(dessinée, vpp-ver:pper, dessiner, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Andreas', npp-nam, 'Andreas', [dr(0,np,np)-1]), si('Noack', npp-nam, 'Noack', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(insoluble, adj-adj, insoluble, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(milieu, nc-nom, milieu, [n-1]), si(aqueux, adj-adj, aqueux, [dl(0,n,n)-1]), si(tel, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cellules, nc-nom, cellule, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(corps, nc-nom, corps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1782, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydrocarbure, nc-nom, hydrocarbure, [n-1]), si(aromatique, adj-adj, aromatique, [dl(0,n,n)-1]), si(polycyclique, adj-adj, polycyclique, [dl(0,n,n)-1]), si(circule, v-ver:pres, circuler, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(milieu, nc-nom, milieu, [n-1]), si(aqueux, adj-adj, aqueux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(donc, adv-adv, donc, [dr(0,pp,pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1783, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(présidente, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(exprimée, vpp-ver:pper, exprimer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(mercredi, nc-nom, mercredi, [dr(0,n,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(évoquer, vinf-ver:infi, évoquer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1784, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(présidente, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(appel, nc-nom, appel, [np-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1785, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(consiste, v-ver:pres, consister, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bonnes, adj-adj, bon, [dr(0,n,n)-1]), si(pratiques, nc-nom, pratique, [n-1]), si(médicales, adj-adj, médical, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(valeur, nc-nom, valeur, [n-1]), si(légale, adj-adj, légal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1786, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(contient, v-ver:pres, contenir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mauvaises, adj-adj, mauvais, [dr(0,n,n)-1]), si(pratiques, nc-nom, pratique, [n-1]), si(médicales, adj-adj, médical, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(éviter, vinf-ver:infi, éviter, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1787, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(principes, nc-nom, principe, [n-1]), si(éthiques, adj-adj, éthique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expérimentation, nc-nom, expérimentation, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(créée, vpp-ver:pper, créer, [dr(0,dl(0,n,n),pp)-1]), si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(procès, nc-nom, procès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1788, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1789, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(principes, nc-nom, principe, [n-1]), si(éthiques, adj-adj, éthique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expérimentation, nc-nom, expérimentation, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(créée, vpp-ver:pper, créer, [dr(0,dl(0,n,n),pp)-1]), si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(procès, nc-nom, procès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1790, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(mais, cc-kon, mais, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1791, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(principes, nc-nom, principe, [n-1]), si(éthiques, adj-adj, éthique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expérimentation, nc-nom, expérimentation, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(créée, vpp-ver:pper, créer, [dr(0,dl(0,n,n),pp)-1]), si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(procès, nc-nom, procès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1792, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1793, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(principes, nc-nom, principe, [n-1]), si(éthiques, adj-adj, éthique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expérimentation, nc-nom, expérimentation, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(créée, vpp-ver:pper, créer, [dr(0,dl(0,n,n),pp)-1]), si(suite, nc-nom, suite, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(procès, nc-nom, procès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1794, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1795, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(valeur, nc-nom, valeur, [n-1]), si(légale, adj-adj, légal, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(suppression, nc-nom, suppression, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(potentielle, adj-adj, potentiel, [dr(0,n,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1796, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(potentielle, adj-adj, potentiel, [dr(0,n,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1797, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(soignants, nc-nom, soignant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('CHU', npp-abr, 'CHU', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(démentent, v-ver:pres, démentir, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(existence, nc-nom, existence, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(cacher, vinf-ver:infi, cacher, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(admis, vpp-ver:pper, admettre, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1798, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(soignants, nc-nom, soignant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('CHU', npp-abr, 'CHU', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(cacher, vinf-ver:infi, cacher, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(admis, vpp-ver:pper, admettre, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1799, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décalé, vpp-ver:pper, décaler, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dates, nc-nom, date, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(péremption, nc-nom, péremption, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1800, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dates, nc-nom, date, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(péremption, nc-nom, péremption, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(changé, vpp-ver:pper, changer, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1801, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décalé, vpp-ver:pper, décaler, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dates, nc-nom, date, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(péremption, nc-nom, péremption, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(comme, cs-kon, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1802, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dates, nc-nom, date, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(péremption, nc-nom, péremption, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décalés, vpp-ver:pper, décaler, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1803, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(bas, adj-adj, bas, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(7, det-num, 7, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(vaccinée, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1804, Result) :-
      prob_parse([ si('Pourtant', adv-adv, 'Pourtant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(continent, nc-nom, continent, [n-1]), si(semble, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(apparemment, adv-adv, apparemment, [dl(1,s,s)-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,np,s))-1]), si(durement, adv-adv, durement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(frappé, vpp-ver:pper, frapper, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Asie', npp-nam, 'Asie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1805, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(égal, adj-adj, égal, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('7%.', nc-abr, '7%.', [dr(0,np,n)-1])], Result).
sent(1806, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(bas, adj-adj, bas, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(7, det-num, 7, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(vaccinée, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(début, nc-nom, début, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1807, Result) :-
      prob_parse([ si('Pourtant', adv-adv, 'Pourtant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(continent, nc-nom, continent, [n-1]), si(semble, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(apparemment, adv-adv, apparemment, [dl(1,s,s)-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,np,s))-1]), si(durement, adv-adv, durement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(frappé, vpp-ver:pper, frapper, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Asie', npp-nam, 'Asie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1808, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Asie', npp-nam, 'Asie', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,np,s))-1]), si(durement, adv-adv, durement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(frappées, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1809, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(tirer, vinf-ver:infi, tirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(causalité, nc-nom, causalité, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si(faible, adj-adj, faible, [dr(0,n,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1810, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(tirer, vinf-ver:infi, tirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(lien, nc-nom, lien, [n-1]), si(causal, adj-adj, causal, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moindre, adj-adj, moindre, [dr(0,n,n)-1]), si(prévalence, nc-nom, prévalence, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(continent, nc-nom, continent, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1811, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ouvert, vpp-ver:pper, ouvrir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voie, nc-nom, voie, [n-1]), si(courant, adj-adj, courant, [dr(0,dl(1,s,s),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('5-11', adj-num, '5-11', [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si(risquant, vpr-ver:ppre, risquer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1812, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('5-11', adj-num, '5-11', [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si(risquant, vpr-ver:ppre, risquer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pouvaient, v-ver:impf, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(vacciner, vinf-ver:infi, vacciner, [dr(0,dl(0,np,s_inf),np)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1813, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Israël', npp-nam, 'Israël', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cambodge', npp-nam, 'Cambodge', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Venezuela', npp-nam, 'Venezuela', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Cuba', npp-nam, 'Cuba', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(choix, nc-nom, choix, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1814, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cambodge', npp-nam, 'Cambodge', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(choisi, vpp-ver:pper, choisir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1815, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(constitueraient, v-ver:cond, constituer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(danger, nc-nom, danger, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(tueraient, v-ver:impf, tuer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(permettant, vpr-ver:ppre, permettre, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(multiplier, vinf-ver:infi, multiplier, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(empoisonner, vinf-ver:infi, empoisonner, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(lentement, adv-adv, lentement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1816, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(empoisonner, vinf-ver:infi, empoisonner, [dr(0,dl(0,np,s_inf),np)-1]), si(lentement, adv-adv, lentement, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1817, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARNm', nc-abr, 'ARNm', [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(contiennent, v-ver:pres, contenir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(transmettent, v-ver:pres, transmettre, [dr(0,dl(0,np,s),np)-1]), si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mode, nc-nom, mode, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(emploi, nc-nom, emploi, [n-1]), si(génétique, adj-adj, génétique, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(puisse, vs-ver:subp, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(construite, vpp-ver:pper, construire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1818, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(trouve, v-ver:pres, trouver, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARNm', nc-abr, 'ARNm', [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1819, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('SARS-CoV-2', npp-nam, 'SARS-CoV-2', [n-1]), si(codée, vpp-ver:pper, coder, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARNm', nc-nom, 'ARNm', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ressemble, v-ver:pres, ressembler, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(protéines, nc-nom, protéine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(contient, v-ver:pres, contenir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1820, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(parties, nc-nom, party, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(retrouvent, v-ver:pres, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('SARS-CoV-2', npp-nam, 'SARS-CoV-2', [n-1]), si(codée, vpp-ver:pper, coder, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('ARNm', nc-abr, 'ARNm', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1821, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(puisse, vs-ver:subp, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(endommager, vinf-ver:infi, endommager, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cellules, nc-nom, cellule, [n-1]), si(endothéliales, adj-adj, endothélial, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaisseaux, nc-nom, vaisseau, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(faudrait, v-ver:cond, falloir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(quantité, nc-nom, quantité, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(flux, nc-nom, flux, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1822, Result) :-
      prob_parse([ si('Or', cc-kon, 'Or', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), si(présente, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(quantité, nc-nom, quantité, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(flux, nc-nom, flux, [n-1]), si(sanguin, adj-adj, sanguin, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1823, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(injection, nc-nom, injection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(endommager, vinf-ver:infi, endommager, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cellules, nc-nom, cellule, [n-1]), si(endothéliales, adj-adj, endothélial, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaisseaux, nc-nom, vaisseau, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1824, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(circule, v-ver:pres, circuler, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(détruit, v-ver:pres, détruire, [dr(0,dl(0,np,s),np)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(vaisseaux, nc-nom, vaisseau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1825, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(protéines, nc-nom, protéine, [n-1]), si('Spike', npp-nam, 'Spike', [dl(0,n,n)-1]), si(détruisent, v-ver:pres, détruire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parois, nc-nom, paroi, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaisseaux, nc-nom, vaisseau, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(circulant, vpr-ver:ppre, circuler, [dl(0,np,s_ppres)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1826, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(probabilité, nc-nom, probabilité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réaction, nc-nom, réaction, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(due, vpp-ver:pper, devoir, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(développée, vpp-ver:pper, développer, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(corps, nc-nom, corps, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(extraordinairement, adv-adv, extraordinairement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(faible, adj-adj, faible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1827, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(probabilité, nc-nom, probabilité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réaction, nc-nom, réaction, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(due, vpp-ver:pper, devoir, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(développée, vpp-ver:pper, développer, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(protéine, nc-nom, protéine, [n-1]), si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(corps, nc-nom, corps, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(élevée, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1828, Result) :-
      prob_parse([ si('Qu\'', cs-kon, 'Qu\'', [dr(0,np,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(génère, v-ver:pres, générer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('auto-immune', adj-adj, 'auto-immune', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(par, p-prp, par, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), si(nature, nc-nom, nature, [n-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1829, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(génère, v-ver:pres, générer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('auto-immune', adj-adj, 'auto-immune', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1830, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(variant, nc-nom, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(données, nc-nom, donnée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(référence, nc-nom, référence, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cinéma, nc-nom, cinéma, [n-1]), si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), si('IMDb', adj-abr, 'IMDb', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1831, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si('IMDb', npp-abr, 'IMDb', [np-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(intitulé, vpp-ver:pper, intituler, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(variant, nc-nom, variant, [n-1]), si('Omicron', npp-nam, 'Omicron', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(sorti, vpp-ver:pper, sortir, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1963, pro-num, 1963, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1832, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approche, nc-nom, approche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tend, v-ver:pres, tendre, [dl(0,cl_r,dl(0,np,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si(',', ponct-pun, ',', [let-1]), si(celle, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(aggravée, vpp-ver:pper, aggraver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(force, v-ver:pres, forcer, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(extraordinaires, adj-adj, extraordinaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(report, nc-nom, report, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(soins, nc-nom, soin, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(urgents, adj-adj, urgent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1833, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(subissent, v-ver:pres, subir, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(général, nc-nom, général, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(tension, nc-nom, tension, [n-1]), si(saisonnière, adj-adj, saisonnier, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approche, nc-nom, approche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1834, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approche, nc-nom, approche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tend, v-ver:pres, tendre, [dl(0,cl_r,dl(0,np,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si(',', ponct-pun, ',', [let-1]), si(celle, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(aggravée, vpp-ver:pper, aggraver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(force, v-ver:pres, forcer, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(extraordinaires, adj-adj, extraordinaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(report, nc-nom, report, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(soins, nc-nom, soin, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(urgents, adj-adj, urgent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1835, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si(subissent, v-ver:pres, subir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(tension, nc-nom, tension, [n-1]), si(saisonnière, adj-adj, saisonnier, [dl(0,n,n)-1]), si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(aggravée, vpp-ver:pper, aggraver, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1836, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approche, nc-nom, approche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tend, v-ver:pres, tendre, [dl(0,cl_r,dl(0,np,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si(',', ponct-pun, ',', [let-1]), si(celle, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(aggravée, vpp-ver:pper, aggraver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(force, v-ver:pres, forcer, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(extraordinaires, adj-adj, extraordinaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(report, nc-nom, report, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(soins, nc-nom, soin, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(urgents, adj-adj, urgent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1837, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reporté, vpp-ver:pper, reporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soins, nc-nom, soin, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(urgents, adj-adj, urgent, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1838, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('IRM', nc-abr, 'IRM', [n-1]), si(cérébrales, adj-adj, cérébral, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(similaires, adj-adj, similaire, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cerveau, nc-nom, cerveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(affirmé, vpp-ver:pper, affirmer, [dl(1,s,dl(0,np,s_ppart))-1]), si('Gilbert', npp-nam, 'Gilbert', [dr(0,np,np)-1]), si('Deray', npp-nam, 'Deray', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(néphrologie, nc-nom, néphrologie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(parisien, adj-adj, parisien, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plateau, nc-nom, plateau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('C', nc-abr, 'C', [np-1]), si(à, p-prp, à, [np-1]), si(vous, pro-pro:per, vous, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(23, adj-num, 23, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1839, Result) :-
      prob_parse([ si('Gilbert', npp-nam, 'Gilbert', [dr(0,np,np)-1]), si('Deray', npp-nam, 'Deray', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(cardiologue, nc-nom, cardiologue, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(parisien, adj-adj, parisien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1840, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('IRM', nc-abr, 'IRM', [n-1]), si(cérébrales, adj-adj, cérébral, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(comparés, vpp-ver:pper, comparer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cerveau, nc-nom, cerveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1841, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('IRM', nc-abr, 'IRM', [n-1]), si(cérébrales, adj-adj, cérébral, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(similaires, adj-adj, similaire, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cerveau, nc-nom, cerveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1842, Result) :-
      prob_parse([ si('Ángel', npp-nam, 'Ángel', [dr(0,np,np)-1]), si('Cuevas', npp-nam, 'Cuevas', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(prêtre, nc-nom, prêtre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si('Notre-Dame', npp-nam, 'Notre-Dame', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Guadalupe', npp-nam, 'Guadalupe', [np-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(évanoui, vpp-ver:pper, évanouir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(messe, nc-nom, messe, [n-1]), si(et, cc-kon, et, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(décédé, vpp-ver:pper, décéder, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,np,s_ppart)-1])], Result).
sent(1843, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('Ángel', npp-nam, 'Ángel', [dl(0,n,n)-1]), si('Cuevas', npp-nam, 'Cuevas', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vivant, adj-adj, vivant, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(rencontrer, vinf-ver:infi, rencontrer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(évanouissement, nc-nom, évanouissement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1844, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('Ángel', npp-nam, 'Ángel', [dl(0,n,n)-1]), si('Cuevas', npp-nam, 'Cuevas', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(évanouissement, nc-nom, évanouissement, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(conséquence, nc-nom, conséquence, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1845, Result) :-
      prob_parse([ si('Ángel', npp-nam, 'Ángel', [dr(0,np,np)-1]), si('Cuevas', npp-nam, 'Cuevas', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(évanoui, vpp-ver:pper, évanouir, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(messe, nc-nom, messe, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1846, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si(rattachée, vpp-ver:pper, rattacher, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Fifa', npp-abr, 'Fifa', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(recense, v-ver:pres, recenser, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(malaises, nc-nom, malaise, [n-1]), si(cardiaques, adj-adj, cardiaque, [dl(0,n,n)-1]), si(mortels, adj-adj, mortel, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(football, nc-nom, football, [n-1]), si(dit, v-ver:pres, dire, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(derniers, nc-nom, dernier, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(resté, vpp-ver:pper, rester, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(stable, adj-adj, stable, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(années, nc-nom, année, [n-1]), si(précédentes, adj-adj, précédent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1847, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(malaises, nc-nom, malaise, [n-1]), si(cardiaques, adj-adj, cardiaque, [dl(0,n,n)-1]), si(mortels, adj-adj, mortel, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(football, nc-nom, football, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(multiplié, vpp-ver:pper, multiplier, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(5, pro-num, 5, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(années, nc-nom, année, [n-1]), si(précédentes, adj-adj, précédent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1848, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(capables, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(grandir, vinf-ver:infi, grandir, [dl(0,np,s_inf)-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(observables, adj-adj, observable, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(microscope, nc-nom, microscope, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Youtubeur', nc-nom, 'Youtubeur', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(géologue, nc-nom, géologue, [n-1]), si('Dr', nc-abr, 'Dr', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1849, Result) :-
      prob_parse([ si('Franc', npp-nam, 'Franc', [dr(0,np,np)-1]), si('Zalewski', npp-nam, 'Zalewski', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1850, Result) :-
      prob_parse([ si('Franc', npp-nam, 'Franc', [dr(0,np,np)-1]), si('Zalewski', npp-nam, 'Zalewski', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(doctorat, nc-nom, doctorat, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(géologie, nc-nom, géologie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Silésie', nc-nam, 'Silésie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1851, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(fourni, vpp-ver:pper, fournir, [dl(0,np,s_pass)-1]), si(aussi, adv-adv, aussi, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(distribution, nc-nom, distribution, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(étroitement, adv-adv, étroitement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(surveillée, vpp-ver:pper, surveiller, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1852, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(facile, adj-adj, facile, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(procurer, vinf-ver:infi, procurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1853, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(défiance, nc-nom, défiance, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(nourrie, vpp-ver:pper, nourrir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(désinformation, nc-nom, désinformation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1854, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(défiance, nc-nom, défiance, [n-1]), si(vaccinale, adj-adj, vaccinal, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(alimentée, vpp-ver:pper, alimenter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(désinformation, nc-nom, désinformation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1855, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Suisse', npp-nam, 'Suisse', [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(hospitalisé, vpp-ver:pper, hospitaliser, [dl(0,np,s_pass)-1]), si('mi-novembre', nc-nom, 'mi-novembre', [dl(1,s,s)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intoxication, nc-nom, intoxication, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1856, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(intoxiqué, vpp-ver:pper, intoxiquer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Suisse', npp-nam, 'Suisse', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si('mi-novembre', nc-nom, 'mi-novembre', [dl(1,s,s)-1]), si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(hospitalisé, vpp-ver:pper, hospitaliser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1857, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(blogs, nc-nom, blog, [n-1]), si(recommandant, vpr-ver:ppre, recommander, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ingestion, nc-nom, ingestion, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(argent, nc-nom, argent, [n-1]), si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bactéries, nc-nom, bactérie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(soigner, vinf-ver:infi, soigner, [dr(0,dl(0,np,s_inf),np)-1]), si(divers, adj-adj, divers, [dr(0,np,n)-1]), si(maux, nc-nom, mal, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(fausses, adj-adj, faux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(pratique, nc-nom, pratique, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(fortement, adv-adv, fortement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(déconseillé, vpp-ver:pper, déconseiller, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1858, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ingestion, nc-nom, ingestion, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(argent, nc-nom, argent, [n-1]), si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(recommandée, vpp-ver:pper, recommander, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1859, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(usage, nc-nom, usage, [n-1]), si(externe, adj-adj, externe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ingéré, vpp-ver:pper, ingérer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(pratique, nc-nom, pratique, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [cl_r-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(avère, v-ver:pres, avérer, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,n,n))-1]), si(dangereuse, adj-adj, dangereux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1860, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(pratique, nc-nom, pratique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ingestion, nc-nom, ingestion, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(argent, nc-nom, argent, [n-1]), si(colloïdal, adj-adj, colloïdal, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1861, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(visite, nc-nom, visite, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('PDG', nc-abr, 'PDG', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si('Albert', npp-nam, 'Albert', [dr(0,np,np)-1]), si('Bourla', npp-nam, 'Bourla', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(définitivement, adv-adv, définitivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(annulée, vpp-ver:pper, annuler, [dl(0,np,s_pass)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1862, Result) :-
      prob_parse([ si('Albert', npp-nam, 'Albert', [dr(0,np,np)-1]), si('Bourla', npp-nam, 'Bourla', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(jours, nc-nom, jour, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(visite, nc-nom, visite, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(seconde, adj-num, second, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('Pfizer', npp-nam, 'Pfizer', [dl(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('BioNTech', npp-nam, 'BioNTech', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1863, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(2022, adj-num, 2022, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1864, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vote, nc-nom, vote, [n-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(2022, adj-num, 2022, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(définitive, adj-adj, définitif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1865, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vote, nc-nom, vote, [n-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(2022, adj-num, 2022, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(plans, nc-nom, plan, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1866, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(2022, adj-num, 2022, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1867, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1868, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1869, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vacciné, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1870, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(rage, nc-nom, rage, [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2022, pro-num, 2022, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1871, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mortalité, nc-nom, mortalité, [n-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(chez, p-prp, chez, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(chez, p-prp, chez, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinées, nc-nom, vacciner, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1872, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(chez, p-prp, chez, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(chez, p-prp, chez, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1873, Result) :-
      prob_parse([ si('Être', vinf-ver:infi, 'Être', [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(vacciné, adj-adj, vacciner, [dl(0,np,s_pass)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(transmettre, vinf-ver:infi, transmettre, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1874, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(portent, v-ver:pres, porter, [dr(0,dl(0,np,s),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(transmettent, v-ver:pres, transmettre, [dr(0,dl(0,np,s),np)-1]), si(autant, adv-adv, autant, [dr(0,np,pp_de)-1]), si(',', ponct-pun, ',', [let-1]), si(voire, cc-kon, voire, [dr(0,dl(0,dr(0,s,dia(0,box(0,np))),dr(0,s,np)),dr(0,s,dia(0,box(0,np))))-1]), si(plus, adv-adv, plus, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1875, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),dr(0,dl(0,n,n),dl(0,n,n)))-1]), si(autant, adv-adv, autant, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(',', ponct-pun, ',', [let-1]), si(voire, cc-kon, voire, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(contagieux, adj-adj, contagieux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinés', nc-nom, 'non-vaccinés', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1876, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccinés, nc-nom, vacciné, [n-1]), si(portent, v-ver:pres, porter, [dr(0,dl(0,np,s),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(transmettent, v-ver:pres, transmettre, [dr(0,dl(0,np,s),np)-1]), si(autant, adv-adv, autant, [dr(0,dr(0,np,s_q),np)-1]), si(',', ponct-pun, ',', [let-1]), si(voire, cc-kon, voire, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(virus, nc-nom, virus, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1877, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(recommande, v-ver:pres, recommander, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('COVID-19', nc-abr, 'COVID-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1878, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(recommandation, nc-nom, recommandation, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(auxquels, p+pro-pro:rel, auxquels, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(participé, vpp-ver:pper, participer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('10.000', det-num, '10.000', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('COVID-19', npp-abr, 'COVID-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1879, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dl(0,np,s_ppart),np)-1]), si(ni, cc-kon, ni, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mortalité, nc-nom, mortalité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ventilation, nc-nom, ventilation, [n-1]), si(artificielle, adj-adj, artificiel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(durée, nc-nom, durée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(ventilation, nc-nom, ventilation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1880, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mortalité, nc-nom, mortalité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('COVID-19', npp-abr, 'COVID-19', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(recommandée, vpp-ver:pper, recommander, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('COVID-19', npp-nam, 'COVID-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1881, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(recommande, v-ver:pres, recommander, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('COVID-19', nc-abr, 'COVID-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1882, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(recommandation, nc-nom, recommandation, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(auxquels, p+pro-pro:rel, auxquels, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(participé, vpp-ver:pper, participer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('10.000', det-num, '10.000', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('COVID-19', npp-abr, 'COVID-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1883, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dl(0,np,s_ppart),np)-1]), si(ni, cc-kon, ni, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mortalité, nc-nom, mortalité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ventilation, nc-nom, ventilation, [n-1]), si(artificielle, adj-adj, artificiel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(durée, nc-nom, durée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(ventilation, nc-nom, ventilation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1884, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réussi, vpp-ver:pper, réussir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mortalité, nc-nom, mortalité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('COVID-19', npp-nam, 'COVID-19', [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(essais, nc-nom, essai, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(recommandée, vpp-ver:pper, recommander, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMS', npp-abr, 'OMS', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('COVID-19', npp-abr, 'COVID-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1885, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(substance, nc-nom, substance, [n-1]), si(thérapeutique, adj-adj, thérapeutique, [dl(0,n,n)-1]), si(expérimentale, adj-adj, expérimental, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(totalement, adv-adv, totalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(interdit, vpp-ver:pper, interdire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(code, nc-nom, code, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nuremberg', npp-nam, 'Nuremberg', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1886, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(idée, nc-nom, idée, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(fausse, adj-adj, faux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1887, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(homologués, vpp-ver:pper, homologuer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(assimilés, vpp-ver:pper, assimiler, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(substances, nc-nom, substance, [n-1]), si(expérimentales, adj-adj, expérimental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1888, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(substance, nc-nom, substance, [n-1]), si(thérapeutique, adj-adj, thérapeutique, [dl(0,n,n)-1]), si(expérimentale, adj-adj, expérimental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1889, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(professeur, nc-nom, professeur, [n-1]), si('Christian', npp-nam, 'Christian', [dl(0,n,n)-1]), si('Perronne', npp-nam, 'Perronne', [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(infectieuses, adj-adj, infectieux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(tropicales, adj-adj, tropical, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('Raymond-Poincaré', npp-nam, 'Raymond-Poincaré', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Garches', npp-nam, 'Garches', [np-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(démis, vpp-ver:pper, démettre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(fonctions, nc-nom, fonction, [dr(0,np,n)-1]), si(par, p-prp, par, [n-1]), si(la, det-det:art, le, [dr(0,pp_par,np)-1]), si(direction, nc-nom, direction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assistance', nc-nam, 'Assistance', [n-1]), si('Publique', adj-adj, 'Publique', [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), si('Hôpitaux', nc-nam, 'Hôpitaux', [n-1]), si(de, p-prp, de, [n-1]), si('Paris', npp-nam, 'Paris', [dr(0,dl(0,n,n),np)-1]), si('(', ponct-pun, '(', [np-1]), si('AP-HP', npp-nam, 'AP-HP', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1890, Result) :-
      prob_parse([ si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Perronne', npp-nam, 'Perronne', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(infectieuses, adj-adj, infectieux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(tropicales, adj-adj, tropical, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('Raymond-Poincaré', npp-nam, 'Raymond-Poincaré', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Garches', npp-nam, 'Garches', [np-1]), si(en, p-prp, en, [np-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1891, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(actuels, adj-adj, actuel, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(vocation, nc-nom, vocation, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(éradiquer, vinf-ver:infi, éradiquer, [dr(0,dl(0,np,s_inf),np)-1]), si(totalement, adv-adv, totalement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(transmission, nc-nom, transmission, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(empêcher, vinf-ver:infi, empêcher, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(formes, nc-nom, forme, [n-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1892, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(actuels, adj-adj, actuel, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(éradiquer, vinf-ver:infi, éradiquer, [dr(0,dl(0,np,s_inf),np)-1]), si(complètement, adv-adv, complètement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1893, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(total, adj-adj, total, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si(liées, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(supérieur, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si(imputées, vpp-ver:pper, imputer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1894, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(davantage, adv-adv, davantage, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(morts, nc-nom, mort, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('elle-même', pro-pro:per, 'elle-même', [dl(0,np,np)-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1895, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(davantage, adv-adv, davantage, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(morts, nc-nom, mort, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('elle-même', pro-pro:per, 'elle-même', [dl(0,np,np)-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1896, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(morts, nc-nom, mort, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1897, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(autrichiennes, adj-adj, autrichien, [dl(0,n,n)-1]), si(participeront, v-ver:futu, participer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(confinement, nc-nom, confinement, [n-1]), si(prévue, vpp-ver:pper, prévoir, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Vienne', npp-nam, 'Vienne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1898, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(autrichiennes, adj-adj, autrichien, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Vienne', npp-nam, 'Vienne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1899, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(autrichiennes, adj-adj, autrichien, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(problème, nc-nom, problème, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1900, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(autrichiennes, adj-adj, autrichien, [dl(0,n,n)-1]), si(refusent, v-ver:pres, refuser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1901, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,n)-1]), si(institutions, nc-nom, institution, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(soutiennent, v-ver:pres, soutenir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(confinement, nc-nom, confinement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1902, Result) :-
      prob_parse([ si('Celle', pro-pro:dem, 'Celle', [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(soutenue, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(associations, nc-nom, association, [n-1]), si(privées, adj-adj, privé, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(représentant, vpr-ver:ppre, représenter, [dr(0,dl(0,n,n),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1903, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(associations, nc-nom, association, [n-1]), si(privées, adj-adj, privé, [dl(0,n,n)-1]), si(soutiennent, v-ver:pres, soutenir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(confinement, nc-nom, confinement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1904, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(arrêtée, vpp-ver:pper, arrêter, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(serait, v-ver:cond, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(nouveau, adj-adj, nouveau, [n-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), si(partout, adv-adv, partout, [dl(1,s,s)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vide, nc-nom, vide, [n-1]), si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1905, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(pouvait, v-ver:impf, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), si(partout, adv-adv, partout, [dl(1,s,s)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1906, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(arrêtée, vpp-ver:pper, arrêter, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(serait, v-ver:cond, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(nouveau, adj-adj, nouveau, [n-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), si(partout, adv-adv, partout, [dl(1,s,s)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vide, nc-nom, vide, [n-1]), si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1907, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(vide, nc-nom, vide, [n-1]), si(juridique, adj-adj, juridique, [dl(0,n,n)-1]), si(permetra, v-ver:futu, permetrer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), si(partout, adv-adv, partout, [dl(1,s,s)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1908, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vigilance, nc-nom, vigilance, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(adoptée, vpp-ver:pper, adopter, [dr(0,dl(0,n,n),pp_par)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(étendu, vpp-ver:pper, étendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échéance, nc-nom, échéance, [n-1]), si(initiale, adj-adj, initial, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prévue, vpp-ver:pper, prévoir, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1909, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(recourir, vinf-ver:infi, recourir, [dr(0,dl(0,np,s_inf),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2023, adj-num, 2023, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(adoption, nc-nom, adoption, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vigilance, nc-nom, vigilance, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1910, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(vrai, adj-adj, vrai, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(confinement, nc-nom, confinement, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sein, nc-nom, sein, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(descendre, vinf-ver:infi, descendre, [dl(0,np,s_inf)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Autrichiens', nc-nam, 'Autrichiens', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rue, nc-nom, rue, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rassemblement, nc-nom, rassemblement, [n-1]), si(filmé, vpp-ver:pper, filmer, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(relayé, vpp-ver:pper, relayer, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(supporters, nc-nom, supporter, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si(défilant, vpr-ver:ppre, défiler, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Graz', npp-nam, 'Graz', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(match, nc-nom, match, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1911, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(supporters, nc-nom, supporter, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(défilé, vpp-ver:pper, défiler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Graz', npp-nam, 'Graz', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(confinement, nc-nom, confinement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1912, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si(administrative, adj-adj, administratif, [dl(0,n,n)-1]), si(rattachée, vpp-ver:pper, rattacher, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(ministères, nc-nom, ministère, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(admis, vpp-ver:pper, admettre, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(constitué, vpp-ver:pper, constituer, [dr(0,dl(0,np,s_ppart),np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(totales, adj-adj, total, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1913, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(tient, v-ver:pres, tenir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(compte, nc-nom, compte, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(disparité, nc-nom, disparité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(répartition, nc-nom, répartition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hospitalisation, nc-nom, hospitalisation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1914, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(agence, nc-nom, agence, [n-1]), si(administrative, adj-adj, administratif, [dl(0,n,n)-1]), si(rattachée, vpp-ver:pper, rattacher, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(ministères, nc-nom, ministère, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(admis, vpp-ver:pper, admettre, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(constitué, vpp-ver:pper, constituer, [dr(0,dl(0,np,s_ppart),np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(totales, adj-adj, total, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1915, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(admis, vpp-ver:pper, admettre, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('Covid', npp-nam, 'Covid', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(constitué, vpp-ver:pper, constituer, [dr(0,dl(0,np,s_ppart),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hospitalisations, nc-nom, hospitalisation, [n-1]), si(totales, adj-adj, total, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2020, pro-num, 2020, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1916, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(commander, vinf-ver:infi, commander, [dr(0,dl(0,np,s_inf),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(azithromycine, nc-nom, azithromycine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(sur, p-prp, sur, [np-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),np)-1]), si(île, nc-nom, île, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1917, Result) :-
      prob_parse([ si('Toutefois', adv-adv, 'Toutefois', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(invalidée, vpp-ver:pper, invalider, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nam, 'État', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1918, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(ordonner, vinf-ver:infi, ordonner, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(commander, vinf-ver:infi, commander, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(azithromycine, nc-nom, azithromycine, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(a, v-ver:pres, avoir, [np-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvée, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si('d\'', p-prp, 'd\'', [n-1]), si('État', nc-nam, 'État', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1919, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(commander, vinf-ver:infi, commander, [dr(0,dl(0,np,s_inf),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(azithromycine, nc-nom, azithromycine, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si(sur, p-prp, sur, [np-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),np)-1]), si(île, nc-nom, île, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1920, Result) :-
      prob_parse([ si('Toutefois', adv-adv, 'Toutefois', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(invalidée, vpp-ver:pper, invalider, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nam, 'État', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1921, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nam, 'État', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(invalidé, vpp-ver:pper, invalider, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(donc, adv-adv, donc, [dr(0,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(commander, vinf-ver:infi, commander, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(azithromycine, nc-nom, azithromycine, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covid-19', npp-nam, 'Covid-19', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1922, Result) :-
      prob_parse([ si('Interrogée', vpp-ver:pper, 'Interrogée', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Autorité', nc-nam, 'Autorité', [n-1]), si(régionale, adj-adj, régional, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('ARS', npp-abr, 'ARS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(déplore, v-ver:pres, déplorer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fausse, adj-adj, faux, [dr(0,n,n)-1]), si(information, nc-nom, information, [n-1]), si(circulant, vpr-ver:ppre, circuler, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(précise, v-ver:pres, préciser, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), si(elle, pro-pro:per, lui, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(passe, v-ver:pres, passer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1923, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fausse, adj-adj, faux, [dr(0,n,n)-1]), si(information, nc-nom, information, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Autorité', nc-nam, 'Autorité', [n-1]), si(régionale, adj-adj, régional, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('ARS', npp-abr, 'ARS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Guadeloupe', npp-nam, 'Guadeloupe', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(passe, v-ver:pres, passer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1924, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(grève, nc-nom, grève, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(récente, adj-adj, récent, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1925, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(grève, nc-nom, grève, [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,n,n),n)-1]), si(blocage, nc-nom, blocage, [n-1]), si(massifs, adj-adj, massif, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rapportés, vpp-ver:pper, rapporter, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1926, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(grève, nc-nom, grève, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(blocage, nc-nom, blocage, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(routes, nc-nom, route, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(villes, nc-nom, ville, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Justice', npp-nam, 'Justice', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démenti, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(plainte, nc-nom, plainte, [np-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(crime, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(trace, nc-nom, trace, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(absence, nc-nom, absence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(victime, nc-nom, victime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1927, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(grève, nc-nom, grève, [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,n,n),n)-1]), si(blocage, nc-nom, blocage, [n-1]), si(massifs, adj-adj, massif, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rapportés, vpp-ver:pper, rapporter, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1928, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(grève, nc-nom, grève, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(blocage, nc-nom, blocage, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(routes, nc-nom, route, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(villes, nc-nom, ville, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1929, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(médecin, nc-nom, médecin, [n-1]), si('Christian', npp-nam, 'Christian', [dl(0,n,n)-1]), si('Tal', npp-nam, 'Tal', [dl(0,n,n)-1]), si('Schaller', npp-nam, 'Schaller', [dl(0,n,n)-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(grève, nc-nom, grève, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(débuté, vpp-ver:pper, débuter, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(bloque, v-ver:pres, bloquer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(routes, nc-nom, route, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fermé, vpp-ver:pper, fermer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(villes, nc-nom, ville, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1930, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(trace, nc-nom, trace, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(absence, nc-nom, absence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(victime, nc-nom, victime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1931, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(vaccinales, adj-adj, vaccinal, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(injection, nc-nom, injection, [n-1]), si(',', ponct-pun, ',', [let-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(1,s,s),np)-1]), si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Tal', npp-nam, 'Tal', [dr(0,np,np)-1]), si('Schaller', npp-nam, 'Schaller', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1932, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pharmacovigilance, nc-nom, pharmacovigilance, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(relevait, v-ver:impf, relever, [dr(0,dl(0,np,s),np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(survenus, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(âgées, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(million, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rappel, nc-nom, rappel, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1933, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(décès, nc-nom, décès, [n-1]), si(',', ponct-pun, ',', [let-1]), si(quatre, pro-num, quatre, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(jugés, vpp-ver:pper, juger, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(liés, adj-adj, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, pro-num, un, [np-1]), si(faisait, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1934, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(relevé, vpp-ver:pper, relever, [dr(0,dl(0,np,s_ppart),np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(survenus, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(âgées, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tous, adv-adv, tout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(jugés, vpp-ver:pper, juger, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(liés, adj-adj, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1935, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pharmacovigilance, nc-nom, pharmacovigilance, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(relevait, v-ver:impf, relever, [dr(0,dl(0,np,s),np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(survenus, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(âgées, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(million, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rappel, nc-nom, rappel, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1936, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(décès, nc-nom, décès, [n-1]), si(',', ponct-pun, ',', [let-1]), si(quatre, pro-num, quatre, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(jugés, vpp-ver:pper, juger, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(liés, adj-adj, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, pro-num, un, [np-1]), si(faisait, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1937, Result) :-
      prob_parse([ si('Cinq', pro-num, 'Cinq', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(cinq, pro-num, cinq, [np-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,np,np),n)-1]), si(décès, nc-nom, décès, [n-1]), si(relevés, vpp-ver:pper, relever, [dr(0,dl(0,n,n),pp)-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(âgées, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(jugés, vpp-ver:pper, juger, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(liés, vpp-adj, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(document, nc-nom, document, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(semptembre, nc-nom, semptembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1938, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pharmacovigilance, nc-nom, pharmacovigilance, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(relevait, v-ver:impf, relever, [dr(0,dl(0,np,s),np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(survenus, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(âgées, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(million, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rappel, nc-nom, rappel, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1939, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(décès, nc-nom, décès, [n-1]), si(',', ponct-pun, ',', [let-1]), si(quatre, pro-num, quatre, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(jugés, vpp-ver:pper, juger, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, pro-num, un, [np-1]), si(faisait, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(document, nc-nom, document, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1940, Result) :-
      prob_parse([ si('Quatre', pro-num, 'Quatre', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(cinq, pro-num, cinq, [np-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,np,np),n)-1]), si(décès, nc-nom, décès, [n-1]), si(relevés, vpp-ver:pper, relever, [dr(0,dl(0,n,n),pp)-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(âgées, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(jugés, vpp-ver:pper, juger, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(document, nc-nom, document, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1941, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(trace, nc-nom, trace, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(absence, nc-nom, absence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(victime, nc-nom, victime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1942, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1943, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(décès, nc-nom, décès, [n-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1944, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(vaccinales, adj-adj, vaccinal, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(injection, nc-nom, injection, [n-1]), si(',', ponct-pun, ',', [let-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(1,s,s),np)-1]), si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Tal', npp-nam, 'Tal', [dr(0,np,np)-1]), si('Schaller', npp-nam, 'Schaller', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1945, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Justice', nc-nam, 'Justice', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démenti, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(plainte, nc-nom, plainte, [np-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(crime, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1946, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(plainte, nc-nom, plainte, [np-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(déclare, v-ver:pres, déclarer, [dr(0,dl(1,s,s),np)-1]), si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Tal', npp-nam, 'Tal', [dr(0,np,np)-1]), si('Schaller', npp-nam, 'Schaller', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1947, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Justice', nc-nom, 'Justice', [n-1]), si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démenti, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(plainte, nc-nom, plainte, [np-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(crime, nc-nom, crime, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(trace, nc-nom, trace, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(absence, nc-nom, absence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(victime, nc-nom, victime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1948, Result) :-
      prob_parse([ si('Christian', npp-nam, 'Christian', [dr(0,np,np)-1]), si('Tal', npp-nam, 'Tal', [dr(0,np,np)-1]), si('Schaller', npp-nam, 'Schaller', [np-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(porté, vpp-ver:pper, porter, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(plainte, nc-nom, plainte, [np-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nom, 'Santé', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(victimes, nc-nom, victime, [n-1]), si(vaccinales, adj-adj, vaccinal, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(injection, nc-nom, injection, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1949, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('non-vaccinées', vpp-ver:pper, 'non-vaccinées', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(dangereuses, adj-adj, dangereux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinées, nc-nom, vacciné, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(placées, vpp-ver:pper, placer, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(quarantaine, nc-nom, quarantaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1950, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereuses, adj-adj, dangereux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(placées, vpp-ver:pper, placer, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(quarantaine, nc-nom, quarantaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1951, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('non-vaccinées', vpp-ver:pper, 'non-vaccinées', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(dangereuses, adj-adj, dangereux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccinées, nc-nom, vacciné, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(placées, vpp-ver:pper, placer, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(quarantaine, nc-nom, quarantaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1952, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('non-vaccinées', vpp-ver:pper, 'non-vaccinées', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereuses, adj-adj, dangereux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(placées, vpp-ver:pper, placer, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(quarantaine, nc-nom, quarantaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1953, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Radio-Canada', npp-nam, 'Radio-Canada', [np-1]), si(parlait, v-ver:impf, parler, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(circulation, nc-nom, circulation, [n-1]), si(précoce, adj-adj, précoce, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(respiratoires, adj-adj, respiratoire, [dl(0,n,n)-1]), si(saisonniers, adj-adj, saisonnier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1954, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(reportage, nc-nom, reportage, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Radio-Canada', npp-nam, 'Radio-Canada', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(parlait, v-ver:impf, parler, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1955, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(indemnisation, nc-nom, indemnisation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(victimes, nc-nom, victime, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déposée, vpp-ver:pper, déposer, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(23, adj-num, 23, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(initiative, nc-nom, initiative, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(seule, adj-adj, seul, [dr(0,n,n)-1]), si(eurodéputée, nc-nom, eurodéputée, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1956, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(proposé, vpp-ver:pper, proposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(indemnisation, nc-nom, indemnisation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(victimes, nc-nom, victime, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', nc-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1957, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(indemnisation, nc-nom, indemnisation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(victimes, nc-nom, victime, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déposée, vpp-ver:pper, déposer, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(23, adj-num, 23, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(initiative, nc-nom, initiative, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(seule, adj-adj, seul, [dr(0,n,n)-1]), si(eurodéputée, nc-nom, eurodéputée, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('Virginie', npp-nam, 'Virginie', [dl(0,n,n)-1]), si('Joron', npp-nam, 'Joron', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Rassemblement', nc-nam, 'Rassemblement', [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1958, Result) :-
      prob_parse([ si('Virginie', npp-nam, 'Virginie', [dr(0,np,np)-1]), si('Joron', npp-nam, 'Joron', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(élue, vpp-ver:pper, élire, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Rassemblement', nc-nam, 'Rassemblement', [n-1]), si(naitonal, adj-adj, naitonal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1959, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(proposé, vpp-ver:pper, proposer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(eurodéputé, nc-nom, eurodéputé, [n-1]), si(jugé, vpp-ver:pper, juger, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(recevable, adj-adj, recevable, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(publié, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(internet, adj-adj, internet, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(autant, adv-adv, autant, [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1960, Result) :-
      prob_parse([ si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(publié, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(internet, nc-nom, internet, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(cela, pro-pro:dem, celer, [np-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1961, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(données, nc-nom, donnée, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('Eudravigilance', npp-nam, 'Eudravigilance', [dl(0,n,n)-1]), si(recense, v-ver:pres, recenser, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(signalés, vpp-ver:pper, signaler, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(nécessairement, adv-adv, nécessairement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1962, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(données, nc-nom, donnée, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('Eudravigilance', npp-nam, 'Eudravigilance', [dl(0,n,n)-1]), si(recense, v-ver:pres, recenser, [dr(0,dl(0,np,s),np)-1]), si(seulement, adv-adv, seulement, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(survenus, vpp-ver:pper, survenir, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1963, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(données, nc-nom, donnée, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('Eudravigilance', npp-nam, 'Eudravigilance', [dl(0,n,n)-1]), si(recense, v-ver:pres, recenser, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(signalés, vpp-ver:pper, signaler, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(nécessairement, adv-adv, nécessairement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1964, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(signalés, vpp-ver:pper, signaler, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Eudravigilance', npp-nam, 'Eudravigilance', [np-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(éventuellement, adv-adv, éventuellement, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1965, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grèves, nc-nom, grève, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mobilisé, vpp-ver:pper, mobiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(personnel, nc-nom, personnel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(200, det-num, 200, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgences, nc-nom, urgence, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1966, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(207, det-num, 207, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(grève, nc-nom, grève, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1967, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(prescrire, vinf-ver:infi, prescrire, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1968, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(continue, v-ver:pres, continuer, [dl(0,np,s)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1969, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(thérapeutiques, adj-adj, thérapeutique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(menés, vpp-ver:pper, mener, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(figure, v-ver:pres, figurer, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(traitements, nc-nom, traitement, [n-1]), si(approuvés, vpp-ver:pper, approuver, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1970, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(thérapeutiques, adj-adj, thérapeutique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cours, nc-nom, cours, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivermectine, nc-nom, ivermectine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1971, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(cancer, nc-nom, cancer, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pouvant, vpr-ver:ppre, pouvoir, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(soigner, vinf-ver:infi, soigner, [dr(0,dl(0,np,s_inf),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1972, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(besoins, nc-nom, besoin, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(restent, v-ver:pres, rester, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(gratuits, adj-adj, gratuit, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), si(ordonnance, nc-nom, ordonnance, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prescrits, vpp-ver:pper, prescrire, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(asymptomatiques, adj-adj, asymptomatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(allant, vpr-ver:ppre, aller, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soins, nc-nom, soin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1973, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),np)-1]), si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soins, nc-nom, soin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1974, Result) :-
      prob_parse([ si('Sans', p-prp, 'Sans', [dr(0,dr(0,s,s),n)-1]), si(test, nc-nom, test, [n-1]), si('PCR', nc-abr, 'PCR', [dl(0,n,n)-1]), si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soins, nc-nom, soin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(',', ponct-pun, ',', [let-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vacciné, adj-ver:pper, vacciner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1975, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vaccinés, vpp-ver:pper, vacciner, [dr(0,dl(0,n,n),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si(négatif, adj-adj, négatif, [dl(0,n,n)-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),np)-1]), si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soins, nc-nom, soin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1976, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si('PCR', nc-abr, 'PCR', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(remboursés, vpp-ver:pper, rembourser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assurance', nc-nam, 'Assurance', [n-1]), si(maladie, nc-nom, maladie, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(toutefois, adv-adv, toutefois, [dr(0,s,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(restent, v-ver:pres, rester, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(gratuits, adj-adj, gratuit, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), si(ordonnance, nc-nom, ordonnance, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prescrits, vpp-ver:pper, prescrire, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(asymptomatiques, adj-adj, asymptomatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(devant, vpr-ver:ppre, devoir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soins, nc-nom, soin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1977, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tests, nc-nom, test, [n-1]), si('PCR', nc-abr, 'PCR', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(remboursés, vpp-ver:pper, rembourser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assurance', nc-nam, 'Assurance', [n-1]), si(maladie, nc-nom, maladie, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(donc, adv-adv, donc, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,dr(0,n,s_q),n)-1]), si(choix, nc-nom, choix, [n-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(votre, det-det:pos, votre, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si('PCR', npp-abr, 'PCR', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(vous, cls-pro:per, vous, [np-1]), si(devez, v-ver:futu, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soins, nc-nom, soin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1978, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(venant, vpr-ver:ppre, venir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(accoucher, vinf-ver:infi, accoucher, [dl(0,np,s_inf)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(réaliser, vinf-ver:infi, réaliser, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(arrivée, nc-nom, arrivée, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lucerne', npp-nam, 'Lucerne', [np-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(de, p-prp, de, [dr(0,dr(0,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(façon, nc-nom, façon, [n-1]), si(',', ponct-pun, ',', [let-1]), si(elles, cls-pro:per, lui, [np-1]), si(pourront, v-ver:futu, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si('nouveaux-nés', nc-nom, 'nouveaux-nés', [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1979, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(venant, vpr-ver:ppre, venir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), si(accoucher, vinf-ver:infi, accoucher, [dl(0,np,s_inf)-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(sinon, cc-kon, sinon, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(admis, vpp-ver:pper, admettre, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lucerne', npp-nam, 'Lucerne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1980, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(visiteurs, nc-nom, visiteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lucerne', npp-nam, 'Lucerne', [np-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('mi-septembre', nc-nom, 'mi-septembre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(exceptions, nc-nom, exception, [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appliquer, vinf-ver:infi, appliquer, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(admissions, nc-nom, admission, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(opérations, nc-nom, opération, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ambulatoire, nc-nom, ambulatoire, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(arrivées, nc-nom, arrivée, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1981, Result) :-
      prob_parse([ si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(admission, nc-nom, admission, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(opération, nc-nom, opération, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ambulatoire, nc-nom, ambulatoire, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(arrivée, nc-nom, arrivée, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pass, nc-nom, pass, [n-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(désormais, adv-adv, désormais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(visiteurs, nc-nom, visiteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lucerne', npp-nam, 'Lucerne', [np-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(exception, nc-nom, exception, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1982, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(hôtesses, nc-nom, hôtesse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(manifesté, vpp-ver:pper, manifester, [dl(0,np,s_ppart)-1]), si(dénonçant, vpr-ver:ppre, dénoncer, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(suppressions, nc-nom, suppression, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(emplois, nc-nom, emploi, [n-1]), si(consécutives, adj-adj, consécutif, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(activité, nc-nom, activité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(aérienne, adj-adj, aérien, [dl(0,n,n)-1]), si('Alitalia', npp-nam, 'Alitalia', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(presse, nc-nom, presse, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1983, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(syndicat, nc-nom, syndicat, [n-1]), si(participant, vpr-ver:ppre, participant, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rassemblement, nc-nom, rassemblement, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1984, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(hôtesses, nc-nom, hôtesse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rassemblées, vpp-ver:pper, rassembler, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(licenciement, nc-nom, licenciement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1985, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(hôtesses, nc-nom, hôtesse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(manifesté, vpp-ver:pper, manifester, [dl(0,np,s_ppart)-1]), si(dénonçant, vpr-ver:ppre, dénoncer, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(suppressions, nc-nom, suppression, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(emplois, nc-nom, emploi, [n-1]), si(consécutives, adj-adj, consécutif, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(activité, nc-nom, activité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(aérienne, adj-adj, aérien, [dl(0,n,n)-1]), si('Alitalia', npp-nam, 'Alitalia', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(presse, nc-nom, presse, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1986, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(syndicat, nc-nom, syndicat, [n-1]), si(participant, vpr-ver:ppre, participant, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rassemblement, nc-nom, rassemblement, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1987, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(hôtesses, nc-nom, hôtesse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rassemblées, vpp-ver:pper, rassembler, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protester, vinf-ver:infi, protester, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(licenciement, nc-nom, licenciement, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(refusé, vpp-ver:pper, refuser, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(vaccinées, vpp-ver:pper, vacciner, [dr(0,dl(0,np,s_pass),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1988, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(garde, nc-nom, garde, [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(adénovirus, nc-nom, adénovirus, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(citant, vpr-ver:ppre, citer, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(ils, cls-pro:per, il, [np-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conduits, vpp-ver:pper, conduire, [dr(0,dl(0,np,s_ppart),np)-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(infection, nc-nom, infection, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(exposées, vpp-ver:pper, exposer, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1989, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('ARN', nc-abr, 'ARN', [n-1]), si(messager, nc-nom, messager, [dl(0,n,n)-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(infection, nc-nom, infection, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(exposées, vpp-ver:pper, exposer, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1990, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si(spécifique, adj-adj, spécifique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(adénovirus, nc-nom, adénovirus, [n-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(infection, nc-nom, infection, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(exposées, vpp-ver:pper, exposer, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1991, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(autorisé, vpp-ver:pper, autoriser, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1992, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(autorisés, vpp-ver:pper, autoriser, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('France', npp-nam, 'France', [n-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(infection, nc-nom, infection, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(exposées, vpp-ver:pper, exposer, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('VIH', npp-abr, 'VIH', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1993, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ISS', npp-abr, 'ISS', [n-1]), si(seules, adj-adj, seul, [dr(0,np,np)-1]), si('2,9', det-num, '2,9', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('130.468', nc-num, '130.468', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si(officiellement, adv-adv, officiellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(attribuées, vpp-ver:pper, attribuer, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),n)-1]), si(février, nc-nom, février, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(effet, nc-nom, effet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dues, vpp-ver:pper, devoir, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1994, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(apparaît, v-ver:pres, apparaître, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('97,1', det-num, '97,1', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(présentaient, v-ver:pres, présenter, [dr(0,dl(0,np,s),np)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(pathologies, nc-nom, pathologie, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(touchées, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1995, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(institut, nc-nom, institut, [n-1]), si(supérieur, adj-adj, supérieur, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('ISS', npp-abr, 'ISS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(italien, adj-adj, italien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(revu, vpp-ver:pper, revoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(drastiquement, adv-adv, drastiquement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(baisse, nc-nom, baisse, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), si(recensés, vpp-ver:pper, recenser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(février, nc-nom, février, [n-1]), si(2020, adj-num, 2020, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1996, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(morts, nc-nom, mort, [n-1]), si('Covid-19', npp-nam, 'Covid-19', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réévalué, vpp-ver:pper, réévaluer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(baisse, nc-nom, baisse, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1997, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(taïwanaise, adj-adj, taïwanais, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(dépasse, v-ver:pres, dépasser, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(dus, vpp-ver:pper, du, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(virus, nc-nom, virus, [n-1]), si('lui-même', adj-pro:per, 'lui-même', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1998, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prouve, v-ver:pres, prouver, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(morts, nc-nom, mort, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Taïwan', npp-nam, 'Taïwan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1999, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(présentant, vpr-ver:ppre, présenter, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(immense, adj-adj, immense, [dr(0,n,n)-1]), si(foule, nc-nom, foule, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pont, nc-nom, pont, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Street', npp-nam, 'Street', [dr(0,n,n)-1]), si('Parade', npp-nam, 'Parade', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Zurich', npp-nam, 'Zurich', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(festival, nc-nom, festival, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(musique, nc-nom, musique, [n-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2000, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(festival, nc-nom, festival, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(musique, nc-nom, musique, [n-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Zurich', npp-nam, 'Zurich', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2001, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(publiés, vpp-ver:pper, publier, [dl(0,np,s_pass)-1]), si(démontrent, v-ver:pres, démontrer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2020, pro-num, 2020, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2021, pro-num, 2021, [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxycholoroquine, nc-nom, hydroxycholoroquine, [n-1]), si(concluent, v-ver:pres, conclure, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2002, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(permettaient, v-ver:impf, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prouver, vinf-ver:infi, prouver, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydroxychloroquine, nc-nom, hydroxychloroquine, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2020, pro-num, 2020, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(celle, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(avérée, vpp-ver:pper, avérer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2003, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(autorisés, vpp-ver:pper, autoriser, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('France', npp-nam, 'France', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tous, adv-adv, tout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(suivi, vpp-ver:pper, suivre, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(étapes, nc-nom, étape, [n-1]), si(imposées, vpp-ver:pper, imposer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(chaque, det-pro:ind, chaque, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(hexagonal, adj-adj, hexagonal, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(phase, nc-nom, phase, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éventuelle, adj-adj, éventuel, [dr(0,n,n)-1]), si(nocivité, nc-nom, nocivité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(produit, nc-nom, produit, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(deuxième, nc-num, deuxième, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(tester, vinf-ver:infi, tester, [dr(0,dl(0,np,s_inf),np)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(limité, vpp-ver:pper, limité, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(malades, nc-nom, malade, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(troisième, nc-num, troisième, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(juger, vinf-ver:infi, juger, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intérêt, nc-nom, intérêt, [n-1]), si(thérapeutique, adj-adj, thérapeutique, [dl(0,n,n)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(échantillon, nc-nom, échantillon, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(étendu, vpp-ver:pper, étendu, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2004, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(sautés, vpp-ver:pper, sauter, [dr(0,dl(0,np,s_ppart),np)-1]), si(certaines, pro-pro:ind, certains, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(étapes, nc-nom, étape, [n-1]), si(imposées, vpp-ver:pper, imposer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(chaque, det-pro:ind, chaque, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(hexagonal, adj-adj, hexagonal, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(vite, adv-adv, vite, [dl(1,s,s)-1]), si(possible, adj-adj, possible, [dl(0,dl(1,s,s),dl(1,s,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2005, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(autorisation, nc-nom, autorisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mise, nc-nom, mise, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('AMM', npp-abr, 'AMM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(conditionnelle, adj-adj, conditionnel, [dl(0,n,n)-1]), si(permet, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(développeurs, nc-nom, développeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soumettre, vinf-ver:infi, soumettre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(supplémentaires, adj-adj, supplémentaire, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(feu, nc-nom, feu, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contrairement, adv-adv, contrairement, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('AMM', nc-abr, 'AMM', [n-1]), si(classique, adj-adj, classique, [dl(0,n,n)-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(totalité, nc-nom, totalité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(données, nc-nom, donnée, [n-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(préalablement, adv-adv, préalablement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(soumise, vpp-ver:pper, soumettre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2006, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(feu, nc-nom, feu, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(rien, pro-pro:ind, rien, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(ajouté, vpp-ver:pper, ajouter, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(données, nc-nom, donnée, [n-1]), si(soumises, vpp-ver:pper, soumettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(développeurs, nc-nom, développeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('AMM', nc-abr, 'AMM', [n-1]), si(conditionnelle, adj-adj, conditionnel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2007, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autorisation, nc-nom, autorisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mise, nc-nom, mise, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('AMM', nc-abr, 'AMM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(conditionnelle, adj-adj, conditionnel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(permis, vpp-ver:pper, permettre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(accélérer, vinf-ver:infi, accélérer, [dr(0,dl(0,np,s_inf),np)-1]), si(considérablement, adv-adv, considérablement, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(disposition, nc-nom, disposition, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('AEM', npp-abr, 'AEM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(leur, clo-pro:per, son, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(accordé, vpp-ver:pper, accorder, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(autorisations, nc-nom, autorisation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(renouvelables, vpp-ver:pper, renouvelable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2008, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('AEM', npp-abr, 'AEM', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accordé, vpp-ver:pper, accorder, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(autorisations, nc-nom, autorisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mise, nc-nom, mise, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('AMM', nc-abr, 'AMM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(conditionnelles, adj-adj, conditionnel, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2009, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autorisation, nc-nom, autorisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mise, nc-nom, mise, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('AMM', nc-abr, 'AMM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(conditionnelle, adj-adj, conditionnel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(permis, vpp-ver:pper, permettre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(accélérer, vinf-ver:infi, accélérer, [dr(0,dl(0,np,s_inf),np)-1]), si(considérablement, adv-adv, considérablement, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(disposition, nc-nom, disposition, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('AEM', npp-abr, 'AEM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accordé, vpp-ver:pper, accorder, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(autorisations, nc-nom, autorisation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(renouvelables, vpp-ver:pper, renouvelable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2010, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorisations, nc-nom, autorisation, [n-1]), si(conditionnelles, adj-adj, conditionnel, [dl(0,n,n)-1]), si(accordées, vpp-ver:pper, accorder, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AEM', npp-abr, 'AEM', [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(renouvelées, vpp-ver:pper, renouveler, [dl(0,np,s_pass)-1]), si(tous, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2011, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ventes, nc-nom, vente, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicament, nc-nom, médicament, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(myocardite, nc-nom, myocardite, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Vyndamax', npp-nam, 'Vyndamax', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(77, det-num, 77, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(aux, p+d-prp:det, à, [n-1]), si('États-Unis', npp-nam, 'États-Unis', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2012, Result) :-
      prob_parse([ si('Vyndamax', npp-nam, 'Vyndamax', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ventes, nc-nom, vente, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(augmenté, vpp-ver:pper, augmenter, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(myocardite, nc-nom, myocardite, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(amylose, nc-nom, amylose, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(transthyrétine, nc-nom, transthyrétine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2013, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ventes, nc-nom, vente, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médicament, nc-nom, médicament, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Vyndamax', npp-nam, 'Vyndamax', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(77, det-num, 77, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2014, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ventes, nc-nom, vente, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Vyndamax', npp-nam, 'Vyndamax', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pfizer', npp-nam, 'Pfizer', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bondi, vpp-ver:pper, bondir, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(77, det-num, 77, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2021, pro-num, 2021, [np-1]), si(',', ponct-pun, ',', [let-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2015, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si('anti-pass', adj-adj, 'anti-pass', [dl(0,n,n)-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(organisée, vpp-ver:pper, organiser, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(place, nc-nom, place, [n-1]), si(principale, adj-adj, principal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Trieste', npp-nam, 'Trieste', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(filmée, vpp-ver:pper, filmer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(tout, nc-nom, tout, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(webcam, nc-nom, webcam, [n-1]), si(présente, vpp-ver:pper, présent, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(place, nc-nom, place, [n-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rassemblement, nc-nom, rassemblement, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(angle, nc-nom, angle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(webcam, nc-nom, webcam, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernière, nc-nom, dernier, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pouvait, v-ver:impf, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(bouger, vinf-ver:infi, bouger, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2016, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(webcam, nc-nom, webcam, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déplacée, vpp-ver:pper, déplacer, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(trafiquée, vpp-ver:pper, trafiquer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(cacher, vinf-ver:infi, cacher, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(manifestation, nc-nom, manifestation, [n-1]), si('anti-pass', adj-adj, 'anti-pass', [dl(0,n,n)-1]), si(sanitaire, adj-adj, sanitaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(place, nc-nom, place, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Trieste', npp-nam, 'Trieste', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2017, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(',', ponct-pun, ',', [let-1]), si(stimulent, v-ver:pres, stimuler, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(endommagent, v-ver:pres, endommager, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2018, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(résurgence, nc-nom, résurgence, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(virus, nc-nom, virus, [n-1]), si(hivernaux, adj-adj, hivernal, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(causée, vpp-ver:pper, causer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(accusée, vpp-ver:pper, accuser, [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(affaiblir, vinf-ver:infi, affaiblir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(défenses, nc-nom, défense, [n-1]), si(naturelles, adj-adj, naturel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(organisme, nc-nom, organisme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2019, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(stimulent, v-ver:pres, stimuler, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(affaiblissent, v-ver:pres, affaiblir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2020, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(risque, nc-nom, risque, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(importante, adj-adj, important, [dl(0,n,n)-1]), si(chez, p-prp, chez, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vaccinées, vpp-ver:pper, vacciner, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(chez, p-prp, chez, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-vaccinées', nc-nom, 'non-vaccinées', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(défenses, nc-nom, défense, [n-1]), si(immunitaires, adj-adj, immunitaire, [dl(0,n,n)-1]), si(diminuent, v-ver:pres, diminuer, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2021, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(circulation, nc-nom, circulation, [n-1]), si(réduite, vpp-ver:pper, réduire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(aussi, adv-adv, aussi, [dr(0,np,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(virus, nc-nom, virus, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), si(an, nc-nom, an, [n-1]), si(passé, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(confinements, nc-nom, confinement, [n-1]), si(successifs, adj-adj, successif, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(application, nc-nom, application, [n-1]), si(stricte, adj-adj, strict, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(barrières, nc-nom, barrière, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(port, nc-nom, port, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(masque, nc-nom, masque, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(lavage, nc-nom, lavage, [n-1]), si(régulier, adj-adj, régulier, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mains, nc-nom, main, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(abandon, nc-nom, abandon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bise, nc-nom, bise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2022, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(barrières, nc-nom, barrière, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(incluaient, v-ver:pres, inclure, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(port, nc-nom, port, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(masque, nc-nom, masque, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(lavage, nc-nom, lavage, [n-1]), si(régulier, adj-adj, régulier, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mains, nc-nom, main, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2023, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(circulation, nc-nom, circulation, [n-1]), si(réduite, vpp-ver:pper, réduire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(aussi, adv-adv, aussi, [dr(0,np,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(virus, nc-nom, virus, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), si(an, nc-nom, an, [n-1]), si(passé, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(confinements, nc-nom, confinement, [n-1]), si(successifs, adj-adj, successif, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(application, nc-nom, application, [n-1]), si(stricte, adj-adj, strict, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(barrières, nc-nom, barrière, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épidémie, nc-nom, épidémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(port, nc-nom, port, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(masque, nc-nom, masque, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(lavage, nc-nom, lavage, [n-1]), si(régulier, adj-adj, régulier, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mains, nc-nom, main, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(abandon, nc-nom, abandon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bise, nc-nom, bise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2024, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(grippe, nc-nom, grippe, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(moins, adv-adv, moins, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(circulé, vpp-ver:pper, circuler, [dl(0,np,s_ppart)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), si(an, nc-nom, an, [n-1]), si(passé, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(habitude, nc-nom, habitude, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2025, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si(stimulent, v-ver:pres, stimuler, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(immunitaire, adj-adj, immunitaire, [dl(0,n,n)-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(conférée, vpp-ver:pper, conférer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(injections, nc-nom, injection, [n-1]), si(baisse, v-ver:pres, baisse, [dl(0,np,s)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(fil, nc-nom, fil, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(vulnérables, adj-adj, vulnérable, [dl(0,n,n)-1]), si(soà, p+d-prp:det, soà, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rappel, nc-nom, rappel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2026, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(organisme, nc-nom, organisme, [n-1]), si(baisse, v-ver:pres, baisse, [dl(0,np,s)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(fil, nc-nom, fil, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2027, Result) :-
      prob_parse([ si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), si('Young', npp-nam, 'Young', [np-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(colonies, nc-nom, colonie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(parasites, nc-nom, parasite, [n-1]), si('Trypanosoma', npp-nam, 'Trypanosoma', [dl(0,n,n)-1]), si(cruzi, npp-nam, cruzi, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(vecteurs, nc-nom, vecteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Chagas', npp-nam, 'Chagas', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2028, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(parasites, nc-nom, parasite, [n-1]), si('Trypanosoma', npp-nam, 'Trypanosoma', [dl(0,n,n)-1]), si(cruzi, et-nom, cruzi, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(besoin, nc-nom, besoin, [np-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(conditions, nc-nom, condition, [n-1]), si(précises, adj-adj, précis, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(colonies, nc-nom, colonie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(survivre, vinf-ver:infi, survivre, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('anti-Covid', adj-adj, 'anti-Covid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2029, Result) :-
      prob_parse([ si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(indésirables, adj-adj, indésirable, [dl(0,n,n)-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rapportés, vpp-ver:pper, rapporter, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(jeunes, nc-nom, jeune, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(restent, v-ver:pres, rester, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rares, adj-adj, rare, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2030, Result) :-
      prob_parse([ si(86, det-num, 86, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(jeunes, nc-nom, jeune, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(graves, adj-adj, grave, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2031, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), si('Madej', npp-nam, 'Madej', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(diffusées, vpp-ver:pper, diffuser, [dr(0,dl(0,np,s_ppart),np)-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(doute, nc-nom, doute, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(poussières, nc-nom, poussière, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(défauts, nc-nom, défaut, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(verre, nc-nom, verre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lamelle, nc-nom, lamelle, [n-1]), si(utilisée, vpp-ver:pper, utiliser, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(microscope, nc-nom, microscope, [n-1]), si(optique, adj-adj, optique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2032, Result) :-
      prob_parse([ si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), si('Madej', npp-nam, 'Madej', [np-1]), si(décrit, v-ver:pres, décrire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(diffusées, vpp-ver:pper, diffuser, [dr(0,dl(0,np,s_ppart),np)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(objets, nc-nom, objet, [n-1]), si(vivants, adj-adj, vivant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(tentacules, nc-nom, tentacule, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fioles, nc-nom, fiole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vaccin, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2033, Result) :-
      prob_parse([ si('Colin', npp-nam, 'Colin', [dr(0,np,np)-1]), si('Powell', npp-nam, 'Powell', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédé, vpp-ver:pper, décéder, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(âge, nc-nom, âge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(84, det-num, 84, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cancer, nc-nom, cancer, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(réduit, v-ver:pres, réduire, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vaccins, nc-nom, vaccin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2034, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(faisait, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(âge, nc-nom, âge, [n-1]), si(',', ponct-pun, ',', [let-1]), si(partie, nc-nom, partie, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(populations, nc-nom, population, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vulnérables, adj-adj, vulnérable, [dl(0,n,n)-1]), si(face, nc-nom, face, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(coronavirus, nc-nom, coronavirus, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2035, Result) :-
      prob_parse([ si('Colin', npp-nam, 'Colin', [dr(0,np,np)-1]), si('Powell', npp-nam, 'Powell', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(âgé, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(84, det-num, 84, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(figurait, v-ver:impf, figurer, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(risque, nc-nom, risque, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid', npp-nam, 'Covid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2036, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(virales, adj-adj, viral, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(prétendent, v-ver:pres, prétendre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appuyer, vinf-ver:infi, appuyer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(attribueraient, v-ver:impf, attribuer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fonte, nc-nom, fonte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(glaces, nc-nom, glace, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(planète, nc-nom, planète, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2037, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(glaciaire, adj-adj, glaciaire, [dl(0,n,n)-1]), si('[glace', adj-adj, '[glace', [dr(0,dl(0,n,n),n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(se, clr-pro:per, se, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(forme, v-ver:pres, forme, [cl_r-1]), si(sur, p-prp, sur, [dl(0,cl_r,dl(0,np,s))-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si(terre, nc-nom, terre, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si('NDLR]', ponct-pun, 'NDLR]', [let-1]), si(du, p+d-prp:det, de, [dl(1,s,s)-1]), si('Groenland', npp-nam, 'Groenland', [let-1]), si(fond, nc-nom, fondre, [dr(0,dl(0,n,n),n)-1]), si(sur, p-prp, sur, [n-1]), si(le, det-det:art, le, [dl(0,np,s)-1]), si(long, adj-adj, long, [dr(0,dl(1,s,s),np)-1]), si(terme, nc-nom, terme, [dr(0,np,n)-1]), si(en, p-prp, en, [dr(0,n,n)-1]), si(raison, nc-nom, raison, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(réchauffement, nc-nom, réchauffement, [dr(0,n,pp_de)-1]), si(climatique, adj-adj, climatique, [dr(0,pp_de,n)-1]), si(causé, vpp-ver:pper, causer, [n-1]), si(par, p-prp, par, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),pp_par)-1]), si(émissions, nc-nom, émission, [dr(0,pp_par,np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(mais, cc-kon, mais, [n-1]), si(le, det-det:art, le, [let-1]), si(rythme, nc-nom, rythme, [dr(0,dl(0,s,s),s)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(cette, det-pro:dem, ce, [n-1]), si(fonte, nc-nom, fonte, [dr(0,dl(0,n,n),np)-1]), si(a, v-ver:pres, avoir, [dr(0,np,n)-1]), si(ralenti, vpp-ver:pper, ralentir, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(cours, nc-nom, cours, [dl(0,np,s_ppart)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(la, det-det:art, le, [n-1]), si(dernière, adj-adj, dernier, [dr(0,dl(0,n,n),np)-1]), si(décennie, nc-nom, décennie, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [dr(0,n,n)-1]), si(en, p-prp, en, [n-1]), si(raison, nc-nom, raison, [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(phénomène, nc-nom, phénomène, [dr(0,n,pp_de)-1]), si(météorologique, adj-adj, météorologique, [dr(0,pp_de,n)-1]), si('El', npp-nam, 'El', [n-1]), si('Niño', npp-nam, 'Niño', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(disait, v-ver:impf, dire, [let-1]), si('-il', cls-pro:per, '-il', [dr(0,dl(1,s,s),np)-1]), si(aussi, adv-adv, aussi, [np-1]), si(',', ponct-pun, ',', [np-1]), si(cité, vpp-ver:pper, citer, [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,s_pass),pp)-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),np)-1]), si(communiqué, nc-nom, communiqué, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(presse, nc-nom, presse, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Université', nc-nam, 'Université', [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si('Hokkaido', npp-nam, 'Hokkaido', [dr(0,dl(0,n,n),np)-1]), si(diffusé, vpp-ver:pper, diffuser, [np-1]), si(en, p-prp, en, [dl(0,n,n)-1]), si(avril, nc-nom, avril, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(2022, adj-num, 2022, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dl(0,n,n)-1]), si(présenter, vinf-ver:infi, présenter, [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s_inf),np)-1]), si(étude, nc-nom, étude, [dr(0,np,n)-1]), si(publiée, vpp-ver:pper, publier, [n-1]), si(en, p-prp, en, [dl(0,n,n)-1]), si(décembre, nc-nom, décembre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(2021, adj-num, 2021, [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(2038, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(relayées, vpp-ver:pper, relayer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(français, nc-nom, français, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n))),dl(1,dl(0,n,n),dl(0,n,n)))-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(anglais, nc-nom, anglais, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si('-à', p-prp, '-à', [let-1]), si(tort, nc-nom, tort, [dr(0,dl(1,s,s),n)-1]), si('-', ponct-pun, '-', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(glacière, adj-adj, glacière, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Groenland', npp-nam, 'Groenland', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rétablit, v-ver:pres, rétablir, [dl(0,cl_r,dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2039, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('On', cls-pro:per, 'On', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),n)-1]), si(tout, nc-nom, tout, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rétablissement, nc-nom, rétablissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(polaire, adj-adj, polaire, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Groenland', npp-nam, 'Groenland', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(abonde, v-ver:pres, abonder, [dr(0,dl(1,s,s),np)-1]), si('Heïdi', npp-nam, 'Heïdi', [dr(0,np,np)-1]), si('Sevestre', npp-nam, 'Sevestre', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(glaciologue, nc-nom, glaciologue, [n-1]), si(membre, nc-nom, membre, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(programme, nc-nom, programme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(évaluation, nc-nom, évaluation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(contactée, vpp-ver:pper, contacter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2040, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tarif, nc-nom, tarif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(42, det-num, 42, [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si('mégawatt-heure', nc-nom, 'mégawatt-heure', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('MWh', nc-abr, 'MWh', [n-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tarif, nc-nom, tarif, [n-1]), si(fixé, vpp-ver:pper, fixer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(détail, nc-nom, détail, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(réservé, vpp-ver:pper, réserver, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(alimentent, v-ver:pres, alimenter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(installés, vpp-ver:pper, installer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(expliquent, v-ver:pres, expliquer, [dr(0,dr(0,s,np),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(spécialistes, nc-nom, spécialiste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2041, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2042, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(transactions, nc-nom, transaction, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(opérateurs, nc-nom, opérateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(différent, adj-adj, différent, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gros, nc-nom, gros, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tarifs, nc-nom, tarif, [n-1]), si(varient, v-ver:pres, varier, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(permanence, nc-nom, permanence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2043, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(plein, adj-adj, plein, [dr(0,n,n)-1]), si(contexte, nc-nom, contexte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(crise, nc-nom, crise, [n-1]), si(énergétique, adj-adj, énergétique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(flambée, nc-nom, flambée, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(vendrait, v-ver:impf, vendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(produite, vpp-ver:pper, produire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(42, det-num, 42, [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(mégawatt, nc-nom, mégawatt, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(ensuite, adv-adv, ensuite, [dl(1,s,s)-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(racheter, vinf-ver:infi, racheter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(mégawatt, nc-nom, mégawatt, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('1.000', det-num, '1.000', [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(croire, vinf-ver:infi, croire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(des, det-prp:det, un, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Twitter', npp-nam, 'Twitter', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2044, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tarif, nc-nom, tarif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(42, det-num, 42, [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si('mégawatt-heure', nc-nom, 'mégawatt-heure', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('MWh', nc-abr, 'MWh', [n-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tarif, nc-nom, tarif, [n-1]), si(fixé, vpp-ver:pper, fixer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(détail, nc-nom, détail, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(réservé, vpp-ver:pper, réserver, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(alimentent, v-ver:pres, alimenter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(installés, vpp-ver:pper, installer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(expliquent, v-ver:pres, expliquer, [dr(0,dr(0,s,np),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(spécialistes, nc-nom, spécialiste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2045, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2046, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(transactions, nc-nom, transaction, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(opérateurs, nc-nom, opérateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(différent, adj-adj, différent, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gros, nc-nom, gros, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tarifs, nc-nom, tarif, [n-1]), si(varient, v-ver:pres, varier, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(permanence, nc-nom, permanence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2047, Result) :-
      prob_parse([ si('Contactée', vpp-ver:pper, 'Contactée', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(régulation, nc-nom, régulation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CRE', npp-abr, 'CRE', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autorité, nc-nom, autorité, [n-1]), si(indépendante, adj-adj, indépendant, [dl(0,n,n)-1]), si(garante, adj-adj, garant, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bon, adj-adj, bon, [dr(0,n,n)-1]), si(fonctionnement, nc-nom, fonctionnement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marchés, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(bénéfice, nc-nom, bénéfice, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(consommateur, nc-nom, consommateur, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mégawatt, nc-nom, mégawatt, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(42, det-num, 42, [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(bénéficie, v-ver:pres, bénéficier, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(consommateur, nc-nom, consommateur, [n-1]), si(français, adj-adj, français, [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(uniquement, adv-adv, uniquement, [dr(0,dl(0,pp,pp),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(consommateur, nc-nom, consommateur, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accès, nc-nom, accès, [n-1]), si(régulé, vpp-ver:pper, réguler, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [dr(0,np,n)-1]), si(nucléaire, adj-adj, nucléaire, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('[ARENH]', ponct-pun, '[ARENH]', [dr(0,dl(0,np,np),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(dispositif, nc-nom, dispositif, [np-1]), si('franco-français', adj-adj, 'franco-français', [let-1]), si(et, cc-kon, et, [let-1]), si(non, adv-adv, non, [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1])], Result).
sent(2048, Result) :-
      prob_parse([ si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(explique, v-ver:pres, expliquer, [dr(0,dr(0,s,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CRE', npp-abr, 'CRE', [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dispositif, nc-nom, dispositif, [n-1]), si('ARENH', npp-abr, 'ARENH', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(organisation, nc-nom, organisation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('NOME', npp-abr, 'NOME', [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(vigueur, nc-nom, vigueur, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2011, adj-num, 2011, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(permet, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(alternatifs, adj-adj, alternatif, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(accéder, vinf-ver:infi, accéder, [dr(0,dl(0,np,s_inf),pp)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(régulé, vpp-ver:pper, réguler, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(produite, vpp-ver:pper, produire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(centrales, nc-nom, centrale, [n-1]), si(nucléaires, adj-adj, nucléaire, [dl(0,n,n)-1]), si(historiques, adj-adj, historique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('EDF', npp-abr, 'EDF', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(date, nc-nom, date, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(promulgation, nc-nom, promulgation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si('NOME', npp-nam, 'NOME', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2049, Result) :-
      prob_parse([ si('EDF', npp-abr, 'EDF', [np-1]), si(confirme, v-ver:pres, confirmer, [dr(0,dl(0,np,s),s_q)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(côté, nc-nom, côté, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('ARENH', npp-abr, 'ARENH', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(applique, v-ver:pres, applique, [dl(0,cl_r,dl(0,np,s))-1]), si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(accès, nc-nom, accès, [n-1]), si(régulé, vpp-ver:pper, réguler, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(vend, v-ver:pres, vendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si('TWh', nc-abr, 'TWh', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(prix, nc-nom, prix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(42, det-num, 42, [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('mégawatt-heure', nc-nom, 'mégawatt-heure', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('MWh', nc-nom, 'MWh', [n-1]), si(')', ponct-pun, ')', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(alternatifs, adj-adj, alternatif, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2050, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(volumes, nc-nom, volume, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dispositif, nc-nom, dispositif, [n-1]), si('ARENH', npp-abr, 'ARENH', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(soumis, vpp-ver:pper, soumettre, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(limite, nc-nom, limite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si('TWh', nc-abr, 'TWh', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(25, det-num, 25, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(production, nc-nom, production, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parc, nc-nom, parc, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2051, Result) :-
      prob_parse([ si('EDF', npp-abr, 'EDF', [np-1]), si(confirme, v-ver:pres, confirmer, [dr(0,dl(0,np,s),s_q)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(côté, nc-nom, côté, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('ARENH', npp-abr, 'ARENH', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(applique, v-ver:pres, applique, [dl(0,cl_r,dl(0,np,s))-1]), si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(accès, nc-nom, accès, [n-1]), si(régulé, vpp-ver:pper, réguler, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(vend, v-ver:pres, vendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si('TWh', nc-abr, 'TWh', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(prix, nc-nom, prix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(42, det-num, 42, [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('mégawatt-heure', nc-nom, 'mégawatt-heure', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('MWh', nc-nom, 'MWh', [n-1]), si(')', ponct-pun, ')', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(alternatifs, adj-adj, alternatif, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2052, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(transactions, nc-nom, transaction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(acteurs, nc-nom, acteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(situés, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('France', npp-nam, 'France', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(précise, v-ver:pres, préciser, [dr(0,dr(0,s,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CRE', npp-abr, 'CRE', [n-1]), si(',', ponct-pun, ',', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(font, v-ver:pres, faire, [dl(0,cl_r,dl(0,np,s))-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gros, nc-nom, gros, [dr(0,n,n)-1]), si(européen, adj-adj, européen, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(achetée, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(vendue, vpp-ver:pper, vendre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(variés, vpp-ver:pper, varier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2053, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('MWh', nc-nom, 'MWh', [n-1]), si(vendus, vpp-ver:pper, vendre, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,n,n),pp),dr(0,dl(0,n,n),pp)),dr(0,dl(0,n,n),pp))-1]), si(achetés, vpp-ver:pper, acheter, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gros, nc-nom, gros, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2054, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(arrêté, nc-nom, arrêté, [n-1]), si(gouvernemental, adj-adj, gouvernemental, [dl(0,n,n)-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(avant, nc-nom, avant, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(daté, vpp-ver:pper, dater, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(22, adj-num, 22, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(autoriserait, v-ver:futu, autoriser, [dr(0,dl(0,np,s),np)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(coupures, nc-nom, coupure, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(journée, nc-nom, journée, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2055, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrêté, nc-nom, arrêté, [n-1]), si(gouvernemental, adj-adj, gouvernemental, [dl(0,n,n)-1]), si(paru, vpp-ver:pper, paraître, [dl(0,n,n)-1]), si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(coupure, nc-nom, coupure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(courant, nc-nom, courant, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(clients, nc-nom, client, [n-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(basculer, vinf-ver:infi, basculer, [dr(0,dl(0,np,s_inf),pp)-1]), si(automatiquement, adv-adv, automatiquement, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nuit, nc-nom, nuit, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alimentation, nc-nom, alimentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(gros, adj-adj, gros, [dr(0,n,n)-1]), si(appareils, nc-nom, appareil, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(enclenchent, v-ver:pres, enclencher, [dl(0,cl_r,dl(0,np,s))-1]), si(automatiquement, adv-adv, automatiquement, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(essentiellement, adv-adv, essentiellement, [dr(0,np,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(ballons, nc-nom, ballon, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(chaude, adj-adj, chaud, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(accumulation, nc-nom, accumulation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gestionnaires, nc-nom, gestionnaire, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transport, nc-nom, transport, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(distribution, nc-nom, distribution, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si('RTE', npp-abr, 'RTE', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('Enedis', npp-nam, 'Enedis', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2056, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(client, nc-nom, client, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(amené, vpp-ver:pper, amener, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réaliser, vinf-ver:infi, réaliser, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(geste, nc-nom, geste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(côté, nc-nom, côté, [n-1]), si('(...)', ponct-pun, '(...)', [let-1]), si('L\'enclenchement', nc-nom, 'L\'enclenchement', [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(ballons, nc-nom, ballon, [dr(0,dl(0,n,n),n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(eau, nc-nom, eau, [dr(0,dl(0,n,n),n)-1]), si(chaude, adj-adj, chaud, [n-1]), si(se, clr-pro:per, se, [dl(0,n,n)-1]), si(fera, v-ver:futu, faire, [cl_r-1]), si(de, p-prp, de, [dl(0,cl_r,dl(0,np,s))-1]), si(manière, nc-nom, manière, [dl(0,cl_r,dl(0,np,s))-1]), si(toujours, adv-adv, toujours, [n-1]), si(automatique, adj-adj, automatique, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('.', ponct-pun, '.', [dr(0,dl(0,n,n),dl(0,n,n))-1])], Result).
sent(2057, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(clients, nc-nom, client, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(programment, v-ver:pres, programmer, [dr(0,dl(0,np,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si('chauffe-eau', nc-nom, 'chauffe-eau', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2058, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('chauffe-eau', nc-nom, 'chauffe-eau', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(mettra, v-ver:pres, mettre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(automatiquement, adv-adv, automatiquement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(route, nc-nom, route, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si('-là', adv-adv, '-là', [dl(0,n,n)-1]), si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), si('Linky', npp-nam, 'Linky', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(précisé, vpp-ver:pper, préciser, [dl(1,s,dl(0,np,s_ppart))-1]), si('Enedis', npp-nam, 'Enedis', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrêté, nc-nom, arrêté, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2059, Result) :-
      prob_parse([ si('Florian', npp-nam, 'Florian', [dr(0,np,np)-1]), si('Philippot', npp-nam, 'Philippot', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si('Les', det-det:art, 'Les', [dr(0,dl(0,n,n),n)-1]), si('Patriotes', nc-nam, 'Patriotes', [n-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(',', ponct-pun, ',', [let-1]), si(lui, pro-pro:per, luire, [np-1]), si(',', ponct-pun, ',', [let-1]), si(emparé, vpp-ver:pper, emparer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dès, p-prp, dès, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(pourra, v-ver:futu, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(couper, vinf-ver:infi, couper, [dr(0,dl(0,np,s_inf),np)-1]), si(votre, det-det:pos, votre, [dr(0,np,n)-1]), si(ballon, nc-nom, ballon, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(chaude, adj-adj, chaud, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(distance, nc-nom, distance, [n-1]), si(',', ponct-pun, ',', [let-1]), si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), si('Linky', npp-nam, 'Linky', [np-1]), si('!', ponct-pun, '!', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2060, Result) :-
      prob_parse([ si('.', ponct-pun, '.', [let-1])], Result).
sent(2061, Result) :-
      prob_parse([ si('Publication', nc-nom, 'Publication', [n-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(un, det-det:art, un, [dr(0,dr(0,np,np),n)-1]), si(peu, adv-adv, peu, [n-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(400, det-num, 400, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(2062, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cause, nc-nom, cause, [n-1]), si(',', ponct-pun, ',', [let-1]), si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(coupures, nc-nom, coupure, [n-1]), si(proprement, adv-adv, proprement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(dites, vpp-ver:pper, dire, [dl(0,n,n)-1]), si(devaient, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(décidées, vpp-ver:pper, décider, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(elles, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(déclenchées, vpp-ver:pper, déclencher, [dl(0,np,s_pass)-1]), si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), si('Linky', npp-nam, 'Linky', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2063, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(coupures, nc-nom, coupure, [n-1]), si(exceptionnelles, adj-adj, exceptionnel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('2h', nc-nom, '2h', [np-1]), si(',', ponct-pun, ',', [let-1]), si(si, cs-kon, si, [dr(0,dl(1,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(devaient, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(êtres, nc-nom, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(mises, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),np)-1]), si(directement, adv-adv, directement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réseau, nc-nom, réseau, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(moyenne, adj-adj, moyen, [dr(0,dl(0,n,n),n)-1]), si(tension, nc-nom, tension, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipement, nc-nom, équipement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(compteurs, nc-nom, compteur, [n-1]), si('Linky', npp-nam, 'Linky', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(rappelle, v-ver:pres, rappeler, [dr(0,dl(1,s,s),np)-1]), si('Enedis', npp-nam, 'Enedis', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2064, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Rennes', npp-nam, 'Rennes', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lancé, vpp-ver:pper, lancer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(seconde, adj-num, second, [dr(0,n,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(métro, nc-nom, métro, [n-1]), si(chiffrée, vpp-ver:pper, chiffrer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('1,34', det-num, '1,34', [dr(0,np,n)-1]), si(milliard, nc-nom, milliard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(euros, nc-nom, euro, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(économiste, nc-nom, économiste, [n-1]), si('Philippe', npp-nam, 'Philippe', [dl(0,n,n)-1]), si('Herlin', npp-nam, 'Herlin', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assuré, vpp-ver:pper, assurer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(métropole, nc-nom, métropole, [n-1]), si(reviendrait, v-ver:cond, revenir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('12.200', det-num, '12.200', [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(usager, nc-nom, usager, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2065, Result) :-
      prob_parse([ si('L\'agglomération', nc-nom, 'L\'agglomération', [dr(0,np,n)-1]), si(rennaise, adj-adj, rennais, [n-1]), si(évoque, v-ver:pres, évoquer, [dl(0,n,n)-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(coût, nc-nom, coût, [let-1]), si(global, adj-adj, global, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(de, p-prp, de, [let-1]), si('1,342', det-num, '1,342', [dr(0,dl(0,n,n),np)-1]), si(milliard, nc-nom, milliard, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(euros, nc-nom, euro, [dr(0,dl(0,np,np),n)-1]), si(pour, p-prp, pour, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('100.000', det-num, '100.000', [let-1]), si(voyages, nc-nom, voyage, [dr(0,np,n)-1]), si(attendus, vpp-ver:pper, attendre, [n-1]), si(chaque, det-pro:ind, chaque, [dl(0,n,n)-1]), si(jour, nc-nom, jour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(dans, p-prp, dans, [let-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [dr(0,n,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(métro, nc-nom, métro, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si(en, p-prp, en, [let-1]), si(soulignant, vpr-ver:ppre, souligner, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), si(le, det-det:art, le, [let-1]), si(coût, nc-nom, coût, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(livraison, nc-nom, livraison, [dr(0,np,n)-1]), si(respecte, v-ver:pres, respecter, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), si(enveloppe, nc-nom, enveloppe, [dr(0,np,n)-1]), si(initiale, adj-adj, initial, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(2066, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Rennes', npp-nam, 'Rennes', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lancé, vpp-ver:pper, lancer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(seconde, adj-num, second, [dr(0,n,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(métro, nc-nom, métro, [n-1]), si(chiffrée, vpp-ver:pper, chiffrer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('1,34', det-num, '1,34', [dr(0,np,n)-1]), si(milliard, nc-nom, milliard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(euros, nc-nom, euro, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(économiste, nc-nom, économiste, [n-1]), si('Philippe', npp-nam, 'Philippe', [dl(0,n,n)-1]), si('Herlin', npp-nam, 'Herlin', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assuré, vpp-ver:pper, assurer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(métropole, nc-nom, métropole, [n-1]), si(reviendrait, v-ver:cond, revenir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('12.200', det-num, '12.200', [dr(0,np,n)-1]), si(euros, nc-nom, euro, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(usager, nc-nom, usager, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2067, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(raisonnement, nc-nom, raisonnement, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(tient, v-ver:pres, tenir, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('(...)', ponct-pun, '(...)', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(telle, adj-adj, tel, [dr(0,n,n)-1]), si(infrastructure, nc-nom, infrastructure, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(durée, nc-nom, durée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ouvrages, nc-nom, ouvrage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(génie, nc-nom, génie, [n-1]), si(civil, adj-adj, civil, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(roulant, vpr-ver:ppre, rouler, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,np)-1]), si(plus, adv-adv, plus, [dr(0,np,s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(renouvelée, vpp-ver:pper, renouveler, [dl(0,n,n)-1]), si(tous, adv-adv, tout, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si(environ, adv-adv, environ, [dl(0,n,n)-1]), si('(...)', ponct-pun, '(...)', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(durée, nc-nom, durée, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donc, adv-adv, donc, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fallu, vpp-ver:pper, falloir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(renouveler, vinf-ver:infi, renouveler, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('12.000', det-num, '12.000', [dr(0,np,n)-1]), si('€', nc-abr, '€', [n-1]), si(environ, adv-adv, environ, [n-1]), si(5, det-num, 5, [dr(0,dr(0,np,np),n)-1]), si(fois, nc-nom, fois, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(moyenne, nc-nom, moyenne, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),n)-1]), si(durée, nc-nom, durée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(infrastructures, nc-nom, infrastructure, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(durée, nc-nom, durée, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(')', ponct-pun, ')', [let-1]), si(engendrant, vpr-ver:ppre, engendrer, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(important, adj-adj, important, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(que, cs-kon, que, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,s_q,np)-1]), si('1,3', adj-num, '1,3', [dr(0,np,n)-1]), si(milliard, nc-nom, milliard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(euros, nc-nom, euro, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(métro, nc-nom, métro, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(abonde, v-ver:pres, abonder, [dr(0,dl(1,s,s),np)-1]), si('Cloé', npp-nam, 'Cloé', [dr(0,np,np)-1]), si('Chevron', npp-nam, 'Chevron', [dr(0,np,np)-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(2068, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(automobiliste, nc-nom, automobiliste, [n-1]), si(engendre, v-ver:pres, engendrer, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(effet, nc-nom, effet, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(coûts, nc-nom, coût, [n-1]), si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(usages, nc-nom, usage, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(usant, vpr-ver:ppre, user, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(route, nc-nom, route, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(provoquant, vpr-ver:ppre, provoquer, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(embouteillages, nc-nom, embouteillage, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(accidents, nc-nom, accident, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(coûts, nc-nom, coût, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(collectivité, nc-nom, collectivité, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pollution, nc-nom, pollution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(encore, adv-adv, encore, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bruit, nc-nom, bruit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2069, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('L\'agglomération', npp-nam, 'L\'agglomération', [dr(0,np,n)-1]), si(aurait, v-ver:cond, avoir, [n-1]), si(effectivement, adv-adv, effectivement, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(théoriquement, adv-adv, théoriquement, [dl(1,s,s)-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(une, det-det:art, un, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(voiture, nc-nom, voiture, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si('12.000', det-num, '12.000', [dr(0,dl(0,n,n),np)-1]), si('€', nc-abr, '€', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(probablement, adv-adv, probablement, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,np)-1]), si(voiture, nc-nom, voiture, [dr(0,np,n)-1]), si(thermique, adj-adj, thermique, [n-1]), si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), si(occasion, nc-nom, occasion, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si(à, p-prp, à, [let-1]), si(chacun, pro-pro:ind, chacun, [dr(0,pp_a,np)-1]), si(des, p+d-prp:det, de, [np-1]), si(voyageurs, nc-nom, voyageur, [dr(0,dl(0,np,np),n)-1]), si(quotidiens, adj-adj, quotidien, [n-1]), si(attendus, vpp-ver:pper, attendre, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),pp)-1]), si(la, det-det:art, le, [dr(0,pp,np)-1]), si(ligne, nc-nom, ligne, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2070, Result) :-
      prob_parse([ si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(additionnels, adj-adj, additionnel, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(routes, nc-nom, route, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agglomération, nc-nom, agglomération, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Rennes', npp-nam, 'Rennes', [np-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(congestion, nc-nom, congestion, [n-1]), si('(', ponct-pun, '(', [let-1]), si(engendrant, vpr-ver:ppre, engendrer, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(usagers, nc-nom, usager, [n-1]), si(')', ponct-pun, ')', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pollution, nc-nom, pollution, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2071, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inverse, nc-nom, inverse, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(métro, nc-nom, métro, [n-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(gains, nc-nom, gain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(usagers, nc-nom, usager, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(entraîner, vinf-ver:infi, entraîner, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(basculement, nc-nom, basculement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(particulière, adj-adj, particulier, [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(transports, nc-nom, transport, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(commun, nc-nom, commun, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(pointe, v-ver:pres, pointe, [dr(0,dl(1,s,s),np)-1]), si('Cloé', npp-nam, 'Cloé', [dr(0,np,np)-1]), si('Chevron', npp-nam, 'Chevron', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2072, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('RWE', npp-abr, 'RWE', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Guido', npp-nam, 'Guido', [dr(0,np,np)-1]), si('Steffen', npp-nam, 'Steffen', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si('e-mail', nc-nom, 'e-mail', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Bagger', npp-nam, 'Bagger', [n-1]), si(288, adj-num, 288, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(construite, vpp-ver:pper, construire, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Hambach', npp-nam, 'Hambach', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(utilisée, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si('là-bas', adv-adv, 'là-bas', [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(déplacée, vpp-ver:pper, déplacer, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Garzweiler', npp-nam, 'Garzweiler', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2001, pro-num, 2001, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2073, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(constructeur, nc-nom, constructeur, [n-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(excavatrice, nc-nom, excavatrice, [n-1]), si('Bagger', npp-nam, 'Bagger', [dl(0,n,n)-1]), si(288, adj-num, 288, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisée, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Garzweiler', npp-nam, 'Garzweiler', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouest, nc-nom, ouest, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(exploite, v-ver:pres, exploiter, [dr(0,dl(0,np,s),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(lignite, nc-nom, lignite, [n-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(charbon, nc-nom, charbon, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2074, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si(consacrée, vpp-ver:pper, consacrer, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(vérifier, vinf-ver:infi, vérifier, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(mythes, nc-nom, mythe, [n-1]), si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(protection, nc-nom, protection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('EPA', npp-abr, 'EPA', [n-1]), si(')', ponct-pun, ')', [let-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(associées, vpp-ver:pper, associer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(durée, nc-nom, durée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(généralement, adv-adv, généralement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(inférieures, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(celles, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(essence, nc-nom, essence, [n-1]), si(moyen, adj-adj, moyen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(tenant, vpr-ver:ppre, tenir, [dr(0,dr(0,dl(0,np,s_ppres),pp_de),np)-1]), si(compte, nc-nom, compte, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2075, Result) :-
      prob_parse([ si('D\'', det-prp, 'D\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(études, nc-nom, étude, [n-1]), si(tendent, v-ver:pres, tendre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(écologique, adj-adj, écologique, [dl(0,n,n)-1]), si(global, adj-adj, global, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(prend, v-ver:pres, prendre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(compte, nc-nom, compte, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(cycle, nc-nom, cycle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(meilleur, adj-adj, meilleur, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(thermique, adj-adj, thermique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2076, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chiffres, nc-nom, chiffre, [n-1]), si(cités, vpp-ver:pper, citer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('New', npp-nam, 'New', [dr(0,n,n)-1]), si('York', npp-nam, 'York', [dr(0,n,n)-1]), si('Times', npp-nam, 'Times', [n-1]), si(intitulé, vpp-ver:pper, intituler, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ruée, nc-nom, ruée, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(or, nc-nom, or, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(lithium, nc-nom, lithium, [n-1]), si(':', ponct-pun, ':', [let-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(course, nc-nom, course, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(cite, v-ver:pres, citer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si('Lithium', npp-nam, 'Lithium', [dl(0,n,n)-1]), si('Americas', npp-nam, 'Americas', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('3.224', det-num, '3.224', [dr(0,np,n)-1]), si(gallons, nc-nom, gallon, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si('12.200', det-num, '12.200', [dr(0,np,n)-1]), si(litres, nc-nom, litre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(')', ponct-pun, ')', [let-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(minute, nc-nom, minute, [n-1]), si(consommés, vpp-ver:pper, consommer, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Nevada', npp-nam, 'Nevada', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(par, p-prp, par, [n-1]), si(seconde, nc-nom, seconde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2077, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(estimations, nc-nom, estimation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lithium', npp-nam, 'Lithium', [dr(0,np,np)-1]), si('Americas', npp-nam, 'Americas', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('(', ponct-pun, '(', [let-1]), si(sic, adv-abr, sic, [dl(1,s,s)-1]), si(')', ponct-pun, ')', [let-1]), si(cite, v-ver:pres, citer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('New', npp-nam, 'New', [dr(0,n,n)-1]), si('York', npp-nam, 'York', [dr(0,n,n)-1]), si('Times', npp-nam, 'Times', [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mine, nc-nom, mine, [n-1]), si(consommera, v-ver:futu, consommer, [dr(0,dl(0,np,s),np)-1]), si('12.200', det-num, '12.200', [dr(0,np,n)-1]), si(litres, nc-nom, litre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(seconde, nc-nom, seconde, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), si('66.000', det-num, '66.000', [dr(0,np,n)-1]), si(tonnes, nc-nom, tonne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carbonate, nc-nom, carbonate, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lithium, nc-nom, lithium, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(an, nc-nom, an, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(auteur, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(nous, cls-pro:per, nous, [np-1]), si(vérifions, v-ver:pres, vérifier, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2078, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('De', p-prp, 'De', [dr(0,dr(0,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(clair, adj-adj, clair, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(massif, adj-adj, massif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(automobile, nc-nom, automobile, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(demander, vinf-ver:infi, demander, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(quantités, nc-nom, quantité, [n-1]), si(énormes, adj-adj, énorme, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Li', npp-nam, 'Li', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(lithium, nc-nom, lithium, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ndlr, adv-adv, 'NDLR', [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(cuivre, nc-nom, cuivre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(cobalt, nc-nom, cobalt, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(manganèse, nc-nom, manganèse, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(nickel, nc-nom, nickel, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(aluminium, nc-nom, aluminium, [n-1]), si('...', ponct-pun, '...', [dl(0,s,txt)-1])], Result).
sent(2079, Result) :-
      prob_parse([ si('Dont', cs-kon, 'Dont', [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(extraction, nc-nom, extraction, [n-1]), si(massive, adj-adj, massif, [dl(0,n,n)-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(environnemental, adj-adj, environnemental, [dl(0,n,n)-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(importants, adj-adj, important, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(commenté, vpp-ver:pper, commenter, [dl(1,s,dl(0,np,s_ppart))-1]), si('Nathalie', npp-nam, 'Nathalie', [dr(0,np,np)-1]), si('Job', npp-nam, 'Job', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(ingénieure, nc-nom, ingénieure, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matériaux, nc-nom, matériau, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(procédés, nc-nom, procédé, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transformation, nc-nom, transformation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(stockage, nc-nom, stockage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si(',', ponct-pun, ',', [let-1]), si(interrogée, vpp-ver:pper, interroger, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2080, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(début, nc-nom, début, [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('peut-être', adv-adv, 'peut-être', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(essayé, vpp-ver:pper, essayer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(croire, vinf-ver:infi, croire, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(gens, nc-nom, gens, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2081, Result) :-
      prob_parse([ si('Cela', pro-pro:dem, 'Cela', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(survendu, vpp-ver:pper, survendre, [dl(0,np,s_pass)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(solution, nc-nom, solution, [n-1]), si(miracle, nc-nom, miracle, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2082, Result) :-
      prob_parse([ si('Or', cc-kon, 'Or', [dr(0,s,s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2083, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(regarde, v-ver:pres, regarder, [dl(0,np,s)-1]), si(globalement, adv-adv, globalement, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(compare, v-ver:pres, comparer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(thermiques, adj-adj, thermique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(quand, cs-kon, quand, [dr(0,dl(1,s,s),n)-1]), si(même, adj-adj, même, [n-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si(environnementaux, adj-adj, environnemental, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(déclarait, v-ver:impf, déclarer, [dr(0,dl(1,s,s),np)-1]), si('Patrick', npp-nam, 'Patrick', [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si('Hugues', npp-nam, 'Hugues', [np-1]), si(',', ponct-pun, ',', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('BRGM', npp-abr, 'BRGM', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2084, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(constructeur, nc-nom, constructeur, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Tesla', npp-nam, 'Tesla', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moitié, nc-nom, moitié, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(batteries, nc-nom, batterie, [n-1]), si('LFP', npp-abr, 'LFP', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si('Marko', npp-nam, 'Marko', [dr(0,np,np)-1]), si('Paakkinen', npp-nam, 'Paakkinen', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(chef, nc-nom, chef, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Centre', npp-nam, 'Centre', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(technique, adj-adj, technique, [dl(0,n,n)-1]), si('VTT', nc-abr, 'VTT', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Finlande', npp-nam, 'Finlande', [n-1]), si(',', ponct-pun, ',', [let-1]), si(interrogé, vpp-ver:pper, interroger, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(22, adj-num, 22, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Ils', cls-pro:per, 'Ils', [np-1]), si(utilisent, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(lithium, nc-nom, lithium, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(fer, nc-nom, fer, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(phosphate, nc-nom, phosphate, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(matières, nc-nom, matière, [n-1]), si(premières, adj-adj, premier, [dl(0,n,n)-1]), si(critiques, adj-adj, critique, [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(donc, adv-adv, donc, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(respectueux, adj-adj, respectueux, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('NMC', npp-abr, 'NMC', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2085, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(batteries, nc-nom, batterie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(batteries, nc-nom, batterie, [n-1]), si(dites, vpp-ver:pper, dire, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('NMC', npp-abr, 'NMC', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comprenant, vpr-ver:ppre, comprendre, [dr(0,dl(0,n,n),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(nickel, nc-nom, nickel, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(manganèse, nc-nom, manganèse, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(cobalt, nc-nom, cobalt, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2086, Result) :-
      prob_parse([ si('Jens', npp-nam, 'Jens', [dr(0,np,np)-1]), si('Buchgeister', npp-nam, 'Buchgeister', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(membre, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si('Recherche', nc-nom, 'Recherche', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(technologies, nc-nom, technologie, [n-1]), si(énergétiques, adj-adj, énergétique, [dl(0,n,n)-1]), si(durables, adj-adj, durable, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(technologie, nc-nom, technologie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Karlsruhe', npp-nam, 'Karlsruhe', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(possible, adj-adj, possible, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), si(indiquer, vinf-ver:infi, indiquer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avec, p-prp, avec, [dr(0,dl(0,np,s_inf),np)-1]), si(précision, nc-nom, précision, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(quantité, nc-nom, quantité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(excavée, vpp-ver:pper, excaver, [dl(0,n,n)-1]), si(nécessaire, adj-adj, nécessaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),pp)-1]), si(la, det-det:art, le, [dr(0,pp_a,np)-1]), si(fabrication, nc-nom, fabrication, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(une, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), si(batterie, nc-nom, batterie, [dr(0,np,n)-1]), si(électrique, adj-adj, électrique, [n-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(2087, Result) :-
      prob_parse([ si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Newman', npp-nam, 'Newman', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(professeur, nc-nom, professeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(développement, nc-nom, développement, [n-1]), si(durable, adj-adj, durable, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(australienne, adj-adj, australien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Curtin', npp-nam, 'Curtin', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(mai, nc-nom, mai, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(combien, advwh-adv, combien, [dr(0,s_whq,s)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(terre, nc-nom, terre, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(déplacée, vpp-ver:pper, déplacer, [dl(0,np,s_pass)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(processus, nc-nom, processus, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(extraction, nc-nom, extraction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matières, nc-nom, matière, [n-1]), si(premières, adj-adj, premier, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(batterie, nc-nom, batterie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lithium, nc-nom, lithium, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2088, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(trois, adj-num, trois, [dr(0,n,n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si(en, p-prp, en, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(particulier, nc-nom, particulier, [n-1]), si(sur, p-prp, sur, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(million, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(observe, v-ver:pres, observer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(succession, nc-nom, succession, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(périodes, nc-nom, période, [n-1]), si(interglaciaires, adj-adj, interglaciaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(glaciaires, adj-adj, glaciaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(cyclicité, nc-nom, cyclicité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('100.000', det-num, '100.000', [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2089, Result) :-
      prob_parse([ si('Interglaciaire', nc-nom, 'Interglaciaire', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(comme, cs-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(on, cls-pro:per, on, [np-1]), si(identifie, v-ver:pres, identifier, [dr(0,dl(0,np,s),np)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(marin, adj-adj, marin, [dl(0,n,n)-1]), si(relatif, adj-adj, relatif, [dl(0,n,n)-1]), si(proche, adj-adj, proche, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(0, det-num, 0, [dr(0,np,n)-1]), si(mètre, nc-nom, mètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2090, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opposé, nc-nom, opposé, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(périodes, nc-nom, période, [n-1]), si(glaciaires, adj-adj, glaciaire, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(constitué, vpp-ver:pper, constituer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(phases, nc-nom, phase, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bas, adj-adj, bas, [dr(0,n,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(marin, adj-adj, marin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(-120, det-num, -120, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(précise, v-ver:pres, préciser, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chercheur, nc-nom, chercheur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2091, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(nous, pro-pro:per, nous, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(époques, nc-nom, époque, [n-1]), si(favorables, adj-adj, favorable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(formation, nc-nom, formation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(soustraire, vinf-ver:infi, soustraire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(océans, nc-nom, océan, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(ainsi, adv-adv, ainsi, [dr(0,s,s)-1]), si(lorsque, cs-kon, lorsque, [dr(0,dr(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mers, nc-nom, mer, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(descendu, vpp-ver:pper, descendre, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(-120, det-num, -120, [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si(-130, det-num, -130, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si('20.000', det-num, '20.000', [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(environ, adv-adv, environ, [let-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dernière, adj-adj, dernier, [dr(0,n,n)-1]), si(grande, adj-adj, grand, [n-1]), si(glaciation, nc-nom, glaciation, [let-1]), si(',', ponct-pun, ',', [np-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(retrouvé, vpp-ver:pper, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,n)-1]), si(forme, nc-nom, forme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pôles, nc-nom, pôle, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), si(détaille, v-ver:pres, détailler, [dr(0,np,n)-1]), si(le, det-det:art, le, [n-1]), si(chercheur, nc-nom, chercheur, [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2092, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(températures, nc-nom, température, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(donc, adv-adv, donc, [dr(0,pp,pp)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fonte, nc-nom, fonte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(glaces, nc-nom, glace, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élévation, nc-nom, élévation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si('Marina', npp-nam, 'Marina', [np-1]), si('Lévy', npp-nam, 'Lévy', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [dr(0,dl(0,n,n),n)-1]), si(au, p+d-prp:det, au, [n-1]), si('CNRS', npp-abr, 'CNRS', [dr(0,dl(0,n,n),n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(directrice, nc-nom, directrice, [n-1]), si(adjointe, adj-adj, adjoint, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(département, nc-nom, département, [n-1]), si(océan, nc-nom, océan, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('IRD', npp-abr, 'IRD', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2093, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,s,s),n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fonte, nc-nom, fonte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(glaciers, nc-nom, glacier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(marine, adj-adj, marine, [dl(0,n,n)-1]), si(provoquent, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(accélérée, vpp-ver:pper, accélérer, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(océans, nc-nom, océan, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2094, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(marin, adj-adj, marin, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(effectivement, adv-adv, effectivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(varié, vpp-ver:pper, varier, [dl(0,np,s_ppart)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(évolue, v-ver:pres, évoluer, [dl(0,np,s)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(voire, cc-kon, voire, [dr(0,dl(0,n,n),n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(phénomènes, nc-nom, phénomène, [n-1]), si(tectoniques, adj-adj, tectonique, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(étude, nc-nom, étude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(structure, nc-nom, structure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(écorce, nc-nom, écorce, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(astronomiques, adj-adj, astronomique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(élévation, nc-nom, élévation, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(observée, vpp-ver:pper, observer, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(activités, nc-nom, activité, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(communauté, nc-nom, communauté, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2095, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(variation, nc-nom, variation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(marin, adj-adj, marin, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(géologiques, adj-adj, géologique, [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(consensus, nc-nom, consensus, [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(étudient, v-ver:pres, étudier, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paléoclimatologie, nc-nom, paléoclimatologie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(science, nc-nom, science, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(climats, nc-nom, climat, [n-1]), si(passés, vpp-ver:pper, passer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mènent, v-ver:pres, mener, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2096, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(océans, nc-nom, océan, [n-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(centimètres, nc-nom, centimètre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(scénarios, nc-nom, scénario, [n-1]), si(envisagés, vpp-ver:pper, envisager, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2097, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(résumé, nc-nom, résumé, [n-1]), si(technique, adj-adj, technique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),n)-1]), si(horizon, nc-nom, horizon, [n-1]), si(2100, adj-num, 2100, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(global, adj-adj, global, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(projeté, vpp-ver:pper, projeter, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(28, det-num, 28, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(55, det-num, 55, [dr(0,np,n)-1]), si(cm, nc-abr, cm, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réduction, nc-nom, réduction, [n-1]), si(significative, adj-adj, significatif, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2098, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si(cm, nc-abr, cm, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(1, det-num, 1, [dr(0,np,n)-1]), si(m, nc-abr, m, [n-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(advenir, vinf-ver:infi, advenir, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(figure, nc-nom, figure, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(catastrophique, adj-adj, catastrophique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2099, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(vrai, adj-adj, vrai, [dr(0,n,n)-1]), si(débat, nc-nom, débat, [n-1]), si(',', ponct-pun, ',', [let-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(anthropiques, adj-adj, anthropique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(établi, vpp-ver:pper, établir, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(conclut, v-ver:pres, conclure, [dr(0,dl(1,s,s),np)-1]), si('Marina', npp-nam, 'Marina', [dr(0,np,np)-1]), si('Lévy', npp-nam, 'Lévy', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2100, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(relayée, vpp-ver:pper, relayer, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Facebook', npp-nam, 'Facebook', [np-1]), si(prétend, v-ver:pres, prétendre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(montée, nc-nom, montée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(eaux, nc-nom, eau, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(naturelle, adj-adj, naturel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(remettant, vpr-ver:ppre, remettre, [dr(0,dr(0,dl(0,np,s_ppres),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cause, nc-nom, cause, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(anthropique, adj-adj, anthropique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accélération, nc-nom, accélération, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(montée, nc-nom, montée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(océans, nc-nom, océan, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2101, Result) :-
      prob_parse([ si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilité, nc-nom, utilité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(consultations, nc-nom, consultation, [n-1]), si(mises, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exécutif, nc-nom, exécutif, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenté, vpp-ver:pper, tenter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(avant, nc-nom, avant, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(concrets, adj-adj, concret, [dl(0,n,n)-1]), si(issus, vpp-ver:pper, issu, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(assemblée, nc-nom, assemblée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(150, det-num, 150, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(proposé, vpp-ver:pper, proposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(149, det-num, 149, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2020, pro-num, 2020, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2102, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(149, nc-num, 149, [n-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(85, det-num, 85, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(propositions, nc-nom, proposition, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retenues, vpp-ver:pper, retenir, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(appliquées, vpp-ver:pper, appliquer, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si('Olivier', npp-nam, 'Olivier', [dr(0,np,np)-1]), si('Véran', npp-nam, 'Véran', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2103, Result) :-
      prob_parse([ si('Contacté', vpp-ver:pper, 'Contacté', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('porte-parolat', nc-nom, 'porte-parolat', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si('demi-mot', nc-nom, 'demi-mot', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(67, det-num, 67, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(propositions, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(convention, nc-nom, convention, [n-1]), si(citoyenne, adj-adj, citoyen, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(149, pro-num, 149, [np-1]), si(')', ponct-pun, ')', [let-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(mises, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,dl(0,np,s_pass),pp)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(totalement, adv-adv, totalement, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(partiellement, adv-adv, partiellement, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2104, Result) :-
      prob_parse([ si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(explique, v-ver:pres, expliquer, [dr(0,dr(0,s,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(suivi, nc-nom, suivi, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si('Climat', npp-nam, 'Climat', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('Résilience', npp-nam, 'Résilience', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interdit, vpp-ver:pper, interdire, [dr(0,dl(0,np,s_ppart),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(publicité, nc-nom, publicité, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(énergies, nc-nom, énergie, [n-1]), si(fossiles, adj-adj, fossile, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(périmètre, nc-nom, périmètre, [n-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(restreint, vpp-ver:pper, restreindre, [dl(0,n,n)-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(convention, nc-nom, convention, [n-1]), si(citoyenne, adj-adj, citoyen, [dl(0,n,n)-1]), si(visait, v-ver:impf, viser, [dr(0,dl(0,np,s),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(publicités, nc-nom, publicité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(voitures, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2105, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(150, nc-num, 150, [dr(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(participants, nc-nom, participant, [n-1]), si(')', ponct-pun, ')', [let-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réglementation, nc-nom, réglementation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(polluants, adj-adj, polluant, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(nocifs, adj-adj, nocif, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(par, p-prp, par, [dr(0,dr(0,s,s),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(ils, cls-pro:per, il, [np-1]), si(voulaient, v-ver:impf, vouloir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(pubs, nc-nom, pub, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('SUV', nc-nom, 'SUV', [n-1]), si('[Sport', ponct-pun, '[Sport', [dr(0,dl(0,n,n),n)-1]), si(utility, et-adj, utility, [dr(0,n,n)-1]), si('vehicle]', ponct-pun, 'vehicle]', [dr(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(polluent, v-ver:pres, polluer, [let-1]), si(un, det-det:art, un, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(maximum, nc-nom, maximum, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2106, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(mentionne, v-ver:pres, mentionner, [dr(0,dl(0,np,s),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(interdiction, nc-nom, interdiction, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pubs, nc-nom, pub, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(énergies, nc-nom, énergie, [n-1]), si(fossiles, adj-adj, fossile, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(quasiment, adv-adv, quasiment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, det-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pub, nc-nom, pub, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(1,s,s),np)-1]), si('-t-elle', cls-pro:per, '-t-elle', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2107, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Convention', nc-nam, 'Convention', [n-1]), si(citoyenne, adj-adj, citoyen, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Climat', npp-nam, 'Climat', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(mandat, nc-nom, mandat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(définir, vinf-ver:infi, définir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(permettant, vpr-ver:ppre, permettre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(baisse, nc-nom, baisse, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(40, det-num, 40, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(2030, adj-num, 2030, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(1990, pro-num, 1990, [np-1]), si(')', ponct-pun, ')', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(doit, v-ver:pres, devoir, [dr(0,dr(0,s,np),dl(0,np,s_inf))-1]), si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(respect, nc-nom, respect, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Accord', nc-nam, 'Accord', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2108, Result) :-
      prob_parse([ si('Interrogé', vpp-ver:pper, 'Interrogé', [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilité, nc-nom, utilité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(consultations, nc-nom, consultation, [n-1]), si(mises, vpp-ver:pper, mettre, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exécutif, nc-nom, exécutif, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Santé', nc-nam, 'Santé', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenté, vpp-ver:pper, tenter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(avant, nc-nom, avant, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(concrets, adj-adj, concret, [dl(0,n,n)-1]), si(issus, vpp-ver:pper, issu, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(assemblée, nc-nom, assemblée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(150, det-num, 150, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2019, adj-num, 2019, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(proposé, vpp-ver:pper, proposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(149, det-num, 149, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2020, pro-num, 2020, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2109, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(météorologue, nc-nom, météorologue, [n-1]), si('Piers', npp-nam, 'Piers', [dl(0,n,n)-1]), si('Corbyn', npp-nam, 'Corbyn', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(habitué, vpp-ver:pper, habitué, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prises, nc-nom, prise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paroles, nc-nom, parole, [n-1]), si('climato-sceptiques', adj-adj, 'climato-sceptiques', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(prétend, v-ver:pres, prétendre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(phénomène, nc-nom, phénomène, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(reposant, vpr-ver:ppre, reposer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Soleil', npp-nam, 'Soleil', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(causées, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', nc-nam, 'Homme', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2110, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(climatologues, nc-nom, climatologue, [n-1]), si(expliquent, v-ver:pres, expliquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(variations, nc-nom, variation, [n-1]), si(liées, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(trop, adv-adv, trop, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),dl(0,n,n))-1]), si(faibles, adj-adj, faible, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(variations, nc-nom, variation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(observées, vpp-ver:pper, observer, [dl(0,n,n)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2111, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), si(il, cls-pro:per, il, [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(même, adj-adj, même, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(phases, nc-nom, phase, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2112, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dérèglement, nc-nom, dérèglement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(outre, adv-adv, outre, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(consensus, nc-nom, consensus, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(experts, nc-nom, expert, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(rappellent, v-ver:pres, rappeler, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(urgent, adj-adj, urgent, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(diminuer, vinf-ver:infi, diminuer, [dr(0,dl(0,np,s_inf),np)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2113, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(météorologue, nc-nom, météorologue, [n-1]), si('Piers', npp-nam, 'Piers', [dl(0,n,n)-1]), si('Corbyn', npp-nam, 'Corbyn', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(habitué, vpp-ver:pper, habitué, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prises, nc-nom, prise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paroles, nc-nom, parole, [n-1]), si('climato-sceptiques', adj-adj, 'climato-sceptiques', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(prétend, v-ver:pres, prétendre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(phénomène, nc-nom, phénomène, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(reposant, vpr-ver:ppre, reposer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Soleil', npp-nam, 'Soleil', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(causées, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', nc-nam, 'Homme', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2114, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rayonnement, nc-nom, rayonnement, [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(influe, v-ver:pres, influer, [dr(0,dl(0,np,s),pp)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2115, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(affecte, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(couches, nc-nom, couche, [n-1]), si(atmosphériques, adj-adj, atmosphérique, [dl(0,n,n)-1]), si(confondues, vpp-ver:pper, confondre, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troposphère, nc-nom, troposphère, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(stratosphère, nc-nom, stratosphère, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2116, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(revanche, nc-nom, revanche, [n-1]), si(',', ponct-pun, ',', [let-1]), si(depuis, p-prp, depuis, [dr(0,dr(0,s,s),np)-1]), si(150, det-num, 150, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(variations, nc-nom, variation, [n-1]), si(climatiques, adj-adj, climatique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(dues, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', nc-nam, 'Homme', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2117, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autre, pro-pro:ind, autre, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(détaillait, v-ver:impf, détailler, [dr(0,dl(1,s,s),np)-1]), si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), si('Friedlingstein', npp-nam, 'Friedlingstein', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2118, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(météorologue, nc-nom, météorologue, [n-1]), si('Piers', npp-nam, 'Piers', [dl(0,n,n)-1]), si('Corbyn', npp-nam, 'Corbyn', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(habitué, vpp-ver:pper, habitué, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prises, nc-nom, prise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paroles, nc-nom, parole, [n-1]), si('climato-sceptiques', adj-adj, 'climato-sceptiques', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(prétend, v-ver:pres, prétendre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(phénomène, nc-nom, phénomène, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(reposant, vpr-ver:ppre, reposer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Soleil', npp-nam, 'Soleil', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(causées, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', nc-nam, 'Homme', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2119, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si('(', ponct-pun, '(', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si(réalisée, vpp-ver:pper, réaliser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('NASA', npp-abr, 'NASA', [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2021, pro-num, 2021, [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(récentes, adj-adj, récent, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(températures, nc-nom, température, [n-1]), si(terrestres, adj-adj, terrestre, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(état, nc-nom, état, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(changements, nc-nom, changement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(via, p-prp, via, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marées, nc-nom, marée, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(changements, nc-nom, changement, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(expliquent, v-ver:pres, expliquer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(eux, pro-pro:per, lui, [np-1]), si(seuls, adj-adj, seul, [dl(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dérèglement, nc-nom, dérèglement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(observé, vpp-ver:pper, observer, [dl(0,n,n)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remettent, v-ver:pres, remettre, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cause, nc-nom, cause, [dr(0,np,n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernier, nc-nom, dernier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2120, Result) :-
      prob_parse([ si('Piers', npp-nam, 'Piers', [dr(0,np,np)-1]), si('Corbyn', npp-nam, 'Corbyn', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(météorologue, nc-nom, météorologue, [n-1]), si(anglais, adj-adj, anglais, [dl(0,n,n)-1]), si(notoirement, adv-adv, notoirement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('climato-sceptique', adj-adj, 'climato-sceptique', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(opposé, vpp-ver:pper, opposer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vaccination, nc-nom, vaccination, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Covid-19', npp-nam, 'Covid-19', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(sanitaires, adj-adj, sanitaire, [dl(0,n,n)-1]), si(liées, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pandémie, nc-nom, pandémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(adepte, nc-nom, adept, [n-1]), si(de, p-prp, de, [n-1]), si(théories, nc-nom, théorie, [dr(0,dl(0,n,n),n)-1]), si(du, p+d-prp:det, de, [n-1]), si(complot, nc-nom, complot, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(intervenu, vpp-ver:pper, intervenir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(interview, nc-nom, interview, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(anglais, nc-nom, anglais, [n-1]), si(diffusée, vpp-ver:pper, diffuser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [n-1]), si(chaîne, nc-nom, chaîne, [dr(0,dl(0,n,n),n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(information, nc-nom, information, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('RT', npp-abr, 'RT', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2121, Result) :-
      prob_parse([ si('Piers', npp-nam, 'Piers', [dr(0,np,np)-1]), si('Corbyn', npp-nam, 'Corbyn', [np-1]), si(affiche, v-ver:pres, affiche, [dr(0,dl(0,np,s),np)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2020, pro-num, 2020, [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(manifestations, nc-nom, manifestation, [n-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(positions, nc-nom, position, [n-1]), si('anti-confinement', adj-adj, 'anti-confinement', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('anti-masques', adj-adj, 'anti-masques', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('anti-vaccination', adj-adj, 'anti-vaccination', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(relayant, vpr-ver:ppre, relayer, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(théories, nc-nom, théorie, [n-1]), si(parfois, adv-adv, parfois, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(infondées, adj-adj, infondé, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(injections, nc-nom, injection, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(estimant, vpr-ver:ppre, estimer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réalisation, nc-nom, réalisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernières, nc-nom, dernier, [n-1]), si(repose, v-ver:pres, repose, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,s),pp)-1]), si('"', ponct-pun:cit, '"', [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(paquet, nc-nom, paquet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mensonges, nc-nom, mensonge, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vous, clo-pro:per, vous, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(laver, vinf-ver:infi, laver, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cerveau, nc-nom, cerveau, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2122, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(1950, pro-num, 1950, [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(clairement, adv-adv, clairement, [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,n,n)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tenir, vinf-ver:infi, tenir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(compte, nc-nom, compte, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(facteurs, nc-nom, facteur, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si(principalement, adv-adv, principalement, [dr(0,pp,pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(résumait, v-ver:impf, résumer, [dr(0,dl(1,s,s),np)-1]), si('Jean-Pascal', npp-nam, 'Jean-Pascal', [dr(0,np,np)-1]), si(van, npp-nam, van, [np-1]), si('Ypersele', npp-nam, 'Ypersele', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2123, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('On', cls-pro:per, 'On', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(arrive, v-ver:pres, arriver, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(compte, nc-nom, compte, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(sait, v-ver:pres, savoir, [dr(0,dl(0,np,s),s_q)-1]), si(',', ponct-pun, ',', [let-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(modèles, nc-nom, modèle, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(variabilité, nc-nom, variabilité, [n-1]), si(naturelle, adj-adj, naturel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(contribue, v-ver:pres, contribuer, [dr(0,dl(0,np,s),pp)-1]), si(quasiment, adv-adv, quasiment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2124, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Fait', nc-nom, 'Fait', [n-1]), si(remarquable, adj-adj, remarquable, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), si(aucun, pro-pro:ind, aucun, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(928, adj-num, 928, [dr(0,n,n)-1]), si(articles, nc-nom, article, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(évalués, vpp-ver:pper, évaluer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(pairs, nc-nom, pair, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(publiés, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1993, pro-num, 1993, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(2003, pro-num, 2003, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(exprime, v-ver:pres, exprimer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(désaccord, nc-nom, désaccord, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(position, nc-nom, position, [n-1]), si(consensuelle, adj-adj, consensuel, [dl(0,n,n)-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cinquante, adj-num, cinquante, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(principalement, adv-adv, principalement, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(origine, nc-nom, origine, [n-1]), si(anthropique, adj-adj, anthropique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(écrit, v-ver:pres, écrire, [dr(0,dl(1,s,s),np)-1]), si('Naomi', npp-nam, 'Naomi', [dr(0,np,np)-1]), si('Oreskes', npp-nam, 'Oreskes', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réalisée, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2125, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(consensus, nc-nom, consensus, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dérèglement, nc-nom, dérèglement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2126, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Fait', nc-nom, 'Fait', [n-1]), si(remarquable, adj-adj, remarquable, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), si(aucun, pro-pro:ind, aucun, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(928, adj-num, 928, [dr(0,n,n)-1]), si(articles, nc-nom, article, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(évalués, vpp-ver:pper, évaluer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(pairs, nc-nom, pair, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(publiés, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1993, pro-num, 1993, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(2003, pro-num, 2003, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(exprime, v-ver:pres, exprimer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(désaccord, nc-nom, désaccord, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(position, nc-nom, position, [n-1]), si(consensuelle, adj-adj, consensuel, [dl(0,n,n)-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cinquante, adj-num, cinquante, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(principalement, adv-adv, principalement, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(origine, nc-nom, origine, [n-1]), si(anthropique, adj-adj, anthropique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(écrit, v-ver:pres, écrire, [dr(0,dl(1,s,s),np)-1]), si('Naomi', npp-nam, 'Naomi', [dr(0,np,np)-1]), si('Oreskes', npp-nam, 'Oreskes', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réalisée, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2127, Result) :-
      prob_parse([ si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(confiance, nc-nom, confiance, [n-1]), si(statistique, adj-adj, statistique, [dl(0,n,n)-1]), si(élevée, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(consensus, nc-nom, consensus, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(contemporain, adj-adj, contemporain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(exprimé, vpp-ver:pper, exprimer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(proportion, nc-nom, proportion, [n-1]), si(total, adj-adj, total, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(publications, nc-nom, publication, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dépasse, v-ver:pres, dépasser, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(99, adj-num, 99, [dr(0,n,n)-1]), si('%', nc-sym, '%', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(littérature, nc-nom, littérature, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(évaluée, vpp-ver:pper, évaluer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pairs, nc-nom, pair, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2128, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(existence, nc-nom, existence, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', npp-nam, 'Homme', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(régulièrement, adv-adv, régulièrement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remise, vpp-ver:pper, remettre, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(question, nc-nom, question, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(utilisateurs, nc-nom, utilisateur, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2129, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(majoritairement, adv-adv, majoritairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(lié, vpp-ver:pper, lier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(variations, nc-nom, variation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Soleil', npp-nam, 'Soleil', [n-1]), si(revient, v-ver:pres, revenir, [dr(0,dl(0,np,s),pp)-1]), si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2130, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Naturellement', adv-adv, 'Naturellement', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(refroidissement, nc-nom, refroidissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2131, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(laissait, v-ver:impf, laisser, [dr(0,dr(0,dl(0,np,s),np),dl(0,np,s_inf))-1]), si(aller, vinf-ver:infi, aller, [dl(0,np,s_inf)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(choses, nc-nom, chose, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(impact, nc-nom, impact, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', nc-nam, 'Homme', [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(irait, v-ver:impf, aller, [dr(0,dl(0,np,s),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(glaciation, nc-nom, glaciation, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('100.000', det-num, '100.000', [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2132, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Homme', nc-nam, 'Homme', [n-1]), si(perturbe, v-ver:pres, perturber, [dr(0,dl(0,np,s),np)-1]), si(tout, pro-pro:ind, tout, [np-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2133, Result) :-
      prob_parse([ si(',', ponct-pun, ',', [let-1]), si(expliquait, v-ver:impf, expliquer, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(3, adj-num, 3, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('Xavier', npp-nam, 'Xavier', [dr(0,np,np)-1]), si('Fettweis', npp-nam, 'Fettweis', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(climatologue, nc-nom, climatologue, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2134, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(variations, nc-nom, variation, [n-1]), si(climatiques, adj-adj, climatique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(observées, vpp-ver:pper, observer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(fil, nc-nom, fil, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(millénaires, nc-nom, millénaire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(apparaisse, vs-ver:subp, apparaître, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2135, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(humains, nc-nom, humain, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(réchauffe, v-ver:pres, réchauffer, [dl(0,cl_r,dl(0,np,s))-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(cause, nc-nom, cause, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(cycle, nc-nom, cycle, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2136, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('De', det-prp, 'De', [dr(0,np,n)-1]), si(faux, adj-adj, faux, [dr(0,n,n)-1]), si(appels, nc-nom, appel, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(dénoncer, vinf-ver:infi, dénoncer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(comportement, nc-nom, comportement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(voisins, nc-nom, voisin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(chaufferaient, v-ver:impf, chauffer, [dr(0,dl(0,np,s),np)-1]), si(trop, adv-adv, trop, [dl(1,s,s)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(logement, nc-nom, logement, [n-1]), si(circulent, v-ver:pres, circuler, [dl(0,np,s)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(samedi, nc-nom, samedi, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2137, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Confédération', nc-nam, 'Confédération', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(messages, nc-nom, message, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,cl_r,dl(0,np,s)),dia(1,box(1,pp_de))))-1]), si(distancie, v-ver:pres, distancier, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(formellement, adv-adv, formellement, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(ajouté, vpp-ver:pper, ajouter, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(suisse, adj-adj, suisse, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(spécifiant, vpr-ver:ppre, spécifier, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ouvert, vpp-ver:pper, ouvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(abus, nc-nom, abus, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2138, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(consommateurs, nc-nom, consommateur, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(incités, vpp-ver:pper, inciter, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(suisses, adj-adj, suisse, [dl(0,n,n)-1]), si(demanderaient, v-ver:impf, demander, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(dénoncer, vinf-ver:infi, dénoncer, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(voisin, nc-nom, voisin, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(monterait, v-ver:impf, monter, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chauffage, nc-nom, chauffage, [n-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,pp_a,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(19, det-num, 19, [dr(0,np,n)-1]), si(degrés, nc-nom, degré, [n-1]), si(',', ponct-pun, ',', [let-1]), si(prétendent, v-ver:pres, prétendre, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(circulant, vpr-ver:ppre, circuler, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2139, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Grenoble', npp-nam, 'Grenoble', [np-1]), si(fonctionne, v-ver:pres, fonctionner, [dl(0,np,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(100, det-num, 100, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(renouvelable, adj-adj, renouvelable, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élue, nc-nom, élu, [n-1]), si('Europe', npp-nam, 'Europe', [dl(0,n,n)-1]), si('Ecologie-Les', npp-nam, 'Ecologie-Les', [dl(0,n,n)-1]), si('Verts', npp-nam, 'Verts', [dr(0,dl(0,np,np),n)-1]), si('(', ponct-pun, '(', [n-1]), si('EELV', npp-abr, 'EELV', [n-1]), si(')', ponct-pun, ')', [dr(0,dl(0,np,np),np)-1]), si('Marine', npp-nam, 'Marine', [dr(0,np,np)-1]), si('Tondelier', npp-nam, 'Tondelier', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2140, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(inspirer, vinf-ver:infi, inspirer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fait, vpp-ver:pper, faire, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Grenoble', npp-nam, 'Grenoble', [np-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergies, nc-nom, énergie, [n-1]), si(renouvelables, adj-adj, renouvelable, [dl(0,n,n)-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(transports, nc-nom, transport, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vélo, nc-nom, vélo, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alimentation, nc-nom, alimentation, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,np)-1]), si(mieux, nc-nom, mieux, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vivre, vinf-ver:infi, vivre, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(ville, nc-nom, ville, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(visite, nc-nom, visite, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si('M.', nc-abr, 'M.', [dr(0,dl(0,n,n),np)-1]), si('Jadot', npp-nam, 'Jadot', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2141, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Grenoble', npp-nam, 'Grenoble', [np-1]), si(fonctionne, v-ver:pres, fonctionner, [dl(0,np,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(100, det-num, 100, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(renouvelable, adj-adj, renouvelable, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élue, nc-nom, élu, [n-1]), si('Europe', npp-nam, 'Europe', [dl(0,n,n)-1]), si('Ecologie-Les', npp-nam, 'Ecologie-Les', [dl(0,n,n)-1]), si('Verts', npp-nam, 'Verts', [dr(0,dl(0,np,np),n)-1]), si('(', ponct-pun, '(', [n-1]), si('EELV', npp-abr, 'EELV', [n-1]), si(')', ponct-pun, ')', [dr(0,dl(0,np,np),np)-1]), si('Marine', npp-nam, 'Marine', [dr(0,np,np)-1]), si('Tondelier', npp-nam, 'Tondelier', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2142, Result) :-
      prob_parse([ si('Grenoble', npp-nam, 'Grenoble', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fonctionne, v-ver:pres, fonctionner, [dl(0,np,s)-1]), si(effectivement, adv-adv, effectivement, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergies, nc-nom, énergie, [n-1]), si(renouvelables, adj-adj, renouvelable, [dl(0,n,n)-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(édile, nc-nom, édile, [n-1]), si('EELV', npp-abr, 'EELV', [dl(0,n,n)-1]), si(contacté, vpp-ver:pper, contacter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(13, adj-num, 13, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(serait, v-ver:cond, être, [dr(0,dr(0,s,pp),np)-1]), si('-ce', cls-pro:dem, '-ce', [np-1]), si(que, adv-adv, que, [dr(0,dl(1,s,s),s_q)-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,dl(0,s,s),s)-1]), si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(avancées, nc-nom, avancée, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(question, nc-nom, question, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mobilité, nc-nom, mobilité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(transports, nc-nom, transport, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(encore, adv-adv, encore, [let-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(travail, nc-nom, travail, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(faire, vinf-ver:infi, faire, [dl(0,np,s_inf)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2143, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signée, vpp-ver:pper, signer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('1.200', det-num, '1.200', [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(partagée, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(fin, nc-nom, fin, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(entend, v-ver:pres, entendre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(remettre, vinf-ver:infi, remettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cause, nc-nom, cause, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(consensus, nc-nom, consensus, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dérèglement, nc-nom, dérèglement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2144, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sans, p-prp, sans, [dr(0,pp,n)-1]), si(équivoque, adj-adj, équivoque, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(incontestable, adj-adj, incontestable, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réchauffé, vpp-ver:pper, réchauffer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(océans, nc-nom, océan, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(redit, vpp-ver:pper, redire, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Giec', npp-nam, 'Giec', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2145, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Climate', npp-nam, 'Climate', [dr(0,n,n)-1]), si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), si('Foundation', npp-nam, 'Foundation', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('(', ponct-pun, '(', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Clintel', npp-nam, 'Clintel', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), si('Berkhout', npp-nam, 'Berkhout', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(géophysicien, nc-nom, géophysicien, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(retraite, nc-nom, retraite, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(géant, nc-nom, géant, [dr(0,np,n)-1]), si(pétrolier, adj-adj, pétrolier, [n-1]), si('Shell', npp-nam, 'Shell', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), si('Crok', npp-nam, 'Crok', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(présente, v-ver:pres, présente, [dr(0,dl(1,s,s),np)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [n-1]), si(journaliste, nc-nom, journaliste, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2146, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(enquêtes, nc-nom, enquête, [n-1]), si(publiées, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1,2', pro-num, '1,2', [np-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si(climatosceptiques, adj-adj, climatosceptique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), si('Berkhout', npp-nam, 'Berkhout', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(financés, vpp-ver:pper, financer, [dl(0,np,s_pass)-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(provenant, vpr-ver:ppre, provenir, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(pétrolières, adj-adj, pétrolier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si('Shell', npp-nam, 'Shell', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('ExxonMobil', npp-nam, 'ExxonMobil', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('BP', npp-abr, 'BP', [np-1]), si(',', ponct-pun, ',', [np-1]), si('Total', npp-nam, 'Total', [dr(0,dl(0,np,np),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Saudi', npp-nam, 'Saudi', [np-1]), si('Aramco', npp-nam, 'Aramco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2147, Result) :-
      prob_parse([ si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), si('Crok', npp-nam, 'Crok', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), si('Berkhout', npp-nam, 'Berkhout', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('lui-même', pro-pro:per, 'lui-même', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(géant, nc-nom, géant, [n-1]), si(pétrolier, adj-adj, pétrolier, [dl(0,n,n)-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(40, det-num, 40, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2148, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Climate', npp-nam, 'Climate', [dr(0,n,n)-1]), si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), si('Foundation', npp-nam, 'Foundation', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('(', ponct-pun, '(', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Clintel', npp-nam, 'Clintel', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), si('Berkhout', npp-nam, 'Berkhout', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(géophysicien, nc-nom, géophysicien, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(retraite, nc-nom, retraite, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(géant, nc-nom, géant, [dr(0,np,n)-1]), si(pétrolier, adj-adj, pétrolier, [n-1]), si('Shell', npp-nam, 'Shell', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), si('Crok', npp-nam, 'Crok', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(présente, v-ver:pres, présente, [dr(0,dl(1,s,s),np)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [n-1]), si(journaliste, nc-nom, journaliste, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2149, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(enquêtes, nc-nom, enquête, [n-1]), si(publiées, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1,2', pro-num, '1,2', [np-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si(climatosceptiques, adj-adj, climatosceptique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), si('Berkhout', npp-nam, 'Berkhout', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(financés, vpp-ver:pper, financer, [dl(0,np,s_pass)-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(provenant, vpr-ver:ppre, provenir, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(pétrolières, adj-adj, pétrolier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si('Shell', npp-nam, 'Shell', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('ExxonMobil', npp-nam, 'ExxonMobil', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('BP', npp-nam, 'BP', [np-1]), si(',', ponct-pun, ',', [np-1]), si('Total', npp-nam, 'Total', [dr(0,dl(0,np,np),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Saudi', npp-nam, 'Saudi', [np-1]), si('Aramco', npp-nam, 'Aramco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2150, Result) :-
      prob_parse([ si('Clintel', npp-nam, 'Clintel', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(fondateurs, nc-nom, fondateur, [n-1]), si(diffusent, v-ver:pres, diffuser, [dr(0,dl(0,np,s),np)-1]), si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(contenus, nc-nom, contenu, [n-1]), si(remettant, vpr-ver:ppre, remettre, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cause, nc-nom, cause, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(urgence, nc-nom, urgence, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dérèglement, nc-nom, dérèglement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(',', ponct-pun, ',', [let-1]), si(note, v-ver:pres, note, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(média, nc-nom, média, [n-1]), si(anglophone, adj-adj, anglophone, [dl(0,n,n)-1]), si('DeSmog', npp-nam, 'DeSmog', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2151, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Climate', npp-nam, 'Climate', [dr(0,n,n)-1]), si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), si('Foundation', npp-nam, 'Foundation', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('(', ponct-pun, '(', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Clintel', npp-nam, 'Clintel', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2019, pro-num, 2019, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), si('Berkhout', npp-nam, 'Berkhout', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(géophysicien, nc-nom, géophysicien, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(retraite, nc-nom, retraite, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(géant, nc-nom, géant, [dr(0,np,n)-1]), si(pétrolier, adj-adj, pétrolier, [n-1]), si('Shell', npp-nam, 'Shell', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), si('Crok', npp-nam, 'Crok', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(présente, v-ver:pres, présente, [dr(0,dl(1,s,s),np)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [n-1]), si(journaliste, nc-nom, journaliste, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2152, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(enquêtes, nc-nom, enquête, [n-1]), si(publiées, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1,2', pro-num, '1,2', [np-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si(climatosceptiques, adj-adj, climatosceptique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), si('Berkhout', npp-nam, 'Berkhout', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(financés, vpp-ver:pper, financer, [dl(0,np,s_pass)-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(provenant, vpr-ver:ppre, provenir, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(pétrolières, adj-adj, pétrolier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si('Shell', npp-nam, 'Shell', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('ExxonMobil', npp-nam, 'ExxonMobil', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('BP', npp-nam, 'BP', [np-1]), si(',', ponct-pun, ',', [np-1]), si('Total', npp-nam, 'Total', [dr(0,dl(0,np,np),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Saudi', npp-nam, 'Saudi', [np-1]), si('Aramco', npp-nam, 'Aramco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2153, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(pétrolières, adj-adj, pétrolier, [dl(0,n,n)-1]), si(citées, vpp-ver:pper, citer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enquêtes, nc-nom, enquête, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médias, nc-nom, média, [n-1]), si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Shell', npp-nam, 'Shell', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pas, adv-adv, pas, [dr(0,pp,pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(courant, nc-nom, courant, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(éventuels, adj-adj, éventuel, [dr(0,n,n)-1]), si(financements, nc-nom, financement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(travaux, nc-nom, travail, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Guus', npp-nam, 'Guus', [dr(0,np,np)-1]), si('Berkhout', npp-nam, 'Berkhout', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2154, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(réchauffé, vpp-ver:pper, réchauffer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), si(moins, adv-adv, moins, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dr(0,s,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(modélisations, nc-nom, modélisation, [n-1]), si(anthropiques, adj-adj, anthropique, [dl(0,n,n)-1]), si(forcées, vpp-ver:pper, forcer, [dl(0,n,n)-1]), si('...', ponct-pun, '...', [dl(0,s,txt)-1])], Result).
sent(2155, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(repose, v-ver:pres, repose, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(modèles, nc-nom, modèle, [n-1]), si(inadéquats, vpp-ver:pper, inadéquat, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2156, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(regarde, v-ver:pres, regarder, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(projections, nc-nom, projection, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2001, pro-num, 2001, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2007, pro-num, 2007, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(anticipé, vpp-ver:pper, anticiper, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(exactement, adv-adv, exactement, [dr(0,np,np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(on, cls-pro:per, on, [np-1]), si(observe, v-ver:pres, observer, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climatologue, nc-nom, climatologue, [n-1]), si('Xavier', npp-nam, 'Xavier', [dl(0,n,n)-1]), si('Fettweis', npp-nam, 'Fettweis', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2157, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bénéfique, adj-adj, bénéfique, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nature, nc-nom, nature, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(verdissant, vpr-ver:ppre, verdir, [dr(0,dl(0,np,s_ppres),np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(planète, nc-nom, planète, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2158, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(favorisé, vpp-ver:pper, favoriser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(biomasse, nc-nom, biomasse, [n-1]), si(végétale, adj-adj, végétal, [dl(0,n,n)-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2159, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), si(tel, adj-adj, tel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(lorsque, cs-kon, lorsque, [dr(0,dr(0,s,s),s)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(concentration, nc-nom, concentration, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(élevée, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(contribue, v-ver:pres, contribuer, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(planète, nc-nom, planète, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(titre, nc-nom, titre, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(méthane, nc-nom, méthane, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(protoxyde, nc-nom, protoxyde, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(azote, nc-nom, azote, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(eux, pro-pro:per, lui, [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,dl(1,s,s))-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('GES', nc-abr, 'GES', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2160, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(néfastes, adj-adj, néfaste, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(biodiversité, nc-nom, biodiversité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(populations, nc-nom, population, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agriculture, nc-nom, agriculture, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(encore, adv-adv, encore, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ressources, nc-nom, ressource, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2161, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('World', npp-nam, 'World', [dr(0,n,n)-1]), si('Weather', npp-nam, 'Weather', [dr(0,n,n)-1]), si('Attribution', nc-nam, 'Attribution', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('WWA', npp-abr, 'WWA', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(visent, v-ver:pres, viser, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dérèglement, nc-nom, dérèglement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(utilisant, vpr-ver:ppre, utiliser, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(méthodes, nc-nom, méthode, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(analyse, nc-nom, analyse, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ensembles, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(données, nc-nom, donnée, [n-1]), si(historiques, adj-adj, historique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(calculé, vpp-ver:pper, calculer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(diverses, adj-adj, divers, [dr(0,np,n)-1]), si(catastrophes, nc-nom, catastrophe, [n-1]), si(naturelles, adj-adj, naturel, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendues, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(probables, adj-adj, probable, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tempêtes, nc-nom, tempête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2162, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(statistique, adj-adj, statistique, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(intensifie, v-ver:pres, intensifier, [dr(0,dl(0,np,s),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(rend, v-ver:pres, rendre, [dr(0,dr(0,dl(0,np,s),np),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(fréquents, adj-adj, fréquent, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ouragans, nc-nom, ouragan, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sécheresses, nc-nom, sécheresse, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(catastrophes, nc-nom, catastrophe, [n-1]), si(naturelles, adj-adj, naturel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2163, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(calcul, nc-nom, calcul, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(total, nc-nom, total, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(factures, nc-nom, facture, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gros, nc-nom, gros, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marchés, nc-nom, marché, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(diffère, v-ver:pres, différer, [dl(0,np,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(consommateurs, nc-nom, consommateur, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(derniers, nc-nom, dernier, [n-1]), si(bénéficiant, vpr-ver:ppre, bénéficier, [dr(0,dl(0,np,s_ppres),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(tarifs, nc-nom, tarif, [n-1]), si(réglementés, vpp-ver:pper, réglementer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(plafonnée, vpp-ver:pper, plafonner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(fin, nc-nom, fin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2164, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Il', cls-pro:per, 'Il', [np-1]), si(faut, v-ver:pres, falloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(différence, nc-nom, différence, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tarifs, nc-nom, tarif, [n-1]), si(réglementés, vpp-ver:pper, réglementer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fixés, vpp-ver:pper, fixer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(concernent, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(particuliers, nc-nom, particulier, [n-1]), si(consommateurs, nc-nom, consommateur, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [let-1]), si(souligne, v-ver:pres, souligner, [dr(0,dl(1,s,s),np)-1]), si('Sophie', npp-nam, 'Sophie', [dr(0,np,np)-1]), si('Méritet', npp-nam, 'Méritet', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2165, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(calcul, nc-nom, calcul, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(total, nc-nom, total, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(factures, nc-nom, facture, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(uniquement, adv-adv, uniquement, [dl(1,s,s)-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gros, nc-nom, gros, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marchés, nc-nom, marché, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(diffère, v-ver:pres, différer, [dl(0,np,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(consommateurs, nc-nom, consommateur, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(derniers, nc-nom, dernier, [n-1]), si(bénéficiant, vpr-ver:ppre, bénéficier, [dr(0,dl(0,np,s_ppres),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(tarifs, nc-nom, tarif, [n-1]), si(réglementés, vpp-ver:pper, réglementer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(plafonnée, vpp-ver:pper, plafonner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(fin, nc-nom, fin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2166, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(face, nc-nom, face, [dr(0,dr(0,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(flambée, nc-nom, flambée, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(',', ponct-pun, ',', [let-1]), si('Jean', npp-nam, 'Jean', [dr(0,np,np)-1]), si('Castex', npp-nam, 'Castex', [np-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-adv, alors, [dr(0,dl(0,np,np),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déploiement, nc-nom, déploiement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(bouclier, nc-nom, bouclier, [n-1]), si(tarifaire, adj-adj, tarifaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comportant, vpr-ver:ppre, comporter, [dr(0,dl(0,n,n),np)-1]), si(notamment, adv-adv, notamment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plafond, nc-nom, plafond, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tarifs, nc-nom, tarif, [n-1]), si(réglementés, vpp-ver:pper, réglementer, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(compter, vinf-ver:infi, compter, [dr(0,dl(0,np,s_inf),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(blocage, nc-nom, blocage, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(0,n,n),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2167, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(2007, pro-num, 2007, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(concurrence, nc-nom, concurrence, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(particuliers, nc-nom, particulier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2168, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(consommateurs, nc-nom, consommateur, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(fournisseur, nc-nom, fournisseur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(historiques, nc-nom, historique, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Electricité', nc-nam, 'Electricité', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('EDF', npp-abr, 'EDF', [n-1]), si(')', ponct-pun, ')', [let-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Engie', npp-nam, 'Engie', [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(alternatifs, adj-adj, alternatif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(chacun, pro-pro:ind, chacun, [dl(1,s,s)-1]), si(proposer, vinf-ver:infi, proposer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(offres, nc-nom, offre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si(différents, adj-adj, différent, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2169, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(consommateurs, nc-nom, consommateur, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fourniture, nc-nom, fourniture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(molécule, nc-nom, molécule, [n-1]), si(constitue, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(48, det-num, 48, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(facture, nc-nom, facture, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(trimestre, nc-nom, trimestre, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médiateur, nc-nom, médiateur, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autorité, nc-nom, autorité, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(indépendante, adj-adj, indépendant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2170, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('D\'une', det-det:art, 'D\'une', [dr(0,dr(0,s,s),np)-1]), si(manière, nc-nom, manière, [dr(0,np,n)-1]), si(générale, adj-adj, général, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(la, det-det:art, le, [let-1]), si(partie, nc-nom, partie, [dr(0,np,n)-1]), si(fourniture, nc-nom, fourniture, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(molécule, nc-nom, molécule, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si('c\'', cls-pro:dem, 'c\'', [dr(0,dl(0,np,s),s)-1]), si(est, v-ver:pres, être, [np-1]), si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(peu, adv-adv, peu, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(de, p-prp, de, [dr(0,np,pp_de)-1]), si(la, det-det:art, le, [dr(0,pp_de,np)-1]), si(moitié, nc-nom, moitié, [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(coût, nc-nom, coût, [dr(0,dl(0,n,n),n)-1]), si(sur, p-prp, sur, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(facture, nc-nom, facture, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2171, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,s,s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(approvisionnement, nc-nom, approvisionnement, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réseau, nc-nom, réseau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2172, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(après, adv-adv, après, [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(diverses, adj-adj, divers, [dr(0,np,n)-1]), si(taxes, nc-nom, taxe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(détaille, v-ver:pres, détailler, [dr(0,dl(1,s,s),np)-1]), si('François', npp-nam, 'François', [dr(0,np,np)-1]), si('Carlier', npp-nam, 'Carlier', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(association, nc-nom, association, [n-1]), si('CLCV', npp-abr, 'CLCV', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2173, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(régulateur, nc-nom, régulateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Ofgem', npp-nam, 'Ofgem', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tarifs, nc-nom, tarif, [n-1]), si(règlementés, vpp-ver:pper, règlementer, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(allaient, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2174, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(approche, nc-nom, approche, [n-1]), si(différente, adj-adj, différent, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(tensions, nc-nom, tension, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,np,s_ppres),dl(0,np,s_ppart))-1]), si(élevé, vpp-ver:pper, élever, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équivalent, nc-nom, équivalent, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tarifs, nc-nom, tarif, [n-1]), si(réglementés, vpp-ver:pper, réglementer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(avec, p-prp, avec, [dr(0,dr(0,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décision, nc-nom, décision, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(abrupte, adj-adj, abrupt, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grandeur, nc-nom, grandeur, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(multiplication, nc-nom, multiplication, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(cinq, pro-num, cinq, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(détaille, v-ver:pres, détailler, [dr(0,dl(1,s,s),np)-1]), si('Patrice', npp-nam, 'Patrice', [dr(0,np,np)-1]), si('Geoffron', npp-nam, 'Geoffron', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(professeur, nc-nom, professeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(économie, nc-nom, économie, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Paris', npp-nam, 'Paris', [dr(0,np,np)-1]), si('Dauphine', npp-nam, 'Dauphine', [np-1]), si('PSL', npp-abr, 'PSL', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Centre', npp-nam, 'Centre', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(géopolitique, nc-nom, géopolitique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matières, nc-nom, matière, [n-1]), si(premières, adj-adj, premier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2175, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),n)-1]), si('mi-août', nc-nom, 'mi-août', [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si('HAARP', npp-abr, 'HAARP', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(arme, nc-nom, arme, [n-1]), si(géophysique, adj-adj, géophysique, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('3,6', det-num, '3,6', [dr(0,np,n)-1]), si('Millions', nc-nom, 'Millions', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('Watts', nc-nam, 'Watts', [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(modifier, vinf-ver:infi, modifier, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(guise, nc-nom, guise, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2176, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(experts, nc-nom, expert, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('3,6', det-num, '3,6', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(watts, nc-nom, watt, [n-1]), si(équivaut, v-ver:pres, équivaloir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(infime, adj-adj, infime, [dr(0,n,n)-1]), si(fraction, nc-nom, fraction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(naturelle, adj-adj, naturel, [dl(0,n,n)-1]), si(envoyée, vpp-ver:pper, envoyer, [dr(0,dl(0,n,n),pp_par)-1]), si(',', ponct-pun, ',', [let-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(',', ponct-pun, ',', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(soleil, nc-nom, soleil, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2177, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),n)-1]), si('mi-août', nc-nom, 'mi-août', [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(publications, nc-nom, publication, [n-1]), si(partagées, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si('HAARP', npp-abr, 'HAARP', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(arme, nc-nom, arme, [n-1]), si(géophysique, adj-adj, géophysique, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('3,6', det-num, '3,6', [dr(0,np,n)-1]), si('Millions', nc-nom, 'Millions', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('Watts', nc-nam, 'Watts', [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(modifier, vinf-ver:infi, modifier, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(guise, nc-nom, guise, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2178, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(experts, nc-nom, expert, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(longueurs, nc-nom, longueur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(onde, nc-nom, onde, [n-1]), si(utilisées, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('HAARP', npp-abr, 'HAARP', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(affectent, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(couches, nc-nom, couche, [n-1]), si(basses, adj-adj, bas, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(observe, v-ver:pres, observer, [dl(0,cl_r,dl(0,np,s))-1]), si(et, cc-kon, et, [cl_r-1]), si(se, clr-pro:per, se, [cl_r-1]), si(produit, v-ver:pres, produire, [dr(0,dl(0,cl_r,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2179, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('HAARP', npp-abr, 'HAARP', [dl(0,n,n)-1]), si('-High', npp-nam, '-High', [dl(0,n,n)-1]), si(frequency, et-adj, frequency, [dr(0,n,n)-1]), si(active, et-adj, active, [dr(0,n,n)-1]), si(auroral, et-adj, auroral, [dr(0,n,n)-1]), si(research, et-nam, research, [n-1]), si(program, et-nom, program, [n-1]), si('-', ponct-pun, '-', [let-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alaska', npp-nam, 'Alaska', [n-1]), si(',', ponct-pun, ',', [let-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(depuis, p-prp, depuis, [dr(0,pp_de,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(théories, nc-nom, théorie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(complot, nc-nom, complot, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2180, Result) :-
      prob_parse([ si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(expliquait, v-ver:impf, expliquer, [dr(0,dr(0,s,np),np)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2011, pro-num, 2011, [np-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('Conspiracy', npp-nam, 'Conspiracy', [dl(0,n,n)-1]), si('Watch', npp-nam, 'Watch', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si('HAARP', npp-abr, 'HAARP', [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objet, nc-nom, objet, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(fantasmes, nc-nom, fantasme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(raisons, nc-nom, raison, [n-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2181, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si('FAQ', npp-nam, 'FAQ', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('HAARP', npp-abr, 'HAARP', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(classifié, vpp-ver:pper, classifier, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pour, p-prp, pour, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [n-1]), si(publiques, adj-adj, public, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2182, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étude, nc-nom, étude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(programme, nc-nom, programme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('HAARP', npp-abr, 'HAARP', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(domaine, nc-nom, domaine, [n-1]), si(public, adj-adj, public, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2183, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si('FAQ', npp-nam, 'FAQ', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('HAARP', npp-abr, 'HAARP', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(classifié, vpp-ver:pper, classifier, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étude, nc-nom, étude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(domaine, nc-nom, domaine, [n-1]), si(public, adj-adj, public, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2184, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alaska', npp-nam, 'Alaska', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Fairbanks', npp-nam, 'Fairbanks', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2185, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [n-1]), si(publiques, adj-adj, public, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si(organise, v-ver:pres, organiser, [dr(0,dl(0,np,s),np)-1]), si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(portes, nc-nom, porte, [n-1]), si(ouvertes, vpp-ver:pper, ouvert, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(public, nc-nom, public, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2186, Result) :-
      prob_parse([ si('HAARP', npp-abr, 'HAARP', [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(secrète, adj-adj, secret, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(neige, nc-nom, neige, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(gérée, vpp-ver:pper, gérer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(2187, Result) :-
      prob_parse([ si('L\'émetteur', nc-nam, 'L\'émetteur', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('HAARP', npp-abr, 'HAARP', [dr(0,dl(0,n,n),n)-1]), si(envoie, v-ver:pres, envoyer, [n-1]), si(de, det-prp, de, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), si(énergie, nc-nom, énergie, [dr(0,np,n)-1]), si(sous, p-prp, sou, [n-1]), si(forme, nc-nom, forme, [dr(0,dl(1,s,s),n)-1]), si(de, p-prp, de, [n-1]), si(pulsations, nc-nom, pulsation, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [let-1]), si(un, det-det:art, un, [dr(0,dr(0,s,s),np)-1]), si(laps, nc-nom, laps, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(temps, nc-nom, temps, [dr(0,dl(0,n,n),n)-1]), si(extrêmement, adv-adv, extrêmement, [n-1]), si(court, adj-adj, court, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(donc, adv-adv, donc, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(très, adv-adv, très, [dl(1,s,s)-1]), si(improbable, adj-adj, improbable, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(que, cs-kon, que, [dl(0,n,n)-1]), si(cela, pro-pro:dem, celer, [dr(0,s_q,s)-1]), si(modifie, v-ver:pres, modifier, [np-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(climat, nc-nom, climat, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [let-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si('Romain', npp-nam, 'Romain', [dl(1,s,dl(0,np,s_ppart))-1]), si('Maggiolo', npp-nam, 'Maggiolo', [dr(0,np,np)-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(2188, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(modifie, v-ver:pres, modifier, [dl(0,cl_r,dl(0,np,s))-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(long, adj-adj, long, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2189, Result) :-
      prob_parse([ si('"Modifier', vinf-ver:infi, '"Modifier', [let-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s_inf),np)-1]), si(climat, nc-nom, climat, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(ça, pro-pro:dem, cela, [dr(0,dl(0,np,s),s)-1]), si(veut, v-ver:pres, vouloir, [np-1]), si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(modifier, vinf-ver:infi, modifier, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(la, det-det:art, le, [dr(0,dl(0,np,s_inf),np)-1]), si(météo, nc-nom, météo, [dr(0,np,n)-1]), si(sur, p-prp, sur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,s,s),np)-1]), si(long, adj-adj, long, [dr(0,np,n)-1]), si(terme, nc-nom, terme, [dr(0,n,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(2190, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si(différentes, adj-adj, différents, [dr(0,np,n)-1]), si('méta-études', nc-nom, 'méta-études', [n-1]), si('-', ponct-pun, '-', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,np,np)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(résument, v-ver:pres, résumer, [dr(0,dl(0,np,s),np)-1]), si(systématiquement, adv-adv, systématiquement, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(',', ponct-pun, ',', [let-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(97, det-num, 97, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(accordent, v-ver:pres, accorder, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2191, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(même, adv-adv, même, [dr(0,np,np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(consensus, nc-nom, consensus, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réchauffé, vpp-ver:pper, réchauffer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(océans, nc-nom, océan, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2192, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Réchauffement', nc-nom, 'Réchauffement', [n-1]), si(oui, adv-adv, oui, [dl(0,np,np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dû, vpp-ver:pper, dû, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(activités, nc-nom, activité, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(incertain, adj-adj, incertain, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2193, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si(différentes, adj-adj, différents, [dr(0,np,n)-1]), si('méta-études', nc-nom, 'méta-études', [n-1]), si('-', ponct-pun, '-', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,np,np)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(résument, v-ver:pres, résumer, [dr(0,dl(0,np,s),np)-1]), si(systématiquement, adv-adv, systématiquement, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(',', ponct-pun, ',', [let-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(97, det-num, 97, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(accordent, v-ver:pres, accorder, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2194, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(articles, nc-nom, article, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(publiés, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(revues, nc-nom, revue, [n-1]), si(sérieuses, adj-adj, sérieux, [dl(0,n,n)-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(auteurs, nc-nom, auteur, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(températures, nc-nom, température, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2195, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si(différentes, adj-adj, différents, [dr(0,np,n)-1]), si('méta-études', nc-nom, 'méta-études', [n-1]), si('-', ponct-pun, '-', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,np,np)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(résument, v-ver:pres, résumer, [dr(0,dl(0,np,s),np)-1]), si(systématiquement, adv-adv, systématiquement, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(',', ponct-pun, ',', [let-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(97, det-num, 97, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sujet, nc-nom, sujet, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(accordent, v-ver:pres, accorder, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2196, Result) :-
      prob_parse([ si('Seulement', adv-adv, 'Seulement', [dr(0,np,np)-1]), si(3, det-num, 3, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(accord, nc-nom, accord, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2197, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(variations, nc-nom, variation, [n-1]), si(climatiques, adj-adj, climatique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(150, adj-num, 150, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(exclusivement, adv-adv, exclusivement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(générées, vpp-ver:pper, générer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2198, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(interview, nc-nom, interview, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Brian', npp-nam, 'Brian', [dr(0,np,np)-1]), si('Catt', npp-nam, 'Catt', [np-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(valoir, vinf-ver:infi, valoir, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fluctuation, nc-nom, fluctuation, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(températures, nc-nom, température, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(nouvelle, adj-adj, nouveau, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(observée, vpp-ver:pper, observer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(millénaires, nc-nom, millénaire, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(planète, nc-nom, planète, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(décennies, nc-nom, décennie, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dû, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(causes, nc-nom, cause, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(juge, v-ver:pres, juger, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(démontrable, adj-adj, démontrable, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2199, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(variations, nc-nom, variation, [n-1]), si(climatiques, adj-adj, climatique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(150, adj-num, 150, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(exclusivement, adv-adv, exclusivement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(générées, vpp-ver:pper, générer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2200, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carbone, nc-nom, carbone, [n-1]), si(provenant, vpr-ver:ppre, provenir, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(activités, nc-nom, activité, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(faisant, vpr-ver:ppre, faire, [dr(0,dr(0,dl(0,np,s_ppres),np),dl(0,np,s_inf))-1]), si(monter, vinf-ver:infi, monter, [dl(0,np,s_inf)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dioxyde, nc-nom, dioxyde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carbone, nc-nom, carbone, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2201, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(températures, nc-nom, température, [n-1]), si(mondiales, adj-adj, mondial, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(concentration, nc-nom, concentration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(augmentent, v-ver:pres, augmenter, [dl(0,np,s)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(1960, adj-num, 1960, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(taches, nc-nom, tache, [n-1]), si(solaires, adj-adj, solaire, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), si(indicateurs, nc-nom, indicateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(graphique, nc-nom, graphique, [n-1]), si(')', ponct-pun, ')', [let-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(irradiance, nc-nom, irradiance, [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(totale, adj-adj, total, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(graphique, nc-nom, graphique, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bas, nc-nom, bas, [n-1]), si(')', ponct-pun, ')', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eux, pro-pro:per, lui, [dl(1,s,s)-1]), si(diminué, vpp-ver:pper, diminuer, [dl(0,np,s_ppart)-1]), si(globalement, adv-adv, globalement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2202, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si('1950-1960', adj-num, '1950-1960', [dl(0,n,n)-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(retombée, vpp-ver:pper, retomber, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('2008-2019', pro-num, '2008-2019', [np-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(même, adv-adv, même, [dr(0,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(températures, nc-nom, température, [n-1]), si(mondiales, adj-adj, mondial, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(accélérait, v-ver:cond, accélérer, [dl(0,cl_r,dl(0,np,s))-1]), si(',', ponct-pun, ',', [let-1]), si(souligne, v-ver:pres, souligner, [dr(0,dl(1,s,s),np)-1]), si('Mike', npp-nam, 'Mike', [dr(0,np,np)-1]), si('Lockwood', npp-nam, 'Lockwood', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2203, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(températures, nc-nom, température, [n-1]), si(mondiales, adj-adj, mondial, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(concentration, nc-nom, concentration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(augmentent, v-ver:pres, augmenter, [dl(0,np,s)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(1960, adj-num, 1960, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(taches, nc-nom, tache, [n-1]), si(solaires, adj-adj, solaire, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), si(indicateurs, nc-nom, indicateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(graphique, nc-nom, graphique, [n-1]), si(')', ponct-pun, ')', [let-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(irradiance, nc-nom, irradiance, [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(totale, adj-adj, total, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(graphique, nc-nom, graphique, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bas, nc-nom, bas, [n-1]), si(')', ponct-pun, ')', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eux, pro-pro:per, lui, [dl(1,s,s)-1]), si(diminué, vpp-ver:pper, diminuer, [dl(0,np,s_ppart)-1]), si(globalement, adv-adv, globalement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2204, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(soleil, nc-nom, soleil, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(légèrement, adv-adv, légèrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(brillant, adj-adj, brillant, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(50, adj-num, 50, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si('-là', adv-adv, '-là', [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(nous, cls-pro:per, nous, [np-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(observé, vpp-ver:pper, observer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2205, Result) :-
      prob_parse([ si('L\'impact', nc-nom, 'L\'impact', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(irradiance, nc-nom, irradiance, [dr(0,np,n)-1]), si(solaire, adj-adj, solaire, [n-1]), si(sur, p-prp, sur, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(climat, nc-nom, climat, [dr(0,np,n)-1]), si(est, v-ver:pres, être, [n-1]), si(minime, adj-adj, minime, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(abonde, v-ver:pres, abonder, [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),np)-1]), si(agence, nc-nom, agence, [dr(0,np,n)-1]), si(spatiale, adj-adj, spatial, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('NASA', npp-abr, 'NASA', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(2206, Result) :-
      prob_parse([ si('Quant', adv-adv, 'Quant', [dr(0,dr(0,s,s),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(nuages, nc-nom, nuage, [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2207, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(nuages, nc-nom, nuage, [n-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(système, nc-nom, système, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(non, adv-adv, non, [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(externe, adj-adj, externe, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(note, v-ver:pres, note, [dr(0,dl(1,s,s),np)-1]), si('Mike', npp-nam, 'Mike', [dr(0,np,np)-1]), si('Lockwood', npp-nam, 'Lockwood', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2208, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(effet, nc-nom, effet, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(paramètres, nc-nom, paramètre, [n-1]), si(globaux, adj-adj, global, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2209, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(choses, nc-nom, chose, [n-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),dr(0,dl(0,n,n),dl(0,n,n)))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(importantes, adj-adj, important, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(soleil, nc-nom, soleil, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(brille, v-ver:pres, briller, [dl(0,np,s)-1]), si(dessus, adv-adv, dessus, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gravité, nc-nom, gravité, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(attire, v-ver:pres, attirer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sol, nc-nom, sol, [n-1]), si('(...)', ponct-pun, '(...)', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nuages, nc-nom, nuage, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(stabilité, nc-nom, stabilité, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2210, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(facteurs, nc-nom, facteur, [n-1]), si(naturels, adj-adj, naturel, [dl(0,n,n)-1]), si(mentionnés, vpp-ver:pper, mentionner, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(connus, vpp-ver:pper, connaître, [dl(0,np,s_pass)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(longtemps, adv-adv, longtemps, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(compte, nc-nom, compte, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(calculs, nc-nom, calcul, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(modèles, nc-nom, modèle, [n-1]), si(climatiques, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(assure, v-ver:pres, assurer, [dr(0,dl(1,s,s),np)-1]), si('Ed', npp-nam, 'Ed', [dr(0,np,np)-1]), si('Hawkins', npp-nam, 'Hawkins', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2211, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Nous', cls-pro:per, 'Nous', [np-1]), si(encodons, v-ver:pres, encoder, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(toute, adv-adv, tout, [dr(0,np,np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(compréhension, nc-nom, compréhension, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(physique, nc-nom, physique, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chimie, nc-nom, chimie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(biologie, nc-nom, biologie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(océans, nc-nom, océan, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(terre, nc-nom, terre, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2212, Result) :-
      prob_parse([ si('Brian', npp-nam, 'Brian', [dr(0,np,np)-1]), si('Catt', npp-nam, 'Catt', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(prend, v-ver:pres, prendre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(modèles, nc-nom, modèle, [n-1]), si(informatiques, adj-adj, informatique, [dl(0,n,n)-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(climatologues, nc-nom, climatologue, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2213, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('L\'affirmation', nc-nom, 'L\'affirmation', [dr(0,np,n)-1]), si(initiale, adj-adj, initial, [n-1]), si(est, v-ver:pres, être, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s),s_q)-1]), si(le, det-det:art, le, [dr(0,s_q,s)-1]), si('CO2', nc-abr, 'CO2', [dr(0,np,n)-1]), si(cause, v-ver:pres, cause, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(problème, nc-nom, problème, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(alors, adv-kon, alors, [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(1,s,s),s_q)-1]), si(en, p-prp, en, [dr(0,s_q,s)-1]), si(fait, nc-nom, fait, [dr(0,dr(0,s,s),n)-1]), si(ce, cls-pro:dem, ce, [n-1]), si('n\'', adv-adv, 'n\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(probablement, adv-adv, probablement, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(le, det-det:art, le, [dr(0,np,np)-1]), si(cas, nc-nom, cas, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2214, Result) :-
      prob_parse([ si('Donc', adv-kon, 'Donc', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(ce, pro-pro:dem, ce, [np-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(ils, cls-pro:per, il, [np-1]), si(font, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ignorent, v-ver:pres, ignorer, [dr(0,dl(0,np,s),np)-1]), si(tranquillement, adv-adv, tranquillement, [dl(1,s,s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ignorent, v-ver:pres, ignorer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(change, v-ver:pres, changer, [dl(0,np,s)-1]), si(naturellement, adv-adv, naturellement, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(introduisent, v-ver:pres, introduire, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(modèles, nc-nom, modèle, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(relation, nc-nom, relation, [n-1]), si(causale, adj-adj, causal, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dioxyde, nc-nom, dioxyde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carbone, nc-nom, carbone, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2215, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(facteurs, nc-nom, facteur, [n-1]), si(naturels, adj-adj, naturel, [dl(0,n,n)-1]), si(mentionnés, vpp-ver:pper, mentionner, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(connus, vpp-ver:pper, connaître, [dl(0,np,s_pass)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(longtemps, adv-adv, longtemps, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(compte, nc-nom, compte, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(calculs, nc-nom, calcul, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(modèles, nc-nom, modèle, [n-1]), si(climatiques, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(assure, v-ver:pres, assurer, [dr(0,dl(1,s,s),np)-1]), si('Ed', npp-nam, 'Ed', [dr(0,np,np)-1]), si('Hawkins', npp-nam, 'Hawkins', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2216, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Nous', cls-pro:per, 'Nous', [np-1]), si(encodons, v-ver:pres, encoder, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(toute, adv-adv, tout, [dr(0,np,np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(compréhension, nc-nom, compréhension, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(physique, nc-nom, physique, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chimie, nc-nom, chimie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(biologie, nc-nom, biologie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(océans, nc-nom, océan, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(terre, nc-nom, terre, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2217, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(modèles, nc-nom, modèle, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(testés, vpp-ver:pper, tester, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(capacité, nc-nom, capacité, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(reproduire, vinf-ver:infi, reproduire, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tendances, nc-nom, tendance, [n-1]), si(récentes, adj-adj, récent, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(réussissent, v-ver:pres, réussir, [dl(0,np,s)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(finissent, v-ver:pres, finir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(par, p-prp, par, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(projections, nc-nom, projection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avenir, nc-nom, avenir, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2218, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(développée, vpp-ver:pper, développer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(automne, nc-nom, automne, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(annuelle, adj-adj, annuel, [dl(0,n,n)-1]), si(maximale, adj-adj, maximal, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dixième, adj-num, dixième, [dr(0,n,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(maximale, adj-adj, maximal, [dl(0,n,n)-1]), si(annuelle, adj-adj, annuel, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(basse, adj-adj, bas, [dl(0,n,n)-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(enregistrée, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2219, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(arctique, adj-adj, arctique, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(banquise, nc-nom, banquise, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(record, nc-nom, record, [dl(0,n,n)-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2022, pro-num, 2022, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(remettant, vpr-ver:ppre, remettre, [dr(0,dr(0,dl(0,np,s_ppres),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cause, nc-nom, cause, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2220, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(développée, vpp-ver:pper, développer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(automne, nc-nom, automne, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(annuelle, adj-adj, annuel, [dl(0,n,n)-1]), si(maximale, adj-adj, maximal, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dixième, adj-num, dixième, [dr(0,n,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(maximale, adj-adj, maximal, [dl(0,n,n)-1]), si(annuelle, adj-adj, annuel, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(basse, adj-adj, bas, [dl(0,n,n)-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(enregistrée, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2221, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(appelée, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si(banquise, nc-nom, banquise, [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(formée, vpp-ver:pper, former, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(congélation, nc-nom, congélation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2222, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(salée, adj-adj, saler, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(gèle, v-ver:pres, geler, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(descend, v-ver:pres, descendre, [dl(0,np,s)-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(dessous, nc-adv, dessous, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(0, det-num, 0, [dr(0,np,n)-1]), si(degré, nc-nom, degré, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2223, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(développée, vpp-ver:pper, développer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(automne, nc-nom, automne, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(annuelle, adj-adj, annuel, [dl(0,n,n)-1]), si(maximale, adj-adj, maximal, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dixième, adj-num, dixième, [dr(0,n,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(maximale, adj-adj, maximal, [dl(0,n,n)-1]), si(annuelle, adj-adj, annuel, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(basse, adj-adj, bas, [dl(0,n,n)-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(enregistrée, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2224, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(arctique, adj-adj, arctique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(culminé, vpp-ver:pper, culminer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('5,75', det-num, '5,75', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(miles, nc-nom, mile, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si('14,88', det-num, '14,88', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2225, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(élevée, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2226, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(saisonnalité, nc-nom, saisonnalité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(maximum, nc-nom, maximum, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),n)-1]), si(mars, nc-nom, mars, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(minimum, nc-nom, minimum, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(0,n,n),n)-1]), si(année, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2227, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(été, nc-nom, été, [n-1]), si(',', ponct-pun, ',', [let-1]), si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(habituellement, adv-adv, habituellement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(banquise, nc-nom, banquise, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(petite, adj-adj, petit, [dl(0,n,n)-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(jour, nc-nom, jour, [np-1]), si(tout, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(',', ponct-pun, ',', [let-1]), si(donc, adv-adv, donc, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(chaud, adj-adj, chaud, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(retirée, vpp-ver:pper, retirer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2228, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(programme, nc-nom, programme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(observation, nc-nom, observation, [n-1]), si('Copernicus', npp-nam, 'Copernicus', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(rassemble, v-ver:pres, rassembler, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(climatiques, adj-adj, climatique, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(satellite, nc-nom, satellite, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tendance, nc-nom, tendance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonte, nc-nom, fonte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(arctique, adj-adj, arctique, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1979, pro-num, 1979, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2229, Result) :-
      prob_parse([ si('Tamsin', npp-nam, 'Tamsin', [dr(0,np,np)-1]), si('Edwards', npp-nam, 'Edwards', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(climatologue, nc-nom, climatologue, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('King\'s', npp-nam, 'King\'s', [dr(0,n,n)-1]), si('College', npp-nam, 'College', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(',', ponct-pun, ',', [let-1]), si(expliquait, v-ver:impf, expliquer, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(précédent, adj-adj, précédent, [dr(0,n,n)-1]), si(article, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vérification, nc-nom, vérification, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(si, cs-kon, si, [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(varie, v-ver:pres, varier, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(1,s,s)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autre, pro-pro:ind, autre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('(...)', ponct-pun, '(...)', [let-1]), si(la, det-det:art, le, [let-1]), si(tendance, nc-nom, tendance, [dr(0,np,n)-1]), si(générale, adj-adj, général, [n-1]), si(est, v-ver:pres, être, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,s),pp)-1]), si(déclin, nc-nom, déclin, [dr(0,pp_a,n)-1]), si('.', ponct-pun, '.', [n-1]), si('"', ponct-pun:cit, '"', [let-1])], Result).
sent(2230, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(résumé, nc-nom, résumé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Groupement', nc-nam, 'Groupement', [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(experts, nc-nom, expert, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),np)-1]), si(2011, pro-num, 2011, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(2020, pro-num, 2020, [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(superficie, nc-nom, superficie, [n-1]), si(moyenne, adj-adj, moyen, [dl(0,n,n)-1]), si(annuelle, adj-adj, annuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banquise, nc-nom, banquise, [n-1]), si(arctique, adj-adj, arctique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(bas, adj-adj, bas, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(1850, pro-num, 1850, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2231, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(',', ponct-pun, ',', [let-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(150, adj-num, 150, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(moment, nc-nom, moment, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(glaces, nc-nom, glace, [n-1]), si('(', ponct-pun, '(', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(')', ponct-pun, ')', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(recouvert, vpp-ver:pper, recouvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,np,s_q),np)-1]), si(peu, adv-adv, peu, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(surface, nc-nom, surface, [n-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2232, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(intense, adj-adj, intense, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(sérieux, adj-adj, sérieux, [dr(0,n,n)-1]), si(impact, nc-nom, impact, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faune, nc-nom, faune, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(dépend, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(continuité, nc-nom, continuité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(chasser, vinf-ver:infi, chasser, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [let-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(répercussions, nc-nom, répercussion, [n-1]), si(mondiales, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2233, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),n)-1]), si(mesure, nc-nom, mesure, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(réchauffe, v-ver:pres, réchauffer, [dl(0,cl_r,dl(0,np,s))-1]), si(',', ponct-pun, ',', [let-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(glaciers, nc-nom, glacier, [n-1]), si(vont, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(fondre, vinf-ver:infi, fondre, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(incidence, nc-nom, incidence, [n-1]), si(globale, adj-adj, global, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mers, nc-nom, mer, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dl(1,s,dl(0,np,s_ppart))-1]), si('Antti', npp-nam, 'Antti', [dr(0,np,np)-1]), si('Lipponen', npp-nam, 'Lipponen', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2234, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(fonte, nc-nom, fonte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(glaciaire, adj-adj, glaciaire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(principal, adj-adj, principal, [dr(0,n,n)-1]), si(moteur, nc-nom, moteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si(',', ponct-pun, ',', [let-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fonte, nc-nom, fonte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(glaciers, nc-nom, glacier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(expansion, nc-nom, expansion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(océan, nc-nom, océan, [n-1]), si(sous, p-prp, sou, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si('(', ponct-pun, '(', [let-1]), si(sous, p-prp, sou, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(dilate, v-ver:pres, dilater, [dl(0,cl_r,dl(0,np,s))-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(volume, nc-nom, volume, [n-1]), si(augmente, v-ver:pres, augmenter, [let-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2235, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(glaciaire, adj-adj, glaciaire, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Groenland', npp-nam, 'Groenland', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(approcher, vinf-ver:infi, approcher, [dr(0,dl(0,np,s_inf),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(point, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bascule, nc-nom, bascule, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fonte, nc-nom, fonte, [n-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(récentes, adj-adj, récent, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(contient, v-ver:pres, contenir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(quantité, nc-nom, quantité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(glacée, adj-adj, glacé, [dl(0,n,n)-1]), si(capable, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(élever, vinf-ver:infi, élever, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(océans, nc-nom, océan, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(six, det-num, six, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2236, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(règlements, nc-nom, règlement, [n-1]), si(applicables, adj-adj, applicable, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sein, nc-nom, sein, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(imposent, v-ver:pres, imposer, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(calibre, nc-nom, calibre, [n-1]), si(maximal, adj-adj, maximal, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cerises, nc-nom, cerise, [n-1]), si(commercialisées, vpp-ver:pper, commercialiser, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2237, Result) :-
      prob_parse([ si('Illustrant', vpr-ver:ppre, 'Illustrant', [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(propos, nc-nom, propos, [n-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(conteneur, nc-nom, conteneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(déchets, nc-nom, déchet, [n-1]), si(rempli, vpp-ver:pper, remplir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(cerises, nc-nom, cerise, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(ils, cls-pro:per, il, [np-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(fruit, nc-nom, fruit, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si(cm, nc-nom, cm, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(normes, nc-nom, norme, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2238, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si('Européenne', adj-adj, 'Européenne', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agriculture, nc-nom, agriculture, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Miriam', npp-nam, 'Miriam', [dr(0,np,np)-1]), si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), si('Ferrer', npp-nam, 'Ferrer', [np-1]), si(',', ponct-pun, ',', [let-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(revanche, nc-nom, revanche, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(législation, nc-nom, législation, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(exige, v-ver:pres, exiger, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cerises, nc-nom, cerise, [n-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(calibre, nc-nom, calibre, [n-1]), si(inférieur, adj-adj, inférieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si(cm, nc-abr, cm, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2239, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(bennes, nc-nom, benne, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(ordures, nc-nom, ordure, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(remplie, vpp-ver:pper, remplir, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(cerises, nc-nom, cerise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(cageots, nc-nom, cageot, [n-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(conformes, adj-adj, conforme, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(normes, nc-nom, norme, [n-1]), si('UE', npp-abr, 'UE', [dl(0,n,n)-1]), si('[de', ponct-pun, '[de', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si('Union', npp-nam, 'Union', [dr(0,np,n)-1]), si('européenne]', adj-adj, 'européenne]', [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(pour, p-prp, pour, [let-1]), si(une, det-det:art, un, [let-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(1,s,s),np)-1]), si(histoire, nc-nom, histoire, [dr(0,np,n)-1]), si(de, p-prp, de, [let-1]), si(taille, nc-nom, taille, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si(les, det-det:art, le, [let-1]), si(cerises, nc-nom, cerise, [dr(0,dl(0,s,s),s)-1]), si(commercialisées, vpp-ver:pper, commercialiser, [dr(0,np,n)-1]), si(ne, adv-adv, ne, [n-1]), si(devant, vpr-ver:ppre, devoir, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [let-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),np)-1]), si(2, det-num, 2, [dr(0,np,pp_de)-1]), si(cm, nc-abr, cm, [dr(0,pp_de,np)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(2240, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(règlements, nc-nom, règlement, [n-1]), si(applicables, adj-adj, applicable, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sein, nc-nom, sein, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(imposent, v-ver:pres, imposer, [dr(0,dl(0,np,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(calibre, nc-nom, calibre, [n-1]), si(maximal, adj-adj, maximal, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cerises, nc-nom, cerise, [n-1]), si(commercialisées, vpp-ver:pper, commercialiser, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(territoire, nc-nom, territoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2241, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(calibre, nc-nom, calibre, [n-1]), si(minimal, adj-adj, minimal, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si(mm, nc-abr, millimètre, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cerises, nc-nom, cerise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(type, nc-nom, type, [dr(0,n,n)-1]), si('Picota', npp-nam, 'Picota', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(catégorie, nc-nom, catégorie, [n-1]), si('\\', p+d-prp:det, '\\', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Extra', nc-nam, 'Extra', [let-1]), si('\\', nc-nom, '\\', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(';', ponct-pun, ';', [let-1]), si(22, det-num, 22, [let-1]), si(mm, nc-abr, millimètre, [dr(0,dl(0,np,np),np)-1]), si(pour, p-prp, pour, [dr(0,np,n)-1]), si(les, det-det:art, le, [n-1]), si(autres, adj-adj, autre, [dr(0,dl(0,np,np),np)-1]), si(variétés, nc-nom, variété, [dr(0,np,n)-1]), si(dans, p-prp, dans, [dr(0,n,n)-1]), si(la, det-det:art, le, [n-1]), si(catégorie, nc-nom, catégorie, [dr(0,dl(0,n,n),np)-1]), si('\\', p+d-prp:det, '\\', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('Extra', et-nom, 'Extra', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('\\', nc-nom, '\\', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(';', ponct-pun, ';', [dl(0,n,n)-1]), si(17, det-num, 17, [let-1]), si(mm, nc-abr, millimètre, [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(catégories, nc-nom, catégorie, [n-1]), si('I', nc-num, 'I', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [dr(0,np,n)-1]), si('II', adj-num, 'II', [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(précise, v-ver:pres, préciser, [dl(0,n,n)-1]), si(la, det-det:art, le, [let-1]), si(norme, nc-nom, norme, [let-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(qualité, nc-nom, qualité, [dr(0,np,n)-1]), si(commerciale, adj-adj, commercial, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(la, det-det:art, le, [n-1]), si('Commission', npp-nam, 'Commission', [dl(0,n,n)-1]), si(économique, adj-adj, économique, [dr(0,dl(0,n,n),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si('Nations', nc-nam, 'Nations', [n-1]), si(unies, vpp-ver:pper, uni, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si('l\'', det-det:art, 'l\'', [n-1]), si('Europe', npp-nam, 'Europe', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si('CEE-ONU', npp-abr, 'CEE-ONU', [dr(0,np,n)-1]), si(')', ponct-pun, ')', [n-1]), si(relative, adj-adj, relatif, [dr(0,dl(0,np,np),n)-1]), si(aux, p+d-prp:det, à, [n-1]), si(cerises, nc-nom, cerise, [let-1]), si('.', ponct-pun, '.', [dr(0,dl(0,n,n),pp_a)-1])], Result).
sent(2242, Result) :-
      prob_parse([ si('D\'abord', adv-adv, 'D\'abord', [dr(0,dr(0,s,s),n)-1]), si(',', ponct-pun, ',', [n-1]), si(le, det-det:art, le, [let-1]), si(réchauffement, nc-nom, réchauffement, [dr(0,np,n)-1]), si(provoque, v-ver:pres, provoquer, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), si(amincissement, nc-nom, amincissement, [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(parties, nc-nom, party, [dr(0,dl(0,n,n),n)-1]), si(flottantes, adj-adj, flottant, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(calotte, nc-nom, calotte, [dr(0,np,n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(retiennent, v-ver:pres, retenir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(en, p-prp, en, [dr(0,dl(0,np,s),np)-1]), si(partie, nc-nom, partie, [dr(0,dl(1,s,s),n)-1]), si(la, det-det:art, le, [n-1]), si(glace, nc-nom, glace, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(ce, pro-pro:dem, ce, [dr(0,dl(0,s,s),np)-1]), si(qui, prorel-pro:rel, qui, [np-1]), si(conduit, v-ver:pres, conduire, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), si('l\'', det-det:art, 'l\'', [dr(0,pp_a,np)-1]), si(accélération, nc-nom, accélération, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(écoulement, nc-nom, écoulement, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(glace, nc-nom, glace, [dr(0,np,n)-1]), si(vers, p-prp, vers, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(océan, nc-nom, océan, [dr(0,np,n)-1]), si(et, cc-kon, et, [n-1]), si(donc, adv-adv, donc, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp,pp)-1]), si(une, det-det:art, un, [dr(0,pp_a,np)-1]), si(perte, nc-nom, perte, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(masse, nc-nom, masse, [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2243, Result) :-
      prob_parse([ si('Ensuite', adv-adv, 'Ensuite', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(chutes, nc-nom, chute, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(neige, nc-nom, neige, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(chaud, adj-adj, chaud, [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(contenir, vinf-ver:infi, contenir, [dr(0,dl(0,np,s_inf),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(humidité, nc-nom, humidité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(conduit, v-ver:pres, conduire, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(gain, nc-nom, gain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si(',', ponct-pun, ',', [let-1]), si(du, p+d-prp:det, de, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(moins, adv-adv, moins, [n-1]), si(tant, adv-adv, tant, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(reste, v-ver:pres, reste, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(températures, nc-nom, température, [n-1]), si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(négatives, adj-adj, négatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2244, Result) :-
      prob_parse([ si('Donc', cc-kon, 'Donc', [dr(0,s,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si(soi, pro-pro:per, soi, [np-1]), si(',', ponct-pun, ',', [let-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(gagne, v-ver:pres, gagner, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,dl(0,np,s),s),dl(0,dl(0,np,s),s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(contradictoire, adj-adj, contradictoire, [dr(0,dl(0,n,n),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(globe, nc-nom, globe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2245, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2015, pro-num, 2015, [np-1]), si(',', ponct-pun, ',', [let-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(affiliés, vpp-ver:pper, affilier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('NASA', npp-abr, 'NASA', [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(estimé, vpp-ver:pper, estimer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Antarctique', npp-nam, 'Antarctique', [n-1]), si(',', ponct-pun, ',', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gains, nc-nom, gain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si(dus, vpp-ver:pper, du, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accumulation, nc-nom, accumulation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(neige, nc-nom, neige, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dépassé, vpp-ver:pper, dépasser, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2246, Result) :-
      prob_parse([ si('D\'abord', adv-adv, 'D\'abord', [dr(0,dr(0,s,s),n)-1]), si(',', ponct-pun, ',', [n-1]), si(le, det-det:art, le, [let-1]), si(réchauffement, nc-nom, réchauffement, [dr(0,np,n)-1]), si(provoque, v-ver:pres, provoquer, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), si(amincissement, nc-nom, amincissement, [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(parties, nc-nom, party, [dr(0,dl(0,n,n),n)-1]), si(flottantes, adj-adj, flottant, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(calotte, nc-nom, calotte, [dr(0,np,n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(retiennent, v-ver:pres, retenir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(en, p-prp, en, [dr(0,dl(0,np,s),np)-1]), si(partie, nc-nom, partie, [dr(0,dl(1,s,s),n)-1]), si(la, det-det:art, le, [n-1]), si(glace, nc-nom, glace, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(ce, pro-pro:dem, ce, [dr(0,dl(0,s,s),np)-1]), si(qui, prorel-pro:rel, qui, [np-1]), si(conduit, v-ver:pres, conduire, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s),pp)-1]), si('l\'', det-det:art, 'l\'', [dr(0,pp_a,np)-1]), si(accélération, nc-nom, accélération, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(écoulement, nc-nom, écoulement, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(glace, nc-nom, glace, [dr(0,np,n)-1]), si(vers, p-prp, vers, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(océan, nc-nom, océan, [dr(0,np,n)-1]), si(et, cc-kon, et, [n-1]), si(donc, adv-adv, donc, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp,pp)-1]), si(une, det-det:art, un, [dr(0,pp_a,np)-1]), si(perte, nc-nom, perte, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(masse, nc-nom, masse, [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2247, Result) :-
      prob_parse([ si('Ensuite', adv-adv, 'Ensuite', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(chutes, nc-nom, chute, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(neige, nc-nom, neige, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(chaud, adj-adj, chaud, [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(contenir, vinf-ver:infi, contenir, [dr(0,dl(0,np,s_inf),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(humidité, nc-nom, humidité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(conduit, v-ver:pres, conduire, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(gain, nc-nom, gain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si(',', ponct-pun, ',', [let-1]), si(du, p+d-prp:det, de, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(moins, adv-adv, moins, [n-1]), si(tant, adv-adv, tant, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(on, cls-pro:per, on, [np-1]), si(reste, v-ver:pres, reste, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(températures, nc-nom, température, [n-1]), si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(négatives, adj-adj, négatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2248, Result) :-
      prob_parse([ si('Donc', cc-kon, 'Donc', [dr(0,s,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si(soi, pro-pro:per, soi, [np-1]), si(',', ponct-pun, ',', [let-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(gagne, v-ver:pres, gagner, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,dl(0,np,s),s),dl(0,dl(0,np,s),s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(contradictoire, adj-adj, contradictoire, [dr(0,dl(0,n,n),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(globe, nc-nom, globe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2249, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(calottes, nc-nom, calotte, [n-1]), si(glaciaires, adj-adj, glaciaire, [dl(0,n,n)-1]), si(gagnent, v-ver:pres, gagner, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accumulation, nc-nom, accumulation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(neige, nc-nom, neige, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(perdent, v-ver:pres, perdre, [dr(0,dl(0,np,s),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(processus, nc-nom, processus, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ruissellement, nc-nom, ruissellement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fonte, nc-nom, fonte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(surface, nc-nom, surface, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vêlage, nc-nom, vêlage, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(icebergs, nc-nom, iceberg, [n-1]), si('(', ponct-pun, '(', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,dl(0,np,np)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(icebergs, nc-nom, iceberg, [n-1]), si(à, p-prp, à, [n-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),pp)-1]), si(un, det-det:art, un, [dr(0,pp_de,np)-1]), si(glacier, nc-nom, glacier, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(lorsque, cs-kon, lorsque, [let-1]), si(des, det-prp:det, de, [dr(0,dl(0,s,s),s)-1]), si(bouts, nc-nom, bout, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(glace, nc-nom, glace, [n-1]), si('s\'', clr-pro:per, 's\'', [n-1]), si(en, clo-pro:per, en, [cl_r-1]), si(détachent, v-ver:pres, détacher, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(et, cc-kon, et, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(se, clr-pro:per, se, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(retrouvent, v-ver:pres, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(la, det-det:art, le, [dr(0,pp,np)-1]), si(mer, nc-nom, mer, [n-1]), si(ou, cc-kon, ou, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),np)-1]), si(océan, nc-nom, océan, [dr(0,np,n)-1]), si(')', ponct-pun, ')', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [let-1]), si(la, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si(fonte, nc-nom, fonte, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(base, nc-nom, base, [dr(0,dl(0,n,n),np)-1]), si(des, p+d-prp:det, de, [n-1]), si(plateformes, nc-nom, plateforme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si(flottantes, adj-adj, flottant, [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si(glaciers, nc-nom, glacier, [dl(0,n,n)-1]), si(côtiers, adj-adj, côtier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2250, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(conclusions, nc-nom, conclusion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2015, pro-num, 2015, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remettent, v-ver:pres, remettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(cause, nc-nom, cause, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(existence, nc-nom, existence, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dérèglement, nc-nom, dérèglement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(contraire, nc-nom, contraire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2251, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Nous', cls-pro:per, 'Nous', [np-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interprété, vpp-ver:pper, interpréter, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(gains, nc-nom, gain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Antarctique', npp-nam, 'Antarctique', [n-1]), si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(illustration, nc-nom, illustration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(terme, nc-nom, terme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accumulation, nc-nom, accumulation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(neige, nc-nom, neige, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2252, Result) :-
      prob_parse([ si('Donc', cc-kon, 'Donc', [dr(0,s,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si(soi, pro-pro:per, soi, [np-1]), si(',', ponct-pun, ',', [let-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(gagne, v-ver:pres, gagner, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,dl(0,np,s),s),dl(0,dl(0,np,s),s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(contradictoire, adj-adj, contradictoire, [dr(0,dl(0,n,n),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(globe, nc-nom, globe, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2253, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fraude, nc-nom, fraude, [n-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Antarctique', npp-nam, 'Antarctique', [n-1]), si(gagne, v-ver:pres, gagner, [dr(0,dl(0,np,s),np)-1]), si(112, det-num, 112, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(tonnes, nc-nom, tonne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(an, nc-nom, an, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2254, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(',', ponct-pun, ',', [let-1]), si(considérée, vpp-ver:pper, considérer, [dr(0,dr(0,dl(0,n,n),pp_par),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(référence, nc-nom, référence, [n-1]), si(',', ponct-pun, ',', [let-1]), si(publiée, vpp-ver:pper, publier, [dr(0,dl(0,n,n),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(2018, pro-num, 2018, [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si('Nature', npp-nam, 'Nature', [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(spécialistes, nc-nom, spécialiste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pôles, nc-nom, pôle, [n-1]), si(',', ponct-pun, ',', [let-1]), si(combinant, vpr-ver:ppre, combiner, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(méthodes, nc-nom, méthode, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(analyses, nc-nom, analyse, [n-1]), si(satellites, adj-adj, satellite, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), si(clairement, adv-adv, clairement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déclin, nc-nom, déclin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Antarctique', npp-nam, 'Antarctique', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2255, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(satellites, nc-nom, satellite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('NASA', npp-abr, 'NASA', [n-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(calottes, nc-nom, calotte, [n-1]), si(glaciaires, adj-adj, glaciaire, [dl(0,n,n)-1]), si(terrestres, adj-adj, terrestre, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Antarctique', npp-nam, 'Antarctique', [n-1]), si(perdent, v-ver:pres, perdre, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2002, pro-num, 2002, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2256, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(parties, nc-nom, party, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Antarctique', npp-nam, 'Antarctique', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(stable, adj-adj, stable, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(perte, nc-nom, perte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(parties, nc-nom, party, [n-1]), si(la, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(dépasse, v-ver:pres, dépasser, [dr(0,dl(0,np,s),np)-1]), si(largement, adv-adv, largement, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(particulièrement, adv-adv, particulièrement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2257, Result) :-
      prob_parse([ si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), si(zones, nc-nom, zone, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si(antarctique, adj-adj, antarctique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(gagné, vpp-ver:pper, gagner, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(glace, nc-nom, glace, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(certaine, adj-adj, certain, [dr(0,n,n)-1]), si(période, nc-nom, période, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(zones, nc-nom, zone, [n-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2258, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(satellites, nc-nom, satellite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('NASA', npp-abr, 'NASA', [n-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(calottes, nc-nom, calotte, [n-1]), si(glaciaires, adj-adj, glaciaire, [dl(0,n,n)-1]), si(terrestres, adj-adj, terrestre, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Antarctique', npp-nam, 'Antarctique', [n-1]), si(perdent, v-ver:pres, perdre, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2002, pro-num, 2002, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2259, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(estimations, nc-nom, estimation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(calotte, nc-nom, calotte, [n-1]), si(glacière, adj-adj, glacièr, [dl(0,n,n)-1]), si(antarctique, adj-adj, antarctique, [dl(0,n,n)-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ainsi, adv-adv, ainsi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(gagné, vpp-ver:pper, gagner, [dr(0,dl(0,np,s_ppart),np)-1]), si(112, det-num, 112, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(tonnes, nc-nom, tonne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(an, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(1992, pro-num, 1992, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(2001, pro-num, 2001, [np-1]), si(',', ponct-pun, ',', [let-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,np,np),np)-1]), si(82, pro-num, 82, [np-1]), si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), si(an, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(2003, pro-num, 2003, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(2008, pro-num, 2008, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2260, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(changement, nc-nom, changement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(température, nc-nom, température, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(200, det-num, 200, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(fait, v-ver:pres, faire, [dl(0,cl_r,dl(0,np,s))-1]), si(naturellement, adv-adv, naturellement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('10.000', det-num, '10.000', [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2261, Result) :-
      prob_parse([ si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(changements, nc-nom, changement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(température, nc-nom, température, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ceux, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rapides, adj-adj, rapide, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(importants, adj-adj, important, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2262, Result) :-
      prob_parse([ si('Côté', nc-nom, 'Côté', [dr(0,dr(0,s,s),n)-1]), si(français, adj-adj, français, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(estivale, adj-adj, estival, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(marquée, vpp-ver:pper, marquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(épisodes, nc-nom, épisode, [n-1]), si(caniculaires, adj-adj, caniculaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(importants, adj-adj, important, [dr(0,n,n)-1]), si(incendies, nc-nom, incendie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(sécheresse, nc-nom, sécheresse, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si('Météo', npp-nam, 'Météo', [dr(0,np,np)-1]), si('France', npp-nam, 'France', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(bilan, nc-nom, bilan, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mois, nc-nom, mois, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(premières, adj-num, premier, [dr(0,n,n)-1]), si(observations, nc-nom, observation, [n-1]), si(début, nc-nom, début, [dr(0,dl(0,n,n),n)-1]), si(août, nc-nom, août, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2263, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(depuis, p-prp, depuis, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(17, adj-num, 17, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(établit, v-ver:pres, établir, [dr(0,dl(0,np,s),np)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(jour, nc-nom, jour, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(record, nc-nom, record, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécheresse, nc-nom, sécheresse, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sols, nc-nom, sol, [n-1]), si('(', ponct-pun, '(', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(historique, nc-nom, historique, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(débute, v-ver:pres, débuter, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(août, nc-nom, août, [n-1]), si(1958, adj-num, 1958, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(note, v-ver:pres, note, [dr(0,dl(1,s,s),np)-1]), si('Météo-France', npp-nam, 'Météo-France', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2264, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ADAC', npp-abr, 'ADAC', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prouvé, vpp-ver:pper, prouver, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(consomme, v-ver:pres, consommer, [dr(0,dl(0,np,s),np)-1]), si(relativement, adv-adv, relativement, [dr(0,np,np)-1]), si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arrêt, nc-nom, arrêt, [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2265, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(embouteillage, nc-nom, embouteillage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(températures, nc-nom, température, [n-1]), si(allant, vpr-ver:ppre, aller, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('-7°C', nc-abr, '-7°C', [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si('-14°C', npp-nam, '-14°C', [dr(0,dl(0,pp_de,pp_a),np)-1]), si(',', ponct-pun, ',', [dr(0,np,n)-1]), si('n\'', adv-adv, 'n\'', [n-1]), si(entraînerait, v-ver:cond, entraîner, [let-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(déchargement, nc-nom, déchargement, [dr(0,np,np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(18, det-num, 18, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si('%', nc-sym, '%', [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(la, det-det:art, le, [n-1]), si(batterie, nc-nom, batterie, [dr(0,dl(0,n,n),np)-1]), si('.', ponct-pun, '.', [dr(0,np,n)-1])], Result).
sent(2266, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(éléments, nc-nom, élément, [n-1]), si(connus, vpp-ver:pper, connaître, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(technologie, nc-nom, technologie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chauffage, nc-nom, chauffage, [n-1]), si(',', ponct-pun, ',', [let-1]), si(8, det-num, 8, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(batterie, nc-nom, batterie, [n-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(embouteillage, nc-nom, embouteillage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(conclut, v-ver:pres, conclure, [dr(0,dl(1,s,s),np)-1]), si('Julia', npp-nam, 'Julia', [dr(0,np,np)-1]), si('Poliscanova', npp-nam, 'Poliscanova', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2267, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(batteries, nc-nom, batterie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(déchargeraient, v-ver:impf, décharger, [dl(0,cl_r,dl(0,np,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(embouteillage, nc-nom, embouteillage, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(froid, nc-nom, froid, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(neige, nc-nom, neige, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2268, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('Which', npp-nam, 'Which', [dl(0,n,n)-1]), si('?', ponct-pun, '?', [dl(0,np,txt)-1])], Result).
sent(2269, Result) :-
      prob_parse([ si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(testé, vpp-ver:pper, tester, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(embouteillage, nc-nom, embouteillage, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(période, nc-nom, période, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(climatisation, nc-nom, climatisation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(accessoires, nc-nom, accessoire, [n-1]), si(allumés, vpp-ver:pper, allumer, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('SUV', nc-nom, 'SUV', [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si('Volkswagen', npp-nam, 'Volkswagen', [dl(0,n,n)-1]), si('ID.4', npp-abr, 'ID.4', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2270, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,dr(0,np,np),n)-1]), si(peu, adv-adv, peu, [n-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(minutes, nc-nom, minute, [n-1]), si(':', ponct-pun, ':', [let-1]), si('Nous', cls-pro:per, 'Nous', [np-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(batterie, nc-nom, batterie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(batterie, nc-nom, batterie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('77kWh', nc-nam, '77kWh', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(estimait, v-ver:impf, estimer, [dr(0,dl(1,s,s),np)-1]), si('-il', cls-pro:per, '-il', [np-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(août, nc-nom, août, [n-1]), si(2021, adj-num, 2021, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2271, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(batteries, nc-nom, batterie, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si(mourraient, v-ver:impf, mourir, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(instant, nc-nom, instant, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), si(on, cls-pro:per, on, [np-1]), si(allumait, v-ver:impf, allumer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(climatisation, nc-nom, climatisation, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(embouteillages, nc-nom, embouteillage, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(été, nc-nom, été, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(contredite, vpp-ver:pper, contredire, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2272, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(carburant, nc-nom, carburant, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(ravitaillée, vpp-ver:pper, ravitailler, [dl(0,np,s_pass)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(bidon, nc-nom, bidon, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(essence, nc-nom, essence, [n-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(cas, nc-nom, cas, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(déplacé, vpp-ver:pper, déplacer, [dl(0,np,s_pass)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(station, nc-nom, station, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recharge, nc-nom, recharge, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2273, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(batterie, nc-nom, batterie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(rechargée, vpp-ver:pper, recharger, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), si(place, nc-nom, place, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rue, nc-nom, rue, [n-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(coincé, vpp-ver:pper, coincer, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(embouteillages, nc-nom, embouteillage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2274, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(exiger, vinf-ver:infi, exiger, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cobalt, nc-nom, cobalt, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(lithium, nc-nom, lithium, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nickel, nc-nom, nickel, [n-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(batteries, nc-nom, batterie, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(issus, vpp-ver:pper, issu, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(matériaux, nc-nom, matériau, [n-1]), si(recyclés, vpp-ver:pper, recycler, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2030, pro-num, 2030, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(poussant, vpr-ver:ppre, pousser, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fabricants, nc-nom, fabricant, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(capacités, nc-nom, capacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recyclage, nc-nom, recyclage, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(dépêche, nc-nom, dépêche, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2275, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(pression, nc-nom, pression, [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(favoriser, vinf-ver:infi, favoriser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(recyclage, nc-nom, recyclage, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(batteries, nc-nom, batterie, [n-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(matériaux, nc-nom, matériau, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(cobalt, nc-nom, cobalt, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(graphite, nc-nom, graphite, [n-1]), si(',', ponct-pun, ',', [let-1]), si(etc, adv-abr, etc, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2276, Result) :-
      prob_parse([ si(')', ponct-pun, ')', [let-1]), si(contenus, vpp-ver:pper, contenir, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(batteries, nc-nom, batterie, [n-1]), si('Li-ion', npp-nam, 'Li-ion', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(classés, vpp-ver:pper, classer, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(critiques, nc-nom, critique, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(économie, nc-nom, économie, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(marchés, nc-nom, marché, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(concentrés, vpp-ver:pper, concentrer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2277, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(individus, nc-nom, individu, [n-1]), si(remettent, v-ver:pres, remettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(question, nc-nom, question, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(singularité, nc-nom, singularité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(vagues, nc-nom, vague, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chaleur, nc-nom, chaleur, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(1895, pro-num, 1895, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('mi-août', nc-nom, 'mi-août', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('mi-septembre', nc-nom, 'mi-septembre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moyenne, nc-nom, moyenne, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(températures, nc-nom, température, [n-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('37°C', nc-abr, '37°C', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(2278, Result) :-
      prob_parse([ si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(1895, adj-num, 1895, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moyenne, nc-nom, moyenne, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(températures, nc-nom, température, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('20,3°C', pro-nam, '20,3°C', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(a, v-ver:pres, avoir, [let-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si('Météo', npp-nam, 'Météo', [dl(1,s,dl(0,np,s_ppart))-1]), si('France', npp-nam, 'France', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ce, det-pro:dem, ce, [dr(0,dl(0,np,s_ppart),np)-1]), si(calcul, nc-nom, calcul, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,s_inf),pp)-1]), si(moyennes, nc-nom, moyenne, [dr(0,pp_de,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(températures, nc-nom, température, [dr(0,dl(0,n,n),n)-1]), si(quotidiennes, adj-adj, quotidien, [n-1]), si(enregistrées, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(0,n,n),pp_par)-1]), si(jour, nc-nom, jour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(par, p-prp, par, [n-1]), si(la, det-det:art, le, [dr(0,pp_par,np)-1]), si(station, nc-nom, station, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Montsouris', npp-nam, 'Montsouris', [dr(0,dl(0,n,n),np)-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(2279, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vagues, nc-nom, vague, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chaleur, nc-nom, chaleur, [n-1]), si(ces, det-pro:dem, ce, [dr(0,dl(0,n,n),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(rendues, vpp-ver:pper, rendre, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(sévères, adj-adj, sévère, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(sait, v-ver:pres, savoir, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(tout, adv-adv, tout, [dr(0,np,np)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(documenté, vpp-ver:pper, documenter, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(littérature, nc-nom, littérature, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(en, p-prp, en, [dr(0,dr(0,np,np),n)-1]), si(particulier, nc-nom, particulier, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(commenté, vpp-ver:pper, commenter, [dl(1,s,dl(0,np,s_ppart))-1]), si('Météo', npp-nam, 'Météo', [dr(0,np,np)-1]), si('France', npp-nam, 'France', [np-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AFP', npp-abr, 'AFP', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2280, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vagues, nc-nom, vague, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chaleur, nc-nom, chaleur, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(nouvelles, adj-adj, nouveau, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(rend, v-ver:pres, rendre, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(intenses, adj-adj, intense, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(fréquentes, adj-adj, fréquent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2281, Result) :-
      prob_parse([ si('Ces', det-pro:dem, 'Ces', [dr(0,dr(0,s,s),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(organisateurs, nc-nom, organisateur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(festival, nc-nom, festival, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ailleurs, adv-adv, ailleurs, [n-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impact, nc-nom, impact, [n-1]), si(environnemental, adj-adj, environnemental, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(évènement, nc-nom, évènement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2282, Result) :-
      prob_parse([ si('Glastonbury', npp-nam, 'Glastonbury', [np-1]), si(offre, v-ver:pres, offrir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(billets, nc-nom, billet, [n-1]), si(gratuits, adj-adj, gratuit, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(festival, nc-nom, festival, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(volontaires, nc-nom, volontaire, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ramassent, v-ver:pres, ramasser, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(déchets, nc-nom, déchet, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(départ, nc-nom, départ, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(festivaliers, nc-nom, festivalier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2283, Result) :-
      prob_parse([ si('Malgré', p-prp, 'Malgré', [dr(0,dr(0,s,s),np)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(banques, nc-nom, banque, [n-1]), si('-', ponct-pun, '-', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(beaucoup, pro-pro:ind, beaucoup, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('elles-mêmes', adv-adv, 'elles-mêmes', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(engagements, nc-nom, engagement, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(net, adj-adj, net, [dl(0,n,n)-1]), si(zéro, adj-num, zéro, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('-', ponct-pun, '-', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déversé, vpp-ver:pper, déverser, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(développent, v-ver:pres, développer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(extraction, nc-nom, extraction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(analyse, nc-nom, analyse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(organisation, nc-nom, organisation, [n-1]), si(spécialisée, vpp-ver:pper, spécialiser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(surveillance, nc-nom, surveillance, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(investissements, nc-nom, investissement, [n-1]), si(éthiques, adj-adj, éthique, [dl(0,n,n)-1]), si('ShareAction', npp-nam, 'ShareAction', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2284, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(engagées, vpp-ver:pper, engager, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(zéro, adj-adj, zéro, [dr(0,np,n)-1]), si(émission, nc-nom, émission, [n-1]), si(nette, adj-adj, net, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(nécessaire, adj-adj, nécessaire, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(planète, nc-nom, planète, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('1,5°C', nc-abr, '1,5°C', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(conformément, adv-adv, conformément, [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),pp_a)-1]), si('l\'', det-det:art, 'l\'', [dr(0,pp_a,np)-1]), si(accord, nc-nom, accord, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Paris', npp-nam, 'Paris', [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [np-1]), si(2016, pro-num, 2016, [dr(0,dl(0,n,n),np)-1]), si(sur, p-prp, sur, [np-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(climat, nc-nom, climat, [dr(0,np,n)-1]), si(mais, cc-kon, mais, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,dr(0,s,s),np)-1]), si(même, adj-adj, même, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [dr(0,n,n)-1]), si(',', ponct-pun, ',', [n-1]), si(elles, cls-pro:per, lui, [let-1]), si(encouragent, v-ver:pres, encourager, [np-1]), si(les, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(combustibles, nc-nom, combustible, [dr(0,np,n)-1]), si(fossiles, adj-adj, fossile, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(comme, cs-kon, comme, [let-1]), si(le, clo-pro:per, le, [dr(0,dl(1,s,s),s)-1]), si(soulignent, v-ver:pres, souligner, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(des, det-prp:det, un, [dr(0,dr(0,s,np),np)-1]), si(chercheurs, nc-nom, chercheur, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(et, cc-kon, et, [let-1]), si(se, clr-pro:per, se, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(lancent, v-ver:pres, lancer, [cl_r-1]), si(même, adv-adv, même, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(dans, p-prp, dans, [dl(1,s,s)-1]), si(de, det-prp, de, [dr(0,pp,np)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,np,n)-1]), si(projets, nc-nom, projet, [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si(forage, nc-nom, forage, [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2285, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hydrogène, nc-nom, hydrogène, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(quantité, nc-nom, quantité, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(univers, nc-nom, univers, [n-1]), si(',', ponct-pun, ',', [let-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(élément, nc-nom, élément, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(existe, v-ver:pres, exister, [dl(0,np,s)-1]), si(quasiment, adv-adv, quasiment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(pur, adj-adj, pur, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(',', ponct-pun, ',', [let-1]), si(tel, adj-adj, tel, [dr(0,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(actuellement, adv-adv, actuellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(produit, vpp-ver:pper, produire, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(industrielle, adj-adj, industriel, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(énergies, nc-nom, énergie, [n-1]), si(fossiles, adj-adj, fossile, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(génère, v-ver:pres, générer, [dr(0,dl(0,np,s),np)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(responsables, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2286, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydrogène, nc-nom, hydrogène, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(source, nc-nom, source, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(naturelle, adj-adj, naturel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('non-polluante', adj-adj, 'non-polluante', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(présente, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(abondance, nc-nom, abondance, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(même, adj-adv, même, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(fonctionner, vinf-ver:infi, fonctionner, [dl(0,np,s_inf)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(moyens, nc-nom, moyen, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transports, nc-nom, transport, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(centrales, nc-nom, centrale, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2287, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(hydrogène, nc-nom, hydrogène, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(petit, adj-adj, petit, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(simple, adj-adj, simple, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(léger, adj-adj, léger, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(atomes, nc-nom, atome, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(principal, adj-adj, principal, [np-1]), si(constituant, vpr-ver:ppre, constituant, [n-1]), si(des, det-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(étoiles, nc-nom, étoile, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(soleil, nc-nom, soleil, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élément, nc-nom, élément, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(abondant, adj-adj, abondant, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(univers, nc-nom, univers, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2288, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('L\'hydrogène', nc-nam, 'L\'hydrogène', [dr(0,np,n)-1]), si(est, v-ver:pres, être, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), si(atome, nc-nom, atome, [dr(0,np,n)-1]), si(le, det-det:art, le, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(répandu, vpp-ver:pper, répandre, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(dans, p-prp, dans, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Univers', npp-nam, 'Univers', [dr(0,np,n)-1]), si(dont, prorel-pro:rel, dont, [n-1]), si(il, cls-pro:per, il, [dr(0,dl(0,n,n),s)-1]), si(constitue, v-ver:pres, constituer, [np-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,pp_de)-1]), si(90, det-num, 90, [dr(0,pp_de,np)-1]), si('%', nc-sym, '%', [dr(0,np,n)-1]), si(des, p+d-prp:det, de, [n-1]), si(atomes, nc-nom, atome, [dr(0,dl(0,n,n),n)-1]), si(et, cc-kon, et, [n-1]), si(75, det-num, 75, [dr(0,dl(0,np,np),np)-1]), si('%', nc-sym, '%', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(masse, nc-nom, masse, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(',', ponct-pun, ',', [let-1]), si(peut, v-ver:pres, pouvoir, [let-1]), si('-on', cls-pro:per, '-on', [dr(0,dr(0,s,dl(0,np,s_inf)),np)-1]), si(lire, vinf-ver:infi, lire, [np-1]), si(sur, p-prp, sur, [dl(1,s,dl(0,np,s_inf))-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),np)-1]), si(site, nc-nom, site, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(information, nc-nom, information, [dr(0,dl(0,n,n),n)-1]), si(pédagogique, adj-adj, pédagogique, [n-1]), si('Connaissance', nc-nam, 'Connaissance', [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si(énergies, nc-nom, énergie, [dr(0,dl(0,np,np),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2289, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('appuie-têtes', nc-nom, 'appuie-têtes', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(libérer, vinf-ver:infi, libérer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(submergé, vpp-ver:pper, submerger, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2290, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('On', cls-pro:per, 'On', [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(effectivement, adv-adv, effectivement, [dl(1,s,s)-1]), si(retirer, vinf-ver:infi, retirer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('appuie-tête', nc-nom, 'appuie-tête', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(briser, vinf-ver:infi, briser, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vitre, nc-nom, vitre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(utilisant, vpr-ver:ppre, utiliser, [dr(0,dl(0,np,s_ppres),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(pointes, nc-nom, pointe, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(vitres, nc-nom, vitre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(faut, v-ver:pres, falloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(viser, vinf-ver:infi, viser, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(angles, nc-nom, angle, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(1,s,s),np)-1]), si('Patrick', npp-nam, 'Patrick', [dr(0,np,np)-1]), si('Chavada', npp-nam, 'Chavada', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2291, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(vous, cls-pro:per, vous, [np-1]), si(vous, clr-pro:per, vous, [cl_r-1]), si(retrouvez, v-ver:pres, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(paniquez, vimp-ver:impe, paniquer, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2292, Result) :-
      prob_parse([ si(1, pro-num, 1, [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(2293, Result) :-
      prob_parse([ si('Ne', adv-adv, 'Ne', [dr(0,s,s)-1]), si(gaspillez, vimp-ver:impe, gaspiller, [dr(0,s,np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(votre, det-det:pos, votre, [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(pousser, vinf-ver:infi, pousser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(porte, nc-nom, porte, [n-1]), si(2, adj-num, 2, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2294, Result) :-
      prob_parse([ si('N\'', adv-adv, 'N\'', [dr(0,s,s)-1]), si(ouvrez, vimp-ver:impe, ouvrir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fenêtre, nc-nom, fenêtre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(entrant, vpr-ver:ppre, entrer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(permettra, v-ver:futu, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(sortir, vinf-ver:infi, sortir, [dl(0,np,s_inf)-1]), si(3, pro-num, 3, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2295, Result) :-
      prob_parse([ si('Retirez', vimp-ver:impe, 'Retirez', [dr(0,s,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('appuie-tête', nc-nom, 'appuie-tête', [n-1]), si(4, adj-num, 4, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2296, Result) :-
      prob_parse([ si('Utilisez', vimp-ver:impe, 'Utilisez', [dr(0,s,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pointe, nc-nom, pointe, [n-1]), si(tranchante, adj-adj, tranchant, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(acier, nc-nom, acier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(brisez, vimp-ver:impe, briser, [dr(0,s,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fenêtre, nc-nom, fenêtre, [n-1]), si(arrière, adj-adj, arrière, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(porte, v-ver:pres, porte, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inscription, nc-nom, inscription, [n-1]), si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,n,n),n)-1]), si('\'', ponct-pun:cit, '\'', [dr(0,n,n)-1]), si(kick, et-nom, kick, [n-1]), si(out, et-nom, out, [let-1]), si('glass\'\'', et-nom, 'glass\'\'', [let-1]), si(dessus, adv-adv, dessus, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si(partagé, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(des, det-prp:det, un, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(gré, nc-nom, gré, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(reprises, nc-nom, reprise, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réseau, nc-nom, réseau, [n-1]), si(social, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2297, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(geste, nc-nom, geste, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(situation, nc-nom, situation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(1,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('contre-intuitif', adj-adj, 'contre-intuitif', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fenêtres, nc-nom, fenêtre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(porte, nc-nom, porte, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sortir, vinf-ver:infi, sortir, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(faut, v-ver:pres, falloir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(même, adv-adv, même, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pression, nc-nom, pression, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(extérieur, nc-nom, extérieur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(véhicule, nc-nom, véhicule, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intérieur, nc-nom, intérieur, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(explique, v-ver:pres, expliquer, [dr(0,dl(1,s,s),np)-1]), si('Jean-Marc', npp-nam, 'Jean-Marc', [dr(0,np,np)-1]), si('Sicard', npp-nam, 'Sicard', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(commandant, nc-nom, commandant, [n-1]), si('sapeur-pompier', nc-nom, 'sapeur-pompier', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(adjoint, nc-nom, adjoint, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupement, nc-nom, groupement, [n-1]), si('Prévision', nc-nam, 'Prévision', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Service', nc-nam, 'Service', [n-1]), si(départemental, adj-adj, départemental, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(incendie, nc-nom, incendie, [dr(0,dl(0,n,n),n)-1]), si(et, cc-kon, et, [n-1]), si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(secours, nc-nom, secours, [dr(0,dl(0,n,n),n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('SDIS', npp-abr, 'SDIS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(du, p+d-prp:det, de, [let-1]), si('Var', npp-nam, 'Var', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2298, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(vous, cls-pro:per, vous, [np-1]), si(vous, clr-pro:per, vous, [cl_r-1]), si(retrouvez, v-ver:pres, retrouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(paniquez, vimp-ver:impe, paniquer, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2299, Result) :-
      prob_parse([ si(1, pro-num, 1, [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(2300, Result) :-
      prob_parse([ si('Ne', adv-adv, 'Ne', [dr(0,s,s)-1]), si(gaspillez, vimp-ver:impe, gaspiller, [dr(0,s,np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(votre, det-det:pos, votre, [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(pousser, vinf-ver:infi, pousser, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(porte, nc-nom, porte, [n-1]), si(2, adj-num, 2, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2301, Result) :-
      prob_parse([ si('N\'', adv-adv, 'N\'', [dr(0,s,s)-1]), si(ouvrez, vimp-ver:impe, ouvrir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fenêtre, nc-nom, fenêtre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(entrant, vpr-ver:ppre, entrer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(permettra, v-ver:futu, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(sortir, vinf-ver:infi, sortir, [dl(0,np,s_inf)-1]), si(3, pro-num, 3, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2302, Result) :-
      prob_parse([ si('Retirez', vimp-ver:impe, 'Retirez', [dr(0,s,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('appuie-tête', nc-nom, 'appuie-tête', [n-1]), si(4, adj-num, 4, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2303, Result) :-
      prob_parse([ si('Utilisez', vimp-ver:impe, 'Utilisez', [dr(0,s,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pointe, nc-nom, pointe, [n-1]), si(tranchante, adj-adj, tranchant, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(acier, nc-nom, acier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(brisez, vimp-ver:impe, briser, [dr(0,s,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fenêtre, nc-nom, fenêtre, [n-1]), si(arrière, adj-adj, arrière, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(porte, v-ver:pres, porte, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inscription, nc-nom, inscription, [n-1]), si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,n,n),n)-1]), si('\'', ponct-pun:cit, '\'', [dr(0,n,n)-1]), si(kick, et-nom, kick, [n-1]), si(out, et-nom, out, [let-1]), si('glass\'\'', et-nom, 'glass\'\'', [let-1]), si(dessus, adv-adv, dessus, [dl(1,s,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si(partagé, vpp-ver:pper, partager, [dl(0,n,n)-1]), si(des, det-prp:det, un, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fois, nc-nom, fois, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(gré, nc-nom, gré, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(reprises, nc-nom, reprise, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réseau, nc-nom, réseau, [n-1]), si(social, adj-adj, social, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2304, Result) :-
      prob_parse([ si('Antonino', npp-nam, 'Antonino', [dr(0,np,np)-1]), si('Zichichi', npp-nam, 'Zichichi', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(scientifique, nc-nom, scientifique, [n-1]), si(italien, adj-adj, italien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(spécialisé, vpp-ver:pper, spécialisé, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(physique, nc-nom, physique, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2305, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(retraité, vpp-ver:pper, retraiter, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Cern', npp-nam, 'Cern', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2306, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('Google', npp-nam, 'Google', [dl(0,n,n)-1]), si('Scholar', npp-nam, 'Scholar', [dl(0,n,n)-1]), si(renvoie, v-ver:pres, renvoyer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(articles, nc-nom, article, [n-1]), si(cosignés, vpp-ver:pper, cosigner, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Antonino', npp-nam, 'Antonino', [dr(0,np,np)-1]), si('Zichichi', npp-nam, 'Zichichi', [np-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(aucun, pro-pro:ind, aucun, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(traite, v-ver:pres, traire, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(question, nc-nom, question, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2307, Result) :-
      prob_parse([ si('Antonino', npp-nam, 'Antonino', [dr(0,np,np)-1]), si('Zichichi', npp-nam, 'Zichichi', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('climato-sceptique', nc-nom, 'climato-sceptique', [n-1]), si(italien, adj-adj, italien, [dl(0,n,n)-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connu, vpp-ver:pper, connaître, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2308, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(domaine, nc-nom, domaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(physique, nc-nom, physique, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(expérience, nc-nom, expérience, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(climatologie, nc-nom, climatologie, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(publication, nc-nom, publication, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(revue, vpp-ver:pper, revoir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pairs, nc-nom, pair, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2309, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(évaluation, nc-nom, évaluation, [n-1]), si(5, adj-num, 5, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(6, adj-num, 6, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(admettent, v-ver:pres, admettre, [dr(0,dl(0,np,s),np)-1]), si(clairement, adv-adv, clairement, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(responsabilité, nc-nom, responsabilité, [n-1]), si(humaine, adj-adj, humain, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(presque, adv-adv, presque, [dr(0,np,np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2310, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(dépend, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(moteur, nc-nom, moteur, [n-1]), si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), si(dominé, vpp-ver:pper, dominer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(puissance, nc-nom, puissance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(soleil, nc-nom, soleil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2311, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(activités, nc-nom, activité, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si(affectent, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(95, det-num, 95, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(dépendent, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(phénomènes, nc-nom, phénomène, [n-1]), si(naturels, adj-adj, naturel, [dl(0,n,n)-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(soleil, nc-nom, soleil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2312, Result) :-
      prob_parse([ si('L\'Organisation', nc-nom, 'L\'Organisation', [dr(0,np,n)-1]), si(météorologique, adj-adj, météorologique, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dl(0,n,n)-1]), si('WMO', npp-abr, 'WMO', [dr(0,dl(0,np,np),n)-1]), si(')', ponct-pun, ')', [n-1]), si(rappelle, v-ver:pres, rappeler, [let-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),s_q)-1]), si(sur, p-prp, sur, [dl(1,s,s)-1]), si(son, det-det:pos, son, [dr(0,dl(1,s,s),np)-1]), si(site, nc-nom, site, [dr(0,np,n)-1]), si(que, cs-kon, que, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), si(les, det-det:art, le, [let-1]), si(mesures, nc-nom, mesure, [dr(0,np,n)-1]), si(par, p-prp, par, [n-1]), si(satellite, nc-nom, satellite, [dr(0,dl(0,n,n),n)-1]), si(effectuées, vpp-ver:pper, effectuer, [n-1]), si(au, p+d-prp:det, au, [dl(0,n,n)-1]), si(cours, nc-nom, cours, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(des, p+d-prp:det, un, [n-1]), si(30, adj-num, 30, [dr(0,dl(0,n,n),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [dr(0,n,n)-1]), si(montrent, v-ver:pres, montrer, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s),s_q)-1]), si(la, det-det:art, le, [dr(0,s_q,s)-1]), si(production, nc-nom, production, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(énergie, nc-nom, énergie, [dr(0,dl(0,n,n),n)-1]), si(du, p+d-prp:det, de, [n-1]), si('Soleil', npp-nam, 'Soleil', [dr(0,dl(0,n,n),n)-1]), si('n\'', adv-adv, 'n\'', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(et, cc-kon, et, [dl(0,np,s_ppart)-1]), si(que, cs-kon, que, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,s_q,s)-1]), si(récent, adj-adj, récent, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [dr(0,n,n)-1]), si(observé, vpp-ver:pper, observer, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),pp)-1]), si('Terre', npp-nam, 'Terre', [dr(0,pp,n)-1]), si(ne, adv-adv, ne, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(attribué, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(des, det-prp:det, un, [dr(0,pp_a,np)-1]), si(changements, nc-nom, changement, [dr(0,np,n)-1]), si(dans, p-prp, dans, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(activité, nc-nom, activité, [dr(0,np,n)-1]), si(solaire, adj-adj, solaire, [n-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(2313, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(dépend, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(moteur, nc-nom, moteur, [n-1]), si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), si(dominé, vpp-ver:pper, dominer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(puissance, nc-nom, puissance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(soleil, nc-nom, soleil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2314, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(activités, nc-nom, activité, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si(affectent, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(95, det-num, 95, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(dépendent, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(phénomènes, nc-nom, phénomène, [n-1]), si(naturels, adj-adj, naturel, [dl(0,n,n)-1]), si(liés, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(soleil, nc-nom, soleil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2315, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(communauté, nc-nom, communauté, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(accorde, v-ver:pres, accorder, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_q)-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(analyses, nc-nom, analyse, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(données, nc-nom, donnée, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(publiées, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Groupe', nc-nam, 'Groupe', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(experts, nc-nom, expert, [n-1]), si(intergouvernemental, adj-adj, intergouvernemental, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(évolution, nc-nom, évolution, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(planète, nc-nom, planète, [n-1]), si(observé, vpp-ver:pper, observer, [dl(0,n,n)-1]), si(ces, det-pro:dem, ce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(150, adj-num, 150, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(exclusivement, adv-adv, exclusivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dû, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(émises, vpp-ver:pper, émettre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2316, Result) :-
      prob_parse([ si('Toute', adv-adv, 'Toute', [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Histoire', nc-nam, 'Histoire', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si(nous, clo-pro:per, nous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(démontre, v-ver:pres, démontrer, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si('AUCUNE', det-pro:ind, 'AUCUNE', [dr(0,np,n)-1]), si(corrélation, nc-nom, corrélation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-nom, 'CO2', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(variation, nc-nom, variation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2317, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(association, nc-nom, association, [n-1]), si('Réseau', npp-nam, 'Réseau', [dl(0,n,n)-1]), si('Action', npp-nam, 'Action', [dl(0,n,n)-1]), si('Climat', npp-nam, 'Climat', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vulgarisé, vpp-ver:pper, vulgariser, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(partie, nc-nom, partie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dernière, adj-adj, dernier, [dr(0,n,n)-1]), si(publication, nc-nom, publication, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(concentrations, nc-nom, concentration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2019, pro-num, 2019, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(élevées, vpp-ver:pper, élever, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(celles, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(méthane, nc-nom, méthane, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,np),dl(0,np,np)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(protoxyde, nc-nom, protoxyde, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(azote, nc-nom, azote, [n-1]), si(',', ponct-pun, ',', [let-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,np,np),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si('800.000', det-num, '800.000', [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2318, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(supérieur, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2319, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(agir, vinf-ver:infi, agir, [dr(0,dl(0,np,s_inf),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(émis, vpp-ver:pper, émettre, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(agir, vinf-ver:infi, agir, [dl(0,np,s_inf)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), si(venir, vinf-ver:infi, venir, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2320, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(experts, nc-nom, expert, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(présenté, vpp-ver:pper, présenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si('non-exhaustive', adj-adj, 'non-exhaustive', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(solutions, nc-nom, solution, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(actions, nc-nom, action, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(nos, det-det:pos, notre, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conséquences, nc-nom, conséquence, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(changement, nc-nom, changement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2321, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(inutile, adj-adj, inutile, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('CO2', nc-nom, 'CO2', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), si(nous, cls-pro:per, nous, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(façon, nc-nom, façon, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(moyen, nc-nom, moyen, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(action, nc-nom, action, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2322, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(date, nc-nom, date, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pakistan', npp-nam, 'Pakistan', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(relevé, vpp-ver:pper, relever, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(températures, nc-nom, température, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(supérieures, adj-adj, supérieur, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('60°C', nc-abr, '60°C', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2323, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(température, nc-nom, température, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(élevée, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(mesurée, vpp-ver:pper, mesurer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(avril, nc-nom, avril, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('47,4°C', pro-num, '47,4°C', [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2324, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(2022, adj-num, 2022, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vagues, nc-nom, vague, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chaleur, nc-nom, chaleur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(abattent, v-ver:pres, abattre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pakistan', npp-nam, 'Pakistan', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(monter, vinf-ver:infi, monter, [dl(0,np,s_inf)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(températures, nc-nom, température, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(62, det-num, 62, [dr(0,np,n)-1]), si(degrés, nc-nom, degré, [n-1]), si('Celsius', adj-adj, 'Celsius', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(atteint, vpp-ver:pper, atteindre, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(globe, nc-nom, globe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2325, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utilise, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('\'', ponct-pun:cit, '\'', [let-1]), si('modèle\'', nc-nom, 'modèle\'', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(commenté, vpp-ver:pper, commenter, [dl(1,s,dl(0,np,s_ppart))-1]), si('Pascal', npp-nam, 'Pascal', [dr(0,np,np)-1]), si('Yiou', npp-nam, 'Yiou', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),dl(0,np,s))-1]), si(ajoutant, vpr-ver:ppre, ajouter, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(repris, vpp-ver:pper, reprendre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(experts, nc-nom, expert, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(utilisent, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(modèles, nc-nom, modèle, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(évoluent, v-ver:pres, évoluer, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(statiques, adj-adj, statique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(2326, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('GIEC', npp-abr, 'GIEC', [n-1]), si(utilise, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(statique, adj-adj, statique, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(climat, nc-nom, climat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2327, Result) :-
      prob_parse([ si('S\'il', cls-pro:per, 'S\'il', [dr(0,dr(0,s,s),s)-1]), si(est, v-ver:pres, être, [np-1]), si(parfaitement, adv-adv, parfaitement, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(vrai, adj-adj, vrai, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(que, cs-kon, que, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,s_q,s)-1]), si(soleil, nc-nom, soleil, [dr(0,np,n)-1]), si(régule, v-ver:pres, régule, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(climat, nc-nom, climat, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si('Terre', npp-nam, 'Terre', [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(la, det-det:art, le, [let-1]), si(température, nc-nom, température, [dr(0,np,n)-1]), si(à, p-prp, à, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(surface, nc-nom, surface, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(notre, det-det:pos, notre, [dr(0,dl(0,n,n),np)-1]), si(planète, nc-nom, planète, [dr(0,np,n)-1]), si(dépend, v-ver:pres, dépendre, [n-1]), si(principalement, adv-adv, principalement, [dr(0,dl(0,np,s),pp)-1]), si(des, p+d-prp:det, de, [dl(1,s,s)-1]), si(gaz, nc-nom, gaz, [dr(0,pp_de,n)-1]), si(à, p-prp, à, [n-1]), si(effet, nc-nom, effet, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(serre, nc-nom, serre, [dr(0,dl(0,n,n),n)-1]), si('(', ponct-pun, '(', [n-1]), si('d\'', p-prp, 'd\'', [let-1]), si(origine, nc-nom, origine, [dr(0,dl(0,n,n),n)-1]), si(naturelle, adj-adj, naturel, [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(humaine, adj-adj, humain, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(')', ponct-pun, ')', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(sans, p-prp, sans, [let-1]), si(lesquels, prorel-pro:rel, lequel, [dr(0,pp,np)-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(la, det-det:art, le, [let-1]), si(température, nc-nom, température, [dr(0,np,n)-1]), si(moyenne, adj-adj, moyen, [n-1]), si(à, p-prp, à, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(surface, nc-nom, surface, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si('Terre', npp-nam, 'Terre', [dr(0,np,n)-1]), si(avoisinerait, v-ver:cond, avoisiner, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si('-18°', nc-abr, '-18°', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,n,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(2328, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('C\'est', v-ver:pres, 'C\'est', [np-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), si(activité, nc-nom, activité, [dr(0,np,n)-1]), si(solaire, adj-adj, solaire, [n-1]), si(qui, prorel-pro:rel, qui, [dl(0,n,n)-1]), si(régit, v-ver:pres, régir, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si(climat, nc-nom, climat, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(manière, nc-nom, manière, [dr(0,dl(1,s,s),n)-1]), si(majeure, adj-adj, majeur, [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(aucunement, adv-adv, aucunement, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,np)-1]), si(émissions, nc-nom, émission, [dr(0,np,n)-1]), si(annuelles, adj-adj, annuel, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si('CO2', nc-abr, 'CO2', [dr(0,dl(0,n,n),n)-1]), si(qui, prorel-pro:rel, qui, [n-1]), si(je, cls-pro:per, je, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(le, clo-pro:per, le, [np-1]), si(rappelle, v-ver:pres, rappeler, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(naturelles, adj-adj, naturel, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(à, p-prp, à, [dl(0,n,n)-1]), si(96, det-num, 96, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('%', nc-sym, '%', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(2329, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(observent, v-ver:pres, observer, [dr(0,dl(0,np,s),np)-1]), si(plutôt, adv-adv, plutôt, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(acidification, nc-nom, acidification, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(océan, nc-nom, océan, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(absorbe, v-ver:pres, absorber, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(libère, v-ver:pres, libérer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2330, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(océan, nc-nom, océan, [n-1]), si(contient, v-ver:pres, contenir, [dr(0,dl(0,np,s),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si('puisqu\'il', cls-pro:rel, 'puisqu\'il', [dr(0,dl(0,s,s),s)-1]), si(se, clr-pro:per, se, [np-1]), si(réchauffe, v-ver:pres, réchauffer, [cl_r-1]), si(et, cc-kon, et, [dl(0,cl_r,dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(libère, v-ver:pres, libérer, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si('.', ponct-pun, '.', [dr(0,dl(0,np,s),np)-1])], Result).
sent(2331, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(on, cls-pro:per, on, [np-1]), si(compare, v-ver:pres, comparer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(flux, nc-nom, flux, [n-1]), si(bruts, adj-adj, brut, [dl(0,n,n)-1]), si(naturels, adj-adj, naturel, [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(océan, nc-nom, océan, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(surface, nc-nom, surface, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impression, nc-nom, impression, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(naturelles, adj-adj, naturel, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(importantes, adj-adj, important, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(humaines, adj-adj, humain, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(commente, v-ver:pres, commenter, [dr(0,dl(1,s,s),np)-1]), si('Gerhard', npp-nam, 'Gerhard', [dr(0,np,np)-1]), si('Krinner', npp-nam, 'Krinner', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2332, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(problème, nc-nom, problème, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(émissions, nc-nom, émission, [n-1]), si(anthropiques, adj-adj, anthropique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(perturbent, v-ver:pres, perturber, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cycle, nc-nom, cycle, [n-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(rajoutant, vpr-ver:ppre, rajouter, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2333, Result) :-
      prob_parse([ si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(dérivé, vpp-ver:pper, dériver, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(combustibles, nc-nom, combustible, [n-1]), si(fossiles, adj-adj, fossile, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(infime, adj-adj, infime, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cycle, nc-nom, cycle, [n-1]), si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(carbone, nc-nom, carbone, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(supplémentaire, adj-adj, supplémentaire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(cumulatif, adj-adj, cumulatif, [dl(0,n,n)-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échange, nc-nom, échange, [n-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carbone, nc-nom, carbone, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(absorber, vinf-ver:infi, absorber, [dr(0,dl(0,np,s_inf),np)-1]), si(tout, adv-adv, tout, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('CO2', nc-abr, 'CO2', [n-1]), si(supplémentaire, adj-adj, supplémentaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2334, Result) :-
      prob_parse([ si('Huit', pro-num, 'Huit', [np-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,np,np),n)-1]), si(véhicules, nc-nom, véhicule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transports, nc-nom, transport, [n-1]), si(munichoise, adj-adj, munichois, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retirés, vpp-ver:pper, retirer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(temporairement, adv-adv, temporairement, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(circulation, nc-nom, circulation, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vérifications, nc-nom, vérification, [n-1]), si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(bus, nc-nom, bus, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(circulent, v-ver:pres, circuler, [dl(0,np,s)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2335, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Die', npp-nam, 'Die', [dr(0,np,np)-1]), si('Welt', npp-nam, 'Welt', [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bus, nc-nom, bus, [n-1]), si(retirés, vpp-ver:pper, retirer, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(remis, vpp-ver:pper, remettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(circulation, nc-nom, circulation, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Munich', npp-nam, 'Munich', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2336, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(bus, nc-nom, bus, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(interdits, vpp-ver:pper, interdire, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Munich', npp-nam, 'Munich', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2337, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Croix-Rouge', npp-nam, 'Croix-Rouge', [n-1]), si(distribue, v-ver:pres, distribuer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('food-trucks', nc-nom, 'food-trucks', [n-1]), si(installés, vpp-ver:pper, installer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(communes, nc-nom, commune, [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(repas, nc-nom, repas, [n-1]), si(gratuits, adj-adj, gratuit, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(familles, nc-nom, famille, [n-1]), si(sinistrées, vpp-ver:pper, sinistrer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2338, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Croix-Rouge', nc-nam, 'Croix-Rouge', [n-1]), si(belge, adj-adj, belge, [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(payer, vinf-ver:infi, payer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(repas, nc-nom, repas, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(distribue, v-ver:pres, distribuer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(200, det-num, 200, [dr(0,np,n)-1]), si(morts, nc-nom, mort, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(fin, nc-nom, fin, [dr(0,dl(1,s,s),n)-1]), si(juillet, nc-nom, juillet, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2339, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Société', nc-nam, 'Société', [n-1]), si(wallonne, adj-adj, wallon, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(eaux, nc-nom, eau, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fourni, vpp-ver:pper, fournir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(communes, nc-nom, commune, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Wallonie', npp-nam, 'Wallonie', [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(potable, adj-adj, potable, [dl(0,n,n)-1]), si(vendredi, nc-nom, vendredi, [dr(0,dl(1,s,s),n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(provoquées, vpp-ver:pper, provoquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fortes, adj-adj, fort, [dr(0,n,n)-1]), si(pluies, nc-nom, pluie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(jours, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2340, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(potable, adj-adj, potable, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(reste, nc-nom, reste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2341, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(potable, adj-adj, potable, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bruxelles-Capitale', npp-nam, 'Bruxelles-Capitale', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
